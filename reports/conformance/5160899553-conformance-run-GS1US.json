{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "448478f3-e327-4d8a-bd3d-36553cd6785d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "04c3183a-2a47-4c7d-bf6c-91a1d8263e4e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4477d60d-df17-4a2c-8479-82accfa33218",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "be3f8a42-0d6f-4f96-9f2e-01bc057dee89"
                }
              }
            ]
          },
          {
            "id": "04cd88b1-84d2-46f8-b114-2589effdf570",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "770f1544-d482-40bd-8dc1-35a3777fb738",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "09df62fe-1bdb-4744-af15-dd933339b9b0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "54fdc2b5-4822-4107-9240-d9cc77cb8ec0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "07b9eb89-3411-4005-80aa-2d255cbb5f5b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ba9a8da0-4cb7-4782-8a3c-9dbaa5f35ebd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "445495ad-7a35-4cca-95d8-c33fac2bfc96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f0a8a4a-9f3b-4878-962f-8e39dcff7b6e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "822254f9-97b2-40e2-891c-98f72a122145",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2ebeb53e-34af-483b-b5dc-3b6db0194dd3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "98165f21-5c63-4caa-b234-ca7b252841d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eeb36a35-d96d-41ba-986c-81067c96432f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70ccb77b-160f-407a-b971-564b19245a84",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c3b828c1-4f30-4fac-8557-6f47ecbcee02"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b402964-64a4-44c7-ad18-67aead466ab4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "202117b2-293c-4113-9e1a-78b784ff946c"
            }
          }
        ]
      },
      {
        "id": "21effb54-97c8-4ff8-a874-e78bbac102a7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ba02fd64-da8a-4ebc-9a05-81723e081237",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8042f1cc-5b22-4e89-880b-38cb94d1b37a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "80739518-0029-47db-adc3-df05d12a8aa7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d569174-a007-4a6d-aaf2-4fcdb180ad42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "455bec61-42c9-498f-a4a7-a93fc7670493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fd4c84-49b2-40f3-8c58-88e3ac3b4afd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0ae492-c34c-4be3-92ce-18ac05abfe88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7273a848-9e51-4257-9227-f91cc5647569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b398e9d8-6f52-4445-8870-437aedded10e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279247cb-e2f0-499d-b1f8-a888a523220b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3f84837-b2f9-4112-a95b-4888ecd432cd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eebc816d-9a3a-45aa-9738-5e0cdce29e90",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba9e0725-28cf-4325-9271-5174b668176a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd909dc-72f6-42be-bc5f-7716aa502cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0ea041a-be5b-425e-a19f-bba5293787bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e042f4-2fe0-4c63-ad62-f880003f7447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1aa9fe-ae86-4f4c-9ff3-837b0aa07b54"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5bd54452-ce2a-40bd-839d-3622fb7f2211",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0d356340-89a5-49a1-8fe5-3df12db90981",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19488cbe-4139-45ef-922d-c9fb78861d02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b64241b6-8694-4339-895d-fc092b457323"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c01ab13-bb7a-4895-8e5f-cb74e780838f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c540a324-8d6d-4d3b-bb5e-500b3cd207fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95ff4f01-9715-4a45-9aee-e5153ffd2c8a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1363c0e1-2fd2-4447-8614-e7195d4b19a4"
            }
          }
        ]
      },
      {
        "id": "f2baa591-7472-4329-a72b-6473d1f82572",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a26eb2ce-435c-4816-86ec-0893502e2ace",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8809020f-29a0-4458-b234-49cc2c88f2ce",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "361fab3d-00a5-477e-8e08-1ea607b38f75",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0263fd59-09c8-40b7-a8ac-b319c6eac37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333a7fee-ad83-462d-b633-7e07b767b2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe88e6fc-664d-47fe-baa7-02182356d736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d0cb211-0156-42b3-8035-fd94bd7bdd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d3fbaf-98bb-4558-af78-af3904c0092b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89910634-e636-47a0-9893-3d04ea1c5826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23552513-63aa-4477-8bec-5395c2b7c597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f072aa-423f-444d-81fc-ec80d95eff80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33b3390d-6792-4769-af45-271dc5ef0ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248a867e-2f7d-4a28-bdac-6873ad866384",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f5e1ed-bfc7-4c9b-8301-662c653ccd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fd4512-2639-4204-8541-a63a6d28ed4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c71dfcb-b7b5-42f0-acea-14fe4bcdc9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53e231a3-507a-4b2a-8a7b-4044a57f55e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046f5ca5-c4aa-4f67-9a11-1dcdf2393285",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49689ac2-30ab-4356-a2df-d1076eb8d888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f961ea3-219e-4cd8-ab3d-4b3894a3fa18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da84db3-0065-4596-af1b-39c42175ebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37c5d778-a59e-498f-9ca3-0b7c120151d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7991a0d8-a124-4049-8701-80024b28491e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b15f34e-fd53-4b36-b48a-73492dda88f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94686f51-ae77-48f6-8c5e-f371a43c26cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12083f3-4bb1-41bb-bb93-fd2483097c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ba1b4c1-ee16-4bac-be76-cbc7746a01d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff440a7-faff-4915-bc75-854d38f0c6ce",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d1d8a6-b864-4150-a8f4-6af6632920a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a27f61-aa58-4f5f-84a9-c91f7de9825e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16f1518-5fd5-4386-856b-a1048fbff92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55edc487-81cb-4264-94a8-cbe87c259227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af08d885-774f-4449-a48f-edc2ef25f741",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2305128-43ac-4aaf-9f18-c80bd6e2d08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64864bb-d434-401c-800b-9eba6c53473d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4d56ed-f24d-400b-a50c-c7df8ff6e043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f6290cf-1d79-442f-b5f1-89ff88840e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d14cace-f178-4544-85c0-d370e36bb58e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a865ce2-1587-46ca-bbdc-1de92309845d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadd8331-b3c3-4706-b8d4-f6b4e8ec1e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91f87ff-bfd2-423e-850c-bd331fc51a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9702fdaf-5227-4d50-bae9-8130460171d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9f0568-3020-457e-887b-71c9d5d49cfc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6341e0b7-b287-4db3-8737-3f3a6095b612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d47ba7-5f54-4b90-93ca-390c4f5c153f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b663327-07f8-4a4c-9381-76c6dfe48797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18e709c0-ca89-4829-8efa-846ff69feb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d91e8af-b176-44ee-81fb-f498d86cc74e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36a4a22-3c43-485d-bc7b-bad60a2fbfd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e861f5-ed81-4f6a-a65c-44dad14de424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2700f994-ce15-4f7c-8346-c3582adb935f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a6b1d4b-2f2f-4257-b353-5959d8d49f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851ddd71-9241-4221-9538-b6aee20229e1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ac429e-a45c-4592-af34-eb56387609a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f5ea28f-05d1-4bf1-ac99-b8106a44879b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbaa8256-6ac6-464f-8fdf-e530dec15a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "938c0780-b838-4094-8448-babcb193c165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c830fbd-f6ba-42c0-9031-fb1ae23c5bf3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d35dc9-4fd1-4305-be92-a8e90f68a2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3fe1a35-a55f-414c-a5d1-6590991f3683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d21b52a-3892-4405-9e0e-59672b2a7be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff87a152-4d02-4628-9731-a2e07bad6dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80aad71-001d-454a-9f24-28c889908d92",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d3dfd7-2418-4d48-82ea-fc9f747d5a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c407f2b7-84ca-4ff2-84e7-ea612a105894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a9ef3d-5b7b-4dce-941a-309cc1dc643b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b982c958-6518-4b0a-ab35-218a6d7a6796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd8da47-bc3e-4de9-8c4f-a129cce232fd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5a9530-d457-4587-9366-545b1b64027b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd048a96-ce4a-4d14-ab08-182483b3f464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e803cc9-8c13-45fe-abca-438f9ac2dce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "326593b1-08b0-4fbd-bc24-e84bd9758c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c4551e-3d59-4190-a0e4-d76a18d7790a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65689b51-61b5-409a-b802-18a34afd9f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b3f16a-7cc6-4c8a-b889-50a4a5cea391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9726a9-48c6-4b9a-be6b-fb8ac9b53a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45530f50-9759-4d9b-a811-13412e075c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a598682-2301-47c2-b9a7-f4a8f7cf5f20",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9626c40f-8dac-4981-9ade-a43df7fe455e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc60ccc5-6a08-42cd-8aaf-231121484ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4be01e1-6aef-46bd-a6a0-37991c7bc9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f6f940a-1b58-43ad-b71f-b2305ebefaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b418f44c-b63d-430a-b68e-af8f79302f4b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d328911-3f37-4398-8b49-7783a71951e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36fab58f-46e0-49e4-b9b5-ea06afe3f1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40689df7-01a5-438a-a886-9c54abcb2bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f066054-f0e7-4d4a-ada7-1b47471cd755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db42f3de-d90c-4ddb-9c71-05f876086827",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63864035-2ab9-441d-88ac-4b6374ad3a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02584426-3c05-43f1-bdd4-0790cce906a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe020e9-1046-4593-9936-f32f1bf23133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4963288-ccb8-418e-8307-0e29aac5d110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace7a998-8a2f-406f-a620-2f4f98dc4e6a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7316ba-4231-4ba0-92ce-655bb62f3d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5f60e7-b887-4524-b504-d698697b5203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a535405f-898c-4e08-8b3f-ded8f367df0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43237e58-1ad8-40d5-af6a-98b1eff4b003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2575ee08-f827-4dcd-adfe-eb15835925c9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613676c7-2eb0-45a5-a551-be5fcb93a5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b440d903-8ce5-4591-8319-c442d39982fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f6907d-1c98-493d-8298-3d8624328839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "715cc032-851a-4d90-b7b7-02df2e9d34cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de24afa-eb40-4b7f-8355-1bd93da1ca67",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde8d094-57b9-455f-992d-8fb99f7c7502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc20183-1fa9-4e06-9fd1-30c1c3bdade2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491c4fc3-98f3-4cfa-b25b-b4573735c28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "012e4524-200f-4923-ba36-70458ee851ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234e091a-d6f4-439a-841e-4f95b058400f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32282faf-fe80-48b3-8f47-c3b8ffd4711e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91ff024-34bc-4f8e-90e9-1f4779e4998b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb451bf-7530-468e-a9ec-3bb0f1e6f8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bea6bfd-fba6-428e-8fe7-cac60011a445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ab11b6-f420-4a25-bd61-fefa61d8f330",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef04ae2-5195-47e5-a9dc-54e139893d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c390b3a3-8d52-4f17-b191-f8dbddc6174f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a60c2b-e5a8-476a-9efc-83436a77ade2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "267e05c9-9744-4d37-8a68-6c738ccafb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31c05f5-0416-4c01-9da4-c6cd568d6c39",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b89d27-4a62-46e0-b003-d24105e07e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ed8e9b-443a-49ad-ab49-2dd41d41bbb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fab2eb-9394-4b00-ac03-d2edbe0f4c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "816287d6-604b-409d-9eb7-aff6a53391f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c881bb9b-a820-4fc0-a01c-62a735b4afa5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fd6883-ac16-40c9-8f22-a8d1417828ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10b9e59-b020-41a3-9f12-b68f3142b1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6caf335-5b1d-4d98-8558-a717025c7d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a73074-a006-4db8-8667-7a1eb0e884b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518ae14b-a627-418a-8218-2624c5938379",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fef99e-cd3f-42a9-908c-54c035eda7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd3e320-bc37-4533-8a75-e05b35cfd0c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7b9e9b-bb90-4aad-865a-e0f9d0af2692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c76a7d7-f568-404e-ac97-643badd9c83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87b24b1-e3fa-40f9-b72b-8a77c01faacc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad04b0e7-5921-43af-9e9a-65fdb3d84e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7460eb1-20b8-41d0-8ff0-3667c76416bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43383fd9-9d28-4e22-b0d6-bd50b66b01c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1631e7be-052c-4f8f-b453-864baddec13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b24286-9341-41e7-9dc8-023d21e11b7d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b4f7a0-314f-4f11-902c-b624bbb147f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ce55af-16fa-4730-ac78-62d1171a79fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2b9563-427e-468f-9d5f-a30708e7dec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd2da56-15a6-467c-bd55-64b39e78583b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35767c33-29b7-43df-87ed-5759cc9540f3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928b0fff-7df3-4957-8a72-bb69c8ce4f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cea5a9b-7733-4db0-8f74-a81cde6cbbcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f566c57-faf6-47a1-a63d-b69a1f46618f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b161f573-cca2-4179-bc09-5c2b7d4afce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea1af22-59bc-4dff-964f-240a1b06ce59",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18006d1b-4c97-4d1d-a3a6-98a4b879ca68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0831da63-5e20-4768-8d2a-0c9b35c6c46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6160f54a-25c9-4002-9b94-e915911803bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "57332bcb-1038-4585-92e1-4fba707e6495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3459fd9c-5b29-4f3c-827a-df1fb920f88e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2ffb13-a16a-425f-9596-3372311f5a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ad6e9e-dfd1-46a5-b2e1-85b109667a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46362ac2-22b4-47d7-a1a6-174913f8a346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb88fd09-5096-41d7-ab10-a03f7cccefe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6131ac-46aa-448b-82a1-7b7216b70afe",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "072fff65-d1a4-49e4-9b76-cd4a67ba94e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c7e05d-f15f-49b4-b4ee-19fa1fbd7075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7343a854-af10-417d-b974-63f4a7c155b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58f03162-c52f-42ea-94ea-4ba59c37f9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a03600-610a-4812-83fc-a2b57562836e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cab0ccf-445a-4d37-b53e-ba5a6eebbf3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa041f3-33f2-44d0-bed9-02c228d64a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bea4eb-eeb2-423d-ba09-756cd7b071a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "801485d7-5708-4a13-a7ee-70dcf155c42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f0aa22-4d6e-488c-b871-28d6284da73b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae78292e-bcfb-4fbd-83b3-b714d029d342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe81afb-8275-473d-b4ef-9da158913160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e403dd-4ab5-4ff6-a46a-b21282762c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "847ce829-6e73-4698-8afc-45386d7f741e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62152558-9823-4d30-86e2-41c172b17f01",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55de2ca6-d61b-401a-aa87-6ca4f9456439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf7f8742-e509-4abe-bb3f-779c69367d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdb271b-6ff2-4eb5-a7f1-a7156dad7f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3ebb37da-e4d6-46fc-9086-cd938f5fc21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653a3b58-c471-4b34-8c50-aff7498dc777",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24076c3b-30dd-43f6-a3c8-7fc1ec61fad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fe5a714-df78-415c-9d30-307b04a697b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01fb8f9-cfee-4584-bed7-6aed423e0876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "727a2988-f477-42d2-9503-417eae14e0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ca57fa-efb3-47d3-99cb-16413a0f1761",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f52905-5325-4a0e-93f9-4b8701e756cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6922a28-6a85-4993-b8fd-c7e075d351b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f77f70-3bd0-469c-9d04-bb455c18ec23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe3d61e-d3e9-461e-b06d-f31116a238a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55af73bc-6619-44d3-84c6-f64d1c1652df",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e55b2d-80e3-4637-9f87-8b00092675e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cad18b4-437d-4c8e-9f89-18a4acbfe12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8828a5-7a3f-4e55-a17e-78d9e9186409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb3386ef-f934-4691-87e8-6ce7da57fe76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032b092a-b1c3-4f23-b9c9-e093e1ab8015",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c53997b-8156-4aeb-abb2-758d0bc68e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda99d82-43a5-4ae8-8aab-b79d81bc4bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167c31c8-6656-4868-ab5b-3bc8df1450b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ebcf9c-d859-4d82-b926-2077cd368f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62028a1d-aba8-458a-b675-df3e01794382",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef3602f-1cc0-4c64-a759-3040003ac5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3821a3c6-5687-40d3-a60b-dd8dacd8df4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159d512c-2cec-4c63-86a5-41f8cf60e598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc35ee7-5d64-4999-8b53-46327513a850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cdb371-6305-48a8-b45e-438a79fe508e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07241e11-d6ec-419f-a54c-14e8c3ff3a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76331436-8fd4-4cf1-b607-2031afa04294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00728de2-e41f-4e9e-b991-1157c672f678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3186a3e0-664d-4036-85c1-5994a17d608f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de2b65e-7f5d-468e-ab0f-6671c86de280",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24240837-8fae-4c6e-894a-e060435a8595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43856fa2-2af4-432d-b25d-9d802a956711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7c2b78-a1eb-4e4d-8cd7-d6aabae71828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a85efcbd-d83b-4d69-977e-cf4414460034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9141ab4d-93bd-42c1-bd4f-75b58eb37dd9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91223d30-d10c-4af8-adab-8c44446f4e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb5420af-4e62-46a5-86c4-f590d2a0eb57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a21899-f377-4ad8-a9e1-21429fe33ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "18f32b43-e27c-450e-9fd2-85bb0969142d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc35903f-7b2f-4794-9eff-42665aa4121a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4217e0bb-c194-46a7-a1de-9043608f88c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc45f159-fc9b-4b79-a8ec-308a8e7bc239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65393194-7876-45a3-a7b7-880424e5625c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba36972-2266-4b7e-a4fd-3dd65f2a7543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f3e6a9-25dc-4f0d-a085-f5eabf54db1d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e8a588-4a61-4273-b97f-bee8430c328b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c9c81a-2ad9-4920-a1b0-4304995e25eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916cda52-2519-47c5-9dd0-53f2affecadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c96ff56-833c-4c06-9f86-2017daffc204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594411df-d85d-4f6f-9ec4-0db95835ade8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137a9ed1-7458-4139-8dff-081f27b28577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a0ba84-f7f8-4c3a-a445-45414d6f347e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d850a01-92f2-43a1-8747-a598c5332ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fde8ed38-5106-4709-b92f-8d698254ada4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63cef391-de73-47b9-909a-22953e5cd7e9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0a6d43-2712-4c12-b41c-f0708d261ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d728cf-8172-41b7-890d-6e49dce4bdd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616f5618-074c-40e4-892a-ffa5f7edd71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d73f511f-e041-4d83-baa4-d0b904391962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4889b44d-498a-4ba5-ab79-15c59525db01",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c89c6b6-6dd0-40d9-be28-e9bf2a40240a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c197a488-5fa3-4563-8424-b8e5879bd97e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb496164-c91c-4522-a43b-ecff6e0c932c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd166cff-d0c9-4522-8ee0-3600ca82f421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036fbbd7-5f78-4f55-9759-bcb7bf471e26",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc72cf56-b504-4db6-b605-e5979390e0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002f177f-2787-47d8-a35d-40d3ea1a789d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881dbe68-afde-472a-9d51-6494783cbfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "606e5dfb-4bb0-4aef-b2f6-c6df8a5c82c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e72f4a3-c153-43dd-b7c3-fbe8468eedf5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1443e7-577b-4032-bf44-df52a4d4c275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b67aa6-62bc-4f7c-a1c0-789222bb56e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea4ae6a-70aa-47d4-9264-e23c16465fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "35bc0442-32f8-4e52-9889-8a767e971187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d5a660-1d79-4f66-b554-a94c36d82ff3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e31b858-2516-475c-952f-e06604f04e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6a3036-3e1a-4a1a-893a-c3dd8c110b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408716d1-fb90-4dc2-863a-8a551e642294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c868ae5c-b82f-41ef-9e9d-7ca42dd9aa78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a35c2b-3883-4834-8120-711ace6ab940",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe22db9-bec4-48a7-b6f2-1e8c4292fe94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "376f0a96-6a3e-45d1-b5e2-461efc8eb52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a733b32-f342-4038-96d4-0f0d6c4080ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd5b206c-2a34-4dea-a92c-445801370811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4e98fe-d135-4d66-bd27-60778e39f759",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811ce708-701b-4671-a035-3e4e2262a7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798a48ee-50dc-415b-aa33-c314d353b162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d83189-f80d-468c-b778-d1d21099ba83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc2a18e2-9377-4ef0-be53-061187bd3e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e3f4e1-5d5f-4e53-b32d-1e26370ad61c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f6a772-73e4-4475-acf5-8ccb693af307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378242ca-28ac-454b-926c-0fd9c150b2c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc1954b-9519-440a-8238-abb44d59f96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3811bd-a919-40d2-a2a0-919309f78bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff17581-c584-460e-8f7c-d4e433477286",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730ff088-e080-4135-a263-5d654d2ab490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b02f0c-3332-449e-a4fa-17bdc58e5253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46923089-7a1a-44a3-8fce-eab87be4da97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e65d68b-98f9-4a16-9b3a-3d06d5034417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b126a0-10fa-4d4b-a81e-0154384f9852",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d46d6d-e31f-44ef-8ea9-295897abbf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d545a6b1-dcd2-4e61-9b5a-3e51997e8bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bcbf6b-6033-4bea-bf2c-78e4c07299ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "098c67f1-ad6c-4d97-8978-f2258b21d5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816972c4-a0a4-4fe0-b764-b7b97b308d48",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cec39e9-72c7-445e-a782-dd84a260bc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89d0950-6131-4eef-b7c8-e329bc73e50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c352eb3-a405-4db7-9f7e-efb4eba67378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "888fbc3f-f847-40ff-9ace-e99ba5d63539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c509d91a-2522-4c82-b73e-0aa37f7b5ed6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fccebb-62af-4590-9495-85991b8b825f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53dd32dd-486c-47e6-aca9-2b9320dc1dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40665b28-efdf-4592-b148-fc21ddd09e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca3f6b3-3972-4cc8-8440-102140c7e6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58db9639-d330-4588-86bf-771a966bb8ee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24e408b-784e-4fcb-aeef-f233fa3cd224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75df190-80ce-4b7d-ba32-7b6a99874068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2dbbbe-cc2b-49ed-8777-91df69babd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "496305a8-1437-4855-be5c-8e7ccd6a5d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c2b8ef-3d9f-47f5-b9c9-4254a8d18983",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6affeb4f-997a-4cf7-93e7-114d72052334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df4e7c9b-7b76-4ae1-bb97-8c4c15febf96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852b8ce9-d311-41b5-b54f-d1b86f36de50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b573aec0-4dfc-44eb-81a6-49e7184ffdde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90fa3ca-66d6-4839-8878-8dc7635508f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9d89d6-12bb-4267-b5c7-19ee8de3a5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66c83e7-206d-4d5e-a178-3224955200cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520b2292-195e-4975-97be-4878eb6a48f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "eacee87f-67d1-44d9-b3fd-f5fd4831b62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c47d23-1e80-49a2-ad41-cd25789eed36",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e624dde-fb96-47aa-ab71-ffbd23d5883c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502c92fd-c640-4257-8680-e5b15bc16074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8c068d-2043-4812-829c-52c801f6ae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d652307-0bfb-4d8c-bb99-60aab2316e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d3d2e2-7761-4c6b-9a40-788dab7e3914",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dc3546-08b7-4a1c-a558-68d2051d86c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44f90df-0c31-4b27-a5ff-6218a4ac7820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a7da0a-ad97-4e93-9921-2c1e20b1e11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1157fc0b-3320-424c-9b24-7698fcfecf8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a905b69-208c-477a-9abf-a255c4d2d805",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f5b2db-3e99-45f2-b945-79d990c83de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f1914e-ed46-40c4-9e15-f2bf41e03afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ed8d58-84d8-48bd-8966-04ccff12097b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f411e39-e308-4528-b55d-119a01874480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047a1f7f-e39c-47e9-9ae5-4c4bb49aff6b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a2799a-e7a2-49e1-9129-241013a442ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b843ec04-449a-488c-98b9-ff0ae8e7a168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a6338a-67ad-4ed5-956f-2fb7f9bf7613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "695945d3-b982-4c03-bddd-c4d0220ed728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca904bc-ccb6-4aba-b00f-85f53fa5d974",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011f1628-065f-430a-9550-5c7862bbddef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b20f0eae-2bfb-4b4e-b93a-f1dea5ea1d41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171b187d-f857-482b-851e-ee243f5d3c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "13fabb86-957c-4082-a509-4b1e5d8cbd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103ed092-ad8a-47cf-aae7-334b3f26f461",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4b0430-e116-4045-9526-2524998ace9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8081162d-ba3f-4477-ab94-b06998f2cd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08343640-e673-4943-83ff-f316fbfc545e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af898fd5-661b-409b-85e3-b0fd382c2672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100b3e82-557e-4180-88ef-c1fb32595253",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87f5694-8e78-43f9-8747-050df78400d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7c0e66-76db-4d5b-b736-33dab0952c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4200f492-3c7f-49b8-9c14-206dda57e52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1232d19-0bde-40f6-9d17-3ea77723bb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27469f8d-c408-49cd-a9ae-15d79cf108f7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6190f70d-acb5-467d-9726-e4cce31216c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ce0f96-61fa-499d-825a-5cfb93dd9be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ac9e5e-7e23-43a6-942f-df019d4ccc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a648f417-c994-40d1-ab9a-3bb0378977c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19627d0d-a2b8-4c7a-bc0b-cfe187e1a7de",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e41d19-8ea4-4530-ba03-d879e3573baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a2485b-347e-40de-9da1-f5b121994e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b5e598-24b1-4818-bae4-ee3f01af3f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e95762b9-c8b6-47a6-92eb-1d24f54d14eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3a2e7c-207c-4c43-8b11-bf89d81b9d62",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817a07ce-266d-4ed1-a3b0-eecc97ca8526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b89c93-f055-4144-b31c-b9153a2671a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2795c5-c835-4867-9d81-c571efeb6133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79b84fca-24e1-48eb-b668-9fad79b6f7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7f36ed-9082-4879-91a8-3bf94cd3675f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df68039-ef13-4501-a16a-fb7963818b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c03f5b-9ce3-4d09-a4e1-9639bb4addf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70635c78-59e8-42c3-9899-584af1000bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07ddfcb1-ddc6-4f58-9d23-0b0b6f4d42aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b72e92-a9a8-4769-a52a-09f758024575",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626d1798-682d-4dc3-98b3-86c1d3f013f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640fe7ad-7d2d-4113-8163-55b219e3b27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf8295e-8c15-4f3d-8096-c7fad1e9d990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68f61fed-12d2-425a-8159-2628dc59ed80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40e1899-60cb-43e7-b41e-c05c044c2bac",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7005dac-08b1-4ee7-996e-ca71999b2704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700ccb00-ff87-460b-a233-a2823929823c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb40b08-d6b1-4bcb-b314-e0cf3c314389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5dfacbd6-a415-4180-8f47-dd045c7ce07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f408b25a-5668-4b0a-91b7-59cf279dfcdb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9c9dec-64b6-465d-a995-22ad3134599f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffdcf143-8bc1-41bd-9996-2b92ac72d4fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4da604b-0a66-49e0-8b73-f1a87228bbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "03df2952-87b8-4189-8fec-2308d23d1eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6139942-7e37-4b4a-9357-cc35513b001d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ed94b9-1a81-475a-9220-f2339a2ac8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d76345-d0f8-4dc7-8e7c-e261cbea5180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd155ba0-c686-4096-8454-3e6b8eadbdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b3fbc07-8c70-4d7f-a568-8dda735be468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad695b23-e033-4079-8dc5-2cd6a04b8ecd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f02f1da-b371-4ba0-8255-3a3682772abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68bf3405-80e1-4cde-abb1-22d368904331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f49148-79b4-49ee-b059-33919793c851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89c09bf7-c76d-4362-b752-e9fa8be11213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68346b89-c645-45f9-ae4e-ae4f88646269",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4875133-171d-41bf-90da-a23ff0e52f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "531885ba-4d52-4566-a11f-652bef3a16d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e830a6c3-c4e0-44db-85b7-d30d10b15ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b660e0-719b-4cec-a275-91ebb68f8efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4ef830-9d9a-4735-8474-695afb0c7a02",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee52a2b3-f478-4872-b1dc-b37ce0689974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e3c6e7-9863-4a02-a6e1-aae6a2d81083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bcce93-c7b7-4acf-9980-322ed250769e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8edf1e6d-b807-4f64-8a1c-aad94d3417c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81388fed-3f05-424b-b9c5-68ed8440d8b7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef446567-d32d-4c20-9c96-5b02f974b4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f65f57-8743-4557-9f4e-448612474363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e8157e-18e6-4acd-9ebc-abcd32d765b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39969472-f81d-4843-a6f5-e331da8c6d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b12328e-4692-4dad-984f-60d5f7eaa1d0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6bfb7c-ee2b-4fac-b901-7ae959d47277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c5f604-7eff-4abf-89b9-730a5e14fbf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aaf401c-4553-412f-88ff-9755b4e153f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9eb540-01fa-4a89-b1cf-7ef1eb215d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f292b5-e9c9-450a-955d-4280d21d98c0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7248f8ef-cf4b-41d6-b238-76caed3f4672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2767395d-517b-4f76-8ae1-63e676dfac07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79de9aec-6185-4aac-af0e-b6eda07dc6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76992419-403f-429c-bf5f-af7bd14d4640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ad7f02-0869-4ab7-953c-c5ec1dbaaf49",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291c78a0-09ea-4b6b-8182-898b4ee7e83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd9a00fe-3d09-4405-b479-5c6cdaaf5bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6780153b-9e44-4c36-a0a5-931f4d975650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c142ee-6690-4279-8598-c11b0d822351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0105c30a-b90f-4ffe-9771-fe34ded626e5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcab4e71-c543-4b5e-b5cc-6f219730fada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8526eaa2-ade2-412e-8b76-d7eec48be383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c91b4f3-f992-4017-aafe-e5e35aea460c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d71ead76-4a2c-4094-8848-0b253cadbf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44e6d67-8d9a-4e56-97f1-b0fdf593d6b1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461c46ab-1f85-4771-9c32-30c99bd42344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d7e1d9-8efa-4406-8e57-a732b572351f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f62152d-d6c4-4752-8ee8-3ae161e1090c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7f2052-0fd6-470e-94a4-061335fe2708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3284511-b834-4bcd-8848-ccb6fb846aa1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df16f447-6e1d-4002-bb58-c12387c518ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86c8b05-17d9-4527-b853-704488a72164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a170bd-6d93-4fc7-a7fe-d41d3f9dba7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4cd9bae-849e-4e67-826e-027bd9f6d277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada8a4c5-6f6c-4712-9a40-4a920daaa298",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c757c7fb-a8e4-47ac-8727-6d6ccaaebd66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684b6b9c-0ce1-4261-b69b-0cc08b212357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86aab7fc-b370-4ec9-967b-5c1865416158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f868f86b-4885-4f27-b268-0c1dded3db54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0318b747-d868-49a8-8a19-d518265321d5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef346a24-1fed-40e0-bb1e-0ddd905a6b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1399def9-17c3-4161-8734-7ef478427862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058d6a24-e713-44e7-8758-edea8e6ef8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dacd33d4-e6de-461a-9f4d-1cd9ee165b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56a41e6-239f-4c18-bc3e-8e1f56c125c4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cae4f8d-5281-467a-ac68-0717d1052cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13a783b-0c3c-4941-a2e7-4779f90cdf92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd94f38-11f3-4f95-b18c-13387e9d6347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ef5fa7-79b2-45b8-afc9-25c5aa6f59b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c070d8e3-bd28-466f-81ad-24908f0def65",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb84c13-4b9a-4479-a8d2-993a752dfc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4b32a6-6a9e-4472-8f7c-f6b5d1707936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bfd3dc-4a09-4ee5-aa60-272caa5120fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c23b5c8d-2349-4c3f-bfb8-5f26f7514045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8759e49-62b1-4908-9f96-4e6fb17beb1c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8baf149c-669a-4552-b3ad-a6457a00fe0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daee196e-d260-4523-87c4-72b213679219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725e1993-8a1d-43d2-bb47-ed7d5ca8b9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa467403-7c42-445e-920a-f207eee03def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc782a6c-ced7-410a-947e-875c96d446a2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721916b6-c032-4f0e-8868-9200de86ede2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0a747bc3-a9ad-4b16-aa26-8f2ac552f4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd7b851-2faf-44d2-b5ac-c7d00a15957f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "13cd4e29-752c-4fdb-a832-f954d1fb8547"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cd072edd-aac1-4b4d-af8f-37d18ea1bd24",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e935530a-984b-4826-a8be-404dc9bdf72f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a19189-73f3-41dc-a142-ca0e899a3eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd169a70-78a9-43e2-a2b2-4d9ffc560a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc85d8d-f668-4fab-a547-18fb4f92d1de",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "908e9f61-d513-4669-b601-ccc505a1e6a3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99409118-c9d1-42b2-9266-41e49e8f610b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1b71d4a-67c3-41cc-bee7-0d2724e77c98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75c55615-7f90-4dd4-9525-974ec34ee19f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b97bc45-425e-48dd-8c6d-4fe0cc14ff15"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "26c04a2e-bb49-45c1-bae7-f769a9a12438",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7735b330-ea95-4f98-80b2-ffd9a686bf6b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d2efd50-acec-4ab7-9461-25831b1ae1d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8f7eb6c4-32aa-4f19-b243-f24759ef62d9"
                }
              }
            ]
          },
          {
            "id": "dc013f70-fbf7-4151-a6d2-f6c2bb37f33a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2ad7a2c1-1abe-4521-ad17-face121a0c2b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42325158-c32c-4a3b-8931-ddfad7f54bf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8528f7fc-48d9-4f5f-aade-52abb7332cda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c595257d-54d0-42f6-bf05-ddd3ff6d3ca0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ea4198bd-fca3-447b-82ae-8c00196ee188"
                    }
                  }
                ]
              },
              {
                "id": "e413b4f7-a585-41df-b8d7-8b96211d1c41",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ba1ebff-2ba1-4503-9f25-f4b88d8d28f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ac804f7-040b-4355-972b-b8e9183eac3d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afe4ab26-ed23-4a90-9093-30f9645a55e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ccaaf168-d666-42e4-8d33-032402d9d517"
                    }
                  }
                ]
              },
              {
                "id": "7040ccbe-6181-4a26-bd90-2a6c4436e5ad",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6b9edfa-8765-4387-89dc-a297dc62ab82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f83c09f8-e3fe-4295-b03f-6b8223d38333"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94979ee4-b2db-4631-98c8-ce5afd063cf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2f40ac7a-6873-445c-821b-a09ee0d47067"
                    }
                  }
                ]
              },
              {
                "id": "ce37d912-7365-4b1f-8433-298b1707db85",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e82c493-9272-4080-8be6-6d2b0a7db44c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9dd81d0-a59e-44be-8833-a65ead459f95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a18dd6d-c534-420c-9c09-2f4c3d728b2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2c75d02e-2c41-4af5-a7df-16f2a952f80d"
                    }
                  }
                ]
              },
              {
                "id": "dfa6f673-eb71-434a-ad60-05f4d453541b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd4bd4e6-2f88-422b-8462-cae964aae507",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30000332-615a-4376-af8f-c23e0969c824"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "339fc908-6324-4181-9ae0-702b768a8948",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "300c2452-d786-4069-a076-daf0ec61f73a"
                    }
                  }
                ]
              },
              {
                "id": "512ffd60-278e-41e5-9be5-24710a82e153",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "409b6183-53c2-4866-989a-be5ae3e32c90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d185c49-44fb-45a2-bb18-4e18e54f6cea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "946343b9-b06c-4b81-9379-915955742319",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "47b0e489-31a7-441f-9fab-c8ae3cc85add"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b3c0f453-c73d-424a-9125-253368df6e43",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "27f1faa7-fc1f-4805-8753-65eb7dba0704"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5fe504f5-57d5-4a1f-9b80-28f752c0113e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1724d068-dd9d-4f14-bed4-06a3d3646fa6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08bca941-5982-4f75-955b-7084ca996b35",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9d799f94-071b-4090-9859-35b147de733f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9519bff6-ab53-4175-b245-f56119a336a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "563b76a8-a94a-46ba-b322-c730751f9e6c"
            }
          }
        ]
      },
      {
        "id": "b7a7801f-e1f8-4998-abdf-88dd75408444",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "63903f5a-8ce2-4fb0-8605-f10f9c4716bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f10dd20-9356-47fd-a69f-85095d2ffeb1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7d0d0b53-1504-4471-bebb-9e83d6285e54",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a00c2bf-63ca-4aef-ab16-532b0dd98792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6482f9be-4b5f-4db2-9097-c74561ea379b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581e268e-656e-4362-bd80-e6f2270e6ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1352a95-0eaa-47d3-a8c3-4403de206e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ddd26ec-e9ca-4dba-b887-b4e0ad0ab25f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6344a237-8dbc-4f58-83e0-11ee6207994c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04bfff14-81e6-489d-9e47-66432e828b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9999724-2091-47f2-9ea2-3b6a599fccd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8f8a3a-923f-4b30-9978-b320bf4e0b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad79bb1-864f-40df-b8c2-5324b3148d75",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c676ac1b-41a2-4293-b043-2488ca1c2b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae949c6d-8cd6-46b6-bd63-f7ffc1673b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e43050-52a0-4a87-a213-dbc9e9e33722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73d4a99e-4896-456d-ad6c-7caba4bda881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3458a2a-6330-47e3-af47-b768f65a050d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30747a92-113f-40ab-af4e-9f42463681ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c84ff5-1cfc-4d63-ad5a-f918bd4f9fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d821c7ba-69d0-47e0-8394-089fbf681c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf8dfb20-224d-414e-985e-7584dde737d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8694015a-6252-4a46-9751-94b303caeb8f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffd7b24-4814-46e9-989c-904c2592f0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41d52ee-1be3-4f6c-a083-242259481b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616bcac1-f94a-4c48-98db-8e524afbd047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5fb904-e42d-4bb7-9ec7-dbffecb8899d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11b0431-a569-4c54-8a8a-be0bfa3fa735",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6044ccb9-812c-4f94-93bf-f9ae47821bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2804d2-4692-4014-9735-4c191cec3dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03277568-7647-4394-9f90-482ab0d06b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4236bfa5-4d76-4541-9cb5-7735b3a6a00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f57fe4-d752-4657-8838-02c62778927b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3aeb9f1-73db-4e8a-8ca5-96b19e33134d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ce80f7-8c19-4a93-a326-6b56a0576823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b3a6c5-e823-46a0-b9bf-093592bdef0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f053ef4-ddee-43e0-80f3-fd4a684dbd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91178cb-899a-4ef6-90ac-6596ef084772",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d33c069-2924-4f65-b04b-7954e19e82dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e463297-7410-4f48-a4ae-a485f8ec1f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3945be1-7844-4273-8755-d3103500005d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b876a9-a34e-4823-9c26-4f91c4598daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e57a86d-9051-437e-bc24-2ed6a7fd3b5c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc72da6-0a2c-4d5c-a546-770151c6f7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21772e1b-d526-4eb1-9e49-0a9f590070e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f6edb2-9e5a-4f15-be85-6e2045c97ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0937f54-27c4-4c6c-aed2-a9b258e4231f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26022a33-ed0a-485c-abfe-0b5273fa668f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c54f83c-036b-4207-84f9-478849bed431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dac00c-02cb-4a67-a13d-0ce6167383e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027c6c75-43ff-4075-abe2-1eedddcaa8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6222791a-f519-4a2e-8954-09b698526b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fa014c-0bd5-42a4-96ea-67f70580e3f1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f192fe-569a-4b59-81c8-26890490daea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4610ff-8058-4d33-af14-a6eeac4ad58a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea288b04-3e66-4c4c-9565-400b33f0c7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9299fa37-3eea-4d65-befa-755cb2e86010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762dda09-bacd-43ca-bedd-39cb018a4b12",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c35dfe-6c8a-42cc-bb95-8442a24b410c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e582b329-7a1c-401c-acf9-bc6b745874f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f456443-658e-43c3-8884-223c8ea75ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c88156cf-886c-47be-9376-906ea5a8426b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd35b09-9986-4c50-9ffb-ef31db37cd37",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ee06b7-002c-4c3c-b679-40beab0c9dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f4b1c2-aab1-49bd-9eab-e7f2908ab402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf0e84d-9881-4c1f-956e-2bd9ecf717fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "556be70f-92fe-494a-bdb8-61594585563b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c177d51c-9a06-4d38-8ed8-d9868105e39c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bb5811-2f7d-4e58-b458-7361285f0b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88cb9c93-7055-425e-8b8d-e036e4c21a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfe91b9-8bb0-4bbc-8b1f-30e6856c85a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9105a7e9-a3a7-454d-9bc8-7a25684e81fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6fff6a-f099-4967-83f6-b2705edd50f6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f435b232-9f64-49d9-9ca3-00ffe4b6211c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30d1464-478a-43f9-8973-5856eeca6fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c075ee-b0f1-47d7-9234-2a2c49ea585e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8499ea11-b5af-4d6a-83af-6fd5511fa6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7143082-ed8e-4913-8cbc-bf0660adb5e8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3408da88-cf71-49f6-9b62-74a0fbefb5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba41079-31f3-446a-a528-603503f2034e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c3f3ec-cf56-4c90-9a9e-5cd63de02a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0a2b8d-d079-4c4f-a51c-a8c9f2b5eb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4145e59-2c0d-461b-9cfd-5ab2831f87f7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6670eff6-4c73-4cb2-b8bb-ed4679e901db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b654c22-4e89-45d2-a4ae-c20755b193c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bf56e3-319f-419b-bd0b-6ef03b222db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ae9339-3bae-4353-bf43-bf0285721619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad264ec-ca94-4be6-b8a1-dde96bb0dd77",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa05f2fc-25dc-40ab-b846-f1add0cbf36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11fc98db-7827-4649-9cbc-adb17be0904d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e78ec1-c18a-46e5-95da-ba3e451ba603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a987a06-4b2f-46f8-9912-02adc77fdb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7733f62-7532-4a53-82b2-f4ce1d25eeb3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5339e4a7-9e28-45e2-8a6c-f31f36c9b3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea654c9-54dc-43b3-bbd6-5a287ce2ca48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c78c0bf-b1dc-4f0d-9e9c-10a2412457ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83cf89e2-8fe1-4758-8f19-bf2d95cbfeab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fdbe09-efc4-4d0e-b6a6-e135caa10f0b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0960bed0-850d-4591-ada5-cbd9f6823dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71f2590-8891-4f85-82e7-ba9ae567dd5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf50f8c-54e3-41a0-83d9-27d275980df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99c99f17-4ed8-46c3-a018-b418fd2bc971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57ef958-fb09-4ffa-a2a3-da0c6837d467",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff1beef-5fd4-4edf-8e45-8460d982b61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3611d4f-bc9c-433a-a42a-06376c28f863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca375e04-b078-429c-b706-31baa5ae42d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbaaf880-5112-4a9b-8546-929bce07a9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc35ccc-a41b-4708-9ac7-0592100999be",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c757e617-1bb5-4060-b159-ed68624e30cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1378b00-ca4f-4d37-b25a-f914cd04b465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09224ff7-aeaa-4378-b016-4bcd73b06c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59f3751e-bb20-4512-8fa4-ea7a8ede5c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121930b8-8d90-498d-9be8-2cb1270ce0fe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45176d8d-fb84-412f-b3d3-08e32b9e63a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6bf6fee-45c4-4dd1-b1d4-541cca75ebe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8905f3f5-70e8-4512-90ca-a7e2e5799d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbfbdb13-eb8b-4232-8775-5559c754d36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebc4b1d-9f01-44dd-88bf-ad129fc01376",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb62fae8-0449-45d7-983d-78161f87adde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672c7271-6938-467a-9292-9e5f521206df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26b016f-89ef-4ab0-ae4a-29dc27bb23d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7400e3-73ed-46ee-8569-57ca92976268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0de060d-1f7c-4f4e-8ac0-72d73e529ac3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfa216b-506c-4c89-a7a6-d04400f26283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723704e4-e875-49d5-9576-2847a5ba3f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774029b7-f641-41a4-8395-0b338eda7ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09a3a21a-89d3-48e0-847e-fc4d3ec338f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb68508-f14b-46e2-b3b5-87e6071e1429",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f4aa45-7cc7-4296-a06c-7a3273bad3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32f9ccf-744f-4036-87f3-dd9a4487923e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899ae700-8380-4f50-8aec-8f8c128f2272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac4c145-d513-4e5d-8bb4-50d4ff9d8502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca89832-121a-4d0f-a7b7-868ed4f7d759",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9bd631-4d59-480b-8013-740a46cb2f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c58a393-95aa-49fc-8d02-89a234792a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3b4a54-0428-4433-8d43-ee526616a410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "854873e2-43ea-4b8f-9246-325730b7b001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ae94d2-33d0-4f76-8c51-a8e233ccd3d5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46bcb76-1ae4-49f2-8cbd-46da144dfdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611885f8-5127-4b88-b5a9-6f53c89b6f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d7c4f3-4d3c-4976-8b70-7fbc41c74e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee8f244-3b9f-4dc2-94a4-4d7c8889670f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca49c11-333e-46f0-a6f5-f111241172b5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088f13b7-0447-41ca-a822-08a246009f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8087f2f-bec7-4ef0-b8ce-f72c12ed86c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bc5079-9b65-483b-9aaf-058a9c58c82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1f12f0-ebd7-4cf1-b812-9b4b3da2e561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb308f1a-99f5-437d-b0e5-2b861b06d8f1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6059a4e-212e-4ab3-aa7c-75056a3fff6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002f90c3-52ef-4e34-a1fb-c89f6cbfade1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8976cb9b-3e49-46c6-9f58-c6b03ea3c350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d10a409-2400-4802-bfd8-f22031c54b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1168c1fb-2c8b-4e7f-a768-20fa8c7fe08c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ad68b1-d8b2-42c1-b16a-146c4838dfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f49f44d-85cc-4d5c-93a1-f42b052f70c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d872b38-5af8-42ad-b9dd-bafe7ff3f1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c897a9b4-1be6-4367-9060-942570f4cdac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d320b199-b211-41a4-bcf6-a3e6559f0f78",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14618f2-d5cf-4b12-83cf-c604585ebd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62a3c45-e64c-4a80-bd3b-ffa7aee036d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68788c1d-82d3-4f15-a2e5-350a8c87bebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68daa566-4fda-4057-8e73-1e1f10004701"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9019191a-5f8f-4e32-a62d-06ff1499a9f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0237d7c-b253-4b07-9e2a-c91190ffbb2d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b7d60d-f8a0-4fd3-895b-790232b8d155",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ed1c57-ab89-415f-9754-9f63233b19d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45420dac-bce7-412d-b783-e850cdf5ae00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63015814-ae90-4540-9ad2-a52473269e51"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b172b7d-28ec-4ef5-922e-480a1ce168d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0698a8a9-6fb3-489f-94f8-79e05ec1188f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f63935c-0fe7-46b4-ba30-714e18e40d2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "606eb745-35cf-486e-b06d-00d400a56bcc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91459922-d52b-44c6-846d-afa750225798",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "46e269db-f444-4242-a296-57be0c4a9bd8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76ddc727-1545-42ef-9259-aaf0cffc0f8a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "425c94c7-480b-49f7-8c64-463134659bdc"
            }
          }
        ]
      },
      {
        "id": "bcda8daf-5821-4f50-9f18-5ba9fb1a4c37",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3cc69f7e-f744-455d-957a-546bdcbac1d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f62c38f7-3aa4-4fc1-b8a1-b2e5f605696e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d3d8959a-077f-4eaf-abaa-6d39ab3c8155",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5751cd1-ed6f-41a3-8ab7-ebad24a2fb62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5298a4ba-716b-4929-ba62-aa758f0ff144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d450af-1fc8-47f2-85dc-0decc5643a93",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6790415-1da9-439a-93ba-91cd71202356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b726c69-39d2-4630-8375-552f08efffd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5b0848-9016-4de7-9162-1ae0b0c69f90",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7081d6-e85c-4e4e-87f2-bdf8de5c5031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a6fc5b-578b-4ce7-9403-e34c3d4bd56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef50a031-b668-4884-8b7e-bfb2a52ce8c1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f73f7c-e612-43ec-88d7-cb008ccc39df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d395b9-4880-4dd5-87e9-2a1f50c2a0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67085803-3e53-416d-819b-fc9b9fbbb728",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fda7608-85fe-44d8-91ae-e27aec1aadc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f85f3c4-c3c6-4ce6-9566-30a53f6e3844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3612b9a6-c8e5-4369-a014-a46fdb59655f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50391078-566a-49fb-b908-1aa8cd99e0ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07899d77-3a88-4926-9f9e-fb3d5e8ac4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f58dbd3-ecf1-4814-9ead-5532dc119a7b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f0ecbb-0963-436e-9e64-1406f2e52470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396a4ea4-397f-466a-bf74-90cf53bebe13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede382e9-def1-42fc-8df9-ec5dc611c001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a46e4a-a77b-4da2-880e-70a6e00c0068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814bfe1d-dcdc-40bc-80ab-0ee4b3a822ec",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584a81b4-6bcf-4d1f-bfc3-ef25c951035a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef917c10-b5ca-43bf-822b-fd6638820d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f13843-1365-4892-adc2-2e15b3d2b0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d58205-8aa1-45b4-b023-44f8e84e5212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8104011b-ed25-4301-881d-f477493bbe98",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fea8cc0-6a4c-4f7f-9cd4-9a6c7deb8b18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "363b8be4-a5af-4b43-8fa7-e0146bfed9d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b33bbbb-ef45-4f35-b87e-16a24471ed43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b5d68f-9ec8-44f5-8025-212c2fd7c0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfe420a-9be2-481b-950e-fe8612b23c1a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61945e6b-9bdf-45ec-919a-6fd11bafe707",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc92863b-56ea-4b45-925f-e65edd37fd02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a681d3dc-7c1c-407b-aa64-8a5a4d517bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572a1052-6598-4cba-8441-36489d2d090a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ecfd514-7ed7-409e-a9ac-21904c5bf661",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab16c90d-08ca-417e-afda-20ecf09df8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d204a3-cd2d-42dd-b641-4d61f8825930"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405b6c76-11a4-49d1-a25a-c1e15434e3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff716840-b6e6-4a12-9d71-8ed7f435a7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4458d82-c059-4bd5-928d-8a3067f9c6f8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c040d44-8a77-427c-a3a6-d192838894ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dffa6548-fab4-4cfc-b0ea-75b04504a1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0460f3ad-aeb2-4c09-ab53-820b10cfe9a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd2c7e2-6d18-4ced-a18e-a7bdcca7922e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f971004-654a-44f4-a90c-96a8d753a44f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e86878-e350-419b-b168-5d68276bd63b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86df5137-c848-4bbd-b17a-299aee853d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450e99eb-77a6-4980-b15c-4d96e666dbb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c2cb3e-10d8-42d9-9466-3fa6ec271ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61828286-989f-40cc-bdda-f0cd894db562",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0d3e6a-b08a-458c-9c1b-b251daf1d16e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4342d1e-275e-423b-8514-306f90db8274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31d2d19-5885-4583-8619-eefda603e09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf15dfc-a244-426d-bf1b-0a7e71fe1916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81814a48-ca6a-4004-9086-1279050681e2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44063abc-99be-4f1f-a16d-a199607b952c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef343110-ce9a-4c48-aa25-63d8849fd5a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6219e399-ba29-4e5d-8a18-4da3065f0aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bad3b00-3287-4569-b107-abf55cc37550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b01975-eb5b-492d-8e7a-377dc853f784",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99a439a-59de-46be-be13-8a25b4f98dba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b16fce32-ddcc-4e76-ade5-a8c296f88771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6c8aa2-3d64-4c15-990c-b79b4a0922e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9beeec75-7928-4814-a3d0-6cb981fbeee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f98395b-9a65-4562-8e90-b3f86dc5b5f5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed405aa-6ac7-419a-abcf-28492a84878b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc70a72-8e80-44ba-ba9d-3d1df862c3fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7801497-b6f5-47df-8d38-4e9ebf9d34f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e63d2c5-efab-4949-af7d-f25feb0e0481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28194f65-cbf5-4f70-bafe-1a9073fb4afd",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3198b809-25ca-4145-95d4-29d7f2333486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebecf4dc-2011-4c21-80d4-6a11a9038e70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de9281b-2df9-418e-9c0d-e773055b3b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d019ecec-2f99-4513-b199-a3e74a005699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad16ba3-e677-4133-a93b-742841d2765d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115fc198-6f9d-4178-aff1-3711a39bd208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4da6ce-1db2-4bd8-bc58-268f624c3188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8695e9-ad7b-4168-b73e-f0a5316ee26e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec347d5-3268-48eb-9ebc-6fe0e4622c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d965125-d6f4-4e56-aac4-9566d072da70",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66549e98-e22a-4ad3-91b7-97549c2d8a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97463fef-eb60-4887-bff2-c61b38a81990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1d9fcd-05c9-472c-b72d-7a03c0704982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d589e6-a0d8-4215-b021-b1080972c5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd00fdaf-2d70-4545-b34b-a1addf78189d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c5e9d9-8e79-427b-a7d1-0eafedb786ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "826cc3d1-4178-49bb-9459-c7b53a9f7de3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e103c3-2a67-46db-9937-a3871b7ce395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32459857-a3d4-4e61-82e6-44da87c01494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef778e2-2a7a-485d-b1b2-793bbc0cdfc8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3382a794-4a93-4ed6-aa12-2baa72f223c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c63654-ad33-4741-8947-8259fe3e1170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8480c98-4ee1-4913-9fb7-2f22863a8235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f91bad-8380-41f6-b12e-f7f199d21603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff48ffc0-a29f-41e4-8c26-ef2018102b2a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5c42a6-d6fd-4a9d-bd87-57755ee8d2f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e55c0ee4-7970-4180-b6e2-77f8749b8e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b12ae6-c2b2-4a5a-80f3-8e0d2af187e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4ed7db-85e5-40aa-9688-7d5a57043202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17960c2a-19d9-4455-8917-6dee127ad1c9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2fbdd7-d1c1-4f26-bebc-534c5ccafa1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36ea6f1d-bd18-4831-b247-3abb44b7ec27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e615669-aa73-4c94-8a28-bafb758e8f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e586701-68ea-413b-ba26-cdc165b2f8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b231672-97ae-4b0e-825f-3f7f362464a0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a85f244-7f70-43a3-9260-cd1517bb1335",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4be45015-67d2-4f20-b64e-86a35a5cf6d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b362c25b-61ad-44f6-8764-1223ecc3ec57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5bcd67-0c64-4867-b376-fc68229d7454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6a63e3-c860-4309-836d-83cb7cad1b34",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a0fe50-c920-4489-af78-a75d3bd3b21e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c21b991f-06ba-409e-b0b8-56f29915802b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "595fbed9-c75b-450d-ac84-ebea87bc3f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0fcb391-24db-49f1-8331-4ba7a458e6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502554c7-e694-425a-8bfd-907efd2e3d66",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28c5607-3e87-4e5a-a15a-74b0ee5a45eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ce36a81-922c-4a38-a95e-8da400fd112d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918c85a1-6ba2-45a5-be26-d234a04808a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a30c8575-86a4-454e-aa52-e18da5ac8205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e720940c-c8e4-4356-8271-ecdaa20e3cb6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c432a07b-b506-41ff-abf2-75a977cc5497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24bbdceb-ebbf-434f-a7bf-6791d5d7963e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0eb980-fbff-40a5-9e53-08c3a11faa05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfac1ceb-8731-44c1-b751-5c49a78b89d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f88328c-85dc-45da-873c-481fa354b3f1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e903ab-3025-48a7-8b05-3eee09ebc9bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6516786a-9c2f-43f5-ad69-7d0cf5269cea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb56520a-6f25-4adb-a847-5d37c28c72d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b30fa04-a24f-461e-83b8-e5a14818f6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46122d3a-e57f-4a91-9a71-fe53ab8f921e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c6c83a-776f-48fb-9dd8-aa1404c83462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc71953-02dd-4ea1-b003-17cb3a0665ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53aa2667-cca4-47bd-8bb1-450573aefc1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccfc6044-1d86-4ccf-a133-13cb6277241a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57da1888-64bc-49a0-8eed-aa9b34b16416",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4d4434-e99e-4ac8-953d-637808aa355f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23395c01-b73d-47ee-aadc-077ea68d7c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d8d6ee-89a5-45cd-bbda-3e77ae23c14e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a496484-1ab1-4b1f-8299-7be3f20442a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92a17e0-d768-461d-9a91-20a80bbd39a9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599b5aae-95c6-45fc-bf56-8b49a0c10be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8d20c66-81e8-450d-8416-8af0e2f32d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166399a7-73c1-4ab0-8e9c-00a447291b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab43ce0b-5c27-4e3e-8ddd-28263e800688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7eb0b3-2bf8-4f1c-8e80-8727c53bf207",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bad9dd7-8da8-47e8-a2b0-ba0a194c4c95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e1ece26-e453-46dc-add7-ff98a3307280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59d3138-3513-4456-b594-78c057ca4a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eeb9033-f12f-4110-a613-d19c598115f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d188346a-c475-4a35-80dc-c874c84da99f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0307733f-17fc-4ac4-bd20-2cbfd4f8eccf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5860b0d3-88b1-4533-adcc-1fe104839888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec11dea6-eeb9-48dc-b9d2-422fc5f8b3b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1514eef3-4dbb-421f-bf80-43250ba475e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3509751-9bfd-429b-a870-d2e3544267a9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85045916-caef-4667-89b9-d3c9556ac88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd0165d-b2c0-49f2-9a1a-515a67958060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d9f50f-2192-41aa-81bb-20f553e3fd18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b1e5b5-d292-49ef-8a1f-7034988fa2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f76016-73e4-4500-a2b6-b2330f51fe65",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f66c353-c0eb-43b7-b360-59485dbae35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88da4fe6-f9e1-49ac-8210-c89e8436864d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dcfb307-a829-498a-a7dc-0a6beea294f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896b75f4-4daa-414d-b1ac-3c8b4ef97ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ec406e-5c4f-45ca-bf98-562912f1aee9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e9b528-77d6-49fc-9bf3-54833a8a3ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fed941b-d296-47d8-9c11-7f098228fb16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4841f42b-73dd-4f3b-87bc-6a119d35289f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93d2378d-b1f0-43f5-bff7-2ad02d278deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6deccaa-6b65-43f7-b582-eb899a795686",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c961251-73a6-4c09-b3ad-67f733a00592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f3d110-31d2-4555-a04b-5c90c342ed15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eea9933-dbad-4583-88ab-72cb3687967e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82f5829-0415-4350-9267-d1f1945a36ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9927809b-da2a-44b0-aee9-dc8d2fe1e387",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad43b46c-ae24-4093-8f61-e375a87573aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5808f9-1e90-4200-b83b-582f64886faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8595877b-0d8d-4f0a-8858-d7f4ada26297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8577a182-b40d-4743-a2a3-f5064f7eac01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70304097-e814-4597-b302-30eb90024441",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bee64f-f63d-41f2-9fa0-37af206f65ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c758f4a5-a2a4-4629-9cf9-b459588ce694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f095a0-bc84-4cb0-9a63-8ca020f1fea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8206f9c7-fb0e-43d8-9b58-e1a6c88fdac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bda781d-1856-437b-8cc8-a50328c9c71b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fcc24c-47cd-4884-a08d-02de2cc575cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de3e447-34fd-44d4-be1e-ecdd593c0dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee46208-a519-4d4c-8fc8-fb0198f2fbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c59b17f-7917-448b-b549-bf23aa023fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b6da16-5409-406e-86c6-734a2ab66d75",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0fec9bc-47e0-47e3-b6a3-71062b135ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f670276-2fa6-4962-aaad-fcb6ce87b409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3887358c-dbb9-4521-b4fc-40f8be4d56a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41200d7-d71b-4bb4-b94b-3319a6ad6d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f587f8a4-3d66-47ef-adb2-35e58a8b05f4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a986c15-0aab-48a8-96f1-6f68a88431d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44399cb-6408-463b-b619-9ebc677d2ccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e627c54f-8910-4925-a772-57513267188d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a91665-9060-4b17-93a8-a81c8d0f6f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5f3dc3-11de-41ae-9711-593c0a2c8404",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5c06be-765b-4be1-8ff2-91eaa33eb2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee96dc5-2189-4cc3-951b-9699414625dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e04ec40-89b6-4ed6-9f01-6e99466c4deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6fc5cf-6cb7-400a-8b9c-e1a7ddf2e87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41219280-d1f9-4bf9-867a-127fd73e5036",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a83d3ca-352b-4d8b-8424-c1d493cb2153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e5e71a-a0b8-4957-b53b-cb26df4022f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17ff4f7-d288-47e1-85f1-b859f5a8b7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca4e6c9-30be-4a56-a3e0-e6d50d87699f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8c989a-ee62-4bfd-9b2d-8a154f785829",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7d0d1e-2bf3-4990-a6ac-25cac1535f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e46c995-d25c-438e-81ec-439f50ae1fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4268a50-d175-433e-b443-222487573c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a3ed8d-4e72-43ab-b856-684df44142e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad60d876-f1e1-4a08-a6fd-6dd433ba3cf8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c850f3c-0286-47b8-947e-f204938bd873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3db5b5-2c72-49b8-8d37-6f0b437f445a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "126b272c-4db2-4cab-a042-b6d1b3b61bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2335e2-ce79-4549-84ee-392ac579fec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78aa0913-a5c2-445d-b0b0-a8b0aef2eaac",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75aec8be-1cdd-4459-af59-93a3ec12b3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f87ffc-702f-4738-9434-98cf712651ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb98d3e-d8ec-4df6-88b9-cb3a2ee4a690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162ce4b5-5377-407d-bd34-9c0b2d51686f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f006718-010c-4f9f-929c-ea9617499bc0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3bebcb-d210-461c-a626-c2953f3a9a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3b9bbf-f757-4f5f-a555-c16bac5b3e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5f3fde-bbb7-45ea-8169-83e46b2b05a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bf9a7c-84e9-4028-8da9-54272062dfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef070b94-3dc7-4978-b882-7e74744cf56b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b7c1a7-2b26-4480-94a8-dd036df16580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b04167-4274-4c86-9059-85803805821e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb771505-7895-49fe-b6db-cc5170d782c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45e7fcc-9ffe-4ef6-be3a-50b416800f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3ccb00-b753-472a-b9e7-2683f6df3a38",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d476b1-a3df-406e-9e1f-f27cc9112dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8679183-5482-4a6c-9301-07aa6bc23cff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a730d217-ca13-436e-8ee8-9a5f0667425a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6420c905-6bf0-4e36-b593-fba9bab4d0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456a99ac-a74a-412d-a55f-e8694d765151",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95dc2ac-8ca3-40bd-a629-af905145d4c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd53c91-00d0-4b81-8bbd-d8604da66691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05509f66-830a-4d8e-b2ef-ba591a49db13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7982306-4cce-472d-b3db-285446b31ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261982a8-290c-4d4d-8e6c-5e63d5cc2b20",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068f3661-97a6-4230-a212-69bf8a14321c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f58ee2f6-ee96-4f0f-846b-1b9efeb2e8cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3d6ecd-8367-4a81-9b10-a459e961e7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03547bb-f8f2-43ea-a183-341fd20614b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6027bef6-f09f-4dc8-8b5f-629db18419fd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae0537a-d9ba-4a4b-8c44-ab40ce07b6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc9f2c54-6790-41de-b962-3e74f542908b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7ee923-0b21-4d1b-b3c7-2f1855cf655e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6debb23b-4d0d-425f-9f7a-a26bf6bb450d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7254dc4-98ad-4b8d-8523-c4c877b4f015",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6deaed-7812-4f0a-b65d-0f703453e117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d250273-059d-47a0-a220-c405d1fe930d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d72eb1-d941-4c88-a4e7-409e5af6aab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2dfe7eb-8629-4af6-9747-75d0c4856204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b36a9ee-baf3-45a8-b72f-e8abdf04f3f0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72753de2-0d2e-4b6f-8120-f9154244b461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3555c81a-bae4-45b2-af80-bd220af8daf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c09e88-d512-4424-bfd5-50490448b62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5721ca25-b7ac-434f-b6c9-9726a762b0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d8661d-d57a-4b64-8198-99262c2c49f4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c494407c-46a6-4d58-bb01-b2f904757d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5abbd715-49f1-441b-873f-51d34ecd2ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69ec8ab-051c-45e0-a413-7334db6b692c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e896781-c689-4bc4-b4d6-03a545813d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d46125-dc8a-4386-8ac2-52ed9e437f64",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25cc0ce2-9c54-40e2-802e-bbdb6fc2ddbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02f48c7-8cff-48af-85f5-9a5ec77a86c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8865f310-16f6-4cd2-a7c5-2599abfb6c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53508e39-9b89-4dc7-96d9-c8908b57c12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863ca8cf-751d-4f71-965f-90887e4a4040",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780b16af-8755-43db-b0a8-454300938b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60458c7e-b935-4dea-8848-fb89f4e0c46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6618e31-4992-416b-be06-8802123171f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc4c2b0-7f1c-4682-9f77-f47c11468240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d505b011-9be8-45c5-9d81-5a9e105e2cc3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f069ad0-c670-4c08-85c2-30da47679332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26da776e-77c4-4d60-93bb-127353bae606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb46e0c6-9f0f-4874-bb38-68a9f389c7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c80f75-f17d-4fde-95a3-bc6a9feb50c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bd1c12-7005-4528-97bd-2c535853bd9d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04171d09-b5cb-4987-9171-e5c50d7ac444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a72009-4cb6-4c33-b1d9-9725677d8be1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a429a95c-339c-4c2c-bbfc-45cb0869d8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6497cae0-4c71-4387-a717-8314bb9426fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff949f5-46c7-4f2e-ae74-94f1ab024d66",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ef3b15-0384-4cf0-a863-c8dfa0042d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3f34b9-a0c7-4e25-a1ee-a4aa04501c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1c3c76-34d5-428b-b978-ca22cb1cac10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ceb04ce-dd5d-49d3-bd9a-6ec460c6b9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79446fd1-6f58-41d8-97a0-fd296e9fdbfa",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a21e19a-51b2-4b0a-a146-c1c506636282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5b4291-5879-4ca7-b58f-a16775fb94a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f7b3d3-9818-41c0-9f51-74ed714d8372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c285ee-40a4-485a-b8e0-d41f8ed1cc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0b6393-cdb4-483b-b400-a79da4dd24c9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4499af71-d1b8-4dfa-b4aa-7480c39d548e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba04d33-51c2-49b7-9b23-2634768f30f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09af2aa5-a66e-462b-bcc4-910f7abac44b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cace186-3278-4c17-a2f4-f9015de69145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92710693-dc81-4fcd-9342-121c4eb321dd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b6b822-a3bb-4f4e-ae73-aed2b5811fb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eb653dd-142b-4966-bf17-5ec53248e50b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f7cc9c-6673-432c-bef8-dc8193f41243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372d5e94-ab78-4f9a-8313-240c68a67731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60ddf42-d34e-4d12-a182-96c446df7c8d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a86ac6-880a-4d40-bb42-c8ce39c1f640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a27e23a6-048f-41c0-a916-1c68d8b9688a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ab33c4-2777-4a8c-a1a8-48e8b110329e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fdde254-e322-4f2e-bc8d-c5b12de13377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154304fc-406a-4b62-a4be-682409f1835b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54436706-4897-47bb-9771-45be34de3c8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c0d4e1d-98c8-4e99-bc7b-6973aedf9610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc5afb0-f074-4abe-9d29-167296f84d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0c82c2-d2fa-477a-879c-04141db74048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e89f44-7795-47bf-a230-2f2d9b004d53",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a895a0e-a646-4ad0-80bb-45999de153f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99b93b75-64fa-4a29-ad95-d3aedc5c7be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92924cd7-127a-4d25-b52d-7672484efeec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d1efb1-8981-4c5e-8c18-84417c6d04f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1cb729-1936-4acd-b043-9a620477b319",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510d9025-3beb-4751-a5f5-fe795d9017d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6af5f88d-714f-46d9-bfb9-8e0fa61b93b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffff628f-cf3f-4512-9d05-f9ce8a2d3678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd81a8cc-55a1-49dd-9b61-ea672f1a73e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5a0390-9d0f-4e70-8814-baa55b74a950",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf350b7-761f-4e61-b94a-7a85b4d3feae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "971e84d9-3d30-4f10-946a-e9f73bb6eeed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ca96f9-c57a-4b65-9fb3-4b44edbfafdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce183e2-abde-4200-b547-2f4c741897ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16682405-bdbb-4e06-9e5f-3fe3d0d68250",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c89abe9-a29d-46e1-aa68-908b26ad341d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73b5b189-54a1-4378-86df-f41f922ed9c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d519710-4d15-4a05-bba1-41cd373825eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c5e1ee-4bee-47a2-b50f-783148764575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86300ce8-337b-40d1-ab4e-12b51c3a634d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2d8a96-adc6-47b9-bcd3-d7e046b79f38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cc7bf52-ef3d-4936-b79a-886bf0b3d5f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69ff205-54a0-48af-ab1b-6a79d8448797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e085a504-c220-475d-88df-452edb3ea433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e81854-49d6-4420-8fe9-9e492bcda3a1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b106239-c53f-4bae-bff9-5192f6b913cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fb01fab-aa9c-40a9-9284-7757a1e26bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2651694e-0ded-4b9f-a01c-707181590c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2765b9b0-1d68-4773-a24c-009377b353d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba2982d-2ffd-445a-8a84-dc5af0d26756",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117ea629-7bcf-4afd-96f7-75c89288bbc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aba533b-2267-45b6-8e06-b8f0c5885f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfe39a1-2d2e-487d-90a4-5e1c800a9d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ed4cfd-1d10-43b0-af8a-58b065361d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849c35e4-eeea-4758-92be-1a6e2e8aceb8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4155eac5-32fa-401c-8d83-916eddde7657",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9c15661-fcad-4885-9d2a-59a1d4a112a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb6df8e-8b07-4efa-acc8-c5d02684690c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa7b1fa6-ad62-4ebb-a804-ab81cdc85188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc286a3c-c518-4dff-82b8-cd3aeb163908",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a689ad-7609-4e51-8fe0-52625dc98e68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6868b854-97f1-4261-acd2-1c906634a8fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5749825-ba0b-4111-91b9-092d1f4fffa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d1bc742-fb99-4a16-ac1a-65b852b37169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e5a64a-d517-4003-9312-950b1c90e8e7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a21b9a-085b-4886-b660-a335dea5601c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb3703b3-520a-480b-968f-433fb402979b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e98bd42-5f23-4504-8cb1-e460beabeede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d70712-fac0-4186-9f19-c96c4d81e32f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a47d6bb-013b-4498-8ee1-0b7214268f43",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fba2de9-bc47-4031-9bc4-b7da37902a4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac7b6aa5-cc83-4ce4-ac8b-1e78c45ffcd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6dd5f3-291f-4917-91d0-feea11f98d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b6f33d-43e3-4829-bc27-7053576ebfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3023fea2-c429-4220-b7ba-bf75abf50b13",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f42faed-a44d-42a0-8132-bdd3370626ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28c0171d-4446-4aae-b012-74d72e42fa52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9887eb0c-b41f-4172-b4af-1de155651cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da475f82-b28a-4caf-9c72-35dd560a45df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906b7454-e8ed-4031-838a-9509cd7df413",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafbc3ac-7aae-4837-a9fa-a91eb737c951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5deefc40-1a77-4c6a-9df9-3f849f0ee620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aca1239-ddb1-4755-a362-7d57a929f156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edce3979-edb5-428c-968b-2d1873db3722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c306a6f-71ee-4464-b44b-68e3dbf61125",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed7974d-4da6-4748-8da7-5508e7fda034",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aca39e04-0494-4fc3-9685-977b56f7f8f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "decc7c80-3671-45f7-9383-68e4d12dc96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dead247c-2c0a-425c-9137-24059db425b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aeecc28-b955-406f-a26f-70d9cb63b9ee",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f101bd-cf08-46e0-8ab8-f176bc7254ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bbefb3f-3af2-4831-9ef9-fc3c8cec2f31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b70a59c-a3af-4b3c-9f91-631baf664934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f17f3e5a-a84c-40cb-b404-5b6e20603b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcebc83c-8b96-4395-866a-130f939a66e8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783e5105-aa80-4062-9950-4cab4771821c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a46a703-801b-4238-b1a9-e347b5e4a10d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5510d58e-7496-48c8-9b1e-2416277e0b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f162ce-20bd-4cd5-87df-be92cf91ea84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e8b89b-f72e-4919-8483-6b43f9803c7f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43232fa-4fa5-42d0-97ff-87dfb4ce6692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef993186-abe2-4070-9ae3-5feac610cf9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4826c28f-3729-42a7-a5eb-536b49533a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f57aec1-05c1-4a72-af30-3c1898afdac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a9afda-4b87-4bc2-9a66-cbe9093294bb",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c18d00f-490d-4faf-8af5-5e837f285ed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6314c193-2df2-4eb9-8cf2-bc075da91b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0755b268-8415-4b48-abf5-f07095874cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a2f1cb-cd56-4219-a456-84d98260e146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8249a547-0aa3-4f62-aca3-b3681545a587",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f16a65e-9351-4374-8bc2-34dd42c701fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bb1e088-7b5e-41a7-8652-61e6a4cdb027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec484a53-fd4f-4e32-8e4c-6a9273a65a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2db7a7a6-4259-4ecd-a0a0-e5508a1317c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79da17a6-c515-4b51-aebe-de3c480dcce4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c30eb9-bd20-49e2-b118-85da4b668c0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f0c463c-7dc1-4730-b38b-713c81f66fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a2add4-9e1c-41fe-9d6a-537cde8c2666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751ed074-9d6b-4de3-ab2e-8f81c23c8a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f61ace8-0343-4527-80b5-5c55df01d906",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d59adc4-05f3-4340-b62a-ad9c7bc3b071",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50acd652-5d17-43ba-aa82-e270f5e041dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f9af7a-64a4-483a-ba0e-62067fb2d16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ae3336-f866-46e5-a7c4-8648751c1ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cec5e19-fc72-4616-931b-9d6689c3d7a6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa382504-ef85-467a-9c2c-4bada5b12f3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64746f05-d55d-4971-bdce-ce598d378f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025ecf4a-7726-484f-8465-b907cb77d796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3a4e14-55ec-4a1e-a20d-1f8c2544a96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8728a028-9b5a-48a8-bf70-3b4e374667eb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f842841d-33de-48db-99a2-1bd41f850c2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d70b4ab9-f853-4f36-90e3-330dfbb0bf19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66695d5a-9094-4095-b50c-aad20a1e6491",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e62cab48-9bf6-48bc-8947-c7abf3ae8821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41cdd35-e247-41bd-a56b-8719c514bc2f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a498c7b1-3148-4700-b067-484735aa7c2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bf0f229-4e74-41b5-bfd3-90883ac3d3ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14532910-adc4-4937-bd23-114cd57e1ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3036892c-c3cd-4820-aad4-cfe9ad9daf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86bd7c7-5ea0-4e8b-aeb3-038092e26977",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e84d27e-103a-4e8c-bbd5-7e0093430845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24b1e9ad-958f-4181-a9b0-c0a8563f5a58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "618c0cf9-63ec-48b4-8b09-bded8b207d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d9a7ac-b3bd-488f-b953-240e691cf392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f9b7f8-b6d4-4e31-856d-a3aeff81d6d0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d36d1b-9e62-436e-914b-88aae0ed00eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92f49f0f-4e7a-482e-aea4-fb355f901019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26e09f8-e4db-485d-a01b-d806619bf4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5460d84-0234-4102-a1a4-4a839d300da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f776e6ca-61f6-452d-9886-58999c614b0b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4618ea1b-c915-46eb-b331-eec448994392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c44976b-049e-4bc1-ad1a-87b87b0a9bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1954d3c-cf2d-471c-b54f-57207029236a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4d77b7-1721-474b-baa0-4ce552820f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619433cb-c48a-49f4-b46d-6433dc594854",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d537243d-3e82-4b42-b9df-9cc0de1a7c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "738aa534-3060-4f88-be24-2f84a7652491"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80f73af-48e7-4f49-bce8-5ba7733d3900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa2e4eb-7d59-41b6-949b-627656d82876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669a62c8-6acc-49d1-86de-c6ff609a4f84",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2b9771-3720-4274-80b0-daea532acac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d9d1c7d-60e0-4a55-9cd5-18b29604de16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41f763d-186b-492e-8c21-eaa715995a95",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402fde03-95f2-4bde-af1d-b44ea947e83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8f83e9-1d88-4544-9936-8709b9998869",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5942845-5308-44c6-8f36-d3f3cc93877e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae823ad-5d48-46f5-a9c5-325efbdec021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2530eb4e-db27-499c-b570-b4d301b244d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541d2476-0feb-436a-a500-a99e1aca1784"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a7c0674-7747-4427-bd56-348429463ba4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c04ea83-ae3e-40af-9401-aa55730622cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b164e65d-18eb-4c8f-895b-ea1905a1333d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d3240da-31d9-49e3-8f74-457f411c9a15"
                    }
                  }
                ]
              },
              {
                "id": "88f8f5bf-9368-4093-b17a-d28360acb812",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ebc9af8-1686-401c-982f-ba8ebfa75179",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b85cf0-054c-4a1d-8100-ce148c89192a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fcb15475-c2ad-4064-a365-ebce56bd889e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f0ad41-9bcc-4078-90d2-4200a5b061b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63f426fd-d155-4a74-a019-4d8d6801a760"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ebf8123-47e9-4104-9826-334ba70f705e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42f008db-ba20-4bf0-9f65-634cb679a724"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ed228df-61ef-4383-8beb-5e757788916a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7dd705c-24d8-4718-92ec-495c359eec30"
                    }
                  }
                ]
              },
              {
                "id": "9aaa57b3-a261-4534-a0b7-8bf0f200f5e9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "034eee68-c1fc-46fc-9a19-92e6720d51c4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8805cc40-229b-4e59-b654-b81f546be952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c84e049e-5f7b-49d1-a134-f5b7ce84bf15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37943ee4-775d-4939-af18-7543df821945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c3fe39-0e70-4ab4-809b-5f34637ac22e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5a5044bb-e186-4045-ad40-a4234cb7aa36",
            "name": "Positive Testing",
            "item": [
              {
                "id": "12b1c790-d758-417d-8060-5496932c85ee",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b79239d6-a47e-41f2-a413-d648332ccba0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5c6b98ca-72ac-403b-a152-8c4533e14ce1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de6ef2a3-777b-4706-be02-950e06fd909c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e24e9c9f-623f-4fb1-83d6-cd6c373bd4d0"
                    }
                  }
                ]
              },
              {
                "id": "ff427e5b-29f2-4bbf-83a5-712fdf3c3f11",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3865238-e807-43fb-a1ae-71ddc947eb1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "855ae0f3-e66a-4aa1-b555-aa375e2560e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9da37d15-b77b-4f87-babc-be26a56244a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0adf0732-ea73-4a20-ae0d-cbd726cef33e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91312ce4-cef3-4dc8-8de4-26749ef31f47",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9093ea21-f6b6-4e9a-aa9a-72035c3cfc13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd458659-cd24-47fa-bc30-c44b2f931c10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8c9949a-26ec-44ce-85b9-fb300c93314d"
            }
          }
        ]
      },
      {
        "id": "220a73ba-5e31-4387-adab-3767aeff3635",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1eff5575-c63c-4b70-86ad-b34e14678ea6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "060e0934-1a13-4429-aee3-055e9350bf1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6550e8e2-4737-4326-8f9e-2047bf0c9182",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e56b1bc-e5ea-4d96-b9de-70e590abf0a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bbdad629-8a9d-4e72-903c-cf9c35fcf1b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a9276e-2c66-47e4-bc40-bacf565fff1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8dc81358-079c-45de-8e43-4d573239df41"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91e7c759-52d9-4d87-95d4-a6cf853dffb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a39e0f36-855e-441b-b262-a5d429fb3801"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "44f41ab6-a358-48b8-91b0-633b95de0e58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d250ddec-7759-4570-a275-515a1247f05a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07dfdecc-9866-4af6-a9a7-92c1183dd811",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "02416a7c-6824-4e91-b109-0e096545e926"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65698255-cafb-4d5f-9b67-acd7786b03d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93cc8ec9-3b20-4131-a4a3-37715540442a"
            }
          }
        ]
      },
      {
        "id": "1b67ffec-c544-4183-aacd-13868263cd62",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "95d52203-b687-498f-be35-3c74e6f44dd8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1fe078c-94c2-4b00-9bde-1cc268f82dba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3583d8b2-a113-47b0-b9dd-f2db7521750a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3465eb5e-aa26-4cef-a2e1-9ec0928b9a82",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "731e76cc-fbae-496c-ac7c-30d398a75e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f1576a-d8bc-4911-afcd-6a3ca30f7a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24927a3e-8ccf-43b9-9602-9cdb7b59bf75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f17a7440-f724-489e-bdfb-f0fcd49de883",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8f9403d-382e-47c6-b523-a3cd4164c37d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21f8e10d-43f0-494d-8fb4-6fa8a7c80836",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ec86256-26eb-4db5-a3f7-ae0b49130a95"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa08e3d1-c318-4d28-9aa0-25c7784fd7a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f39e5fe5-ada3-4a9d-ad16-ad8d86389400"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1174f173-c777-4ab9-bd8f-81edbabbb147",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8470eab-0059-48ff-8b5d-b0b080497366"
            }
          }
        ]
      },
      {
        "id": "341286c2-4bf2-49e3-bf96-78dd36a9f9c3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0876592e-8535-4cf1-98ff-0a006e5cb589",
            "name": "Negative Testing",
            "item": [
              {
                "id": "863b3134-cfcd-4910-a232-63d9baf5f585",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b273586e-1624-4b4e-a451-bbfb179ef68e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d93b45b-d9e3-4089-b742-7b700a72bd73",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70eda73e-b8bb-40df-af4b-d9f77cb995ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ad24b3-2588-4878-985d-a2fb52e8ee1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0060b277-8288-44f3-bbd2-e07090e0ea88"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79e881e5-a3ff-410c-8139-38b3790321c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f1c46d0-2225-4783-b3d8-62a72a324eef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ff205a7-6ba1-4de5-8c1c-fa0b4fbc9c06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1498af1b-d525-4b46-a28d-37cf66e2f4d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39e6a695-eb2c-4dfd-99b3-4833f658f8bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3d44c3aa-af0c-4295-973a-b03066d51567"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff1bcbe1-27a0-422e-97ba-c7286925e5ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98cd364b-a814-41f9-a285-7017116fb377"
            }
          }
        ]
      },
      {
        "id": "561c2607-bd7f-40a5-a13a-14db93a756cf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c3da97a-9ad7-40b9-a7d9-d87e583f8b58",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1ac5cc1-a443-4b92-9a2e-1993da483060",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "92d442c1-85b9-4801-8831-af08568e58f8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa86a8bb-bf21-4a66-a8e8-6d68820d0b5a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff22ac98-0110-494a-af1a-0a790acacd1a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 476.2317073170734,
      "responseMin": 9,
      "responseMax": 39431,
      "responseSd": 2670.579191611705,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685752904155,
      "completed": 1685753035061
    },
    "executions": [
      {
        "id": "04c3183a-2a47-4c7d-bf6c-91a1d8263e4e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1cb22522-19dc-4661-854f-40f5383715e0",
          "httpRequestId": "c58db336-8be2-43d7-acee-78e6aede3f28"
        },
        "item": {
          "id": "04c3183a-2a47-4c7d-bf6c-91a1d8263e4e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "10b91dd6-c19d-40ae-91b1-d77212988634",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 0
        }
      },
      {
        "id": "04cd88b1-84d2-46f8-b114-2589effdf570",
        "cursor": {
          "ref": "f32dbdf3-faa2-42d5-92ea-8c954aa15b5b",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "885544a1-fa0e-424e-92a1-107432d08397"
        },
        "item": {
          "id": "04cd88b1-84d2-46f8-b114-2589effdf570",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "aaf27db0-9e95-4b81-8ad6-23a6117fd36f",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "ba9a8da0-4cb7-4782-8a3c-9dbaa5f35ebd",
        "cursor": {
          "ref": "29befa48-cf2a-402b-9270-e9e7e1231065",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ee7dd215-8a8f-41c5-8d27-084a14b862a3"
        },
        "item": {
          "id": "ba9a8da0-4cb7-4782-8a3c-9dbaa5f35ebd",
          "name": "did_json"
        },
        "response": {
          "id": "dc3822f3-0ad9-4972-8593-d1bf583bdc7e",
          "status": "OK",
          "code": 200,
          "responseTime": 460,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80739518-0029-47db-adc3-df05d12a8aa7",
        "cursor": {
          "ref": "2761b118-11f9-4490-940a-176398495287",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6748186d-2347-44ec-9571-93d7068040e1"
        },
        "item": {
          "id": "80739518-0029-47db-adc3-df05d12a8aa7",
          "name": "did:invalid"
        },
        "response": {
          "id": "8deb1c65-7e0e-424c-9192-b812a2abbd7a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 466,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "80739518-0029-47db-adc3-df05d12a8aa7",
        "cursor": {
          "ref": "2761b118-11f9-4490-940a-176398495287",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6748186d-2347-44ec-9571-93d7068040e1"
        },
        "item": {
          "id": "80739518-0029-47db-adc3-df05d12a8aa7",
          "name": "did:invalid"
        },
        "response": {
          "id": "8deb1c65-7e0e-424c-9192-b812a2abbd7a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 466,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "38fd4c84-49b2-40f3-8c58-88e3ac3b4afd",
        "cursor": {
          "ref": "7d744eee-c6c9-459b-a117-df8dd6ad30a8",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2c7be5ef-387e-42b6-b8b8-d5862b57535f"
        },
        "item": {
          "id": "38fd4c84-49b2-40f3-8c58-88e3ac3b4afd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e68e2ec5-3e77-4835-b169-d18861d6fd96",
          "status": "Not Found",
          "code": 404,
          "responseTime": 72,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b398e9d8-6f52-4445-8870-437aedded10e",
        "cursor": {
          "ref": "42980c58-aad6-4e94-825f-a5ea375b3f86",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a952aed7-932e-4b90-a220-a1bd5d6623da"
        },
        "item": {
          "id": "b398e9d8-6f52-4445-8870-437aedded10e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d1d620f6-d796-4f46-b221-de0075a6edf5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9e0725-28cf-4325-9271-5174b668176a",
        "cursor": {
          "ref": "f8dde077-6c9c-4d0f-bc27-fe3341ac485d",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7d85f8ba-72c2-4200-97f3-a0e239610c15"
        },
        "item": {
          "id": "ba9e0725-28cf-4325-9271-5174b668176a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "04e5abdd-4f96-41ea-ac3f-1a9f0b2c0569",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "0d356340-89a5-49a1-8fe5-3df12db90981",
        "cursor": {
          "ref": "70865901-1825-4e62-a898-248b5956ac09",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e855192f-5f26-4fbf-82d6-f3acff30be76"
        },
        "item": {
          "id": "0d356340-89a5-49a1-8fe5-3df12db90981",
          "name": "identifiers"
        },
        "response": {
          "id": "aedcc072-cabe-4533-a08a-93a481ffd685",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361fab3d-00a5-477e-8e08-1ea607b38f75",
        "cursor": {
          "ref": "7b2aa674-0d8a-4f40-8749-4b63c104dbe0",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e0c93388-c7eb-4f6a-8c1a-5efe7bc7b2e1"
        },
        "item": {
          "id": "361fab3d-00a5-477e-8e08-1ea607b38f75",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "25623af1-56c2-43cb-9520-2aeba3363103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d3fbaf-98bb-4558-af78-af3904c0092b",
        "cursor": {
          "ref": "c28b8d9e-dcb3-4b29-ac31-a1b0e750693a",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f2d26562-bfbe-4d94-a49f-4595c8734088"
        },
        "item": {
          "id": "88d3fbaf-98bb-4558-af78-af3904c0092b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4c9e9a0d-68c7-4c0f-ad83-6e9310ecc8b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248a867e-2f7d-4a28-bdac-6873ad866384",
        "cursor": {
          "ref": "dffd6fe9-26d5-4d13-ac0d-ae6cb365cfe8",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0fe5646c-8b6c-491b-a0ad-db483a2d26a8"
        },
        "item": {
          "id": "248a867e-2f7d-4a28-bdac-6873ad866384",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "49e8f691-8228-4403-a7af-e4a2372351af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046f5ca5-c4aa-4f67-9a11-1dcdf2393285",
        "cursor": {
          "ref": "20bfd703-cb06-4018-89c7-b12d4f8b95c0",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "795b3c84-0bd1-4eb2-9b0c-e4a42adc0272"
        },
        "item": {
          "id": "046f5ca5-c4aa-4f67-9a11-1dcdf2393285",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "71c29e38-38e2-4602-9cae-6eb858e321ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7991a0d8-a124-4049-8701-80024b28491e",
        "cursor": {
          "ref": "129ee288-d270-4573-8471-48d46a8c5e49",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7d31ab93-62cd-4ddd-b78f-7df780aac822"
        },
        "item": {
          "id": "7991a0d8-a124-4049-8701-80024b28491e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "132e78de-1c3b-4292-9b6d-edb8d55d688c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff440a7-faff-4915-bc75-854d38f0c6ce",
        "cursor": {
          "ref": "60d8d629-795f-47ea-8d46-2fbe5eff657f",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cc92e56f-5a1b-42fd-b6a7-89e5bcd7d4b9"
        },
        "item": {
          "id": "4ff440a7-faff-4915-bc75-854d38f0c6ce",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9b8304bd-66f5-49df-b72a-2e111584420d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af08d885-774f-4449-a48f-edc2ef25f741",
        "cursor": {
          "ref": "97fe21db-8f4e-4ff6-90a2-e6b262bd2ac3",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "46bbc7c5-29a4-481c-8692-7c3144c43289"
        },
        "item": {
          "id": "af08d885-774f-4449-a48f-edc2ef25f741",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "cbceeaa4-65c4-4c02-a617-1402c2ace762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d14cace-f178-4544-85c0-d370e36bb58e",
        "cursor": {
          "ref": "b0565120-b5f7-4536-9ca6-f0abc7afface",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "11a3a275-5a68-41b1-8482-286e7b15c0c1"
        },
        "item": {
          "id": "6d14cace-f178-4544-85c0-d370e36bb58e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9b482fe0-9ca9-4c18-a3ff-2f0e1674c28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9f0568-3020-457e-887b-71c9d5d49cfc",
        "cursor": {
          "ref": "e807656d-0b33-446f-94c9-3349dde5939b",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fb4f7838-192d-4af8-8e33-66db2b67de63"
        },
        "item": {
          "id": "4e9f0568-3020-457e-887b-71c9d5d49cfc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2aac164b-6e05-4817-b273-5278ec9a9400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d91e8af-b176-44ee-81fb-f498d86cc74e",
        "cursor": {
          "ref": "ddf6ec4d-39f5-451b-9cb4-2b0129b88c35",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "af1a70ae-f33f-4491-883a-8df1bb96fd6d"
        },
        "item": {
          "id": "1d91e8af-b176-44ee-81fb-f498d86cc74e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "089fe554-34aa-4cf8-9de0-49a43e889c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851ddd71-9241-4221-9538-b6aee20229e1",
        "cursor": {
          "ref": "abbe5f67-fe80-4d9b-b5a8-c0b037914a67",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cc26ec33-12d8-406b-9cfc-fd332e6e6e87"
        },
        "item": {
          "id": "851ddd71-9241-4221-9538-b6aee20229e1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "10fffc07-e816-4ae4-a0c1-dbc64f2c188d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c830fbd-f6ba-42c0-9031-fb1ae23c5bf3",
        "cursor": {
          "ref": "7f3d8eec-fffd-4d5c-9a58-b4a2e04681c6",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4c544abb-399f-4cce-bf77-53d52b0e8d72"
        },
        "item": {
          "id": "0c830fbd-f6ba-42c0-9031-fb1ae23c5bf3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "97e86c84-de0f-44d6-b967-cb0acca0bb42",
          "status": "Created",
          "code": 201,
          "responseTime": 39431,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "a80aad71-001d-454a-9f24-28c889908d92",
        "cursor": {
          "ref": "85e0d263-e5aa-463b-8b6d-2aad9a7b294d",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4e8de575-1c42-4a68-8d83-2ae32a01d1ff"
        },
        "item": {
          "id": "a80aad71-001d-454a-9f24-28c889908d92",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "84db78db-0613-4470-ba8b-3a249d9d0598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd8da47-bc3e-4de9-8c4f-a129cce232fd",
        "cursor": {
          "ref": "ac5b0e82-be0f-4d93-92f0-602bcb8e3c61",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2cd73ced-0963-493c-8175-1222fb012dae"
        },
        "item": {
          "id": "cdd8da47-bc3e-4de9-8c4f-a129cce232fd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "db88667b-29cb-408c-bd92-c08c76431725",
          "status": "Created",
          "code": 201,
          "responseTime": 7639,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "24c4551e-3d59-4190-a0e4-d76a18d7790a",
        "cursor": {
          "ref": "d4058f51-1118-409f-ab31-a8fa67f438ef",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ba9a6374-7416-4ae6-8485-14ceb60f76ca"
        },
        "item": {
          "id": "24c4551e-3d59-4190-a0e4-d76a18d7790a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d81ae4d9-146c-4453-b6c8-222bb3587460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a598682-2301-47c2-b9a7-f4a8f7cf5f20",
        "cursor": {
          "ref": "e83e7c9d-5d91-4572-a0b5-cdad35a311d2",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fbfb9e88-6795-4a18-8235-c5b972506f22"
        },
        "item": {
          "id": "7a598682-2301-47c2-b9a7-f4a8f7cf5f20",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "38283341-e797-4f7e-9c6b-11c7338c483f",
          "status": "Created",
          "code": 201,
          "responseTime": 8258,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "b418f44c-b63d-430a-b68e-af8f79302f4b",
        "cursor": {
          "ref": "369bbc37-490c-4149-b791-244825e5e2c0",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "44d562dc-486d-4c2a-a263-db278e6527fb"
        },
        "item": {
          "id": "b418f44c-b63d-430a-b68e-af8f79302f4b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b4abd938-b3a2-434b-a196-1712a684fb9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db42f3de-d90c-4ddb-9c71-05f876086827",
        "cursor": {
          "ref": "86828922-d81f-48ef-ad58-46995d153d3b",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "48a63580-9529-4bf0-83f4-99f8ce2f65f0"
        },
        "item": {
          "id": "db42f3de-d90c-4ddb-9c71-05f876086827",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "43550481-940a-49ab-89e2-e529fa298c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace7a998-8a2f-406f-a620-2f4f98dc4e6a",
        "cursor": {
          "ref": "ae6a1cf3-6e7a-4b61-a534-eacdeae7e01e",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1f821e4d-6161-4cde-923d-d550c74af27b"
        },
        "item": {
          "id": "ace7a998-8a2f-406f-a620-2f4f98dc4e6a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "218fcc54-aa99-4eab-b5fb-d382eb150ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2575ee08-f827-4dcd-adfe-eb15835925c9",
        "cursor": {
          "ref": "d6e4171b-a7e6-4f71-bb9e-65683f937a00",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "63450605-fbc3-43a9-a72f-4ac3c45d474c"
        },
        "item": {
          "id": "2575ee08-f827-4dcd-adfe-eb15835925c9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0b3ea3c3-1927-4e4d-b7e9-b079b8ceb896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de24afa-eb40-4b7f-8355-1bd93da1ca67",
        "cursor": {
          "ref": "5bf71eff-5121-48f7-8f22-9bedeb71b898",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b17342c4-98f2-45c7-a8ae-918df983a57a"
        },
        "item": {
          "id": "8de24afa-eb40-4b7f-8355-1bd93da1ca67",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ff4e1c33-df36-4981-a239-55f471c58574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234e091a-d6f4-439a-841e-4f95b058400f",
        "cursor": {
          "ref": "96052264-7b7e-42e3-85ba-df316879a6f9",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b11e962a-88fe-49ac-9176-8f4d124e4e48"
        },
        "item": {
          "id": "234e091a-d6f4-439a-841e-4f95b058400f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "84dae219-cf73-4df4-85b2-b6515ba2e89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ab11b6-f420-4a25-bd61-fefa61d8f330",
        "cursor": {
          "ref": "a847d6eb-12d0-4e9e-aaff-bb69e0f809f2",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7f2e288a-8712-49d2-8ca2-623086a705e4"
        },
        "item": {
          "id": "63ab11b6-f420-4a25-bd61-fefa61d8f330",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9494d2e3-4e8f-4d3a-a0e2-79494098fd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31c05f5-0416-4c01-9da4-c6cd568d6c39",
        "cursor": {
          "ref": "407aa03d-4d19-4189-9a04-48633f8b6b2a",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4544c374-847d-45a5-9d07-2856426c65e6"
        },
        "item": {
          "id": "a31c05f5-0416-4c01-9da4-c6cd568d6c39",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c947c72b-a505-4dff-b210-4f850fa6b53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c881bb9b-a820-4fc0-a01c-62a735b4afa5",
        "cursor": {
          "ref": "9a65c334-467b-4522-8559-4af4f5ef1a97",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bbfed0d6-6fe4-4622-b381-27a530f6909f"
        },
        "item": {
          "id": "c881bb9b-a820-4fc0-a01c-62a735b4afa5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9c9e4cfc-08ff-47f7-bea6-0bb75ecfcb2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518ae14b-a627-418a-8218-2624c5938379",
        "cursor": {
          "ref": "73f67ea2-0876-4785-9430-25433babd024",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8cd35a3c-31d2-4092-b238-f85a50e66b45"
        },
        "item": {
          "id": "518ae14b-a627-418a-8218-2624c5938379",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d9134011-c014-430f-bc2a-f5eb097751c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87b24b1-e3fa-40f9-b72b-8a77c01faacc",
        "cursor": {
          "ref": "a3300b4e-2d25-4474-8fa7-b42c6bd58ef2",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b519bb2c-12c4-4708-b051-be092f59c3df"
        },
        "item": {
          "id": "b87b24b1-e3fa-40f9-b72b-8a77c01faacc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5996a6e9-a94b-4144-b9c6-661147949358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b24286-9341-41e7-9dc8-023d21e11b7d",
        "cursor": {
          "ref": "0d640376-d4eb-4fad-8573-85a80ca7cb08",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d2d9e746-c339-43f1-ade7-004a8526a6a7"
        },
        "item": {
          "id": "65b24286-9341-41e7-9dc8-023d21e11b7d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7d334bcb-218b-4cc8-814a-e970dae05f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35767c33-29b7-43df-87ed-5759cc9540f3",
        "cursor": {
          "ref": "ec7d9ab7-7e1c-40fe-993f-970ee093e287",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3d3668aa-621f-406b-8c22-b963dfff6749"
        },
        "item": {
          "id": "35767c33-29b7-43df-87ed-5759cc9540f3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "33504e61-9322-4fac-80ba-282b2e46bb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea1af22-59bc-4dff-964f-240a1b06ce59",
        "cursor": {
          "ref": "f0160ad5-d6ea-4b63-95df-a66dd5ca672e",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "88054d68-2b8f-4d13-b1f0-7ac70b54ca12"
        },
        "item": {
          "id": "fea1af22-59bc-4dff-964f-240a1b06ce59",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c4c273de-e576-425a-b82d-0c03f158791d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3459fd9c-5b29-4f3c-827a-df1fb920f88e",
        "cursor": {
          "ref": "51db8a53-d284-447a-bb37-9c65cb9776e2",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1d8c7b57-7f9a-4638-b16c-f61a9040c1f9"
        },
        "item": {
          "id": "3459fd9c-5b29-4f3c-827a-df1fb920f88e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c0f85cf1-f7d6-4198-8529-81a9f7a4a191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6131ac-46aa-448b-82a1-7b7216b70afe",
        "cursor": {
          "ref": "d28bb396-0a84-474b-b236-5f9e930fb1e8",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e5a47c0d-3de7-42aa-982c-486a3a7f46b2"
        },
        "item": {
          "id": "cb6131ac-46aa-448b-82a1-7b7216b70afe",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "68680bec-2805-4c1e-b8e8-936429ced64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a03600-610a-4812-83fc-a2b57562836e",
        "cursor": {
          "ref": "3b5a77e9-3734-457c-b4c9-21bf1d70d80d",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "48f9794f-a3ad-45af-91d8-aa7ca2276403"
        },
        "item": {
          "id": "d0a03600-610a-4812-83fc-a2b57562836e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "28e3349c-0ffc-4515-945d-008ed07256f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f0aa22-4d6e-488c-b871-28d6284da73b",
        "cursor": {
          "ref": "34181067-1ba2-42c1-bb39-7967910b32e9",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "81998ddf-d4bf-4c80-8cdf-6ce906b59934"
        },
        "item": {
          "id": "09f0aa22-4d6e-488c-b871-28d6284da73b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "365cf888-e08d-471c-81cd-af4b6d51f2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62152558-9823-4d30-86e2-41c172b17f01",
        "cursor": {
          "ref": "c6df6c9b-8b4d-42cb-aa60-094c0d6e5b3a",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "908525dd-b67e-42bb-be69-38b9bcd3631e"
        },
        "item": {
          "id": "62152558-9823-4d30-86e2-41c172b17f01",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d5558b20-8380-4666-8f8e-a07075ea50ea",
          "status": "Created",
          "code": 201,
          "responseTime": 3074,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "653a3b58-c471-4b34-8c50-aff7498dc777",
        "cursor": {
          "ref": "757a4b79-4bed-47df-b0c8-66b514e58f72",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1d2aa55d-435f-4e32-87da-667eb3d03973"
        },
        "item": {
          "id": "653a3b58-c471-4b34-8c50-aff7498dc777",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f1e12c51-e761-4db1-8ebd-f395cf85d379",
          "status": "Created",
          "code": 201,
          "responseTime": 4467,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "79ca57fa-efb3-47d3-99cb-16413a0f1761",
        "cursor": {
          "ref": "4b6c5197-de64-4d56-8060-48cdc9bb975f",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3596fe68-b61e-4d4b-a53b-9676622253eb"
        },
        "item": {
          "id": "79ca57fa-efb3-47d3-99cb-16413a0f1761",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a27d5b76-7d6a-4269-9faf-e66a6cd6d4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55af73bc-6619-44d3-84c6-f64d1c1652df",
        "cursor": {
          "ref": "7e9e43af-6cd1-4171-a67a-d0da5811755c",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "988d8361-c46e-4ef7-bec5-178721c9a6ed"
        },
        "item": {
          "id": "55af73bc-6619-44d3-84c6-f64d1c1652df",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "720ddf95-d289-4aae-b8a8-0abab728c50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032b092a-b1c3-4f23-b9c9-e093e1ab8015",
        "cursor": {
          "ref": "f426a08b-169e-4fb8-bac2-a9e21ced33ac",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "234a5667-5eff-4791-b202-4df960d2d416"
        },
        "item": {
          "id": "032b092a-b1c3-4f23-b9c9-e093e1ab8015",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8f207c2a-a000-499a-bdce-24510739cf8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62028a1d-aba8-458a-b675-df3e01794382",
        "cursor": {
          "ref": "97f84649-6279-4b32-808b-1a3c32330f10",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b85102a2-9f35-4972-99a0-c9df746b1c4a"
        },
        "item": {
          "id": "62028a1d-aba8-458a-b675-df3e01794382",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a2e0d1f4-6ac3-4483-97ad-40a26b528c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cdb371-6305-48a8-b45e-438a79fe508e",
        "cursor": {
          "ref": "3853f828-d7da-4d2b-bf16-379f70902d11",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1a8134b6-c2c9-4f86-bef0-edd2b431517f"
        },
        "item": {
          "id": "96cdb371-6305-48a8-b45e-438a79fe508e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8c8637c8-03c0-49a8-815d-9fbc40b7f758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de2b65e-7f5d-468e-ab0f-6671c86de280",
        "cursor": {
          "ref": "44a0a2da-e200-44f7-b294-62f78e2e8a4e",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "555681dc-44dc-4bdc-a5ed-9c3684314b4a"
        },
        "item": {
          "id": "9de2b65e-7f5d-468e-ab0f-6671c86de280",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "82130b77-b879-45d5-8b3d-a24f9bc27aec",
          "status": "Created",
          "code": 201,
          "responseTime": 2236,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9141ab4d-93bd-42c1-bd4f-75b58eb37dd9",
        "cursor": {
          "ref": "14e231f9-7a56-43f0-b821-5120cf444bd7",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ec12e7d0-61af-4941-94ad-7a2943291e92"
        },
        "item": {
          "id": "9141ab4d-93bd-42c1-bd4f-75b58eb37dd9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b4354c88-a521-4b57-8f86-7d3e24bf1ad1",
          "status": "Created",
          "code": 201,
          "responseTime": 2850,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bc35903f-7b2f-4794-9eff-42665aa4121a",
        "cursor": {
          "ref": "02ffe90d-bc58-41e7-90db-993a436129cd",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f7b5dbac-3708-48b6-847a-3dc6514fb003"
        },
        "item": {
          "id": "bc35903f-7b2f-4794-9eff-42665aa4121a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "604e29b3-81ef-43d7-9aef-4eedbcd0c198",
          "status": "Created",
          "code": 201,
          "responseTime": 2893,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "26f3e6a9-25dc-4f0d-a085-f5eabf54db1d",
        "cursor": {
          "ref": "e7d34689-880f-4a8a-bf30-142fadc3389c",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a4ee1c8f-8149-4e47-b520-4e0f699c9bdc"
        },
        "item": {
          "id": "26f3e6a9-25dc-4f0d-a085-f5eabf54db1d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6c418c12-850a-4f6b-af20-5d7364f89428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594411df-d85d-4f6f-9ec4-0db95835ade8",
        "cursor": {
          "ref": "5229accc-3991-43ea-9d0a-a69a8480f144",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e47f1be0-9907-4008-b86b-620d6e6f3352"
        },
        "item": {
          "id": "594411df-d85d-4f6f-9ec4-0db95835ade8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cdbe9ce8-bbec-4c08-a2a8-bad36baae729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63cef391-de73-47b9-909a-22953e5cd7e9",
        "cursor": {
          "ref": "0cbd6572-5dbc-4820-84c4-5ecebe06f746",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "525514c7-34b0-42e6-8ede-3bb1c5afb851"
        },
        "item": {
          "id": "63cef391-de73-47b9-909a-22953e5cd7e9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "07c94a5e-1d90-4847-a659-5189e30077b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4889b44d-498a-4ba5-ab79-15c59525db01",
        "cursor": {
          "ref": "75cd91f8-835b-4d37-9681-52ebd34d3d31",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5afdb346-5acb-47f4-9753-09884b008af3"
        },
        "item": {
          "id": "4889b44d-498a-4ba5-ab79-15c59525db01",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "832633a7-fcbf-4ce2-a5a9-7e339f2be16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036fbbd7-5f78-4f55-9759-bcb7bf471e26",
        "cursor": {
          "ref": "b8f97fcd-6b65-4562-bcfc-a3c76554b711",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c72e0a77-0e27-42f4-8095-e2d7caf85ced"
        },
        "item": {
          "id": "036fbbd7-5f78-4f55-9759-bcb7bf471e26",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "adf1f7f2-104c-49a7-ab20-069e2e8c6376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e72f4a3-c153-43dd-b7c3-fbe8468eedf5",
        "cursor": {
          "ref": "8894e60a-3803-4655-9f92-effe4ba0eb0a",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e5f0764a-5f32-4481-ac83-64c076020c1f"
        },
        "item": {
          "id": "9e72f4a3-c153-43dd-b7c3-fbe8468eedf5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "000d0563-84ea-43d9-8a52-97624edb493a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d5a660-1d79-4f66-b554-a94c36d82ff3",
        "cursor": {
          "ref": "c83d2594-67bd-4650-912e-f545cbfbef2a",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "49497e88-73ac-4f5e-b9f0-69e902eeebbf"
        },
        "item": {
          "id": "b0d5a660-1d79-4f66-b554-a94c36d82ff3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2ea642fa-00b7-41b0-b373-1a5f49c4e050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a35c2b-3883-4834-8120-711ace6ab940",
        "cursor": {
          "ref": "81c22d48-18e1-4f3c-ad94-9a4970e146b2",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2608753d-e84f-49e0-bd26-b313a7f7877f"
        },
        "item": {
          "id": "17a35c2b-3883-4834-8120-711ace6ab940",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "32116f4f-66ca-40b4-8365-179f7e1578a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4e98fe-d135-4d66-bd27-60778e39f759",
        "cursor": {
          "ref": "d573a9bd-cfdc-4f5e-bc92-70f9c2947a5a",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2b9532ea-0081-467f-b3bd-7bb1bf0d4464"
        },
        "item": {
          "id": "5c4e98fe-d135-4d66-bd27-60778e39f759",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "08c72b79-7c02-4511-9f84-6a989e6bc860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e3f4e1-5d5f-4e53-b32d-1e26370ad61c",
        "cursor": {
          "ref": "0f281abd-8fbe-4715-a066-ea84c0867878",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5762cc89-c98f-41f2-8bb4-d2fa0a2b21d0"
        },
        "item": {
          "id": "80e3f4e1-5d5f-4e53-b32d-1e26370ad61c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dd54dfc7-7210-4575-ab6a-06569c1cf6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff17581-c584-460e-8f7c-d4e433477286",
        "cursor": {
          "ref": "688ecfb5-70dc-471c-afbf-87ac84683d7c",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fff947d8-7826-4f6c-a201-11b228e4dd12"
        },
        "item": {
          "id": "8ff17581-c584-460e-8f7c-d4e433477286",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9b2b6a34-ee48-4974-95a1-4bf3357fc486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b126a0-10fa-4d4b-a81e-0154384f9852",
        "cursor": {
          "ref": "393287e8-4858-4ae6-bc4d-86a329722a67",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cbecedb0-facf-4a1d-89f8-0b6cfa59be2e"
        },
        "item": {
          "id": "54b126a0-10fa-4d4b-a81e-0154384f9852",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c61e558f-fec9-4246-ab72-dde7726424c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816972c4-a0a4-4fe0-b764-b7b97b308d48",
        "cursor": {
          "ref": "0ddef3cd-cecf-4917-8884-4ef7d4e861cb",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5a86c241-9fb8-4535-9c9f-4687537e0923"
        },
        "item": {
          "id": "816972c4-a0a4-4fe0-b764-b7b97b308d48",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e2b07363-aff6-4326-994d-72f0b950eab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c509d91a-2522-4c82-b73e-0aa37f7b5ed6",
        "cursor": {
          "ref": "7b21c178-9a2b-40c4-b95e-3e0fc65bbded",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e9937524-1f46-4055-b8a9-e7d1952899c0"
        },
        "item": {
          "id": "c509d91a-2522-4c82-b73e-0aa37f7b5ed6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "89d2a3c2-5a52-4800-8ea2-44d6c0bab3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58db9639-d330-4588-86bf-771a966bb8ee",
        "cursor": {
          "ref": "cc5325f2-95fb-4dc1-b6e2-f74316a16c79",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "27b179b6-47fd-47d7-afaa-a01069e60ba4"
        },
        "item": {
          "id": "58db9639-d330-4588-86bf-771a966bb8ee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "76e76823-bd38-4197-907a-f28d4bc36242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1643,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c2b8ef-3d9f-47f5-b9c9-4254a8d18983",
        "cursor": {
          "ref": "b6b4bf8c-06c2-465f-b8a3-2a9f291bfa1c",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "974088e7-9165-4dc4-9f10-8a894dba8c5a"
        },
        "item": {
          "id": "51c2b8ef-3d9f-47f5-b9c9-4254a8d18983",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4fd0d7cf-4a6e-4c1d-80c8-0cf5ee6a784c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90fa3ca-66d6-4839-8878-8dc7635508f9",
        "cursor": {
          "ref": "cae35c6f-4eeb-4319-b857-6d6a77c70085",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "938d9e19-7c33-4cf6-b3fc-365b9ee298ee"
        },
        "item": {
          "id": "d90fa3ca-66d6-4839-8878-8dc7635508f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4c096e14-a122-4e9c-bda5-2be0babcf0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c47d23-1e80-49a2-ad41-cd25789eed36",
        "cursor": {
          "ref": "4b48e67a-1fad-4192-aa99-9ab610d825cc",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3055f997-e1d0-4784-89b9-21fca30bf712"
        },
        "item": {
          "id": "44c47d23-1e80-49a2-ad41-cd25789eed36",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "076060b3-aa63-40fa-92a1-f3d7e3195a12",
          "status": "Created",
          "code": 201,
          "responseTime": 2070,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "31d3d2e2-7761-4c6b-9a40-788dab7e3914",
        "cursor": {
          "ref": "505dfe55-5a93-4738-a3db-cae0cfdb1d8c",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "77e23b90-e5b8-4067-87dd-0bfd5b969504"
        },
        "item": {
          "id": "31d3d2e2-7761-4c6b-9a40-788dab7e3914",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "68f58323-729e-408e-a4ae-2590c36c1fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a905b69-208c-477a-9abf-a255c4d2d805",
        "cursor": {
          "ref": "2d4f62f3-3b0b-48ff-b70d-a3076b724025",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9a46fb44-b923-40ed-9a6a-4d0c0038bc2c"
        },
        "item": {
          "id": "9a905b69-208c-477a-9abf-a255c4d2d805",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "dff56361-a11c-4857-a4c7-7fbc27727526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047a1f7f-e39c-47e9-9ae5-4c4bb49aff6b",
        "cursor": {
          "ref": "b9f7a549-e93c-4cdd-97d8-ea7d5ef626f2",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f46883e8-2a6e-47cf-9b80-d9347bdca66a"
        },
        "item": {
          "id": "047a1f7f-e39c-47e9-9ae5-4c4bb49aff6b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "47e5feaf-67d1-464e-9d8f-f2bc98bc3545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca904bc-ccb6-4aba-b00f-85f53fa5d974",
        "cursor": {
          "ref": "ec5c6724-567c-40fb-bc83-8d0b770eeb87",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3bd103da-7610-453a-81e3-b027224c82dc"
        },
        "item": {
          "id": "dca904bc-ccb6-4aba-b00f-85f53fa5d974",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e83d5525-85de-439c-b61b-6dc724484cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103ed092-ad8a-47cf-aae7-334b3f26f461",
        "cursor": {
          "ref": "f64be9c5-356b-4047-b878-f7796dd7b483",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9a507076-b6f6-41bb-a453-c7da83cce031"
        },
        "item": {
          "id": "103ed092-ad8a-47cf-aae7-334b3f26f461",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "964f445f-4c3e-46c5-b22a-d39adbec2f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100b3e82-557e-4180-88ef-c1fb32595253",
        "cursor": {
          "ref": "08453769-69d4-421c-9e1d-573084f8cead",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bfda6d0f-eac2-4346-b5f0-eecc6e1198d0"
        },
        "item": {
          "id": "100b3e82-557e-4180-88ef-c1fb32595253",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "51a05085-7b7c-4ec7-a38d-706fcc080a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27469f8d-c408-49cd-a9ae-15d79cf108f7",
        "cursor": {
          "ref": "a0570ea1-f3a0-40fc-9767-360785dffa01",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f22fb2a6-fe1e-457c-8c23-c31c6958fcd4"
        },
        "item": {
          "id": "27469f8d-c408-49cd-a9ae-15d79cf108f7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "897f2a88-890c-42c5-af70-703e9d7130b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19627d0d-a2b8-4c7a-bc0b-cfe187e1a7de",
        "cursor": {
          "ref": "0ab8a863-aa43-4689-8bb3-e9faac95ffc2",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b37ef45c-6a62-4ec6-8c61-b9809ebf872c"
        },
        "item": {
          "id": "19627d0d-a2b8-4c7a-bc0b-cfe187e1a7de",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3efdefaa-18fc-43b0-b580-52334318a1fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3a2e7c-207c-4c43-8b11-bf89d81b9d62",
        "cursor": {
          "ref": "59cd35eb-1cff-46c6-b9e2-d83eb306c138",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9e9e60a4-ded9-4fba-bf35-0480e57e1fef"
        },
        "item": {
          "id": "9b3a2e7c-207c-4c43-8b11-bf89d81b9d62",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6d4d80ec-7f83-4ff6-9721-1c40bc032b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7f36ed-9082-4879-91a8-3bf94cd3675f",
        "cursor": {
          "ref": "8a186aef-8ebf-4258-af3e-2fc2eba5d04a",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7db546d8-16ad-472e-9933-07313faa3ed6"
        },
        "item": {
          "id": "6e7f36ed-9082-4879-91a8-3bf94cd3675f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9c4bb438-76b6-4a8b-871e-ceccf7a9f343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b72e92-a9a8-4769-a52a-09f758024575",
        "cursor": {
          "ref": "4697d6a5-bf89-4c4f-82ab-28e8e4676c8c",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1bf8c0f2-743a-4b3c-922d-7820ba6606a4"
        },
        "item": {
          "id": "28b72e92-a9a8-4769-a52a-09f758024575",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c3a5e251-57e1-42e9-a4e9-9d0b7277f1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40e1899-60cb-43e7-b41e-c05c044c2bac",
        "cursor": {
          "ref": "0258f275-1b11-42cb-b1c0-9be3a7e9edf2",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "08b97aec-cbe3-4ea9-8b8f-2a2f89a48cc6"
        },
        "item": {
          "id": "b40e1899-60cb-43e7-b41e-c05c044c2bac",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "176b0190-70d9-4b0e-bd06-9df25593087f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f408b25a-5668-4b0a-91b7-59cf279dfcdb",
        "cursor": {
          "ref": "4b021a58-10c6-4c4e-abe9-1dd302bc98bb",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9ec7e901-9ac1-494d-8a62-6bea8b0bde7f"
        },
        "item": {
          "id": "f408b25a-5668-4b0a-91b7-59cf279dfcdb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9a291ad7-5c39-4c24-a51e-0f11c979a742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6139942-7e37-4b4a-9357-cc35513b001d",
        "cursor": {
          "ref": "9b7150bc-49ae-430c-9812-3827d4c0fa0e",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6b256421-d8c8-4ffe-b7f9-a6af6dd9cf55"
        },
        "item": {
          "id": "b6139942-7e37-4b4a-9357-cc35513b001d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e8d9ea7a-6902-43ff-9ab6-fa4d8d5dd571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad695b23-e033-4079-8dc5-2cd6a04b8ecd",
        "cursor": {
          "ref": "84a6a9cd-4154-4657-8739-8eeca8f7bffa",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "221f43d4-e74d-4ce8-a647-a57fb9eab05b"
        },
        "item": {
          "id": "ad695b23-e033-4079-8dc5-2cd6a04b8ecd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6000a8f0-2079-4c90-b702-8a3fa94d460a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68346b89-c645-45f9-ae4e-ae4f88646269",
        "cursor": {
          "ref": "f05c63db-2e23-40bc-a3a2-4b21c55333ab",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7cdde2bf-63ce-499d-805e-02a71e4f5212"
        },
        "item": {
          "id": "68346b89-c645-45f9-ae4e-ae4f88646269",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8211480e-5cd0-4e8a-9fca-4d161771b3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4ef830-9d9a-4735-8474-695afb0c7a02",
        "cursor": {
          "ref": "9ecf264a-f9d6-4a63-823a-aa95b042d93a",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "112f6738-83ef-4ee6-98f7-562176109eac"
        },
        "item": {
          "id": "1d4ef830-9d9a-4735-8474-695afb0c7a02",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cf471d20-03c9-4862-82c6-9c0771576d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81388fed-3f05-424b-b9c5-68ed8440d8b7",
        "cursor": {
          "ref": "84b2df61-44a9-400c-be8e-3558b81e1e06",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "784deaec-d338-442f-bbe0-6faded2132fc"
        },
        "item": {
          "id": "81388fed-3f05-424b-b9c5-68ed8440d8b7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c20d72a7-b2e2-4bcd-80f8-3245ad1e913e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b12328e-4692-4dad-984f-60d5f7eaa1d0",
        "cursor": {
          "ref": "aa9c8f42-eb40-4371-b207-52f6be608e56",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ff66efae-4310-4bff-a804-43c0f515240b"
        },
        "item": {
          "id": "8b12328e-4692-4dad-984f-60d5f7eaa1d0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b861bd1e-3cff-4a49-9e6c-a85212ef4162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f292b5-e9c9-450a-955d-4280d21d98c0",
        "cursor": {
          "ref": "ad3be2e5-b6ac-408e-a969-02813c23d6b4",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "433e5144-c157-43f8-b2dd-765ef05486d4"
        },
        "item": {
          "id": "b0f292b5-e9c9-450a-955d-4280d21d98c0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1f93deea-a2cd-4933-90e3-3ab6fd7be2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ad7f02-0869-4ab7-953c-c5ec1dbaaf49",
        "cursor": {
          "ref": "a379b590-60e7-47ae-86e6-914a29511f2f",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "971fc616-1859-4db0-b321-d3e71b9698b2"
        },
        "item": {
          "id": "86ad7f02-0869-4ab7-953c-c5ec1dbaaf49",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "dd8ee60c-82ca-4d81-9c72-b6b9cd33388f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0105c30a-b90f-4ffe-9771-fe34ded626e5",
        "cursor": {
          "ref": "fb39badf-418b-4eb6-bc3b-c6cde42d4bfc",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "151d4225-b41c-468c-b591-6d77b43e4c2a"
        },
        "item": {
          "id": "0105c30a-b90f-4ffe-9771-fe34ded626e5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c73b7485-e337-4146-b599-534300b9b686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44e6d67-8d9a-4e56-97f1-b0fdf593d6b1",
        "cursor": {
          "ref": "f8b5b449-9f11-43ba-a8f3-70881ed0814e",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "65302953-b6ce-48e7-b860-5e393fd5cc9b"
        },
        "item": {
          "id": "d44e6d67-8d9a-4e56-97f1-b0fdf593d6b1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3889cd3e-0e73-4d60-a042-718eebe4350a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3284511-b834-4bcd-8848-ccb6fb846aa1",
        "cursor": {
          "ref": "8c56fa53-1307-4a0e-ac79-b0cff86c46f0",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "66753ea5-7d89-4ea1-8395-9c11ef5c0f5e"
        },
        "item": {
          "id": "f3284511-b834-4bcd-8848-ccb6fb846aa1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a7a973d2-5f0c-471e-afea-c75cf97c3a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada8a4c5-6f6c-4712-9a40-4a920daaa298",
        "cursor": {
          "ref": "5574e439-5c33-4eb8-ac40-546bfaeb166e",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "799b837c-b2c9-4797-b4ee-307d46960dca"
        },
        "item": {
          "id": "ada8a4c5-6f6c-4712-9a40-4a920daaa298",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bcc0e643-e33f-427c-8851-e32103f29bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0318b747-d868-49a8-8a19-d518265321d5",
        "cursor": {
          "ref": "c5d6888f-e841-44f1-8a2b-41213ebf1d23",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "332761ac-dba3-4051-8c65-f668f7a08264"
        },
        "item": {
          "id": "0318b747-d868-49a8-8a19-d518265321d5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b0994abd-79e2-48d5-aa9b-1bb749aab80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56a41e6-239f-4c18-bc3e-8e1f56c125c4",
        "cursor": {
          "ref": "742627eb-0550-445a-b910-3b69adee9f72",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "72aff157-1965-4488-b860-72bfbe3a8ec5"
        },
        "item": {
          "id": "c56a41e6-239f-4c18-bc3e-8e1f56c125c4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "372ac1fe-1e90-4efa-8c97-4d5791081596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c070d8e3-bd28-466f-81ad-24908f0def65",
        "cursor": {
          "ref": "f1b97731-0025-4a50-93d7-4932708afaf2",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c075cd32-8bda-42a0-8e6d-1fa2f0af5f9f"
        },
        "item": {
          "id": "c070d8e3-bd28-466f-81ad-24908f0def65",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "61e967fb-a588-4273-82f9-68b922db52ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8759e49-62b1-4908-9f96-4e6fb17beb1c",
        "cursor": {
          "ref": "5b6a68e4-dbf3-49cb-bc28-ba8c1aa4c931",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0b232d53-ce2f-47b6-bf1f-c882913125fc"
        },
        "item": {
          "id": "d8759e49-62b1-4908-9f96-4e6fb17beb1c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "59f26e0f-2fcf-426c-ae2f-e1423fc903b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc782a6c-ced7-410a-947e-875c96d446a2",
        "cursor": {
          "ref": "098d9cb7-c0e3-4da6-8705-41c71fea9763",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f389b04c-db1f-40df-9256-12eb0c411976"
        },
        "item": {
          "id": "dc782a6c-ced7-410a-947e-875c96d446a2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e6346143-69dd-4728-b256-24eeb3651a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e935530a-984b-4826-a8be-404dc9bdf72f",
        "cursor": {
          "ref": "be04d034-dcb2-4bef-bf65-54d795ee338c",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "70686b54-3bd8-4182-919d-f8a8d8e9b8de"
        },
        "item": {
          "id": "e935530a-984b-4826-a8be-404dc9bdf72f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "aafb3516-5aba-4f6b-a175-4605b8a2545c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "2ad7a2c1-1abe-4521-ad17-face121a0c2b",
        "cursor": {
          "ref": "5d4b3dc8-bdff-4d91-97ec-fed6f3e5c462",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2ae33dfc-70df-4dad-8c7c-ad5dd481d217"
        },
        "item": {
          "id": "2ad7a2c1-1abe-4521-ad17-face121a0c2b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3c90a17a-a898-402c-b599-dd6d17e911a9",
          "status": "Created",
          "code": 201,
          "responseTime": 1892,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e413b4f7-a585-41df-b8d7-8b96211d1c41",
        "cursor": {
          "ref": "7365af20-c2db-4120-9d58-73f07c479438",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d08a04b2-3f45-494e-b824-cd5dd56f3059"
        },
        "item": {
          "id": "e413b4f7-a585-41df-b8d7-8b96211d1c41",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "734b75c4-d80d-4d08-bf48-5b6f616a1c17",
          "status": "Created",
          "code": 201,
          "responseTime": 2329,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7040ccbe-6181-4a26-bd90-2a6c4436e5ad",
        "cursor": {
          "ref": "f829eaa8-0a68-457b-8f68-30c38a0e51a8",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "967c60a7-3048-44c9-9568-915c0a3d268c"
        },
        "item": {
          "id": "7040ccbe-6181-4a26-bd90-2a6c4436e5ad",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "402dc3bb-071f-4ef4-b08f-56803b040f3e",
          "status": "Created",
          "code": 201,
          "responseTime": 2241,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce37d912-7365-4b1f-8433-298b1707db85",
        "cursor": {
          "ref": "0ad0071f-eafc-4aa4-bafb-f998cd2951f3",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "eacd143e-2dc9-4fa1-a285-214afa0ad61f"
        },
        "item": {
          "id": "ce37d912-7365-4b1f-8433-298b1707db85",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d251ab82-1962-4b3c-865a-eea7e6644236",
          "status": "Created",
          "code": 201,
          "responseTime": 2624,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa6f673-eb71-434a-ad60-05f4d453541b",
        "cursor": {
          "ref": "22c5f67a-052b-482f-84fb-6ceebe1ced3c",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "57e5a673-3c57-47a4-9cee-8c61f58eb1f9"
        },
        "item": {
          "id": "dfa6f673-eb71-434a-ad60-05f4d453541b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "39ea250b-529a-44ce-9356-b29d1d0abacd",
          "status": "Created",
          "code": 201,
          "responseTime": 2423,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-03T00:43:28Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-03T00:43:28Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "512ffd60-278e-41e5-9be5-24710a82e153",
        "cursor": {
          "ref": "47b7f2b5-c0fa-4e47-a36c-ec38786d2fe3",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "775113f1-a605-4a92-86b0-5f72a53e9752"
        },
        "item": {
          "id": "512ffd60-278e-41e5-9be5-24710a82e153",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c9236cb5-f836-4c9b-b83d-02a7b675d98f",
          "status": "Created",
          "code": 201,
          "responseTime": 2383,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0d0b53-1504-4471-bebb-9e83d6285e54",
        "cursor": {
          "ref": "5515ebf9-1c6c-4b29-8d10-965d5dc9144f",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6e7f569a-c2a2-454e-b4a3-d9c53be2c310"
        },
        "item": {
          "id": "7d0d0b53-1504-4471-bebb-9e83d6285e54",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "12f8a264-5db6-41b7-b38c-90d337e550e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ddd26ec-e9ca-4dba-b887-b4e0ad0ab25f",
        "cursor": {
          "ref": "68aeac28-677b-4463-b8b7-65ce7b32b52b",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d35ecf4e-baac-46bb-b19b-33a240ff0a04"
        },
        "item": {
          "id": "0ddd26ec-e9ca-4dba-b887-b4e0ad0ab25f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b05ddb61-9adb-497c-aa56-bb637ae9fa79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad79bb1-864f-40df-b8c2-5324b3148d75",
        "cursor": {
          "ref": "e560c348-1f54-49cc-8ab1-310dd0d48b70",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d55ae011-3765-4717-8d7e-a42bc741c04d"
        },
        "item": {
          "id": "bad79bb1-864f-40df-b8c2-5324b3148d75",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "040d43ac-c40a-4b04-991a-f6f2f6875e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3458a2a-6330-47e3-af47-b768f65a050d",
        "cursor": {
          "ref": "b56131e9-7f19-4ea1-9722-4510154deeea",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0caf9a00-af59-4c9b-8bec-9c2d2c9f350c"
        },
        "item": {
          "id": "f3458a2a-6330-47e3-af47-b768f65a050d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "10352e62-c613-4990-824d-e0bce05d4c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8694015a-6252-4a46-9751-94b303caeb8f",
        "cursor": {
          "ref": "ff238153-8669-446d-b8ac-a44316d12e2d",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "206aede3-3349-4fc9-927a-41d8d98104d2"
        },
        "item": {
          "id": "8694015a-6252-4a46-9751-94b303caeb8f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "461c7bdf-fa15-4e47-a476-ca1a9b2e2240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11b0431-a569-4c54-8a8a-be0bfa3fa735",
        "cursor": {
          "ref": "9e1db770-dd6f-4bdd-9e61-cb658e093168",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c7c2fc5c-ab11-4721-9660-82be322c1606"
        },
        "item": {
          "id": "d11b0431-a569-4c54-8a8a-be0bfa3fa735",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c6b9c746-9311-49a0-ae5a-b0ec2f4784fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f57fe4-d752-4657-8838-02c62778927b",
        "cursor": {
          "ref": "e8718046-0eaf-4eb2-8fa9-1315e70dc6b0",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "78f130f4-28a0-47df-8709-10e0f921f1b0"
        },
        "item": {
          "id": "f0f57fe4-d752-4657-8838-02c62778927b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e02adf75-6fe4-4898-95b0-7a7b585baf7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91178cb-899a-4ef6-90ac-6596ef084772",
        "cursor": {
          "ref": "e4efe2a4-5ccb-492a-9f51-f9b3093f049c",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "373dc9ec-1e6d-4ee8-97ad-65a95f003a06"
        },
        "item": {
          "id": "b91178cb-899a-4ef6-90ac-6596ef084772",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "90496102-fa2a-407a-8e54-bffb0c15a9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e57a86d-9051-437e-bc24-2ed6a7fd3b5c",
        "cursor": {
          "ref": "05252863-ad1a-47e6-aaf8-b2d478c17d51",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2fec2f3b-54a6-4bd1-94a0-2709562a9e42"
        },
        "item": {
          "id": "6e57a86d-9051-437e-bc24-2ed6a7fd3b5c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ef1077b2-81fc-4b36-9927-ac05f08d0c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26022a33-ed0a-485c-abfe-0b5273fa668f",
        "cursor": {
          "ref": "da1810c7-4b4d-4f87-af3f-2197f0c177af",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "852f0aa4-c132-44cf-b670-b34915ccb1cf"
        },
        "item": {
          "id": "26022a33-ed0a-485c-abfe-0b5273fa668f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b5ad41b2-be11-4655-8806-9433b21f7b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fa014c-0bd5-42a4-96ea-67f70580e3f1",
        "cursor": {
          "ref": "a258cd59-c9a4-48f1-833e-5e6ec0557af9",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "92a25a98-50f2-494c-bae2-943d16078a5e"
        },
        "item": {
          "id": "99fa014c-0bd5-42a4-96ea-67f70580e3f1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b882d80b-7187-4a87-b0d2-8f1994133a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762dda09-bacd-43ca-bedd-39cb018a4b12",
        "cursor": {
          "ref": "7f0c8015-0090-4bc2-91a7-dd8e5420b8f5",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dcfdcd6c-5419-42a2-9126-9415b291e4f8"
        },
        "item": {
          "id": "762dda09-bacd-43ca-bedd-39cb018a4b12",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3464a157-9002-4b7d-bcc7-6cdb37a82fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd35b09-9986-4c50-9ffb-ef31db37cd37",
        "cursor": {
          "ref": "9e2f429b-093e-473a-85a5-f0651cd3785d",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "001a38c6-6ed9-43e6-a28b-561b136370f4"
        },
        "item": {
          "id": "bcd35b09-9986-4c50-9ffb-ef31db37cd37",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "41f3300d-7706-47ab-b9d6-206e630ed831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c177d51c-9a06-4d38-8ed8-d9868105e39c",
        "cursor": {
          "ref": "93384597-2552-4b34-8249-8fd861c7c0ec",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "352f02c5-ee01-4e50-9d26-4f784b768035"
        },
        "item": {
          "id": "c177d51c-9a06-4d38-8ed8-d9868105e39c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "63382490-4b6d-46d3-987a-224f827e86ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6fff6a-f099-4967-83f6-b2705edd50f6",
        "cursor": {
          "ref": "07bf6aba-b47c-4a73-8b67-2e078208bcbf",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dc2a071f-6c1e-494f-8864-db4197b2629f"
        },
        "item": {
          "id": "cd6fff6a-f099-4967-83f6-b2705edd50f6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0790ef17-bef4-4f67-8a92-035ca37f3c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7143082-ed8e-4913-8cbc-bf0660adb5e8",
        "cursor": {
          "ref": "2ec78fd5-281a-4750-994d-7b1973e4e27f",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4311ecde-1b76-4187-9afe-1b2792c97b09"
        },
        "item": {
          "id": "d7143082-ed8e-4913-8cbc-bf0660adb5e8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "45b1b1c5-49d7-40ee-a9be-eace22250533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4145e59-2c0d-461b-9cfd-5ab2831f87f7",
        "cursor": {
          "ref": "4547b343-efd3-4dac-aebb-ef503e983a6c",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a875858e-705b-47ba-9b0f-dd945a78a1d2"
        },
        "item": {
          "id": "a4145e59-2c0d-461b-9cfd-5ab2831f87f7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "159b3c3a-3ad0-447a-8d6e-b2cfe4d34127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad264ec-ca94-4be6-b8a1-dde96bb0dd77",
        "cursor": {
          "ref": "d9defb0f-13c3-4751-a579-1307569edc96",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "600d425a-f9a1-44cd-b9a8-78a0527de576"
        },
        "item": {
          "id": "3ad264ec-ca94-4be6-b8a1-dde96bb0dd77",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "603ea573-2348-43f7-b234-e9cdcee396a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7733f62-7532-4a53-82b2-f4ce1d25eeb3",
        "cursor": {
          "ref": "fe859d59-d400-4d72-825c-82e6a7f383b4",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "29b468de-0e43-4a18-b663-1dd49543b348"
        },
        "item": {
          "id": "c7733f62-7532-4a53-82b2-f4ce1d25eeb3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "597694a8-e52f-432b-bb21-8363ed646f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fdbe09-efc4-4d0e-b6a6-e135caa10f0b",
        "cursor": {
          "ref": "7479d5f3-6d25-4ff6-bd91-d4bec6062a2d",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "209d39f1-a643-4793-a03a-b45a2b07aeba"
        },
        "item": {
          "id": "96fdbe09-efc4-4d0e-b6a6-e135caa10f0b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "48cf2cac-caab-49ac-b86e-ac4169888693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57ef958-fb09-4ffa-a2a3-da0c6837d467",
        "cursor": {
          "ref": "22237d35-3fda-476b-9c7b-91ab74728b07",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "93386428-5335-4cd3-981a-13361d6c4504"
        },
        "item": {
          "id": "d57ef958-fb09-4ffa-a2a3-da0c6837d467",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4bf47a63-ae22-4f82-aa3d-d40154008518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc35ccc-a41b-4708-9ac7-0592100999be",
        "cursor": {
          "ref": "400d6358-9615-4870-a3c8-de8b50a9ccf3",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ab29dc1a-b0e5-4c3c-9cbc-0d41bc98201f"
        },
        "item": {
          "id": "bcc35ccc-a41b-4708-9ac7-0592100999be",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7afe9c2b-e372-4df4-a1af-7364af908971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121930b8-8d90-498d-9be8-2cb1270ce0fe",
        "cursor": {
          "ref": "66c6b82c-749d-4fa3-b2c5-c682ccf9bc5e",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b2eda4f3-e215-40cb-989f-b5d575ee10e9"
        },
        "item": {
          "id": "121930b8-8d90-498d-9be8-2cb1270ce0fe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "addd25c2-9158-4405-af7e-a9094273ee07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebc4b1d-9f01-44dd-88bf-ad129fc01376",
        "cursor": {
          "ref": "d7afb565-a780-4d7c-bf70-427f3874a1ff",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "17718b11-096e-4aec-bda0-fed4c820d9c1"
        },
        "item": {
          "id": "eebc4b1d-9f01-44dd-88bf-ad129fc01376",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7a737a01-7c8e-4d69-98df-c41ad1c106c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0de060d-1f7c-4f4e-8ac0-72d73e529ac3",
        "cursor": {
          "ref": "870dc2a3-6777-41c1-9119-e7c4f3990190",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1e296563-9e33-4332-8fd3-ca7da43da64d"
        },
        "item": {
          "id": "e0de060d-1f7c-4f4e-8ac0-72d73e529ac3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "91bc2901-5752-4930-a183-de25bd0642b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb68508-f14b-46e2-b3b5-87e6071e1429",
        "cursor": {
          "ref": "f5577ca4-2941-4693-9ddd-e4772c122947",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a46d0859-6921-484a-849a-913144e55941"
        },
        "item": {
          "id": "6cb68508-f14b-46e2-b3b5-87e6071e1429",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "71785468-700a-44b5-aece-42956e3b76a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca89832-121a-4d0f-a7b7-868ed4f7d759",
        "cursor": {
          "ref": "4b7f08d7-700a-4a22-8741-e5fd91eb4dc4",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bc80c57c-4dea-437a-9373-715238070854"
        },
        "item": {
          "id": "fca89832-121a-4d0f-a7b7-868ed4f7d759",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fc9affc2-74c2-4605-b05d-73f5b93856d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ae94d2-33d0-4f76-8c51-a8e233ccd3d5",
        "cursor": {
          "ref": "72b6655c-8ba9-4b4d-8142-14781856d968",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b5efb331-40d1-4390-99a2-dff7b0d9e37b"
        },
        "item": {
          "id": "67ae94d2-33d0-4f76-8c51-a8e233ccd3d5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5764eaed-fc4c-43bf-b4e7-d10f345bf4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca49c11-333e-46f0-a6f5-f111241172b5",
        "cursor": {
          "ref": "1d3f015f-487f-44ba-a4ff-7cf978228063",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "582487d2-2a85-4f5d-9424-a043bf4c25af"
        },
        "item": {
          "id": "5ca49c11-333e-46f0-a6f5-f111241172b5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d3204a61-56b6-43b4-bbf7-5ea42334069f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb308f1a-99f5-437d-b0e5-2b861b06d8f1",
        "cursor": {
          "ref": "c5c10ebd-47ce-4e66-8fc0-d9ca9d1c50e0",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6a10821b-e81c-4a1e-b32f-3162c3c128f9"
        },
        "item": {
          "id": "bb308f1a-99f5-437d-b0e5-2b861b06d8f1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6d3c5c03-0103-45ff-aca5-44738fa49acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1168c1fb-2c8b-4e7f-a768-20fa8c7fe08c",
        "cursor": {
          "ref": "921ba417-5459-4c0d-86db-3eb1aef7ae27",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "48aaa8d7-9656-498a-85c1-2067882a206b"
        },
        "item": {
          "id": "1168c1fb-2c8b-4e7f-a768-20fa8c7fe08c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3e577507-b924-4823-a567-5b7d23cae80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d320b199-b211-41a4-bcf6-a3e6559f0f78",
        "cursor": {
          "ref": "9b2e32a4-2108-46ea-b066-787902f3c31d",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1ae29bc4-f9f4-4d6a-a643-181005705989"
        },
        "item": {
          "id": "d320b199-b211-41a4-bcf6-a3e6559f0f78",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d0a649b5-9957-416f-85f1-fafa354e1298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0237d7c-b253-4b07-9e2a-c91190ffbb2d",
        "cursor": {
          "ref": "49b6553a-62bb-4fdf-a43e-5ddf1b1aafd5",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "efb55950-9a50-4b6c-ba55-d2d939816ac0"
        },
        "item": {
          "id": "e0237d7c-b253-4b07-9e2a-c91190ffbb2d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "90ebd50f-6c9b-42e9-85ea-0655cd20a76b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d3d8959a-077f-4eaf-abaa-6d39ab3c8155",
        "cursor": {
          "ref": "aa1948a8-9071-4871-b0b3-cddbc58a89e4",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "55048246-420d-43c6-b3ca-4400497f2f40"
        },
        "item": {
          "id": "d3d8959a-077f-4eaf-abaa-6d39ab3c8155",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "91ea5f46-bbb8-4261-ab2b-b4e5b61261bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d450af-1fc8-47f2-85dc-0decc5643a93",
        "cursor": {
          "ref": "a6a767a5-6e4e-4aca-ab36-4efe3148b15f",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c921937d-4426-47f5-9f3e-f9a121b01cfa"
        },
        "item": {
          "id": "f6d450af-1fc8-47f2-85dc-0decc5643a93",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "27502ab8-6480-4e81-b300-4ab68de5b371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5b0848-9016-4de7-9162-1ae0b0c69f90",
        "cursor": {
          "ref": "39974d84-ce2b-4373-8948-9834d3b246b2",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "df17c27c-5bf9-4c63-b02e-637072409fed"
        },
        "item": {
          "id": "af5b0848-9016-4de7-9162-1ae0b0c69f90",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b1884fcb-f397-4a36-b948-c16c4ccf3b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef50a031-b668-4884-8b7e-bfb2a52ce8c1",
        "cursor": {
          "ref": "3ddf70ce-a30e-4ce1-8025-92c6f233906f",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "66ab7b2b-c1ab-48fe-b687-b6263ec4e9b7"
        },
        "item": {
          "id": "ef50a031-b668-4884-8b7e-bfb2a52ce8c1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2b976816-c96c-4516-9d73-673a9916ef44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67085803-3e53-416d-819b-fc9b9fbbb728",
        "cursor": {
          "ref": "d58fabb8-b748-49b3-87a8-dfc1bb7a07cf",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "64392784-7248-418a-9e0e-c2dab725e41c"
        },
        "item": {
          "id": "67085803-3e53-416d-819b-fc9b9fbbb728",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "11bce061-eba2-4a7b-a6a3-032c6eba4916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3612b9a6-c8e5-4369-a014-a46fdb59655f",
        "cursor": {
          "ref": "8e8c5ff8-70f6-4f77-941f-ea1be1e43475",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7c3980ec-70c1-49d1-8ae0-66e404d8e63c"
        },
        "item": {
          "id": "3612b9a6-c8e5-4369-a014-a46fdb59655f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6cc50272-1355-4f48-8c8a-17c458ce9623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f58dbd3-ecf1-4814-9ead-5532dc119a7b",
        "cursor": {
          "ref": "b4289068-5ac8-40db-9ac4-98376c9fb0e9",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ca7841c5-551c-48f3-a331-41a2457077a2"
        },
        "item": {
          "id": "2f58dbd3-ecf1-4814-9ead-5532dc119a7b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "010086cb-db68-440e-aff3-0dc81f13071d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814bfe1d-dcdc-40bc-80ab-0ee4b3a822ec",
        "cursor": {
          "ref": "b56a3d34-f0f1-430c-9a58-a8263f2aff5c",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "be70b1cd-cd04-47e5-9592-208e68282d69"
        },
        "item": {
          "id": "814bfe1d-dcdc-40bc-80ab-0ee4b3a822ec",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e42232fe-9839-4e0e-8354-81c2ff8c80ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8104011b-ed25-4301-881d-f477493bbe98",
        "cursor": {
          "ref": "c5cb569b-1926-4f2e-841a-d8824c844cc9",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6c4df280-578e-4281-be16-2bc8f8f2cda2"
        },
        "item": {
          "id": "8104011b-ed25-4301-881d-f477493bbe98",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c92b9b73-9bfc-4e16-9bb7-6282af5c8806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfe420a-9be2-481b-950e-fe8612b23c1a",
        "cursor": {
          "ref": "ed39e526-ff03-4eb0-93df-88871dc167d3",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "16fb93c6-582d-44da-a94a-f92bee566a76"
        },
        "item": {
          "id": "7dfe420a-9be2-481b-950e-fe8612b23c1a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "79fee37a-cd74-465c-8ad0-7caf9d7d98b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ecfd514-7ed7-409e-a9ac-21904c5bf661",
        "cursor": {
          "ref": "de738892-89a8-40d4-83d3-c3c991a9650a",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4d868e56-8299-4219-8b26-1f36c0482711"
        },
        "item": {
          "id": "5ecfd514-7ed7-409e-a9ac-21904c5bf661",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "57267a8c-7b72-49b9-8fc0-713b0527e344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4458d82-c059-4bd5-928d-8a3067f9c6f8",
        "cursor": {
          "ref": "52f0b095-00c6-41c0-8598-e7aa33bddbd5",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "16632a5c-1a04-4b35-b0c2-f6a3b8eefa0c"
        },
        "item": {
          "id": "c4458d82-c059-4bd5-928d-8a3067f9c6f8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "796c0397-eee4-4d44-ad32-20a540dc63ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f971004-654a-44f4-a90c-96a8d753a44f",
        "cursor": {
          "ref": "68ebe90e-2ad7-4c3a-90da-29e1a3f0ad0f",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1d7ea38e-e570-4314-b549-4186d4b96711"
        },
        "item": {
          "id": "5f971004-654a-44f4-a90c-96a8d753a44f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8d20efb4-f8fa-48b3-8d79-da86d7250d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61828286-989f-40cc-bdda-f0cd894db562",
        "cursor": {
          "ref": "3e9cf470-7c15-47f8-b4ae-fc6b27b26206",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "40809b9e-37f4-49ab-9f7e-7d620decf480"
        },
        "item": {
          "id": "61828286-989f-40cc-bdda-f0cd894db562",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e3400551-50d3-44b8-bb0d-2e5f4e5d0e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81814a48-ca6a-4004-9086-1279050681e2",
        "cursor": {
          "ref": "06125f32-7c46-48aa-b60b-9af35353881d",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8ac0fd12-357e-46dc-afd0-fc37b3705aff"
        },
        "item": {
          "id": "81814a48-ca6a-4004-9086-1279050681e2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c948a79f-3947-4411-af3c-3e9a23a8d35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b01975-eb5b-492d-8e7a-377dc853f784",
        "cursor": {
          "ref": "9193188e-057c-435d-9058-66373a63742c",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "80e7096a-93a4-441b-a9ec-a29c8e578cd9"
        },
        "item": {
          "id": "b9b01975-eb5b-492d-8e7a-377dc853f784",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5259fa69-346c-4188-8e99-1b4355ea86b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f98395b-9a65-4562-8e90-b3f86dc5b5f5",
        "cursor": {
          "ref": "652522f1-e02f-4247-9d44-d132717a87c6",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "03c215b7-df32-4227-aa4f-79fc2bad1372"
        },
        "item": {
          "id": "3f98395b-9a65-4562-8e90-b3f86dc5b5f5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e6d5c578-a3a2-417c-8450-1a9437022b8e",
          "status": "OK",
          "code": 200,
          "responseTime": 302,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "28194f65-cbf5-4f70-bafe-1a9073fb4afd",
        "cursor": {
          "ref": "48a7860e-a9da-4a1a-ab19-68eddbe450c2",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4f059642-b68c-48a7-8872-7af5ee3519bb"
        },
        "item": {
          "id": "28194f65-cbf5-4f70-bafe-1a9073fb4afd",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2327793f-9fc0-40bd-8793-f01cf3f861b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad16ba3-e677-4133-a93b-742841d2765d",
        "cursor": {
          "ref": "3809b1c7-7b48-4524-91e8-6bb74872863d",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e4d75534-95e0-4572-b2cb-b6835563346f"
        },
        "item": {
          "id": "3ad16ba3-e677-4133-a93b-742841d2765d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "90be4fa7-788b-4b11-a3d8-4beb0c8ddd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 787,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d965125-d6f4-4e56-aac4-9566d072da70",
        "cursor": {
          "ref": "9ba922e3-b198-452f-bb32-b08d91a06b97",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "027ed266-35c9-48f6-b019-383826440619"
        },
        "item": {
          "id": "2d965125-d6f4-4e56-aac4-9566d072da70",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4fa301c5-aa10-4fb7-92e5-8b6152be54e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd00fdaf-2d70-4545-b34b-a1addf78189d",
        "cursor": {
          "ref": "1fcb166a-04fd-44a8-80bf-ce36e4b21ee0",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b8dc96dc-d22b-4904-b354-03b13baeef53"
        },
        "item": {
          "id": "dd00fdaf-2d70-4545-b34b-a1addf78189d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "79864b42-8a8e-47ac-8853-be711d624041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef778e2-2a7a-485d-b1b2-793bbc0cdfc8",
        "cursor": {
          "ref": "1068559e-bf71-4ada-b9d9-3a03aa9bc72b",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5561a36d-d618-46e4-8904-87a806256d37"
        },
        "item": {
          "id": "6ef778e2-2a7a-485d-b1b2-793bbc0cdfc8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "850d6fb6-539c-4dfa-9477-c82c0dd2b129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff48ffc0-a29f-41e4-8c26-ef2018102b2a",
        "cursor": {
          "ref": "bfca05a1-ced7-42d0-a4c0-732c2190de54",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "28969595-7775-4de1-9b46-cda963e8e3b3"
        },
        "item": {
          "id": "ff48ffc0-a29f-41e4-8c26-ef2018102b2a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cc97f5c5-0ae8-422c-a591-5d0c1c8a1293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17960c2a-19d9-4455-8917-6dee127ad1c9",
        "cursor": {
          "ref": "b4c2a5f2-6ed1-4dc0-ade6-24c580a1df96",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5f4c25ec-9dab-46e2-b662-b5211964657f"
        },
        "item": {
          "id": "17960c2a-19d9-4455-8917-6dee127ad1c9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e23dfd40-4383-4afd-a82f-d8cb8752adea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b231672-97ae-4b0e-825f-3f7f362464a0",
        "cursor": {
          "ref": "7054435d-3dda-41db-a31e-123f9790f9fa",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4a33eb42-e952-44af-9323-bfac0819cd3e"
        },
        "item": {
          "id": "7b231672-97ae-4b0e-825f-3f7f362464a0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "73358674-2e2f-4f72-a16e-e6a1de68d383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6a63e3-c860-4309-836d-83cb7cad1b34",
        "cursor": {
          "ref": "eb68f5e7-a450-4df7-8ab6-549a3a110e1f",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1da9d188-deaa-4538-b8a5-c43cced4506b"
        },
        "item": {
          "id": "3e6a63e3-c860-4309-836d-83cb7cad1b34",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "70f6a4c3-8682-4d5e-b4c1-9825cda2945e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502554c7-e694-425a-8bfd-907efd2e3d66",
        "cursor": {
          "ref": "ee2d2242-a89e-493a-a018-6944b91fa667",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "99c60b1b-da79-479a-85cf-34ad518b60b2"
        },
        "item": {
          "id": "502554c7-e694-425a-8bfd-907efd2e3d66",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ab637bd0-f703-4a13-8891-5f3d485894c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e720940c-c8e4-4356-8271-ecdaa20e3cb6",
        "cursor": {
          "ref": "ac211ae3-e92d-4bab-b0ed-674c061e1f24",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2ac53e34-4cc5-4da3-bf2e-256e6c120217"
        },
        "item": {
          "id": "e720940c-c8e4-4356-8271-ecdaa20e3cb6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "401f6394-3bea-4c44-b464-a366a1ba9f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f88328c-85dc-45da-873c-481fa354b3f1",
        "cursor": {
          "ref": "7e77ef29-f448-4d7d-8603-e2df87162204",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3dd0662a-e2d3-4d8a-8912-1005b8d6f629"
        },
        "item": {
          "id": "6f88328c-85dc-45da-873c-481fa354b3f1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "49daa5c6-87e3-47c9-84f6-392ece252715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46122d3a-e57f-4a91-9a71-fe53ab8f921e",
        "cursor": {
          "ref": "610a6fa2-bd0e-4448-a4d7-0f0b8bd7b89f",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "461562e8-4bbb-4f8d-aeba-c44752b271db"
        },
        "item": {
          "id": "46122d3a-e57f-4a91-9a71-fe53ab8f921e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c299db0e-9dd7-421f-ac43-8273567c454f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57da1888-64bc-49a0-8eed-aa9b34b16416",
        "cursor": {
          "ref": "052c5584-7144-486a-8fa0-df9dfcdceca8",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5e92d5e2-bf81-4579-8322-71248249a213"
        },
        "item": {
          "id": "57da1888-64bc-49a0-8eed-aa9b34b16416",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3ae9aaef-d1b7-4d7f-b947-e008e1af9cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92a17e0-d768-461d-9a91-20a80bbd39a9",
        "cursor": {
          "ref": "5a28dda4-e920-41bd-a1a6-d9a233f08aa6",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ab438aba-cc28-406d-83c5-27a11f3a5195"
        },
        "item": {
          "id": "d92a17e0-d768-461d-9a91-20a80bbd39a9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "459994bd-5bac-4b21-9976-4522e3dd1a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7eb0b3-2bf8-4f1c-8e80-8727c53bf207",
        "cursor": {
          "ref": "25fdca7c-c39f-4b6d-ae54-557a683aebea",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "16a4e345-80cd-4091-8d2d-8f5484b67f4e"
        },
        "item": {
          "id": "5c7eb0b3-2bf8-4f1c-8e80-8727c53bf207",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c45c40c3-464f-4cba-8d9b-2a28d607bd7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d188346a-c475-4a35-80dc-c874c84da99f",
        "cursor": {
          "ref": "c25a381d-879e-4d62-a96d-49973b6bd6b2",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e7aed2d0-e759-4fea-a8ce-ef4812bb7f4d"
        },
        "item": {
          "id": "d188346a-c475-4a35-80dc-c874c84da99f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d3032edf-3ad8-4a8a-980d-3af439432db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3509751-9bfd-429b-a870-d2e3544267a9",
        "cursor": {
          "ref": "a2cbf48a-19c7-4820-acee-11a02ab94989",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7232ae88-23b4-4ff4-9705-d4da01a536d2"
        },
        "item": {
          "id": "f3509751-9bfd-429b-a870-d2e3544267a9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "33c55420-babe-4bd3-bf21-fca494ecc732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f76016-73e4-4500-a2b6-b2330f51fe65",
        "cursor": {
          "ref": "ca9a790f-ace3-4f03-8beb-3c6e7d8d8b20",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d7db4458-646f-4483-a8f9-c8885bf0cdd8"
        },
        "item": {
          "id": "f7f76016-73e4-4500-a2b6-b2330f51fe65",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "07714fe8-4b22-40e3-bcee-5bfede6ff7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ec406e-5c4f-45ca-bf98-562912f1aee9",
        "cursor": {
          "ref": "f260e82b-ac3a-4879-beca-b3c37cd9c4ac",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "37ba3ddf-bc57-4bc4-9baf-117dbd2cdffa"
        },
        "item": {
          "id": "b8ec406e-5c4f-45ca-bf98-562912f1aee9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f95f95f6-1152-4a2c-a88f-6f702d684c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6deccaa-6b65-43f7-b582-eb899a795686",
        "cursor": {
          "ref": "94791bda-b6b9-4cf8-bfef-888aa9d589a9",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7b091bc8-38e3-4a74-a38a-49ad18139d35"
        },
        "item": {
          "id": "c6deccaa-6b65-43f7-b582-eb899a795686",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6554ac7c-7897-4a55-a852-30e0467af453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9927809b-da2a-44b0-aee9-dc8d2fe1e387",
        "cursor": {
          "ref": "66df39f0-7a13-4d73-a267-730709730354",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7cc24af4-adeb-4dfc-bb25-656de94625cd"
        },
        "item": {
          "id": "9927809b-da2a-44b0-aee9-dc8d2fe1e387",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dd248619-f239-4269-8185-dd740f9113c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70304097-e814-4597-b302-30eb90024441",
        "cursor": {
          "ref": "570b1490-1aa7-4a38-a647-b57caa366e80",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5506db90-26f9-45fe-a545-bacd1c99de11"
        },
        "item": {
          "id": "70304097-e814-4597-b302-30eb90024441",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6c3a6a48-4990-4fb1-a429-efe1928c94b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bda781d-1856-437b-8cc8-a50328c9c71b",
        "cursor": {
          "ref": "8112fabd-5e9a-4d86-875e-ba4cb5132add",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "873c0c74-3482-47bf-a0dc-c85fb24cfd95"
        },
        "item": {
          "id": "0bda781d-1856-437b-8cc8-a50328c9c71b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9787026e-f706-401f-9554-ef8bad312366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b6da16-5409-406e-86c6-734a2ab66d75",
        "cursor": {
          "ref": "996ee72d-c47f-404f-8f52-554ebfce182a",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0dd1336e-bd21-4170-921d-e846019f5468"
        },
        "item": {
          "id": "15b6da16-5409-406e-86c6-734a2ab66d75",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b36bda4e-17db-4668-8553-9dafca78536d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f587f8a4-3d66-47ef-adb2-35e58a8b05f4",
        "cursor": {
          "ref": "da3bd1bd-e762-4d6d-b490-4a3a41fcc287",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7518c35f-4f91-4268-97ae-7efdace8f1de"
        },
        "item": {
          "id": "f587f8a4-3d66-47ef-adb2-35e58a8b05f4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "caaba149-5d81-4c74-b2de-2a953404b4ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5f3dc3-11de-41ae-9711-593c0a2c8404",
        "cursor": {
          "ref": "4b58daf7-9afa-4138-8dfd-975793ff0a95",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2e1c797b-80f4-4d76-98f6-87877c35d40a"
        },
        "item": {
          "id": "bd5f3dc3-11de-41ae-9711-593c0a2c8404",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ecc9be1b-36a3-45e3-ac44-d9b6081d99ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41219280-d1f9-4bf9-867a-127fd73e5036",
        "cursor": {
          "ref": "c57be56b-1190-420a-bebc-c8180cc837f3",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "06e81b19-d0c4-4fd6-879e-40f2387dcee0"
        },
        "item": {
          "id": "41219280-d1f9-4bf9-867a-127fd73e5036",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "98fcd51d-c70e-4411-b88b-71fd12aafe90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8c989a-ee62-4bfd-9b2d-8a154f785829",
        "cursor": {
          "ref": "adafe24f-6dc7-43ed-af43-aeb4f91c89d1",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "07ade0a2-21b0-4d8e-b78f-947b4e8fd302"
        },
        "item": {
          "id": "bd8c989a-ee62-4bfd-9b2d-8a154f785829",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4742332d-8f45-413d-a590-42376d6d1a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad60d876-f1e1-4a08-a6fd-6dd433ba3cf8",
        "cursor": {
          "ref": "5e3e3586-6ae4-4f6c-a520-70ec9f838e63",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6f15e4d9-3520-44f3-b1d7-713bb0b910fc"
        },
        "item": {
          "id": "ad60d876-f1e1-4a08-a6fd-6dd433ba3cf8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "368cbad2-3de0-48ec-b709-563b21482bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78aa0913-a5c2-445d-b0b0-a8b0aef2eaac",
        "cursor": {
          "ref": "c14d8e09-bf21-4d67-8550-1a0c879a6e45",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e4b9789b-500b-4f87-a6ec-669ac04e6009"
        },
        "item": {
          "id": "78aa0913-a5c2-445d-b0b0-a8b0aef2eaac",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a9171bd7-f366-4eda-9b89-ed53edb3eb42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f006718-010c-4f9f-929c-ea9617499bc0",
        "cursor": {
          "ref": "1f0faee8-f484-47a3-aacc-9a3b1101b5a4",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "766ba0cf-022f-40b9-ba29-2279f33a36e9"
        },
        "item": {
          "id": "8f006718-010c-4f9f-929c-ea9617499bc0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "66f1e99b-fb08-40f2-b80b-e56d5459bbf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef070b94-3dc7-4978-b882-7e74744cf56b",
        "cursor": {
          "ref": "0b836886-bd21-492c-aa93-58e8b52826f0",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c926f12d-d5f0-4994-a9e8-cedfeaaab699"
        },
        "item": {
          "id": "ef070b94-3dc7-4978-b882-7e74744cf56b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f7696a18-2c7e-4242-b5e9-9232ed150491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3ccb00-b753-472a-b9e7-2683f6df3a38",
        "cursor": {
          "ref": "34f40e73-7a90-4255-877e-e708a0e35dea",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f87896f5-180f-45ec-86b0-3855245dd1ea"
        },
        "item": {
          "id": "ce3ccb00-b753-472a-b9e7-2683f6df3a38",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ce2dfe79-719c-4089-a3a0-6aba60bde7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456a99ac-a74a-412d-a55f-e8694d765151",
        "cursor": {
          "ref": "fdb9ca52-029c-4857-8da6-39061c778e36",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c9c72a48-0a10-4fe0-8a86-2d89511bcfcc"
        },
        "item": {
          "id": "456a99ac-a74a-412d-a55f-e8694d765151",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "534a79cf-8814-47cb-937d-38da512bf70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261982a8-290c-4d4d-8e6c-5e63d5cc2b20",
        "cursor": {
          "ref": "623bbee1-c37b-491f-be4d-3f71e09105bf",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b4452b9c-e9d8-46b9-a7a2-60cce68d8764"
        },
        "item": {
          "id": "261982a8-290c-4d4d-8e6c-5e63d5cc2b20",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ff2da0ef-c24b-4bf9-bd7c-017739cb378c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6027bef6-f09f-4dc8-8b5f-629db18419fd",
        "cursor": {
          "ref": "06cd9a20-cde5-487c-a333-aa8066c63042",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3093523a-898b-462e-b46d-627470a840f7"
        },
        "item": {
          "id": "6027bef6-f09f-4dc8-8b5f-629db18419fd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "85581a41-677b-4c9b-bdb3-9efb0cf87eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7254dc4-98ad-4b8d-8523-c4c877b4f015",
        "cursor": {
          "ref": "033b6990-fe76-4fac-87b3-b937de3b9c36",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "40446b44-1c82-4506-8854-eef1a78b79a1"
        },
        "item": {
          "id": "a7254dc4-98ad-4b8d-8523-c4c877b4f015",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9b849436-cc44-42b5-8aa4-aa681a721042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b36a9ee-baf3-45a8-b72f-e8abdf04f3f0",
        "cursor": {
          "ref": "ee8d7e1a-9bdf-43fc-8fe0-6b22bce01a63",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ad9186a3-ceff-4884-8dd6-6e6881ebe533"
        },
        "item": {
          "id": "9b36a9ee-baf3-45a8-b72f-e8abdf04f3f0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "46516e8e-0f31-4092-860b-faedbd3b44c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d8661d-d57a-4b64-8198-99262c2c49f4",
        "cursor": {
          "ref": "9fbe086f-104e-4f7a-9d9d-3b402673343d",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ea3c8fff-2bfc-4fa1-9903-41048e07356d"
        },
        "item": {
          "id": "05d8661d-d57a-4b64-8198-99262c2c49f4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "21af8df5-787b-4fe8-bb14-2b625c175dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d46125-dc8a-4386-8ac2-52ed9e437f64",
        "cursor": {
          "ref": "241df2e2-9d11-4d18-976a-0767efc9b1ee",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b5fb9034-50d0-4dd8-ad52-496181e0ea08"
        },
        "item": {
          "id": "f7d46125-dc8a-4386-8ac2-52ed9e437f64",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ad6ec192-a2ea-4c32-b568-10fb4d6bb2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863ca8cf-751d-4f71-965f-90887e4a4040",
        "cursor": {
          "ref": "235ad42d-3cf3-4452-b834-2a72648c6c28",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bdb0df85-3c15-49a4-a967-2b4fa48bb659"
        },
        "item": {
          "id": "863ca8cf-751d-4f71-965f-90887e4a4040",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2782edd3-d1a3-4aab-a570-4d331deb7d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d505b011-9be8-45c5-9d81-5a9e105e2cc3",
        "cursor": {
          "ref": "30a569f2-d0d1-4814-944f-c1d65548703e",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "480c032f-c4ed-4f52-8d43-1ad6beff8b4b"
        },
        "item": {
          "id": "d505b011-9be8-45c5-9d81-5a9e105e2cc3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bec8ea7f-98a6-42bd-840b-47f7d0922cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bd1c12-7005-4528-97bd-2c535853bd9d",
        "cursor": {
          "ref": "df2588bb-7c30-4acf-b928-3f9928e9b0ae",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "66d3d758-ba61-46b8-af7c-1f1a3311c6ee"
        },
        "item": {
          "id": "94bd1c12-7005-4528-97bd-2c535853bd9d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e9df279c-43df-4652-bd80-872978e130c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff949f5-46c7-4f2e-ae74-94f1ab024d66",
        "cursor": {
          "ref": "f9bcaba3-38c3-480c-a7a8-028ade2e624a",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "960a50b3-f944-49a4-b5aa-76a403e41323"
        },
        "item": {
          "id": "aff949f5-46c7-4f2e-ae74-94f1ab024d66",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "62ddc03d-894f-4321-8990-21ad77497564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79446fd1-6f58-41d8-97a0-fd296e9fdbfa",
        "cursor": {
          "ref": "3c5abff2-07d9-4ef4-97d3-78cd33d2a5da",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c84e3a88-d33d-4a25-9fcb-c1f94ef661fe"
        },
        "item": {
          "id": "79446fd1-6f58-41d8-97a0-fd296e9fdbfa",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b2e53263-e36c-4053-a877-d6026c9d2026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0b6393-cdb4-483b-b400-a79da4dd24c9",
        "cursor": {
          "ref": "65add086-59d5-4cd8-b27e-1b44285832cf",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "48756507-be22-45c1-a48e-aa599fb79229"
        },
        "item": {
          "id": "8c0b6393-cdb4-483b-b400-a79da4dd24c9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f5e902cb-c539-4d14-bdb5-bcafe1abaa57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92710693-dc81-4fcd-9342-121c4eb321dd",
        "cursor": {
          "ref": "070f0843-2dd9-44e4-b19d-2234e3d82300",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "829e1503-4e49-429b-aac3-eee2040ec500"
        },
        "item": {
          "id": "92710693-dc81-4fcd-9342-121c4eb321dd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c44f7eb9-4d5f-4e6e-b265-c24567277319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60ddf42-d34e-4d12-a182-96c446df7c8d",
        "cursor": {
          "ref": "baa17ec8-fb2b-4781-be2a-20e43d1012a2",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7fc8987e-5214-419d-a1d4-c45c1f2e6c4f"
        },
        "item": {
          "id": "d60ddf42-d34e-4d12-a182-96c446df7c8d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5910dfd5-bb24-4806-98ad-b87c81c6878f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154304fc-406a-4b62-a4be-682409f1835b",
        "cursor": {
          "ref": "d8a57f97-f724-41da-bb9a-6e0902bb0ad5",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9fec14af-ac81-4a6d-9fe8-ab08693aadb2"
        },
        "item": {
          "id": "154304fc-406a-4b62-a4be-682409f1835b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8c57d557-4d16-4e87-bd8e-463c290a36a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e89f44-7795-47bf-a230-2f2d9b004d53",
        "cursor": {
          "ref": "73fabc67-0f9d-47db-b9d5-7c6344fe5cc8",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "761350a7-02ea-431d-afd3-bc8b8a4e627e"
        },
        "item": {
          "id": "c4e89f44-7795-47bf-a230-2f2d9b004d53",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2d86f7c2-9c89-419e-811c-d3881b7f574d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1cb729-1936-4acd-b043-9a620477b319",
        "cursor": {
          "ref": "68021d54-adc0-4c22-b288-31ed84983345",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2836ff25-7b50-45cd-8a37-2817bd939ac4"
        },
        "item": {
          "id": "6d1cb729-1936-4acd-b043-9a620477b319",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bf14ba2b-d82d-462b-8024-fa112071b025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5a0390-9d0f-4e70-8814-baa55b74a950",
        "cursor": {
          "ref": "065cf30e-2610-4d4a-8bfb-4411404f9910",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9731a5fa-3c85-4eb7-b4b9-839c66a107c3"
        },
        "item": {
          "id": "7b5a0390-9d0f-4e70-8814-baa55b74a950",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e13982e6-edaf-46b5-9bd0-716af45c1994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16682405-bdbb-4e06-9e5f-3fe3d0d68250",
        "cursor": {
          "ref": "1d029c2d-a608-41cc-83bd-b4195ad1c8db",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "82b7a8e5-59a2-46b8-ad98-fb2e035f44ad"
        },
        "item": {
          "id": "16682405-bdbb-4e06-9e5f-3fe3d0d68250",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0ac79bd8-cc2a-485f-ba86-43177358b768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86300ce8-337b-40d1-ab4e-12b51c3a634d",
        "cursor": {
          "ref": "e3e58f5f-1f60-4f0a-8f78-584211897a02",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "07f43c70-7b3c-4a7c-bd79-e311f0b4c6c7"
        },
        "item": {
          "id": "86300ce8-337b-40d1-ab4e-12b51c3a634d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "11a7edec-e173-4531-b303-786027bea898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e81854-49d6-4420-8fe9-9e492bcda3a1",
        "cursor": {
          "ref": "04d871a0-a47f-47af-8241-4204b5f9711b",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e68510f1-146c-4461-9567-2e1541679b89"
        },
        "item": {
          "id": "63e81854-49d6-4420-8fe9-9e492bcda3a1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7200cb3f-123e-4a11-8cfc-92c59156d95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba2982d-2ffd-445a-8a84-dc5af0d26756",
        "cursor": {
          "ref": "dc9580f5-d2bb-4098-93fb-bfc5c02ebf96",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fe1b04e4-d68b-4704-9c9c-3eb413970e29"
        },
        "item": {
          "id": "eba2982d-2ffd-445a-8a84-dc5af0d26756",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "04b5e222-8bd2-478d-a509-193eb6dcbab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849c35e4-eeea-4758-92be-1a6e2e8aceb8",
        "cursor": {
          "ref": "932b5515-6f15-45f4-b432-abad5b8490a2",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4300b392-87ca-408e-95b4-298bca0bda0a"
        },
        "item": {
          "id": "849c35e4-eeea-4758-92be-1a6e2e8aceb8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7f01da92-48c3-4113-b376-1eca91c5c284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc286a3c-c518-4dff-82b8-cd3aeb163908",
        "cursor": {
          "ref": "b17414f5-3130-4ba6-b84e-fb3ea698a83c",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2c729cf4-9355-49e4-97ab-32527c046ede"
        },
        "item": {
          "id": "cc286a3c-c518-4dff-82b8-cd3aeb163908",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3fab86a8-3a52-425b-be06-013feda8d4f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e5a64a-d517-4003-9312-950b1c90e8e7",
        "cursor": {
          "ref": "1710430c-8f96-43f5-b8d9-8d343e31c9c6",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5797afae-d874-4074-8f38-8844486e4008"
        },
        "item": {
          "id": "59e5a64a-d517-4003-9312-950b1c90e8e7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a7b7cb81-6efa-4250-9af6-fa8cbe12ca43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a47d6bb-013b-4498-8ee1-0b7214268f43",
        "cursor": {
          "ref": "2532ea1f-0fb5-4ff1-a3e8-df246633363b",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b6258c2f-cf95-499a-8eb8-632944fe2339"
        },
        "item": {
          "id": "8a47d6bb-013b-4498-8ee1-0b7214268f43",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5e9a21c5-da00-461a-aec5-cdfaa697226d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3023fea2-c429-4220-b7ba-bf75abf50b13",
        "cursor": {
          "ref": "6bc6892d-0390-48e1-8b25-3d81d7f85f88",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c7ccb83d-b37a-4024-aefe-04038030766b"
        },
        "item": {
          "id": "3023fea2-c429-4220-b7ba-bf75abf50b13",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2be9ad69-316a-44e0-a4bb-c33120db5083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906b7454-e8ed-4031-838a-9509cd7df413",
        "cursor": {
          "ref": "2b67db42-c330-4d6f-a802-87ff1e4328f6",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a2265755-7bbd-43c2-b589-aa960ba81184"
        },
        "item": {
          "id": "906b7454-e8ed-4031-838a-9509cd7df413",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b7b0bf5f-235a-46bb-b8a4-d17681e324f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c306a6f-71ee-4464-b44b-68e3dbf61125",
        "cursor": {
          "ref": "465c3359-c811-45a9-a77a-c0a0e6955ecc",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "66f5a815-6944-400d-a010-9a0253dd4f1e"
        },
        "item": {
          "id": "2c306a6f-71ee-4464-b44b-68e3dbf61125",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bf1d2b62-cbcd-49a6-92a2-1ab61e6e6b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aeecc28-b955-406f-a26f-70d9cb63b9ee",
        "cursor": {
          "ref": "fd9f6f6c-24b4-494f-af97-485c0a677859",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "209de8e3-36be-4a53-8cd4-b265c7cc3b35"
        },
        "item": {
          "id": "6aeecc28-b955-406f-a26f-70d9cb63b9ee",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "384449d4-acc7-4ebb-956b-6552c4448148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcebc83c-8b96-4395-866a-130f939a66e8",
        "cursor": {
          "ref": "ad5af551-ebf0-4252-adf1-6f4caa940fbb",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2c845645-f7cc-4be9-b27a-9dcada948055"
        },
        "item": {
          "id": "bcebc83c-8b96-4395-866a-130f939a66e8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7ff01023-8397-4250-b08b-4d7d8935f7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e8b89b-f72e-4919-8483-6b43f9803c7f",
        "cursor": {
          "ref": "43f5015c-f192-4a6e-896c-4a1c3d3cce40",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "447eb4a1-9517-4b04-aa25-a4092fa0ea03"
        },
        "item": {
          "id": "e4e8b89b-f72e-4919-8483-6b43f9803c7f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "74f57c66-7652-4796-a2b3-b6e8755eb5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a9afda-4b87-4bc2-9a66-cbe9093294bb",
        "cursor": {
          "ref": "3e026741-f9cd-481d-ab76-9594f22ac8ce",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e3690db2-c541-44ea-82dc-8e4f2eb5841e"
        },
        "item": {
          "id": "92a9afda-4b87-4bc2-9a66-cbe9093294bb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a6b6bffc-b401-4dde-9e1a-bdc8228a98ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8249a547-0aa3-4f62-aca3-b3681545a587",
        "cursor": {
          "ref": "fc47e54c-df4d-4c38-9731-88f13b1c6196",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9262665e-5506-4a1d-a194-82cd4679e5dd"
        },
        "item": {
          "id": "8249a547-0aa3-4f62-aca3-b3681545a587",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "eadb4b19-9804-4255-aa0c-ccdfe465458b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79da17a6-c515-4b51-aebe-de3c480dcce4",
        "cursor": {
          "ref": "eefc9e85-ec08-4998-9d27-743fc02dd9ba",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "23f493f8-1293-4765-be92-338052796b63"
        },
        "item": {
          "id": "79da17a6-c515-4b51-aebe-de3c480dcce4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6652c024-aae6-4d93-83e1-2e5f006edcf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f61ace8-0343-4527-80b5-5c55df01d906",
        "cursor": {
          "ref": "1d6b3f90-cd30-4224-a04d-c9b0ff30413a",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b58664d3-ddbe-4e38-b865-20feb901adbc"
        },
        "item": {
          "id": "8f61ace8-0343-4527-80b5-5c55df01d906",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "996e4762-461d-4414-9b4e-6da6e9c14d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cec5e19-fc72-4616-931b-9d6689c3d7a6",
        "cursor": {
          "ref": "ebdac600-19b8-487b-a7df-e24488ebbe8a",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1ff15db4-9952-4fa1-a28c-ea8fb6c6a030"
        },
        "item": {
          "id": "3cec5e19-fc72-4616-931b-9d6689c3d7a6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "106adafa-3218-41ee-acaa-f30ab5db073c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8728a028-9b5a-48a8-bf70-3b4e374667eb",
        "cursor": {
          "ref": "2c0dabeb-948e-4b4b-9a73-2c09f119cf2e",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3a89c6b2-730a-49b3-be4d-ec34ddb6f99f"
        },
        "item": {
          "id": "8728a028-9b5a-48a8-bf70-3b4e374667eb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b43167d9-c752-4479-881f-946c41d2f9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41cdd35-e247-41bd-a56b-8719c514bc2f",
        "cursor": {
          "ref": "982f3ee8-ba1e-46bb-b470-5de1d054c99c",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "953486da-bdd6-49d9-8bb6-2f8b63c36870"
        },
        "item": {
          "id": "b41cdd35-e247-41bd-a56b-8719c514bc2f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2bab38da-88b0-4074-9aea-88f470427762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86bd7c7-5ea0-4e8b-aeb3-038092e26977",
        "cursor": {
          "ref": "1da347f6-95ab-466c-ad71-a355168b0005",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "06008ebc-4dae-41ab-a7ed-be081dc14da7"
        },
        "item": {
          "id": "e86bd7c7-5ea0-4e8b-aeb3-038092e26977",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c41cd582-acce-4067-a80b-e20cccef7bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f9b7f8-b6d4-4e31-856d-a3aeff81d6d0",
        "cursor": {
          "ref": "4cb9a28f-2d86-4964-b290-cd73d8333bca",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "63358fd1-8b6a-4520-a328-3ccfc7f85e4a"
        },
        "item": {
          "id": "f6f9b7f8-b6d4-4e31-856d-a3aeff81d6d0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8586d2e1-239a-4572-b212-0ae971348bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f776e6ca-61f6-452d-9886-58999c614b0b",
        "cursor": {
          "ref": "9cb8a540-a0b5-45f5-880e-e20525346d4f",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "788a63ea-501c-40dc-b739-62c2c7c6040e"
        },
        "item": {
          "id": "f776e6ca-61f6-452d-9886-58999c614b0b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a8d606d0-6aca-4e2c-89ed-977f0c29f74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619433cb-c48a-49f4-b46d-6433dc594854",
        "cursor": {
          "ref": "896254f7-4446-41fc-8c46-3a327bd1a6b1",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a5500b9a-b059-4949-a0b7-3368d289250e"
        },
        "item": {
          "id": "619433cb-c48a-49f4-b46d-6433dc594854",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0c0b196e-8723-4c31-b4ae-7f8f91a9471a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669a62c8-6acc-49d1-86de-c6ff609a4f84",
        "cursor": {
          "ref": "ba498144-ae81-40bb-abf3-93fa3e590653",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0dbcfba9-e42e-4f30-b81a-f8865f1b380f"
        },
        "item": {
          "id": "669a62c8-6acc-49d1-86de-c6ff609a4f84",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "016bd0b2-0707-4c6b-a7a5-1e8e600a6e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8f83e9-1d88-4544-9936-8709b9998869",
        "cursor": {
          "ref": "7befacc6-2a91-446e-93ab-b99118571dba",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d4d970f4-8c15-4d92-8f75-d720972c6b4d"
        },
        "item": {
          "id": "dc8f83e9-1d88-4544-9936-8709b9998869",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a540ed47-8818-4936-8ebf-2db691ef2a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebc9af8-1686-401c-982f-ba8ebfa75179",
        "cursor": {
          "ref": "ce368cc7-16fd-49f4-9afb-af757fa2280f",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "aa5b3ea9-aa6e-47da-945f-91533589dd89"
        },
        "item": {
          "id": "8ebc9af8-1686-401c-982f-ba8ebfa75179",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "48741252-f13a-444f-9472-c5621a4562b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "034eee68-c1fc-46fc-9a19-92e6720d51c4",
        "cursor": {
          "ref": "eeac2e3c-1975-4ae0-bdf7-112fecbeb934",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ae87f789-5e3b-4db2-962c-6c440a3f37ef"
        },
        "item": {
          "id": "034eee68-c1fc-46fc-9a19-92e6720d51c4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "86563ce3-e381-4497-bd28-e6c49c279041",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b1c790-d758-417d-8060-5496932c85ee",
        "cursor": {
          "ref": "54af7715-7038-4d1b-a9c3-24eb662dd8ca",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c45d8c77-86b8-4297-b4f9-dbd49d8fcb59"
        },
        "item": {
          "id": "12b1c790-d758-417d-8060-5496932c85ee",
          "name": "credentials_verify"
        },
        "response": {
          "id": "20c66ca7-a39a-41e6-902b-17dc8e57ca29",
          "status": "OK",
          "code": 200,
          "responseTime": 1868,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff427e5b-29f2-4bbf-83a5-712fdf3c3f11",
        "cursor": {
          "ref": "712460ac-d2ff-48c8-86f3-337110a2ce01",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "61eb76e7-a24e-4142-8e9c-f8055d19e0a5"
        },
        "item": {
          "id": "ff427e5b-29f2-4bbf-83a5-712fdf3c3f11",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0d4dd7ac-77e2-481a-9579-9e085425a54f",
          "status": "OK",
          "code": 200,
          "responseTime": 2560,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6550e8e2-4737-4326-8f9e-2047bf0c9182",
        "cursor": {
          "ref": "8801387f-7a11-46a5-97c9-9d9cc468e57d",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5868488a-1a4c-4bd1-8eb9-190d0c25fabe"
        },
        "item": {
          "id": "6550e8e2-4737-4326-8f9e-2047bf0c9182",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "18006af7-999b-4c26-9731-5ef9fc876caf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6550e8e2-4737-4326-8f9e-2047bf0c9182",
        "cursor": {
          "ref": "8801387f-7a11-46a5-97c9-9d9cc468e57d",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5868488a-1a4c-4bd1-8eb9-190d0c25fabe"
        },
        "item": {
          "id": "6550e8e2-4737-4326-8f9e-2047bf0c9182",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "18006af7-999b-4c26-9731-5ef9fc876caf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "3583d8b2-a113-47b0-b9dd-f2db7521750a",
        "cursor": {
          "ref": "513f331f-0566-4609-ba03-286d68aea86c",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "af5e411c-d606-4679-aa74-08adae8b74d1"
        },
        "item": {
          "id": "3583d8b2-a113-47b0-b9dd-f2db7521750a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "af5248b8-bf42-456a-a662-539299d36c55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "b273586e-1624-4b4e-a451-bbfb179ef68e",
        "cursor": {
          "ref": "1e81e674-afab-4a58-960b-14c6f41807a4",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c6eb746e-b616-463f-a0f6-7b875fec8136"
        },
        "item": {
          "id": "b273586e-1624-4b4e-a451-bbfb179ef68e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "31b9304a-db1e-4581-b932-cbf08fae3c33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}