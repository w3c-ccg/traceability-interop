{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a63b1982-346b-4733-bf16-b0aa2c73f332",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3761b5ec-9d5e-4a43-bdac-ad22452652d2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "958386e1-b60f-4d64-93c7-6e8ff7eb370d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "24ab053f-2eae-4445-bc6f-815c6611aec5"
                }
              }
            ]
          },
          {
            "id": "fe8a16a4-442c-419f-844a-68867ee2af02",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67ac5748-7b68-4782-9674-77faf7123d6c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b3777405-1293-4a63-92e4-7d19e108458b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c3e9e26a-9c65-4600-8154-71e83aff1b20",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b08c8737-2fbc-439c-a9fe-4fcf2ddb6167",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7b02dc15-6db9-4673-96c5-3d677d7aa690",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "092b918a-27cc-4f92-acb0-a917623cf7d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a74d02d-9cc8-435c-98a0-5a6b59ebb67a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d87dda0b-3c3b-4e08-9525-1a23c26bfd69",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a9c919ed-11ab-4809-b550-c96fbae27d49"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "297a3b77-d9c4-4c9a-af4c-270339db3764",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "88e78ff2-a1f9-4c48-b7a8-72bfab1a62c2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb233d0c-b6bd-44c3-95db-ffcf87155004",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "97a8f8c8-b119-4799-a919-3ac1de906616"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b87ff55-956b-464d-abe0-b5242b59b8df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "413b4753-905d-4275-8c4d-a7b07912ff46"
            }
          }
        ]
      },
      {
        "id": "778e334c-4fa9-478d-b3a2-38b7265a3fa5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c5addb2a-552d-4dd4-95b5-b7015a77c8e5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0cf64fda-6466-434b-b9eb-c705de28f5e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b3930404-b446-4413-8aab-a9d811bc7244",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e015d9-a262-4750-906a-ce0c0d3e6227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "011dede3-70a3-4cd0-9a05-f9c30e32e8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1e5cf4-b470-4085-b25f-bf02bc6d74d3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d686a14-7f8f-4a07-80dc-597c06e0c0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c66b8565-b764-4624-b06f-ff3e86625e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ca3396-7300-49ad-bc45-06acebabaa87",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9186b3a2-0bb4-4962-ad2e-81f43fea84c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f0acf90-45e9-4f84-9828-de7009111b2f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c8d7476e-25b3-4128-b34b-0f7c53a6a702",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14b2f902-28a2-41db-ba3c-501302f5d76c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ecaf1a-6cd1-489f-a53c-e48f1de420f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89b162cb-24e7-4fbc-9453-b4bd6e1355a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377d9b11-4b4f-4cfb-bfa8-9779c7ee2b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71dda73b-ed7d-46c1-bf11-7ba2880806f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8bd082-5a4f-4398-b6f0-e5c2256dadcb",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355c1872-82d8-4f96-aad6-36ca05e8761e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1390d9ce-1767-407c-97ba-2ba0a54fc26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce1ef9c-be7a-49f4-be03-96f3a2a1c7da",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f1746da8-aa8e-4963-919c-64c79d171d2e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c1ab1d6c-3524-4ff0-b9f0-7fc378218853",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f136e17-8b4e-4b0c-9ac0-1a7c58ee08e6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "213b7b2d-0e0a-4d7e-a5dc-35293ad441bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d3a42f60-a155-4c04-9f17-3d9aa80027fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30e4c59c-988f-46e1-8ef5-41fff03e0b4c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6f3f3523-4492-4883-b830-55f26e1a5088"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "180b04df-448f-41f9-bb11-82517f516fc8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9120a96-7b6b-4305-881e-672ee3e2ac6e"
            }
          }
        ]
      },
      {
        "id": "deb417a8-d74d-4c0b-8efe-0686157b55b4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "cbe1d28d-bcaf-4b82-b5a6-2b1c1ce3ae78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3713faf-2eca-4663-9df1-9296321d60bd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7d8ff59b-8f6d-4f9f-a0e0-153dd2d3e845",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79db6dbc-9165-4a8a-9e21-51d19646bd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f96ff8-10f8-4448-a0bd-ace474b25ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba692d2-b6af-43c1-b71e-163d1168a9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54584bdb-9d39-47e3-86ce-84722aecc545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b70abe-bdb1-4d2d-a3b6-9b2c32bf9b4c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1efe72-158f-4039-984b-6bbbad426c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca408bd-61e2-4d1f-bd30-d7bbc91e0367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8595a198-1e08-4473-a0d5-28d37881c77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29560ebd-8ee2-455f-b9ae-107dc2b4f265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c754b7d9-517d-4852-b8f8-28f3282001ca",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bafcb3b-8590-46ca-b0c8-0fa6347286aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b195810-f997-45f4-8277-e0ac7d24cb86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd18d95-3f83-43bb-a3a2-4e8198b36f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41d61b3e-b81c-4100-aa83-df820bc33182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd16486b-0212-42d1-87a7-265e75dfbed0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42cc087-e731-41ab-9ffd-6592155e9907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854abe00-9f29-42a9-b157-e70e509ff64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba40281d-3f3c-4f63-aecb-cc43f774d5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "512920a7-9f17-41fa-b4a7-121755809549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d24954f-c673-4250-8ce8-d6a4517fc4ac",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce8ad91-6bb7-472d-8859-21f255be6d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c1f264-dd95-458a-a911-b8435f64f1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0eb77c2-a16a-4c87-a405-e0caeb79f9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8fc0782-62bf-4493-94bf-80087f4b0529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aab0213-59e0-4c27-b27b-d88ac0e86f19",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85bc9a3-afe6-4dca-962d-223d3c7f5cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d45d4e-5b05-4297-85e3-fafbb456b08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a2b40d-94b6-472a-a91a-2154bbe1a19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1db3949e-e864-40ee-abe7-c296e58fa2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf53840-5c0c-4199-ac4e-ccd9172220b1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a4bb48-ec4e-4286-b214-11e77f53fc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c33849-a037-4fe7-9eae-c3fd3d9223ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a021d8be-66f0-4cce-9013-525ff6e0d6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57b08b1d-c309-4d40-8bbe-91a4359a1dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c88ce3-9630-4a20-bd65-b6e2839b5d76",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc84a3d7-3a05-4069-b99c-3be7708641f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89dc94e0-ebb0-45af-8cf5-9862ce5614fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046a6a2f-9ff6-4951-89aa-ebd8a769bfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e699316-5c8f-4b6e-bfb2-00bf68151d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c124902-3dad-4ea2-bcbd-2242a25fcf4f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4c07ba-f7a1-403f-9bf4-fc5b49d7aa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6826af8a-c980-4a16-8a9f-78fe1e64982e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a202347-d89b-4a01-9cda-4633e3eb6e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9258de1d-02fa-4104-a69f-9e5185d0c074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e604ec-a807-47f3-97d2-a20482fb6fb1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee84b58-917a-4d61-8416-6f2f2b0f404a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a65080a-dbc6-4e93-8908-1ef410b260f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d590445f-1466-4a8b-8eae-eb86501c8175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36a67c89-4ca9-4d61-a98a-53f0abe25a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad48a71e-dcbb-4eee-af5c-99a8ea970a16",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d921177-1bab-4bd3-942d-acf3a6563c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5602213c-51f6-4b2c-a3eb-84f841e498ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60457019-7ef0-475d-91bf-26a9d57d5e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85468590-3c1c-4664-b028-88e3c6d5506b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b212fa-5c57-4fd5-9041-9c07f61bb79d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40361bf-d9fb-4717-b5a8-550e13b94e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aea959e-08ff-4bc0-9aa1-2ed7d0c9c27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e024aa45-3694-4261-9a95-c76828591731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f8418e3-566f-434f-823b-25f5942da417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d728d1-4670-4477-971c-25fac421c58d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a152410-75e6-4524-b912-8aa6b3f19467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6110fd19-b3f7-40df-9d04-aa72984fb249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc45ff3-40f1-406a-bd02-e96c3561ef8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20cfd2ac-aa20-4ca6-8f93-276dbbdabf6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934037f5-4b47-4707-b232-a8dbfda94b4a",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adb2638-cee7-486c-a56a-20d70f76ef51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2253dc03-ee8c-4c27-b7a4-09b635f30be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dc0fe9-885a-4de1-9c3e-3577615b3e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba19b2f4-244a-4f57-94c6-5a23a7165ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c5b420-388c-4f5b-b141-9f817c2db736",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227e6c0a-6dc3-4ce2-8d25-002ef4c35790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5514dec9-7661-4593-a638-b003c8166501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fac9d6-4f39-495f-8151-2185d0c51a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1404052b-f8a7-47f1-b9f2-d695adf9e193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536f8838-da77-4c4d-9e4f-4e30314c6ff7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f3b37c-c916-4711-bc75-4d2bf54bc542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5e4df2-f860-4bf9-826e-c768596ce1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02d74b6-9ac7-4f05-85ee-3b7c69e0e787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e2facae-0744-4395-a0cc-c88e34454afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8301e1ad-0427-4a24-bff9-8fbdf9cd277c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac05123-60eb-4f65-8b90-f8798ab0e788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9627d49-3002-48d4-972d-dd5e01a56bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ca67c8-ac46-4276-8277-ea01e4267bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb243257-5777-43b6-a56d-c1579350945f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e730aa8c-0d99-4138-98a8-82e57fe5d65d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab10c37f-a227-4831-b460-74f1126b7dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202e4a6c-3fa5-4021-a77e-bb1f8a3e7622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de86135-a45d-4968-a779-2ec5ef9cc1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "922aae13-b44b-4ac5-bf7b-11d2c94b473b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bd4079-3c00-4e53-a0b8-db8c13ed806d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7d1002-6059-4d1a-8334-d07c8e23b5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e842852-42ed-4efe-9edc-154986f7da9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acdb6e0-70c1-487e-95a6-fb96648b1bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9d69dae-b97a-48fe-9e31-71602d1e1452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509d7833-94e6-4a41-af6a-df5763450a3e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2772e5-d9e3-4494-86ef-028a47148b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c02416-96a8-4842-9228-42d7dd0f9743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef52bf89-e3f2-43ce-9ff8-2b76c08e7364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "041f5ad6-bd64-4e13-946f-7dbe0fac2c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4eab160-59be-4a3f-ba56-6cb71b697f4c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fad337-a753-446c-9dce-46d31146b1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52380920-0749-4bf0-9339-214313c83b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc43b996-27dc-4223-8bca-26d2e4fff608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4135ce4b-f884-4631-8e27-833b75002e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a147de0a-9ee6-41a2-a66c-32e1eef2532b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d819fe4-cabf-4647-bef9-89332856e447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d924d8d-6abc-4f7e-85c7-1fa59d6b7bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4cca09-8a9e-41bd-98b4-6681dd81ef8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ff3fed-3af2-4aa3-a2d7-a7a983572183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a822fc6-d86c-4ff8-98cf-a4317d32a482",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af4e435-9861-416a-94bd-438704d59dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55012be1-ecfe-47c5-be28-7babf6a8530c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fd4f52-6a19-4875-9099-9e364b2b677b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c2890a9-c35e-4e62-ba57-1a124e137497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4a18ad-efff-47d3-ab98-2e577d515ae8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30ef46b-4cbd-411e-b9c0-1e6c3ff30ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30f6b79-9dba-4f23-955d-8da8bd337fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c228b051-0b12-458b-80cd-39aea3a7204e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b61212d9-d882-4eeb-93db-bc6548d86160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ef6653-03bf-44ef-9bbc-c35dc79d6795",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5dd292-2d99-4afb-8560-2d60dfb8a4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb523fb7-a2b1-467b-bc8f-c53266246068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb2d48a-4952-476c-81b5-e368de535a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e27c27f-6a62-4ee5-a8a5-cefafc804f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78b932a-3c65-4d70-b34a-46e241d85f54",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48276e55-361e-4da4-a5a8-56cde9d8f047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32ab3c3-2c1f-428a-aee4-f79e039749f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1bb80b-52de-44b3-bf0a-38166f7ad16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "76dfa6cc-bb89-4f54-835a-0df5d7914b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5312fd89-186a-49d5-b950-cdf4ddf3f220",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fe7038-6941-487d-9a73-e3ffd28c5588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1efc420-1fbd-4c98-9b25-65d7c897b45d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9f4492-e07d-482d-ab37-e4b7e7cafabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eca884a-a9a7-4063-87b0-2e244c3a634d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37295da0-1152-43e2-91ae-fa182b7dd22e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825b5e47-4d38-4b52-9d85-f09ca76db0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694ce32b-4197-48c8-8300-1602e8cd3fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9f27ad-85ec-4055-839f-3f4951aa5ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b28ef15-5314-4187-9fd6-1da3bbbc5799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7682626b-479d-4f95-9548-ca967a0c471a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959ab40d-f2e7-438f-9111-fb662c60760f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2625b899-0c40-493e-a03f-95a8be3251c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abc0417-d551-4e5c-9933-8d34fd73b9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "29c09697-ecb0-43bf-a295-d00e9dd5a6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7623b6-8d17-427a-8485-48dde79ab44a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aeab433-498d-4e97-bc45-c1a449322a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f126c091-e547-4be9-8056-e2d841b37d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fe0364-c720-4b35-8413-e018ce4c4bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0db890e-66c3-46fe-9a6e-18ff5b204a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3aef549-8162-4a45-ac51-438466724251",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ec5a06-e13b-4a3a-8afb-75036fd42254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c32891a-f587-44a8-b38e-283fdcc6c303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ed2bb4-1538-4ed0-b579-f055d389e111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a0565e-a6c3-4fad-938d-5f5e3b27227b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25da0d73-2c47-4aa3-8eb1-958302a4c2b3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5900c712-0b5c-4b2e-a880-c33ce1953c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591b6809-7dc9-4664-b89c-d3971eb11414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da46c53b-7c97-490c-b9c4-8a96961c9d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e4921f8-3653-4731-8332-1eb8ac5adec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec62b435-09f5-4d33-85a4-a610e66def1f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dacd066-272c-4484-9796-de6ff673d1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279d1717-2526-47ca-9a7b-afda1897f48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffff9e5d-6759-4068-81c4-e5c6f3050374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "16e148c9-d5c7-42a5-b614-004d9c9669f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998d62c5-f2b7-47e8-97c8-0cf123599a20",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7a1039-6f88-4e13-a1c4-a5ceed5aff27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94c7a8c-94f2-4324-acc5-d807cc2bf499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a363c0cd-d59f-44de-87e2-582f8e24b16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d561635-a1ed-41a2-9a84-de8e41e536a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f302f6-a37a-4b73-84e9-35e4facfb62f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1406f3b7-4cb0-4fc4-adb0-a112333b4e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba81213-94eb-4b18-b5a0-af8bcfccb54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caaeb004-3608-4f11-8c7e-97e3e237946c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba70009-897e-47e9-8e1d-f04c011576c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062a769f-f818-4aa7-858c-9be498cbc2dd",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ae4487-273e-4f02-800b-0e9bd6825a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "009b8b96-c560-461f-8c58-037f733f16ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f527034e-041a-44a8-9028-c5cb9c88057f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8be2a4b8-946c-42f7-819c-93e38d7680df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6b4242-1113-42f0-a1d3-e2a49d17c368",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f909264-c34b-40e6-b411-1b3e2e390f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c94141-f419-4507-a7ed-8c6c583f9cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d648d8d-d5c3-4323-b708-b546a0272b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "faef8f8e-2794-4e04-83ff-3306557cf139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2223382f-f610-4fc9-8848-68e4aabd1431",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3340a7d6-adc7-4105-b5e0-ae42f284d9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8014068-3136-4702-9b59-08037a242756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3a4174-f3cc-45f7-a554-59f2e9234d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d41d9957-fb50-4619-bfdd-1495b828f1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d501bfe6-2f27-4180-b379-59d273d82dad",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15af43e5-896e-4f7e-891e-4ca05094e27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a932ef45-645c-4440-951b-559185a6acbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558a1f9d-df0b-481a-93c6-9b2e69cb749b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8269cd-efbb-4761-b4c3-b74dca869b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fd9f81-f625-43e4-98f5-2db008ab77d4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ff24ea-bce3-4be0-aaa5-6fcfa48f04f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7318368-3c3a-4c1b-a013-9210937f8075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4815e6-b073-43f8-8ede-a0fdcfb8a378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "748cfb4a-1645-4147-9215-d5dfbc11afab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91293d1-c07b-4c3e-aed1-d6aa3a790135",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3999c9-01c4-443f-94b7-f30a347ee338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a419d7c9-c9d9-4d3e-9189-b03e50cc2c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479ec87a-be6e-4fc6-ac48-a4b2902031f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b625e3-66ff-489f-9de8-1b9007b3adb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d799fed-0fad-45d3-b9ef-b8ad06694210",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219459ab-77d0-4e91-a489-1a57aa116331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a651a6-61ec-4c78-bfc5-6bd9f5604944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f2bebb-f199-419b-bf97-07f26e2d7605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0be2b1e-df82-4185-afa5-80491e956f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbbdf48-21ad-4ed7-885c-f8401d8b1970",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93da707-347f-4bd4-bcb7-e913d5b5d355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1f371e-e9f0-46de-a1f2-0d965c1368c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34791705-2cdf-42d9-b7ae-3331e8299fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "08e19a96-9cd2-4a7b-aaba-6c6366cd64af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8402884-8a45-46f3-8ca8-81d138c1a9bc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "770f8ee8-3cca-4ec0-8db9-7bf55bf068a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5eab00-cd7e-47d7-af41-3f5adcfd479e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8de1d88-1465-401c-8982-5f8b6c98416f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "82cd2e0f-4a9e-4531-87c3-2ac31ee6d650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b17c69-ff81-4a8d-b9c4-cde91497b4af",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4bdf00-7942-4cd7-909d-7922627cff5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273492c4-c6e8-45b0-959a-3364cde56fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95befb1-0c16-4671-a081-e1ee71cb4c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fed45425-15ab-4216-a6dd-3e8184f3d3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1565efc8-ba60-4a46-9db3-1acd7657fa1a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b1afa3-58fa-4182-96e4-2ce190ee70a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e125d0bf-edbb-4e6c-a054-1a9258d0881f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28b7126-f3f6-4870-819f-65294dc3dfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8ac876-2cb3-4fca-901d-05f128571034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43e4ee9-5a2f-432b-ba07-5c1755a41e6e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c7257-74a5-4056-9f0e-fc095971226e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdba4441-18ac-44b4-8ca7-1474ea59682e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0af7966-3884-4352-8f90-9566466f2cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1feae0f5-866d-4aa2-b0f7-4283b9f7f86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe15af1-bb33-4b58-b30e-e3a9cb719f4c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "591b092e-da32-42ae-a46c-4564a0bf365e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df7798f-217b-4e30-a7dc-40f49a2bee6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111cdb7a-c9f7-497f-b06b-cdd3346a8cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4807daac-9931-4db9-8301-69edfdab8d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb120130-c103-4924-a05b-40b35576e804",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81237a90-8667-4ee7-9d03-846cbce9ac5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c107ee27-7c93-497b-a1b5-736dc75ff9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6e21a1-6ccd-4186-aac0-7eff89cf57e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0d8ce0-2798-4e38-b9c1-2e21b9da36f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928836a2-734b-4256-b235-3351cdb3ee87",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576e888c-f090-42c8-9ea0-e33bab08ebc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2065d43c-ebee-401d-adca-ff20f37114da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54d5d3c-cc26-4632-99f8-008c23b2bb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1cf1f03-949f-4c3c-a9f5-a72f3d649f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39050156-aa40-4eed-8376-0bfde09655ee",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8c23f9-b66c-42c2-bc7e-4beb4218b1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494c45c4-f877-4be4-9274-bed61588b5a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13c47f2-de2f-4758-9930-dd2cdefa1dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af2ab930-5dda-4fd9-a190-aa23f1f60e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d96da9-09a4-414c-b614-d7ad82724977",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b3368e-b923-4f07-8e53-3246b626cca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc4cf5b-cacb-4044-a8fb-a468c0c15d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce97f659-8b4f-49af-b6a1-2e89145a2bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "240a45aa-411f-458f-8778-18c232f17c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec407b7e-f388-4bd3-8f07-47179f2a2bd6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d842f609-42e4-4b36-9e91-9a01dc20dfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40c3f33-f658-41f5-b52c-baf2df8859af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81517348-fea7-44e5-88a0-ad5fd173e88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "15a6b630-aaa9-4202-bdad-e8250e0449ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cd971e-1554-431d-8def-d6f1fc953e94",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff0d3d9-ca07-4f1a-9fba-96f0272fda43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b5531f-72e8-4ba1-8e99-c047c82cf750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54a1a2e-1f1a-465b-a05f-1174b3ea5c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13a79bc2-0e31-4f56-a327-af0bcebefa0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e64d4c-6dff-47af-8d3d-3a317c5df0b9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8023e06-8532-4c38-b8ce-9143f5de80f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f6a569-d7b0-4bc2-a0b1-6e1ed1793ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384a83e5-1582-4919-98c8-ef77d0a861c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4eed17-3398-4827-be90-97026073e79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8214c62a-dd5c-4f83-9225-3927eae5171e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52ede95-d0fa-421c-8c5d-2d92e4174488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ee2922-e8f5-4b18-94ec-f1b946bd0266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1a193a-34df-46db-b2d4-ad86f5f70c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a21f71a6-2cbe-4da0-854a-ca6f07749c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca459aa3-3100-4a99-aced-5e7c8a4059d7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4a85c6-77da-4ad2-bded-508333e82ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d06885-995d-457a-a600-2427b028186e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd37977d-f532-4cf9-9d43-660d63a960ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e507b918-e69f-451c-a76b-d91e6f9fcfff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2490a4-9e02-4f4c-b7fa-40f242b4245c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b869bac6-a27f-4b67-a0f8-19bbc49ef079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8be2f6e-8cfb-49e2-b0ed-5e90560bfa47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324fef8c-26c5-400b-8c9b-6c3f1c2e66c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "85ce2aa9-e7a6-437f-a6f7-8864ca6daa8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a37e76c-8710-413c-a598-b350172ed50b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b73a7e-3893-4742-b32d-23a186a6a989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c7c18a-c85d-413a-bcfe-9be0e15fa787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ea296f-dcf2-4320-8ec1-81a58d192ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6136f21-48b1-42cf-8fd2-bf42b164a0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68ad8bd-793c-4cb2-8820-5ad0b86c0fcd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc488ae-5548-4f23-aba6-952996187bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5a5598-1c3a-43f9-a32f-74ba4f636189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feaf7e71-dd6d-4edf-b15e-5e3ccb06cd37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "19f9c369-e767-49bd-86ed-7f4f0a57a833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babd6086-f2e0-4cf3-83f4-e2da916c2740",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129567a6-b2c8-48ba-b6bd-e0fb288d46ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463aecaf-0997-41dd-9f41-e903e0501e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ac0ad5-50fd-4aee-87fb-2a7afb4a23b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "137e0c83-1479-4dfb-8a29-4baa4325b677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7d1fbd-a1ee-4a21-8832-fc8850db1ba3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b14e942-00dd-4611-b4ad-060e48361f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fddd7aaa-de34-46bc-9dc4-6a2068b880bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab2b4fd-d929-44a6-a6cc-3aea0592d423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "adb0f4f3-2a58-47a4-8ef2-7dd5936d634b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef404fdb-7a2a-4b9b-9717-7574da577f74",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7435be09-639e-4352-a9e0-44d7343a5016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09970e6-63b7-4b29-9088-3b9ec0fb949d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73ceac3-0b9b-44d6-b48d-7ec942fb689f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "70f8c218-24b3-44f8-a208-144ffb36e855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e479c6-9520-4317-93f6-f47c79c8ec3e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0379e428-877c-4783-9396-17e12c8a2afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a06e81e-c172-4f43-8a87-fb45bd0274ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b81fa7-24f3-4b1a-8b08-c7e0b1a26680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e96fd490-1460-4056-9c41-10f8fca558f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7d678c-e63c-41d8-8c6f-09007991c32c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ccedbb-3ac8-44c5-9caf-461b60f502ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0f5cc2-5bb2-4e9b-ac2b-80a5f26f34d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273ad9e6-3fb2-4ea5-b07b-b454cebe8f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "79f1800b-5953-4f49-a727-e80dac0836c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ee07c3-46ed-49b4-8347-8e7d324f2639",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b8ff7f-e39b-486e-80b6-4eb2d1197412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c7fe53-db9e-4e1f-a672-5c5c18923cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e983fd2-184f-489d-9b9f-a2d9f646cd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7de0df68-6457-4250-846b-6bd8f6a01396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739113b2-cc1d-4123-af93-4ef785d33c25",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fff3eb-8a08-49b0-9d1a-809360d8f24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b321c78-b524-4178-b5cf-e920c25e9c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c73fd1-7958-4202-a2d5-3f2a490ed087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84460420-530b-420c-bc46-5ac205f2fea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae46761-8a4f-47c6-9d79-cbdae92149b2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c479c8b6-9c89-44b2-987c-49544db27464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b354c8-cc04-48a3-a8d7-f9794f6e8206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd1d398-4948-41d5-9fd4-4b3c91e98656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0465ae64-84ea-4386-9a74-ae88b7d274a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14eb1c71-2c6f-4b71-9b65-3bf7210def1b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99d31d4-e4fa-48da-9e7a-5d18ba1fa406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc53434d-aff2-4673-b42e-f5bb5b44290d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2c0293-ece5-4f27-a658-bfffe685995e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d96263d5-d050-4f25-9c36-0e76e1cfc33a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7f1312-463f-4d1c-a919-7498b28b9d3f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cf6fe2-0ab1-4078-b632-17b1dd19c9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec2b86a-01c4-4e70-b086-dcf22c681193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eacaca6-39f4-4219-bf47-10dc5e8d595c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3bcb9f-309a-4707-a75a-417e16558c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf6f83b-8a31-424d-b409-9a2fc0e451ba",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff6b144-657e-46cb-a6c3-986adb131dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1d07d8-fce8-44cb-a26f-ec00829c37e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0200de-c4ea-446a-a070-8878eee1d28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "888325b2-3df7-4973-a7ae-c88a48ce8248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b538447-729e-46b5-be7a-9cf3976422e9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c335a75-2ca1-4859-8f01-d9b59ab56d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56aa960-1ddf-452e-8040-79f6990676a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c8b0b1-5b13-41f3-8c33-d76124a3f319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02d1b0f7-3b0a-4bbb-9cc0-88a5cdf2fa0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5f63ad-dbe5-4800-8cd4-688396df5dbc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b9c446-9806-4283-8ab7-26a6170fd058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb807f8-60c9-44a6-b23c-b5cb881d2746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6135a2d0-0579-45b4-8a08-ef4ac9d3509f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fedfa4f9-5c75-426a-a953-2e23edce46fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b0c1c5-b960-478f-837b-3ce38577f038",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2faf90bd-f8df-4656-ac25-dfb43606b269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44768755-fd77-4c63-9a16-db28083407ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cf7c61-380e-45a2-9a3b-95a1b84b4046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d868aa4d-ff90-4432-9a1c-56c6e06ca3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0aa790-e81e-4846-8cce-a98ef6ceef76",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d79db66-5fe3-4b3c-9a4b-b715c4b7cc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b74ab9-0438-4ee3-9203-03ceda526377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334cb18a-9c7b-4a6b-a2f6-4ae1421e3465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a046ee35-41d8-413a-b5b6-7c51a8f5c35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f1e000-5be7-4f74-9290-8f4a0f1fa550",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c77714-04cb-439c-9c0e-34766d5248cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb8f359-5391-48dd-89eb-a3637f95c7f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91de37a5-f6bb-41d5-ad8e-e8189f6ff8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d613194a-1670-4fb3-9bed-88e14d1cae91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5351998f-d091-4531-85c6-400b210f44fc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427c9efc-2f0b-456c-85da-bb00ff3bfdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ee770e-58fd-400d-8019-837d3417a705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0513b324-b620-43de-b41e-d2a46c31d613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "45a96e2a-497f-43b2-8631-46108ae7a17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8d329d-aa0b-49fc-9fb6-78143d52c901",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a749755a-71bf-4069-bb12-9d4be00b2734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eed992e-0c1c-4a65-9c77-f865fd925560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00aed335-3b27-43f3-9634-ac8942d733d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5c56e9-5512-4e4f-86b2-5f87231daa6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a804d62-9267-4640-8791-88e56bd54352",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f500c0-0657-4388-8313-27bb14a4c0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91c7a8a-54c3-4f6f-8942-775ef905a19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42768c48-7f35-4993-b359-457df8306cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e68c81a-7435-4a8f-b7f0-b44d5c642bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb82bc8-3a59-4fcd-9857-d6b44ab21f12",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422f7d65-eb20-4e66-827f-327142ca85b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd4cfc0-9a3c-47e7-b077-e79e78966bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45f6671-5a40-4f5c-8e69-1c99e9f97412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cab21ae1-0db4-4d44-9b54-43d4cc9daede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b75aa1-068f-41aa-8901-aaca885bbe69",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9628aaaf-ffa3-4579-b2c7-938766a70a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6058c48-451b-4dce-9164-bd06483ed129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b81ef97-ee69-4bbd-a892-609ad911f7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c936cb-5de3-4b4a-b81e-95428ff1bbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f001eb-82e9-41ae-a34d-3db8f7df3a1b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc38c1ef-64e4-4866-8fb4-6778369c7a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59031a6f-5ba5-4702-82d9-c47401495981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643e2dc5-99c4-4394-87b9-479b38bd5992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf632861-318d-4520-bee4-d9336704d354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b41e33-bfa1-4eb6-ab68-c5e067d8fb0c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c98e6b-25bc-408f-b226-480025a7cc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b5d237-ed2e-4105-8a8f-f77eb3e74c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af99ffe-b0c3-43ab-82f6-89f75df94ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "827601a4-b965-4c32-a70d-e31a1a66e64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b20f703-2a2a-40ea-9153-74660532488d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa60fc0-b92b-4d76-9070-0e6699ca0019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15005f40-d631-4aaf-9e97-69f5605bbbbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a508852a-5d0c-4ef7-93d6-9c0cbc713d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "798eaa50-5c4c-42f2-a8e6-45fbbf588416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f823494-8352-4070-a878-517ecec27e76",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a9f36b-da0c-47c6-aca8-24c258ef6bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f3d3cf-f00d-4cf4-9bfe-ac959fb3f35f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a72143-2a4e-4302-a170-866e023d4225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa28e26-2809-4611-9a55-a2554fc7aff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9edbb86-54f9-4acf-b35e-a194d23ec338",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "727f63ca-e56e-4b41-a593-198db4c04252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fcda690-214f-42e2-b066-9667c5fc9dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac178fe7-718a-4d74-aff6-c7d2e40c6c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f96c1ca5-15a0-491b-9459-5e46ee701560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49641b20-fdad-41d5-81ad-5d2dd5a0cc77",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec43c043-91b6-4422-87dc-4646defa1406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c67533-f031-4f04-aaa1-1d93d122e0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dffb0f1-b65d-4923-b228-d25937417346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ae887d-5d7b-4c72-9131-6201163fe5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc18c3e-dc03-4740-8dbb-e3ac17e1b8da",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb03699-a95b-4bfc-8efc-ed8d3a2dda3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ccbc90-3dbc-4026-9a9f-4fa78e8acdda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e833dcd4-20e2-4c0d-a652-28230de795a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e064929-b6dd-41bf-a6d0-a35ebcb68457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899e7240-44c8-4a3f-8f0d-9fcc03c8e71d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c738fa-7f61-480e-90fb-4e7b8e2aa89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f698e16-7436-4482-be0d-051def3adc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc72364-8e10-47d9-9e36-ff5439ec5ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2bfe918-8b0d-4188-af2a-85e1e8ad6329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5c0f2f-7d4b-4afa-bc83-bf86b3209a12",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829eed3a-2d60-43db-9c8c-3bbb45c10e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3794d3-7b5d-4311-819f-e2ff15dc3d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc6b7d1-c645-4c6e-af92-e617ee110db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f90e5c2e-a87c-466f-8a43-6fb8d96e3d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbff2f6-f3f5-4ef7-9620-f84b66c44953",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15c51ff-6c5e-41bd-8e7c-cf14eb791c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bbd73e7-ce5a-4178-9475-4c00de2da9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc09e16-6f7c-48e0-a673-1c36bf580a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb27e42d-42cf-4b20-a679-8624d677efa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9aa3b42-1feb-4abb-a351-7edd52451e2e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800db95f-3a49-4bb0-a4c4-34398c44f2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21151c2f-430a-4cc1-863b-65eff800be69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301ae76a-82c1-4e56-a8fa-8eb09ba49ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "49c1b267-2301-442e-ac61-fb257285979d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e940125-708d-46e9-b7fa-8e38d91338bb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9a6acc-8ae5-4d81-b244-fc1ac4b28335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aca90b4-db36-47f0-abd2-6f784c48093e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f404f725-0bdd-4226-aa92-e3b4525137c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e90ec682-efb1-49fc-b59d-0241785f0171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63408d8b-a762-4327-bed1-c8c9ff637c2f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb430b31-1558-4598-9309-36b8d6c609fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "09a70644-80d2-42b7-bd55-26b2c50a98a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe66744f-d25f-47df-87bf-9beedf88ca35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "da7be192-9297-479c-8fe8-0305d90e2e25"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bd13683e-1987-4886-b077-d446bfb929e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8307b58-8fec-41fa-8b04-f456b11bcfff",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3f824b-e5d1-4ea2-8e38-1e024b36b096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cbcc97f-ebba-49b3-9fe0-653e07370441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412d69d8-dd83-428f-9cbf-8edf7b595150",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b9f19fe6-e57a-42a0-a9c3-927032213477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989fa78e-8a9e-443e-b544-910e8c092a43",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd90666-199c-4643-97f6-c089e4042bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca9a610a-5c64-4711-a07c-ca645f2e367c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f88a74-947c-4a2f-a74d-8f297fc8f326",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5e6190b2-f585-42a6-a3e0-49d982aff879"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea02871f-d457-4661-aca2-8523434ee5ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87281368-9904-4ce0-96b4-6949f51e0221"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bf2e57d-a549-4493-baee-9373cf29f51f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ef59512-aed4-42fc-8ab9-becf49459a8e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "28d78ec6-aac7-46f7-b56d-7a424b65b458",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45d38105-4892-471f-9224-ed63dcdf6984"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3bd3a64-3f57-418e-9d6b-e7bc28e499cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95908fb9-abcc-4ee7-8a00-02a3c20abae0"
                }
              }
            ]
          },
          {
            "id": "0aa16cdd-3bd4-402d-b05d-763c5d2eea4a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9927a1f8-af96-410d-82ef-6f662e0d70eb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06035056-8468-44a4-a14c-adbebab2b80a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97a595ba-5f34-4a43-a686-3b8d117bde94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b860b91-a712-42e7-afc8-b73ec50b155c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "25e86b57-8f02-40ea-bc0e-6fe56988e7fa"
                    }
                  }
                ]
              },
              {
                "id": "19ee765e-0d6a-4b20-99e8-87d3a3c898ef",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5dc38b30-c99e-4d67-b863-93a4dfe3a05f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15b62d30-a77d-4b66-a75a-5227d4624aa1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "182ba813-1d2e-4d42-b041-61e5e73c750c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "17769e73-5c72-4e66-a9e7-341dca32710b"
                    }
                  }
                ]
              },
              {
                "id": "2e067e69-476b-4d34-9c4a-320d92398d1d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82af64f7-8a06-4267-ad7f-f1b1997e7e75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2522fe11-590d-499e-9f21-e894dd2b438b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f72a4c7a-21b9-4a24-9ff9-e651660a44c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "016db56b-a8ba-4890-95c1-f547e62d9468"
                    }
                  }
                ]
              },
              {
                "id": "7ea991b7-7115-49e6-8e78-933feb4cf415",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5959966c-c630-46a4-a7e3-ba4b9565b3de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bea7b9b0-4200-4c2a-9ac9-5cb2262f1bcc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d53b0ac3-7937-44e3-8f5e-3b74baf953f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5028ed09-29fc-4362-9599-65466ae0a1be"
                    }
                  }
                ]
              },
              {
                "id": "afdda7bf-3f2e-453a-b200-309415ecf823",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86190d05-5860-446d-84d4-dcca03f2c77a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "29e84975-44be-4a79-b932-310bcd1c1589"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a708641-74e0-416a-b763-684f8297b97d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4da0e51c-f9df-412a-beaa-83d470e697a2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a4ed6fd-5da8-40ad-a381-1aa1d2c00473",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "94d31d12-deda-49e2-b38f-72b664a3d516"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9f6dc134-efee-40c2-b53d-31917c111a04",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73fcaf86-81ae-423d-8943-d8e368b0768e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a79a0d3b-7678-41d6-b570-4a812afef4f5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c8f855d5-9944-4916-b1f0-f4a0c095a634"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0043fea2-31ea-41de-8e11-2e28e63cf8ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4711d168-07ef-40d6-ac6c-08ea3a24af68"
            }
          }
        ]
      },
      {
        "id": "5d03b33f-95f1-4225-9778-63de90c8c9bc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "857d9c36-230f-4392-986f-052dc4a2ced4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a04c57cf-427a-4938-9563-5ec7400db540",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "502d9586-72bf-47d9-b29a-81b00713c839",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29aa2a34-78ec-4a01-9484-34cafd0b2e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd30b25-cde5-4217-b99e-68359900dcf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03a6f21-56b6-4758-9add-d06d06e54469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d45d4788-b0fc-4993-8102-bbe713c41c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac83b2c-7c6d-453b-ab47-cb6c7b39874c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6685a329-fdd6-45ed-aef6-7c9fe9b68a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dacc2447-a9ec-4ba3-8ded-c41dcf19ac41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78712673-2d14-4d92-83ee-9cc71e7c96d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "81e9c322-7e0e-40de-8402-6930a0c00d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4e8fb2-57f5-466a-828f-5affd663ad42",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbf67be-5134-4242-ac04-c0d4a8c5bc3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c602ccb-b1a0-447e-9de8-f69e1c609be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772c497d-bf4b-405c-bb91-ecea23d7a9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45b6e793-6932-4fba-9398-81cb0d2b2720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d78ea8-32ae-4469-bd11-3f83b3d12c2d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34ee11a-1237-4400-b060-71aac667e31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e732ced-e674-4d3d-9b70-898ab1ca3a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd20a743-06f4-492d-9deb-3537c9c91d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4adf78a3-a3a4-4392-8fa6-25e5f9c0b93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85864dd7-cac1-4433-a7a5-9f94fbc8edac",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f34897-31d4-4da7-b6a6-dee0b8209acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ce1dc8-6461-4f8c-bf77-3ffd239ac60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e942279d-4344-4559-8924-7795d431eb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "686af3ad-3323-42c6-a470-15d6996bd1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ed37f6-017c-40fc-a7c5-547567670f66",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8c714a-dc6d-4efd-8d25-817dc360983e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100bab50-e55e-42bc-9856-ba9aac369e2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9a3694-7d94-4bff-972f-2675af3b6779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc5ea7b-fbde-42ee-aa0a-e1a59a8739d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c8932f-322a-4ca5-8fe5-16402c331018",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb929ffc-ce46-43bd-9a2a-8e870c99d45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dfb42e7-b097-43e6-bf98-b0fb65480402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58a9818-ac28-41a1-95b6-fba2655354cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b14206-2337-47b3-9d20-4df516b380c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1112cbe-ec87-4fac-a722-ea9b5855062f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e19b7f-f529-40e8-9467-61551d24df1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545fc940-ccea-459a-a258-fef498d4c77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29c71b8-f7f5-411b-af67-db1ed979a65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48761c57-77d2-4957-9e7a-c192fabd36ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390bed15-7cc2-4a84-86f3-a250bdbceefe",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a0a967-2904-43b1-8395-c999e03d1d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96361743-90cf-4be1-a24a-f30d59fcaaa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace666ac-7f68-4336-b71e-405166539128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d023b0e8-1455-4e39-bf41-62d28550f403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae3d9e8-8367-4a5b-85a3-919d7640a939",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b0a894-1255-4c1d-9872-a27b967b0c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88815524-b488-4da1-9e03-84d878f24cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19235721-4a41-4093-a29b-03577b5811f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f58df31b-41e6-4f93-a9da-b8528eaa83a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec3aa94-038f-4ab4-a0c5-e638673d917a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5b5a70-3ea7-41f1-9784-9377e05b3445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24dbe6d4-f6dc-459b-9bb1-45e995b03e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1186aed1-2352-4373-b12c-8f6267323f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "af954665-1f2c-4209-a32a-d8cb7936e11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28366553-57b8-4924-beca-9aaccafece66",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25266fb4-2a2e-460f-a196-3a34a134863d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be818a1-55c7-47b0-9ad6-d798cdf6b208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453c8ea8-69ce-48a5-aa1d-06b8746509ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ddaae082-4354-402f-aca2-0ff01ee57b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96342206-3253-439a-838c-7d8030e2a88c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a987e10-6980-4230-ace4-312dcb0cd804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d62de3-9b3a-44e9-8c0d-f83480faf255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a96d20-f0c2-4e30-841d-06933afe216a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25a0a0a6-cc4b-4e90-a351-e5e7a6e159a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c14146-8e8d-4bc0-908b-245da9858ceb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d735ce86-579e-4163-852a-0ad55dbe091c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18144103-b8c2-481c-be75-a673dc7a456b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5268bd62-291f-459d-85e1-ce1d1f18e7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb5efbe-fde0-4080-aacd-dea11d84d176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd486c5-0ee5-4ddb-bdcf-d4cdb7c92376",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572b54bc-e1b2-4181-baa1-7c2aff24f27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b7117f-40b5-41d0-836a-01d68c4f968f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3939cf-a49f-4ba8-9cb8-010733db3bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d88a0cc-5625-4009-ae21-f9dcdd0562bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88a3018-4f51-47ed-bedc-f217adc759a2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce35083-283c-4091-8633-84db0adc780c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76eabfdf-7c5e-43a9-9eda-2374e368ed9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a81742-f8a6-4222-aa3c-2a9cd1ed718d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe87988-582b-4053-8083-0693c4e79290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3838d201-6c7f-4bfe-bd10-014d283f2244",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a0b977-db06-4e37-acca-67a993175e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f11ffe-71c1-4034-9b5a-31f8a897cb68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0069d8b0-869e-4bd0-bd8d-b10b1f045cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "25a403b0-3b1f-4639-b913-c30ed6ed8cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5824b001-2e93-4cda-aace-da7c13ea817b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cd13f0-b3c9-4388-8b32-957f8286a32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc03309-3b87-448c-83ce-340bdec44d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d5ff32-3cd4-4a23-9fd8-d93d4c24db96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "faa398e7-b0a7-462c-8137-e7f041ed44b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18833503-0789-4528-a573-160a9ebdfc85",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ded8d5b-4ba7-482c-86ea-91ae1654b6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5fe7f5a-de21-45c8-acea-5d4cbc7ee4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4c16e7-841f-4453-946b-dbeb8418d601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c067fa9a-2506-4121-af82-dcd27c68b5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27727c1d-dc78-4e1b-ace2-83ed22904bda",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03299805-d3ed-4b85-aeff-b4def8bab7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e208e5e-cb70-4b7e-a1fb-08afcc328d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35da950a-dd0c-4e5d-8ee2-731176bdba65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fac4f55d-5856-43db-b3fe-f8e4c643e18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe5e189-39fc-4090-9260-a5da5fa0fb6d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a774f27-491d-468c-9a22-38f69657ac88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef416cb-5caf-4c29-abb6-28dd77f60e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf39213-a7c8-4451-bf28-16d88f5877b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1fb0e81-ab76-4ea8-9e1a-ccc777d7e1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab77263-6e37-4744-9cba-99b9c3f6dfd9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f269ff-f727-4f92-b241-b796116326f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b94545a-e8cc-473f-abea-d54f6bc20988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a9b40d-fd10-4c49-bb4e-543e55aa1eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1a9a92-73b4-43b0-ac52-468a68313298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59850577-f955-40c2-8295-c1dc6933e324",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d4edc9-fe97-40f9-9408-2283ea80a142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e36274-5c4a-4a1d-8af0-0c5f78aefe49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e7d8f5-48a1-4479-8c0c-e9b2c0c7bdb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da215012-2c83-41dd-8a64-b43444356d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e496a1-2f84-41fe-85fc-5cc9cb9b76b0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ff2059-6a04-4133-ab15-7ea2ac09862f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9629b17-6e96-4fcf-9a65-924e91212bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6b3242-1f62-40b7-a0e6-80090f775ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "338dcf5c-d872-421a-9892-f44188eec64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29eb691-3759-42b5-9255-0e8b902cb7b0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f0e10b-a06a-471a-bae2-d2d334cf24d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f53bc1-a263-460f-a4bc-5f6c9be8ab94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e006e1c8-58db-42eb-9de7-622ac1fabf77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5797dcb-edcb-42e7-97c0-7c97b64adc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3000978e-3499-4d20-9a8e-bb1b27876258",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8045a5e-961a-4323-b78e-d3119f3c2c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c757de47-bece-4b71-b3c2-3fe46983f00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc72891-322d-4647-b1dc-428cb7ab5b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a138d7f-1f57-4927-86e5-58afb9865624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa27dbc7-26b8-441c-84bd-5f9ee72f5e72",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d8aecf-4d15-4101-9268-83667eebd680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8722c119-7a9d-4101-832d-fdc088688ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc72041-4f49-4303-a191-0096f1e95783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc2f7a9-0719-4d37-944e-2e5f26c8af06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896cc28c-3274-4d4f-b0d4-170481cf67fe",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de40ae27-cc96-49d5-bbab-8cb972ba558d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc2da2d-5c5a-4091-b5c1-20d26d3861fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0945b6a-318b-40e3-8efb-f7fbc448e30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2183bd-1888-4c74-9c1d-e57fbd2dbc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cb2add-3add-4ee6-8b1b-9d09798aaea5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09753e63-73cb-4816-bb71-aa65b0e71b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93423d37-a342-4bc0-b8a2-a0811990e6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5679e4e4-5eb8-4beb-b16b-89bf113dd17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "204a7d45-40e3-49a5-a2bc-ad8fb1ec8a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2be8cd5-84ca-4903-a5cb-883dbffc7e50",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f756d0bd-1918-4bc6-ac1d-b2996fbd1722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987aabae-b8ea-4ed7-b164-960546d70e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43d6884-b9fe-474c-ba67-557d640cc653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08330981-e267-4de4-a127-d63f77da4131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3f4062-9778-4d58-b60e-fccfd2a3d855",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5532781-22fb-40b6-8633-4249be802b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae93bca-c41b-4743-8050-a3a5ddf66f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd16cb2c-cfc7-4b1a-9d64-df500fbcac41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7565377-e5d5-4912-b869-04026f75dba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80b9250-e340-4670-bb44-7fe00a5801e6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2c6300-b0bc-431d-8a4b-9360a545acc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd95571-d398-4d5e-80ce-803333aaf2c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba23dc6-8e60-49ba-9def-db8ca7c4d25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44c72043-7d40-4c87-81fc-f821a623c18b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "77c2b2e8-c81d-4824-988f-8f85a55f72d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5b886daf-97a8-4418-81d7-a297601c4d52",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d8e39f-1e6c-4b84-a849-5f9fd6740a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f95acc7-139f-47b5-b531-306159e14cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35692b32-9242-4521-b728-48d41916bb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf545718-e748-403b-bcc2-a4ececb8c890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb37cd66-5687-439e-afd6-9bb18e545ea1",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf3e3b0-ab40-475b-a37d-09786614742a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a0f1dacd-2c0a-446b-8110-4d316235b68c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db7d8e5-013d-423c-a808-c2317f966ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cca52ce-def3-4652-8140-c524596b4751"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6561dd5a-dcdd-4ef5-871a-dd992dca32ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dce10171-66a2-4c7f-a2e1-7a7868cf7582"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "79ac6d76-3815-4721-a072-2380934bbfa5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4acbf16e-4c16-415d-88a5-7e85212b1136"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25e89a79-f715-43f3-b6fd-0cc0334ba64b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "de1aa60b-b684-4ae8-a04a-a6a9502521c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "205f90ae-c268-43c0-b6a7-1f774f41d6d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "365f7255-5e02-40cd-8688-39259619920b"
            }
          }
        ]
      },
      {
        "id": "9cdc3725-2d62-4701-8071-a46f2296b4fd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "59bd520f-fc81-4ee0-b698-7025d000df5a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "54011e1c-24ae-47cc-8158-857fa03c648b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "290a26b0-ba67-47a6-8f93-5509900b6908",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcec2aa-35b8-4b7a-bd24-e09e307ae20c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7364b13-d088-43c6-a67c-f142b124a281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4561b373-524f-439d-863f-66abafccafd9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e03fbd-edc7-491c-873d-d3b954b6e12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5327978-1fb2-4988-9843-daf8bbdf96df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b096a5-94f2-4e74-8ed1-48dd80f90800",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e6a512-3498-48e8-8bb0-cbf71469f56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb05756f-bb07-4cc1-b0c1-8d8f16332bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5894aa7c-9046-4181-996c-ff9364a1af20",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0d51e3-9ea1-4f93-a4f8-b2e07f3e80db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6688555d-65ce-49f3-a98c-a72a5e63d9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a140fdb2-7505-4f97-abe8-7e8ad296c625",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bb1cba-a217-4543-b9f1-2977ed884068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71f82c8-9f7d-4884-9254-2b8bce5a0bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef53454b-3aac-4e13-8f7a-adb8607875bd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d11548b-60ea-41a9-8483-800cd6f669a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00a279d-8108-4da3-8dd5-2ef9e9cd172d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48ec7fb-aa44-44e5-9955-8ca63632690b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf545d33-a4dc-42aa-b99b-0e1d7cc61821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f31254b-b6e6-4d39-bcb2-8724d6fcef36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14d4a8c-434c-4f00-9204-9d0c6da20d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82157e69-3219-427e-b7b6-9112536486c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b14dd3e-bd24-46a1-9b74-a1b26cad12dc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89147314-6f5f-4a23-844e-ed1a4b4f7a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4575682b-1c5c-4ecb-a7fc-196fc108d3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f0b3a7-aee5-4ba2-80bb-3341a5d31408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6069763-41d3-458b-bd59-2576b6fe3538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fdfd5d-acb2-4ac9-bddb-e2761a96efae",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe65ec2-8dfb-4f05-98e8-4745641667f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee1da4ad-46eb-4268-ae1a-7f040e6e458d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9bc2d7-a60a-4453-ba69-f7c22579c1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c515edcd-bbfb-4199-a34b-c18640015704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c413ae71-e0b2-44a2-81ff-ce706a9f9877",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ef5bcc-c151-484a-90b5-02a26793219c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7c4ffc0-176e-4449-a764-b4fbe252e295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "751ca949-59ef-4854-8b66-5057eb2d2da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87af3985-3086-4cfe-9c19-9a9d904eca85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5865d854-cb50-445c-98da-14d363bebc42",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95e4436-e45d-4055-95b4-482d0378fc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b6f6c4b-fe11-4952-8e21-8c2f72206440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bf229b-5a00-4f55-a139-6f6b991fbd18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac03bc53-a5ca-4eb5-9ff4-120e903ddfd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e5ce5b-ad8b-47d5-8be5-cffc69cf60a0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8484cbbd-8875-47f3-b963-8b0159ae853a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae3d311-1bda-4f71-997e-926097a6f74e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a232fa-6dbb-4f01-a59c-2e3160f37d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563e9672-6922-469b-b212-8b1a7db28e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9da14f-ace8-415a-9fce-32ca616de94f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdeeb1b-0675-48dc-b9dc-a3716d4d8027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeb76d97-660e-49fd-b4d0-e5c6d28f4f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bf2a6f-46aa-4475-8578-0569ab874909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bcf961d-e5cb-4cd6-9ecd-cdeacac98b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6e1184-7338-4c68-9916-8bfcb461d96d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33df4ad5-59b7-4d81-a9c9-adab1ca2cb52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71fedd2a-716a-4672-ba28-7f954464106d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a063ea2-b642-4a64-afaf-cfd444e709e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8858558-2ef4-4411-9778-496980ac9561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d282afb-3dfc-4150-a526-5708a1bfc99f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84481141-9867-4b5a-b875-50c32cc8740f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56571157-34ae-42e3-9443-5e5e5d627a93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4c9fb5-fc51-43c1-b383-aec403247f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0287d3-8e02-4683-a15c-24310d409c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e15f5cb-7a35-4007-b948-aa64df73e626",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347f9e6a-e90f-4b4e-892f-0d464cb8edee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d7bb9ac-323b-488b-9332-798d8b44fb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b45658-f1c6-4aa9-9ee2-80db67220423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee8a53f-a0dd-4ae4-a699-b481fcd9c2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff200910-e937-4573-b97b-7cc8fcf8ccea",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4d32ff-b0b8-4858-9584-55d382f9d687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c0ed42-4a2d-4c4f-852e-1dd3f4648e59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c542c92-3467-499e-b42b-abcc9402f3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcbd7ca3-2e6e-4d2e-b22d-1595647c4f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74737664-f226-4496-bdf3-f74b1d68739d",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1edafd-e0ff-4642-9e54-4958f39cce29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2639870-3d57-45a1-a8eb-5aefcef9b6a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6fb7fc-577a-40b8-be48-3f71b62572a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce40a05-9da8-4dc6-aa81-c6282c38fdc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71634984-84de-43e8-b822-fa63d8ccbbc8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c8f9d9-d985-4d93-bb61-0a49251bc5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a01673-cb86-46b9-b5a1-3ed6f7cda1c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c2bbfd-5d01-4b41-8652-a519bf069a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba2fad6-6c1a-4d7c-b47e-a9c01ac148af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82649800-2d56-472e-81c2-dcabb778e425",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c7aed2-5aaa-460c-8cef-c3592a1cb659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99122d2-0258-4803-8659-6665fea1b847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d28c5d6-55ef-47d0-83f5-0b459b3619fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b0bdb2-c994-4c04-9d57-5351e4618f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8cf1d05-8e97-4419-bf69-a836bbbb31a1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ec8ed5-9e23-4c72-9178-f20321b19129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d535cf-704a-4b1e-b1dd-99155a89b885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78c085e-8284-41af-aee3-68e7df490373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede2cf1b-c99d-4b7f-ac10-6b6586373f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63dbecdd-dcc9-440b-a550-dabefe63f6c6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d552cb-3d89-4eeb-820b-b5d783d4a653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69dcc816-0164-48a7-96d1-1a3b536a6315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7f074d-aa5e-4d9a-b278-f7c4580b60d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2781cf-7d29-446f-9b56-e3fded209a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9f8cc8-f859-4c41-90d1-0dfbb2270c8a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660ccadf-fbde-47ce-8670-769c6b4ac13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf8901c-5d1a-4b65-991c-7b48b8d51eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b51a769-287e-4084-9e79-3bb4d5b5875d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403be447-429f-4245-8362-a4dba7c0b86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f818a650-293a-4fe4-85ed-36fdd8a96e58",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559d0acd-98f3-43dd-b58a-3eff18866ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38a9336-51eb-4597-be20-e62e1cd4ca4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cda8501-0d17-454d-9628-7f2d63f88039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caef3b97-8042-4ac8-aee8-cee9fe78c515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d2cfff-671b-4cde-a50c-e2fe1b48f9af",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fefe6c5-95b6-4326-a6fe-85809efdf444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548a434f-a334-4a20-9b9d-0cc963c09910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04a951d-ccaa-40df-a8c0-f49849b8e159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f5e898-23fb-452d-a932-697bc201ddac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3b3d92-47b2-44c6-923d-2640ad04190e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e71bc1c-f00a-4ff9-8489-853d0b770b6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6098f6a-112f-4d6b-941a-aef811766deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea34d22-015c-4eda-81a1-85cb9d643bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763b89d0-343e-4b00-b093-7e2ff3c948ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccd956b-3e61-4c13-a37a-38b9b169968f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e17a60-a005-450a-9904-2ecc24a2aa3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30339176-429d-4513-855a-a66da2fe5fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f817727e-2dda-4adf-84ca-9cdff16f76d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a298dde7-927c-4c49-8d7d-057de367988a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fb7397-3483-4ca4-8981-655ddc9ab205",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91efe0c-f842-486d-b706-dbddf2480f4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7afd084b-59c9-43a3-a196-358557d98505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63fcab4-c28f-40d9-a79a-c947a6f995d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565edfd8-1889-4de0-a6ea-673677419a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46329461-00d9-4bdc-9b05-6809aacf3ae5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a4ab55-f8da-4429-b7ff-c0df8a884364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c40cb25-8722-4659-821d-4c3e7a3f6060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fae2038-df51-4af7-8445-b574466c3386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdda5d56-ebc9-45dd-8cb0-b1d566cefcc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3eea7c-944f-4563-9856-2996b99aa4b7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c621fd23-256f-4f5f-8652-b7a55ca09905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e36a13f8-dea1-4f95-98be-ff7791eb86a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68da03a1-279e-41c5-9b35-e6a37a25022a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d528bd-549a-4b9f-b9fe-9b5fbe7ac52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ffbb0f-26e7-4d56-8a0e-9571558c0e20",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ad8afb-65cc-4970-a965-352ffb8546df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9352199d-2f09-4fc0-a2a7-b0326d2efd66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2734f59a-fe65-4976-8cd2-aaa42ed17e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a09cf4b-56b3-44a2-a8c0-fc54ddf032f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f9e50d-c7b4-46f6-8e0a-272295bb1142",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad14278-1ff7-4ad5-aba2-7278d458681b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "725be65c-b73c-4a5c-8c3f-609fee56c3e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95824761-d7e1-43e4-aebc-00628b3723e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99684591-3a27-4713-b7b4-3fbd70c5d1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e38a9e9-a0ed-4acd-8454-ca4422b38868",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc011b3a-a641-4dd6-b565-a1857dad6141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2337090d-4b99-438e-af34-c94093947c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "660d9e0c-8618-48b0-a3a5-7266f98aa424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70444a23-d4ff-4a83-9d87-825a00523990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcdb004-e94d-44da-8e01-4377252d992f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58eb1d20-c7c1-49de-acc5-b1654a5dc798",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff08bc8b-d446-478e-80f3-7310ab47d0c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6735fd-5203-438e-b586-83dde9c638c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b034dd-6652-452f-8ce7-5ac7a059e536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1b6797-a1ac-402d-a7a9-025b14a5e336",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd1f781-a6c6-4e23-8528-0a114a42d357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1858f09-31ff-4771-bc7b-a8f2e6b44092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336aac2e-cc80-4824-bee0-93d7bbbf79d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6ac752-b8aa-4ecb-a4f6-ed383bd0acd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32109ea8-305a-40f9-a5be-83284e71b2d8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba5bf17-7287-4788-a34a-0d8611249b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee64254a-4dff-41a0-bb00-528cc6ba3e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf50144c-4e70-4f47-b8f3-2843e8d21b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c5fe80f-82c8-4f0d-813e-af8c737eab46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f9420a-2c2a-4c06-aed3-6efb1c90b948",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b24fe3-5fde-488e-9148-dd096f49cbd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb1b902-e2ae-4c2a-a9b0-d61561bddd40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e373ac-1e9c-4274-aed2-23652a605ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde934ca-0ee2-41f3-bf90-f082b38d4ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30028f3-d276-49aa-b1c9-addb99416e34",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bec6eb3-a49c-4b6a-a65d-d9b40cfd95a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf552a8-5b45-4b38-b518-721e86135729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f7b104-4f71-49b3-bef6-7b2407b9744c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71d0a51-dba7-4c15-b695-d22d46f33343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f0d2e0-e293-41f2-a36a-bef276acc92e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781b3f52-1923-4bfb-a885-76d54b0f643a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b19c254-de3a-4dd3-8908-99446ebef104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "579cbb1b-4e57-4c02-ae2c-a4174f026a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a28ba9-f144-43ca-9213-3532435fc1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b62c7a-497e-4e74-89e0-9a332ba5dfa4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828a788c-3de9-4cff-8bd1-63465c1213ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a326b401-bfa9-482a-9508-1601ac1effe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afc08b8-8b80-41eb-a09e-540566c29661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fcda0d6-e5d6-455c-af01-a7d5defc2375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a1c876-a264-4f78-9715-b1010c17ea13",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e12f6a0-c749-4e21-97fc-7b28bc0d21a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc400f89-0073-412e-ae1d-a9babe95416a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e76fe3-1fce-4b36-9d6d-258305a74813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f460d897-ba05-4736-a511-c915ae9c252e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf58a710-7bc6-4d08-a17c-920b987b698c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca14e48-f16b-4446-b29f-48bf218fafdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efdbc265-5d27-4d58-980c-2af4323124b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03712f26-0ed1-4e95-b5b6-683c0b5c3fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e614b17f-824c-4558-aa1c-39c33cf9153c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc082af3-987f-4994-bcda-af90732c4e51",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc149b9f-a511-4c5a-bd86-c3cdeb4a791a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dddd62a-9a7d-475b-a964-8d8e8cc4f272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f279287-5435-40fd-883e-c00fd53b6d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe460f31-17fe-4f37-baae-75ba8ddfc124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b556d6e1-b756-47a0-ba15-9bfec4764df6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9cae73-9328-4abf-b2ce-f35162716fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dead1201-8984-4b68-887c-ed104a70c6b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab432a34-0d8e-4708-9079-9b95938fc094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f2ac8f-476c-4023-8ce6-e5b8ec31d8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fa4966-fd1a-4c18-aef3-b8a921959cd2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb2868f-cde8-4030-ae25-47cfbb3c63e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f50ec27-c3f4-4c5a-bee9-44a77bd08764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea551f0b-3895-48f9-8e74-848fec91b753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f8f688-03cd-47dd-a4bf-f2b126ea6d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e3b54b-3581-47b3-a845-88e386c84673",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898c6578-6f20-4d81-a317-d7923378cfca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab68726-0b5b-43c3-99f5-5d77545420db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03eb4945-5cd2-45ad-8fda-b7bd95e6d932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884cd2a2-e753-4e25-9f21-fa129a069f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73851b4-74bc-4c6d-abca-5b1735ba95f4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32821a9-6536-416e-8b1c-b633c940c85a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0871611-a5d8-4dde-ab16-5031433ec9db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c860386f-f581-4839-ab86-7d6dcd22c8bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2de95c8-7533-4de8-941e-eb06aabe20df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e555778-d7b6-42f0-82c9-88a2074d9b6f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c750b8b-a49f-4e34-b216-c367631fc0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03398d2e-cfec-4c6c-a4b7-aa7bd904b39d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61785e7-b5ac-492e-b7ee-97ba2fb88cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bddb86c-a83f-4033-856b-84a264432d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53414c2-391e-45d1-8094-5610593970b3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf163f37-3ffe-4abc-b763-8dd4185ae7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455e4045-e210-4528-9bc2-70cf02bd8b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2809a5fa-a03e-442c-a5bb-edfadd30abff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348012c9-bb4b-4121-ae23-0a5131ef3f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6d8459-fbdb-4c30-a5f3-2ba42a8a5fec",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f223d9e-9217-43bf-b641-5e746571f456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e6c5a3-1904-490a-823e-af7a03e36c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2a9b48-fe26-42e9-bdc2-12a51d58b865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9dbca93-8d1a-49f7-8854-76249dad8960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1443fd94-7610-4ee5-a57b-5e7b72dd5492",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a22a5f9-5aeb-435c-a971-4813a4b6c625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95adedb7-3ddc-4aa0-b0f4-6c163a36d787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13f2420-13d1-4849-b41f-80343bac9180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b3792f-068a-4428-9328-8330cdb897cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761e9670-959c-4de5-846b-f6a029469e16",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb26feb-3ddd-49e1-b0d8-21553c82e2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b50e0f-bc7a-4dfa-a41a-5ddda8137d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31dbd0d-c69e-4679-8230-586aaec95ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae25ed1-06e8-4d62-ac25-bcb292aee018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b37f896-5389-41b7-b5c7-5961e6e53131",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5ea76f-7aa8-4f4c-9772-0b6178196114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea307b60-d191-4fd5-aa16-4dbbd0c1e968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16e29ab-6ed1-4fe8-82de-4e86ac5bbdda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1739ec6-7385-4c0a-b347-a96164896141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad3ed77-b26c-4fb6-ab42-3e6a92f38f9e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebb7740-6397-4154-90a5-a32c4b4e1436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a1783c-91a9-49b3-88d3-ec4f0ed04359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297f7904-be3b-48c4-869c-7beeb90fe49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbd4f8b-5aec-40cd-92f5-941f2f958b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e72849-945c-4250-88f5-398a68e7c4ca",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0708cb70-d5b2-4f4e-b89d-1b6f8a972b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4ab895-0b34-4de9-b2dc-fa046c932583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac51d10f-4f17-4446-a0e2-7c10f3d8e15f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "561fad08-ed02-4dbd-b55c-114b469ab4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e655d518-f043-4dd1-b2fd-3690c5928380",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a5d1f2-a0e8-4441-bc40-4d0ff77b0d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df9bca4-bb0a-418d-9770-fa909fef1e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca3ec7d-6f24-48c3-ae0e-80a7998a5de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f44a66-803d-47c9-8440-fcd1e48ad0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa22408-c6b6-4d61-b83c-eaf842a5cb55",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1f13a8-7364-48b1-af37-e85c1d8517a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dc3b16c-2ed8-428d-a478-24e5edfa2356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1de2a86-c989-4b79-a4fc-cb34e7e428ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4a6600-35c5-47b0-b59b-73c24769301f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d223a64-275c-4d94-8113-428f0f1a2dde",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8474c66b-f1e0-4a8d-bf5b-64ae59552667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba10261-85a8-46b1-9c57-9073f972a6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8da7c5-2b64-4717-a956-d30f670414c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aadf0a0-bc26-4b16-8dd8-8078e0c45f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68432df-f204-4fe1-acc4-4b437b5a3b83",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8f2f91-65cc-4999-ae32-8e535db83cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e3fa7c-7b06-47d2-b38a-33e83e9f7bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a890056-ff33-4082-bb2c-26bf4e7b083c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b0d30a-84f9-42a6-b79b-ae61a5a8ad65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849a3ebe-256b-4100-988a-f379f819d317",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef31339f-208b-45d0-be6f-36838a648d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f19109a-c93e-4958-bfbb-83e8923e8b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f87ac22-175d-4013-834b-8fe7e69178e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0e4453-5e59-4848-81b1-5e20baa9fdb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9204024-0ac1-4e0b-81a6-27f8c59c824e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc96e1a-679e-4ee2-8b36-aed1d044b239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e10ce3f6-7860-431a-aca5-b9e64a2d8d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83015d0c-7040-4241-930f-859e56fcca13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06b23c5-de5e-4891-b143-633d0924f54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f353dd-8f79-4fcd-8f79-9b3412fcc010",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b95f09-6abe-4588-bd61-a67d8ce2d25a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4299b1-566b-41d6-868a-7b9817ab96b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b237289b-fb10-425a-9dc4-b81a378cba36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5fdf2b-1b17-4faf-b6f7-fe36f044bf23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe7cddb-1ae6-491f-a361-456ec80ad7da",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93af64dc-4077-4e70-8a8b-2314c3e585f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd177242-857a-4dc6-8683-6a2dcf343fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3d3bf7-7e29-40bc-a493-c7077dd4e033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4219ca89-e296-43bc-8b37-91fb62870764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32e1729-f22c-4e81-b55f-d9c0ea718fbf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa953fa-9fda-43b7-ad6b-7b6376c79721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "654f7724-b83b-4121-a1cf-7ce7b2ad9c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf83cef9-ef78-4a5f-b692-94871e31ec01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "732c5517-56fc-4f17-87b5-673772837766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9108aa68-be78-4727-a2c0-8352c5b65e9b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c85b62-6750-4245-b0a4-832b881dae33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4103e43a-8576-4b8a-b006-80bf24635771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97741fa6-e193-440f-9a5c-3edca355e73e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aafb5cd3-c9b3-45e8-842a-f26973852a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8045a7-729b-47c9-a700-f0b81fb98414",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fc52e2-8570-439e-9c95-f1102099a40c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "867f96a3-f2b0-4885-ae3e-ee1bcd28dd82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ce0c92-81f8-4ecd-bcc3-f20bf476e490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4493d7d0-daf5-4165-aa05-a661ed1fb068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c23651b-794a-44ad-a430-bd9c638e1244",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e721cd-71a4-468c-9e35-ce9dbf12683d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c701dd39-cac9-49e9-9ae1-cdff47b6087e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08565d18-49a9-40df-9b2d-2e94dae084cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27123405-89c3-4e25-a36c-06221afe872c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7210b5a8-e693-4c19-96c3-5a07e1ed8f98",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972af94c-a1d2-4055-a165-dd7aa55b65c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c08152-8d1a-4c83-bdfa-d87bdd05a54f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd0df60-f9fe-49b3-a00b-f6b1b2bc4f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28181db-7483-483e-bbb5-cb716812bfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15f8a30-84c4-4839-af71-a9d499c16ce2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491df968-69d6-41f2-914f-8ba7477d610b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af193bd-acb4-446b-844d-7604b2553beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9501907-01a3-4421-bb1d-2f64584d6625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9717226b-c915-48cb-b22b-9c1daab640a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50387b84-70ae-4f6f-bc6b-4c0af8cdb1b4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0492469-a048-46cf-8a8a-afedb77efe6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a0ea5c2-4d5f-4f9d-9cc0-c1e8b574bb4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c806a5b-2724-4655-9d48-9c11ea21ae25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d21a94-f8ec-4f73-9c06-9abf0f0fe018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e357298f-27c7-4c87-8abb-abb0d377f972",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e01e89d-9618-4212-9cea-17eeee781c10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22a65b35-4673-437d-9798-0e11368b8678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c891e1d-a9ce-47bb-b28f-f1ec5978f668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b85d0303-3ac1-4946-be2a-8684ac8d5bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecedae1-14ca-4a18-9d06-7b602bcfbfba",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36219ca-6b2d-4a0d-847e-cf41da2706f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27bf4b73-f48a-4c45-af06-857f8f8fbc49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be75bb9f-a43d-4fde-bc43-09bb15697470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae14dd8-18eb-426d-a3fc-38b82c304116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a25200a-2a54-48bd-9a04-4e7a0e51a5cf",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e762c2-b100-4012-91a6-59c5b251ac73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28628956-1b41-42d4-bc67-c7b5d8785513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "062877e3-6156-45f5-9dd2-d704a9d70dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b8db3b-a9db-4d8f-8e1d-3bcd5a5cd4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c8e48e-56c3-493b-93af-64be68a47e28",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b43c02b-9a82-4f85-81ff-66368228fc5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbc06e88-ce21-46f4-8d2d-c3d55b5b37d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb96470-b233-46bf-a74f-a9bd15671f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdfb42e0-215c-42cf-a568-c5e852783088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea6cd21-f9c8-4166-ba3a-284b27446474",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f49988-ade0-4ae1-addd-7787f765a356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be04e0d5-7d43-48a6-938b-38f8c21692d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b983bd-ccc0-44b1-9b8a-61951d366e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590b6a08-ac19-47d5-beb1-dba1268d0516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07215f71-4695-4c4f-bd25-52dddb39b93b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2f5dd5-3193-4f40-87a8-65f438b9e019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12093b08-100a-4f15-97ea-2e9ad63c7086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b9ba1c-9462-4443-9b0a-8cc7055981b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40e6d27-25e7-4b3e-b22d-faacf575c080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab76398-ffed-414c-b636-340c78c2480d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4be72f-958e-4102-a97a-dc8af591b164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5191f73-698b-42a4-9611-45925f9afdf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b493e5-bb74-4fb2-8503-409de43faed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b3e5be-64f4-45dc-969b-ba70af335b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513dc518-21c5-4d79-b810-f3616920a564",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe65514-0df2-49d0-a7d9-52c665782223",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96644e43-6eff-4755-98a7-75c4cd0a8831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afe931b-401a-455f-a46e-62b82ec10c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c543f8-d4bb-4767-9de1-84f09f538d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507bdf9f-5403-458b-8908-f90d7edde1fe",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad8a9ea-3f76-4298-9974-57086c45695f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "194e731a-dd87-4cf2-b955-185367bfc4c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68c9570-1bb1-4ff5-a7d4-aa98fa3975ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ad3e8b-8bd1-414b-8611-e129d0ad6dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651f7995-d397-4ddd-ab3f-b9bdd76e45de",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2d7beb-dc4b-4573-9aad-52c895c1ff23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8f5be7b-a255-4751-bea1-3e5ddac06dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bf7e06-0579-4fa5-9e64-6fe62dad58df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08c7482-cdb3-47d4-a6bf-e8f77c934827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded757b7-0222-4a62-9c0a-ec580854852b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76ad82d-e0c2-4f69-ba97-9451999dfb26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cba8b986-75f6-4823-b094-3a6c5364cd06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "536e782b-b7a0-4278-adee-df0f4ffd1481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f67004-72e4-4d3f-bd3b-e46fabdda728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73777006-0a7a-4b66-8b6d-4caa13246176",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80be4e0e-e979-498a-a9d2-c117179bf001",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d9f931-c3ed-4b02-b736-9f3b253c978f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e119e867-f0ea-4fdd-897b-3e214dcfbb6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763a8058-b493-410a-9a0f-9b924ccd4237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4815f38-e313-48d7-ade8-13c0ae88a6aa",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27580d08-15c0-4cfb-a398-bd953f14579b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5fca8aa-f913-4c7a-9e8a-52e4c976c013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4fa095-3838-4538-8cc8-4962db3f7830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "479763aa-7770-4d8e-8e34-0599780f57ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9dc76a-2a96-40ec-94e5-af11710e9c98",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c482cb87-2b7d-422f-8790-26ce4c34c80f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b163b3b-d284-4d8a-a596-0537d11b9284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "677aea3f-3798-4ede-9b9a-c35615107a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe862ec-9101-432b-a66e-74e15cc55c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1042662b-b104-4f93-bc63-b68cda5a55ac",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db15ba0f-536d-44af-97c7-f43780da9ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4d20856-9ce7-44fd-8628-699ad1ae833f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d92aac-4bf1-4be4-a714-a58efcf2ab09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53478d23-d894-4b19-986e-62e7793f310c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a196b082-3636-40b9-a10e-0ab94c502963",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2feea559-c25c-43d7-82ac-885917d74bb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bce70d1-ee7e-443a-ae86-11a451fcfb27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f52a91-e8b4-4fb6-b207-65db3849178d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfb835d-1dc3-4aeb-a832-11853d88dcae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145000b0-ad8e-46f7-88aa-88eb953dccda",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e800bee1-4cee-47bd-bb03-41aa8f6d23fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1c0d327-e90c-421c-b976-7a280eac5a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6176c86c-0105-4851-9386-a652f402cb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc27936a-330c-4c5e-8200-cd23bcfea7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b8d946-b03b-4a73-a2c6-1191f6f7bce0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e7e789-5a0e-4761-b71f-9e9a7b1ddd44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb93769f-9594-40d3-b4fc-5feb8b62dcc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "482cb46c-0d13-42ee-b3eb-f6f20af4a3c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8dbf7f-a0a3-431b-a1ea-e3a034d8cfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2e0955-a207-4a34-acee-af0c05d5d1e0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d608db9-2d7c-449f-8f40-fa13c6cf4d73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66532c69-7522-4a3c-8cdf-e8ded8587534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9721b2-557a-4f05-a421-2994323ec8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6081aa66-a68d-48d0-96cf-db87148240d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7520dea2-6085-48d1-b5b6-34728b7be89e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6866092-ee3e-4a21-a1f1-a84c33f0271f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ff0a03b-1d73-46bd-bc6d-9229407fdb82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e3dde0-4074-40e7-9229-0f325ae6b2ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca9d893-8fad-40f6-b960-b93e916fb2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af49ee5c-24c1-4978-bfc6-02670727252d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f971af26-13bb-4aab-8999-64d2a22ea69f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2af85f02-066d-4bbc-bc06-e2b1acf8677e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1c9c78-bde6-45dd-8f1e-0bd6f1101147",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4388098e-8e4a-43c9-b11e-cc309918d5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b210208-cbe1-4c73-8801-9668aaeacdd2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69be13b7-4a41-4369-bf2c-849b282ceab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ea372d5-9d78-47c5-aa23-1f7ad3876648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6d409f-00b4-4110-94de-1236c3ae76f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a313eab1-14c4-4277-860e-0013ce72bff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db68681b-c6c5-47c1-8688-d7a76e2cc225",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b813ee-9442-4948-b150-6c4ad5022169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15a52e4e-0a70-4a7c-928d-6b882cd9f329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d051d7-4a1c-44fa-82dd-90cdd6f9fa94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d52fdb-a341-4437-9fa3-18939d0a5568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee6d705-ed6a-4dd5-a3b7-35adffad5281",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1b41ba-bac4-4d14-8380-f9ede3f788ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f50c274-bced-49dd-a64f-fcf54e61682e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13738dd2-60b6-4d14-99f0-2446d5c89b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b14125-e98a-45a9-ae37-557601b219f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23cec04-3bee-475e-a0d2-109b76f90060",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce6c47b-5124-4832-894a-908be8978f06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b08468de-c30e-4875-af40-49c97b3b125b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348ffcbe-58bf-41c0-afdb-012139286bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd7e7f21-e7d7-4245-bd7c-e781ef17a0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16396487-0222-4b32-9849-2af78959a535",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3ead15-a27c-4db4-9249-32077701466f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4079576e-b428-4a02-af85-c3f21ba9738b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b59841-1a81-40ce-8913-d4016ce14067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b596258f-9eff-4b2a-a40e-c44d7a7089ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcbb9a3-a1f8-4461-8ab8-b6ee59eabff6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567f7035-8dbe-4eab-a749-50467267a0d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c5239bf-6b7a-4895-837c-a65130435905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7740a2e4-ceb2-4ba9-b41c-ace05708d539",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caa88684-f506-464d-a9b6-d51a221745f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53730f5c-a94e-4e4c-9475-79952ee1e954",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d3d21e-6d1f-4e31-88c1-c785767d8d52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "502bccc6-1eed-4a4c-acc2-3e777f1fd43a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "018b5230-f0c1-4f43-b8e8-68af5425ce75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43581e92-3a09-4396-abbb-5bfed571e12c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83ce068e-dae1-4578-9d61-2104eb42db1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f02dc108-638b-484d-b474-baff4a9ca85d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e9ecd31-69fd-46b6-b165-7e8aee0af7c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b1075a4-e72d-4c60-9026-00a12cc0c6a8"
                    }
                  }
                ]
              },
              {
                "id": "980414b3-9f9c-4ed3-a88b-757dafc55f4a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "527ddd98-877d-46e7-94e5-218f6bf0bf0a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc52aa6-a4b3-4815-9b2b-92034277e051",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d898d6fc-7af1-4bce-91fc-4e7f91f0938c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23afc8fa-5618-421a-bc64-de28156903d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67a2d568-f75f-4e78-a64b-9729a505406b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a561358f-dc2a-44b6-b519-23c62c7e544e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d7a08d-9383-4bb9-8a92-519d36c60c46",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "77d16283-3fe0-42ae-85e6-20835d88a689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "085ecf47-31dd-41e4-8e41-451d462020f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6eff1b5-a2ee-4d88-afde-3667e4ddcd08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a84b29a-8fc2-4c97-bd37-80b14d9f4474",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2eb839da-8c02-489d-b68f-08756ca0713a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47626bd1-6e98-4529-b560-36b8bf76867d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf3b2b67-9e9d-48da-bc7e-593b4f3961e7"
                    }
                  }
                ]
              },
              {
                "id": "9920e3b0-f352-4c67-9973-7bb85e619be3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dafb6789-1e3a-42e8-993b-c51952466877",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6a196a-ef7e-41fb-abbb-f5a8e22f7632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4900dd7e-665c-4ea5-af1a-263bbc666d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc7b642-3950-424d-afa8-1ee65a9078ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847fd5c2-3cb8-47ab-9b47-b17ef08002f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f1c22aaa-16d0-4aa1-aed1-9d39f360314b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c33335a8-9de0-4a55-abb5-4a777bf16b7b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08b1cec8-4cc0-4e63-86f2-2f8794376a90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "02e1baaa-7661-467e-b5f0-3811d30b48e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "206b415b-bfb7-422a-ae2f-2a9ca0c3cb7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "231f098b-f780-41b0-9a9f-4bc3190ff94a"
                    }
                  }
                ]
              },
              {
                "id": "e38d0a44-13b4-4c7a-9392-4ba128686be3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa1d1c32-3b83-4416-8c47-166911b9082c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ce31388d-f19b-4e14-be99-7a2780215b5e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cdca70d-da87-429d-93fe-73dc64df8819",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38fce837-01c3-48a3-b64a-0a59869a3c0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81bfc532-afac-41cc-8edf-4e6c10551f1f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "dbf26a95-d5e2-4147-9e9a-0c3180e256fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ff0e018-240b-44a4-961c-ffe7986717fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "628a8bb0-81f3-4e97-baec-98628ac6925b"
            }
          }
        ]
      },
      {
        "id": "971f0cf5-3697-43c3-a5fb-1dd8392e6830",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "da294738-6ca5-4c83-8970-56ddb407934c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "785fa2cf-04f4-4f33-a197-34990a5ef8d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd6d0483-588f-44e9-8bc7-79bdcb1bf6c5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aafd69d-5598-4c98-be38-b07ee2b5467f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e700bb09-3241-46e9-9bb6-2d2270f0555d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3922ecf0-b33f-4b3f-ba22-0fb3345ea1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fd11dc0-7c90-4be2-8daa-676b699a3272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5081dd0-8758-4754-b1b0-d8bbd29dca3e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5915340-c723-4450-9870-a4db65ce06f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1e9f2bc1-8b54-402a-8c95-fc332deab84b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab5c05d-2a80-4523-840a-eab7a4576abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "954a3e75-92e9-4954-afd6-1ef454d19e74"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0aec9a8e-7d63-44d2-9d54-5b3862ec417c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7793c8c9-3609-4093-b581-89f8ff7a6bfa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "685acd7b-9517-41ad-84db-96ee87fd67bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccb1d6d3-cf04-4b74-8ed8-d7f906c98efb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6199550d-7fd5-4df6-885c-fdf65dde721b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "06400766-4b0f-4601-98c3-7dabdfc930af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6a6adf8-aa7f-45f7-b18a-3085dbff6856",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09db8e8b-105e-43cc-827c-ee147cfc8070"
            }
          }
        ]
      },
      {
        "id": "7b6e2e5c-877d-4a17-9c2f-be5ee1b4e25b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "51f27457-f6c5-439e-b59a-01deb86dbdc3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9698ba0-c51c-435f-8ffc-f0ac90dc4a6b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e887a9b-58b9-4e17-ada6-6bdbf850bd49",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324bb6ae-e136-4174-a5f1-a96ad79597fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0c12135b-8016-4e95-9b02-d144a33e669a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f78ffc-0f65-4bef-bbec-5ac3645b73ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "705241b1-836c-4aef-a4d9-ddd1e4c09492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d6446e-3f3d-4dd3-b690-dde11f73b619",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde0af7b-d58d-4648-b767-04b17a5c464f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b7923abd-918d-4137-b360-6caeb22beec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d243073-364d-445b-a69e-88ee13f6a789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84c31210-6ff4-4fe9-8f4a-7949238203b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "969d5c0f-9acc-4db0-954a-51558974a496",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "682521fc-2ac3-4065-9be5-73c7a4167872"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91ab6d73-5d7a-4192-a45c-68bb87f16286",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "916286b4-aa74-4dc4-8e28-726817ab9336"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60b15c52-b847-48a6-b9b8-011af7a675ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "475e3298-6cbd-4089-b04b-319bd94ee429"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60fa79cb-ba03-4040-89f3-02469e19b457",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bbc462ed-0c86-43db-96f1-e5441089db6b"
            }
          }
        ]
      },
      {
        "id": "d8707c5d-2abd-4301-b34f-22b11cc328c8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9b24263e-2df0-45fe-96f7-6a2108b423c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a12eb7b-9d3d-4934-8766-a2a307b3d210",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25ac6474-65ce-447c-98c0-78510519586b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9de1470-c9fa-4d71-a558-370adf77e08d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ea989220-3f00-4ec8-8933-bad3845f0180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88e3692-6a77-4cbe-babf-daea55c45c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3042c92c-77c8-4272-a510-24cfef40b323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcef9716-3a29-4cb0-b927-193c82d0897f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ef7311-cc65-4e53-ab31-7973d962013c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a14f2d01-7a23-4aaf-95cb-adc44e6a8a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fce011f-952e-45ed-ac8e-94eab7a63aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39d316b1-547c-42ca-888b-27d289e32064"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0bf6914-9fd3-4a97-bf78-700e5b0d9149",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d96b3a66-20b6-4b02-9a84-04eed9f92c84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0eecf74-34d5-4162-a663-2025fc3569ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d7ee86d-8a71-44dc-bcaf-88cb51b90a88"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9f20580-d79d-4e37-a86c-3ede46bc06aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d4ea3005-d52c-4565-b5af-8d82c7d39e79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5ddb239-09de-4e8f-a942-47977c0b0e3c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26437606-2879-43e8-b258-83d9a10d7482"
            }
          }
        ]
      },
      {
        "id": "934f419c-3fa0-4330-bd2a-a04aff2605a5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e719c307-8d54-4212-b539-59423469c4ec",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9359a73c-076f-4aec-b284-d2c791475f89",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ef472d8c-4b4c-455f-8e39-8ac15032d0ea",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17c88eba-b281-4262-994c-aab6fb7166bb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "234e5e79-313d-4685-a833-78fe689023a2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 449
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 529.3760116393812,
      "responseMin": 13,
      "responseMax": 11006,
      "responseSd": 1732.6705128803615,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675038952065,
      "completed": 1675039174308
    },
    "executions": [
      {
        "id": "3761b5ec-9d5e-4a43-bdac-ad22452652d2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "090e6549-c082-4623-b4ae-d77011b64d3a",
          "httpRequestId": "acfb542d-538b-4db0-b024-bcf2ec43bc06"
        },
        "item": {
          "id": "3761b5ec-9d5e-4a43-bdac-ad22452652d2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c33066dd-b9f1-4379-851c-1e763736885e",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 0
        }
      },
      {
        "id": "fe8a16a4-442c-419f-844a-68867ee2af02",
        "cursor": {
          "ref": "f668ed9a-10ba-4d32-aca2-fd839094297e",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5bbd2ac4-7fdf-4f87-a362-d88847291e80"
        },
        "item": {
          "id": "fe8a16a4-442c-419f-844a-68867ee2af02",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "664fa732-4705-452a-90dc-03290e2a19d9",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "7b02dc15-6db9-4673-96c5-3d677d7aa690",
        "cursor": {
          "ref": "7fdb13df-b588-431e-a472-5ac78525bbf9",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e195f07-bf4a-40da-8d11-74d3dd178b13"
        },
        "item": {
          "id": "7b02dc15-6db9-4673-96c5-3d677d7aa690",
          "name": "did_json"
        },
        "response": {
          "id": "1fbe9191-34d6-4ed9-85b8-7e4b7c512b02",
          "status": "OK",
          "code": 200,
          "responseTime": 456,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3930404-b446-4413-8aab-a9d811bc7244",
        "cursor": {
          "ref": "6eff2561-4fa7-4c7b-890f-69ecdfc7304e",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cd5bce24-4dfe-432c-b0f9-021111399ebc"
        },
        "item": {
          "id": "b3930404-b446-4413-8aab-a9d811bc7244",
          "name": "did:invalid"
        },
        "response": {
          "id": "d149368a-1061-4249-8926-73b4c86a0425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3930404-b446-4413-8aab-a9d811bc7244",
        "cursor": {
          "ref": "6eff2561-4fa7-4c7b-890f-69ecdfc7304e",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cd5bce24-4dfe-432c-b0f9-021111399ebc"
        },
        "item": {
          "id": "b3930404-b446-4413-8aab-a9d811bc7244",
          "name": "did:invalid"
        },
        "response": {
          "id": "d149368a-1061-4249-8926-73b4c86a0425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1e5cf4-b470-4085-b25f-bf02bc6d74d3",
        "cursor": {
          "ref": "ba733a9a-bdd2-4723-b308-24bdcf4abb5e",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1fab6d56-b002-4a0e-8b01-ff2506e7a52f"
        },
        "item": {
          "id": "9e1e5cf4-b470-4085-b25f-bf02bc6d74d3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7b106df6-ad0a-4dab-9cda-6952ddba7421",
          "status": "Not Found",
          "code": 404,
          "responseTime": 155,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ca3396-7300-49ad-bc45-06acebabaa87",
        "cursor": {
          "ref": "c34ad18a-c03b-4396-835a-e5b3dae2c3df",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d1993cb4-225b-4e36-9b24-9f838278ec96"
        },
        "item": {
          "id": "92ca3396-7300-49ad-bc45-06acebabaa87",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8f2b6910-f9c2-4375-bc77-ac995ee3dcb2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b2f902-28a2-41db-ba3c-501302f5d76c",
        "cursor": {
          "ref": "2f8a1ed4-f329-4c86-9890-7ea74cbaba15",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0e962b2c-988b-4eb7-99d1-f271c1874e66"
        },
        "item": {
          "id": "14b2f902-28a2-41db-ba3c-501302f5d76c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "75c2ce5e-1c39-439d-a064-1c54ff53a7af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8bd082-5a4f-4398-b6f0-e5c2256dadcb",
        "cursor": {
          "ref": "9d50d7a8-0674-4426-8581-4a04b61ba1e5",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0d73d298-8d4a-4a80-8f33-f430d6e4f5e7"
        },
        "item": {
          "id": "6e8bd082-5a4f-4398-b6f0-e5c2256dadcb",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "40f22b1c-8856-4965-b1b9-bb278e099c29",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6e8bd082-5a4f-4398-b6f0-e5c2256dadcb",
        "cursor": {
          "ref": "9d50d7a8-0674-4426-8581-4a04b61ba1e5",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0d73d298-8d4a-4a80-8f33-f430d6e4f5e7"
        },
        "item": {
          "id": "6e8bd082-5a4f-4398-b6f0-e5c2256dadcb",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "40f22b1c-8856-4965-b1b9-bb278e099c29",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1f136e17-8b4e-4b0c-9ac0-1a7c58ee08e6",
        "cursor": {
          "ref": "c7a10500-13fd-47ba-96c0-f9156ac8ebd4",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a08dd9ae-5ed9-484a-b5a3-1a8845e4df85"
        },
        "item": {
          "id": "1f136e17-8b4e-4b0c-9ac0-1a7c58ee08e6",
          "name": "identifiers"
        },
        "response": {
          "id": "d6dd31ee-5273-4f01-bf6c-c045a34ada41",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8ff59b-8f6d-4f9f-a0e0-153dd2d3e845",
        "cursor": {
          "ref": "31dd2913-2e7e-4406-b2ff-0859079a7c1e",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "987bcece-4a50-4b20-9ff3-1b02ea6e5a08"
        },
        "item": {
          "id": "7d8ff59b-8f6d-4f9f-a0e0-153dd2d3e845",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9a8488d6-ae56-4e09-8ecc-6f7475b98a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "7d8ff59b-8f6d-4f9f-a0e0-153dd2d3e845",
        "cursor": {
          "ref": "31dd2913-2e7e-4406-b2ff-0859079a7c1e",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "987bcece-4a50-4b20-9ff3-1b02ea6e5a08"
        },
        "item": {
          "id": "7d8ff59b-8f6d-4f9f-a0e0-153dd2d3e845",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9a8488d6-ae56-4e09-8ecc-6f7475b98a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "c1b70abe-bdb1-4d2d-a3b6-9b2c32bf9b4c",
        "cursor": {
          "ref": "c5c6ddea-7b61-4fd4-b228-e819a2147348",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3e4c37e1-6ded-40a9-9a02-2064c991bbf9"
        },
        "item": {
          "id": "c1b70abe-bdb1-4d2d-a3b6-9b2c32bf9b4c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ba497c76-c0e1-4577-a4f9-593dd58fab76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "c754b7d9-517d-4852-b8f8-28f3282001ca",
        "cursor": {
          "ref": "e08beb85-643b-46f9-ab7d-1b72bdf89ab3",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a651cdbd-4a1c-48b9-9225-5428a1339833"
        },
        "item": {
          "id": "c754b7d9-517d-4852-b8f8-28f3282001ca",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "95613255-a26a-4912-87e2-354ff3cd491a",
          "status": "Created",
          "code": 201,
          "responseTime": 142,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "dd16486b-0212-42d1-87a7-265e75dfbed0",
        "cursor": {
          "ref": "c5d097e3-3c64-4723-a13e-36b83ee2f443",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "caa82807-16c9-459f-a626-8409186fde41"
        },
        "item": {
          "id": "dd16486b-0212-42d1-87a7-265e75dfbed0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f16179f4-6294-43e3-a045-a779dd392751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "5d24954f-c673-4250-8ce8-d6a4517fc4ac",
        "cursor": {
          "ref": "caa07a68-1ac5-41db-b25f-2ead4c994fb4",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8080e17f-6c79-4e52-afc1-d0be0b4fe379"
        },
        "item": {
          "id": "5d24954f-c673-4250-8ce8-d6a4517fc4ac",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "39994d18-4c4b-40b5-bafb-f98e08b5d50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "9aab0213-59e0-4c27-b27b-d88ac0e86f19",
        "cursor": {
          "ref": "586dd5a2-db38-45bb-98c7-66221b7f5227",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "70f61a79-aaf2-412b-a5c0-ab06395b148b"
        },
        "item": {
          "id": "9aab0213-59e0-4c27-b27b-d88ac0e86f19",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b8de0333-7988-4af6-85f4-9c4b9f81e656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "edf53840-5c0c-4199-ac4e-ccd9172220b1",
        "cursor": {
          "ref": "ad0133bd-6e62-4f83-b6e0-780b3db46a40",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "64928058-17e0-45bf-a634-9e4a9970008a"
        },
        "item": {
          "id": "edf53840-5c0c-4199-ac4e-ccd9172220b1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a12da142-c0d0-4096-8ae0-5f738ed800ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "59c88ce3-9630-4a20-bd65-b6e2839b5d76",
        "cursor": {
          "ref": "b05312b6-e92c-4aab-a96a-d33ef98a7307",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a22e5a3d-99ca-4b8e-9f7d-ece1d16aff8b"
        },
        "item": {
          "id": "59c88ce3-9630-4a20-bd65-b6e2839b5d76",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c95bd1ee-1746-4e07-aa8c-be420c368bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "6c124902-3dad-4ea2-bcbd-2242a25fcf4f",
        "cursor": {
          "ref": "d6dddfab-905f-4118-b4b4-36ca22de386c",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "23d3cca8-1ec5-40ac-9802-26f529af1184"
        },
        "item": {
          "id": "6c124902-3dad-4ea2-bcbd-2242a25fcf4f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a869d157-d60a-453c-9f75-9d16d386514b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "11e604ec-a807-47f3-97d2-a20482fb6fb1",
        "cursor": {
          "ref": "189822cb-8fc4-45db-ad97-28138ff135d7",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "74edcf3b-cba7-4288-88cc-cd0c1aee7895"
        },
        "item": {
          "id": "11e604ec-a807-47f3-97d2-a20482fb6fb1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "df62f39c-1aa6-4873-861d-09f523bbacb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ad48a71e-dcbb-4eee-af5c-99a8ea970a16",
        "cursor": {
          "ref": "b411b6e3-5137-490e-b781-eb00859e6148",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a8a4107a-fe7c-493a-b92e-da2b05ab56fe"
        },
        "item": {
          "id": "ad48a71e-dcbb-4eee-af5c-99a8ea970a16",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "37fd8001-50b5-497a-9d5f-bb08b593e38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e9b212fa-5c57-4fd5-9041-9c07f61bb79d",
        "cursor": {
          "ref": "43662913-54ca-4431-a901-1c1e4f3619a1",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "aefaf2c2-a81f-4a6d-b04e-bd3b59bc4aaa"
        },
        "item": {
          "id": "e9b212fa-5c57-4fd5-9041-9c07f61bb79d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "61cd216c-b11e-42b9-9d8b-11ec6c32183f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f2d728d1-4670-4477-971c-25fac421c58d",
        "cursor": {
          "ref": "77938764-b162-4b11-a8a9-61b7a00257fd",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "301cdf01-de8e-4424-b488-cb6818ae09d0"
        },
        "item": {
          "id": "f2d728d1-4670-4477-971c-25fac421c58d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4dc69ad6-1554-4f84-a49f-e8753f8a805d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "934037f5-4b47-4707-b232-a8dbfda94b4a",
        "cursor": {
          "ref": "9bf2b1b8-427c-41e7-97aa-8fc50fc4c5e4",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4b96971d-b1da-4c4f-bace-c54fe37e08ef"
        },
        "item": {
          "id": "934037f5-4b47-4707-b232-a8dbfda94b4a",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "29e77e8c-8609-4001-85d3-161853a88315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "28c5b420-388c-4f5b-b141-9f817c2db736",
        "cursor": {
          "ref": "d572f2c0-4874-46c9-8227-17abdd81b71f",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "79e5ed9d-2a79-4535-b8bb-be65665eb37a"
        },
        "item": {
          "id": "28c5b420-388c-4f5b-b141-9f817c2db736",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1f51a517-fbcc-48dd-89d8-eddbc73215dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "536f8838-da77-4c4d-9e4f-4e30314c6ff7",
        "cursor": {
          "ref": "18ff6751-e21a-48ad-bc43-77beeb910959",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bb6ef1a5-8a7a-44fa-8264-0a9f23a49014"
        },
        "item": {
          "id": "536f8838-da77-4c4d-9e4f-4e30314c6ff7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "82be5ea4-d7f1-42ed-ad22-b3bd06301413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "8301e1ad-0427-4a24-bff9-8fbdf9cd277c",
        "cursor": {
          "ref": "276d8f3d-3be6-4864-ad8b-dec639566499",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8ea56729-0edd-4bea-b83f-21d4984aa0ab"
        },
        "item": {
          "id": "8301e1ad-0427-4a24-bff9-8fbdf9cd277c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2e51980d-d016-47f9-a216-707f28eb5723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "e730aa8c-0d99-4138-98a8-82e57fe5d65d",
        "cursor": {
          "ref": "5cc76a3a-fbfb-4a60-80ed-3f209aea576d",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d392e429-ed2a-4c9c-af7b-e702972c362b"
        },
        "item": {
          "id": "e730aa8c-0d99-4138-98a8-82e57fe5d65d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "82e31cae-6ab7-4a39-a3aa-b2654a023ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "f7bd4079-3c00-4e53-a0b8-db8c13ed806d",
        "cursor": {
          "ref": "ebede5ae-d436-47d3-b462-52324798d283",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "037b774f-4f42-4d38-8023-4b1e6574caf8"
        },
        "item": {
          "id": "f7bd4079-3c00-4e53-a0b8-db8c13ed806d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2148574a-2963-4cd8-9085-8e1eb3c28a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "509d7833-94e6-4a41-af6a-df5763450a3e",
        "cursor": {
          "ref": "9d41c8a5-b1a1-4df2-b545-1e293634e383",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4f59b331-5bf2-48ca-80b0-5ad1f7acd552"
        },
        "item": {
          "id": "509d7833-94e6-4a41-af6a-df5763450a3e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5912fb4a-85de-4ea6-b0ad-f18e00fd375d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "f4eab160-59be-4a3f-ba56-6cb71b697f4c",
        "cursor": {
          "ref": "31d0950c-883d-4c72-9734-552d51c99f79",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4c3e9314-36b6-4323-842e-17081c7fc3c2"
        },
        "item": {
          "id": "f4eab160-59be-4a3f-ba56-6cb71b697f4c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fab23b74-975e-4d09-b7f2-ee5ec2398c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "a147de0a-9ee6-41a2-a66c-32e1eef2532b",
        "cursor": {
          "ref": "dd81acc7-a0cd-4dd5-8685-1c4d84fab836",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0a077d47-3316-49b1-892c-2c2a1f0a1a9d"
        },
        "item": {
          "id": "a147de0a-9ee6-41a2-a66c-32e1eef2532b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ed15da27-5180-4635-96e8-b7685b6adcaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "1a822fc6-d86c-4ff8-98cf-a4317d32a482",
        "cursor": {
          "ref": "671efcce-3e91-4f3d-b174-45597688658a",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9a5e5f62-8c03-4de9-8413-69901de378a0"
        },
        "item": {
          "id": "1a822fc6-d86c-4ff8-98cf-a4317d32a482",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a7b200b3-df27-4bb4-a72e-e932bae20c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1e4a18ad-efff-47d3-ab98-2e577d515ae8",
        "cursor": {
          "ref": "49fcb712-9d56-4a03-b9c5-aef8daf09092",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "884cbde0-8c20-48ba-9ac4-907f732f42db"
        },
        "item": {
          "id": "1e4a18ad-efff-47d3-ab98-2e577d515ae8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a9ea68d5-80b3-40aa-afbb-954ac58577e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "a8ef6653-03bf-44ef-9bbc-c35dc79d6795",
        "cursor": {
          "ref": "83b074bc-1751-4909-93f1-9dbc9baa3693",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0c237c80-61ad-4287-98cd-19c12739f7de"
        },
        "item": {
          "id": "a8ef6653-03bf-44ef-9bbc-c35dc79d6795",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "943edfbd-46c5-467a-89db-b31746ec0951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a78b932a-3c65-4d70-b34a-46e241d85f54",
        "cursor": {
          "ref": "fd1213db-a075-4cbb-b1a6-1e5d34da2a36",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "68172fad-9d21-4351-963f-2371dcee6c51"
        },
        "item": {
          "id": "a78b932a-3c65-4d70-b34a-46e241d85f54",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bcaa8e88-bf32-440d-9e73-69b150a9c301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "5312fd89-186a-49d5-b950-cdf4ddf3f220",
        "cursor": {
          "ref": "f43775ec-7fd5-4784-bd7f-938c0d31b63b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8d0fb95c-21dc-4f9f-ac2f-489c6c456f26"
        },
        "item": {
          "id": "5312fd89-186a-49d5-b950-cdf4ddf3f220",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "39df6ec9-4155-4267-9025-f74b5972998b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7425,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "37295da0-1152-43e2-91ae-fa182b7dd22e",
        "cursor": {
          "ref": "37ca198b-487f-4c96-b2d3-cf8e02b2f623",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "21a5f3c1-01a8-4957-a241-c8fc46aa44a1"
        },
        "item": {
          "id": "37295da0-1152-43e2-91ae-fa182b7dd22e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "73e1605c-38ac-47bb-a2d7-ad0b47dc4f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7250,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "7682626b-479d-4f95-9548-ca967a0c471a",
        "cursor": {
          "ref": "39d988ea-7af5-4c45-8136-5dab600f4468",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "45acbb2e-ea8b-4b93-a30e-dd73b3529d1c"
        },
        "item": {
          "id": "7682626b-479d-4f95-9548-ca967a0c471a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "90d9357a-7cbd-4f8c-ab1f-b9ee5ba29cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5546,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "3b7623b6-8d17-427a-8485-48dde79ab44a",
        "cursor": {
          "ref": "ebcc8bd6-d644-4e42-b6e1-b641efc47c3f",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ec238950-e770-424c-b1b7-7331d1543f71"
        },
        "item": {
          "id": "3b7623b6-8d17-427a-8485-48dde79ab44a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1f7f3aeb-40b2-4e3f-b9f5-b97a458e8123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6460,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d3aef549-8162-4a45-ac51-438466724251",
        "cursor": {
          "ref": "5c62b673-0d2b-4590-a8c8-7a5b9d472b6d",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "be8c9627-895b-4e44-9cea-63930fa7d633"
        },
        "item": {
          "id": "d3aef549-8162-4a45-ac51-438466724251",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "23bc1034-d035-44f6-88fb-3b431bf2115e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4927,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "25da0d73-2c47-4aa3-8eb1-958302a4c2b3",
        "cursor": {
          "ref": "f31892a1-33f3-4541-bc90-d7d4d5e57bc8",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "aae7e0cb-f45c-4821-afe2-4f43bfe54cde"
        },
        "item": {
          "id": "25da0d73-2c47-4aa3-8eb1-958302a4c2b3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "94b90fd9-aba4-4149-a75b-d6c454f17585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ec62b435-09f5-4d33-85a4-a610e66def1f",
        "cursor": {
          "ref": "1c4b9b56-639b-46b2-ba9b-b84d12d273aa",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c7528647-812f-4d42-af8a-49c6b8b8e321"
        },
        "item": {
          "id": "ec62b435-09f5-4d33-85a4-a610e66def1f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0e53dad8-7362-40ca-b22b-eaff55635b8c",
          "status": "Created",
          "code": 201,
          "responseTime": 6742,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "998d62c5-f2b7-47e8-97c8-0cf123599a20",
        "cursor": {
          "ref": "a7c75531-fd93-40ba-af75-1861d2aa55b8",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e2fe9649-12f8-44f9-bfb0-d6d2b9e61af2"
        },
        "item": {
          "id": "998d62c5-f2b7-47e8-97c8-0cf123599a20",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a10727b2-9635-4ca6-af9f-b5cfffc17b73",
          "status": "Created",
          "code": 201,
          "responseTime": 4772,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d0f302f6-a37a-4b73-84e9-35e4facfb62f",
        "cursor": {
          "ref": "4ebe0ea8-6be3-40a1-82d2-8af52b992c80",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a754b663-3878-4089-b229-ba4f5f93aaaa"
        },
        "item": {
          "id": "d0f302f6-a37a-4b73-84e9-35e4facfb62f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "06805922-421a-4c37-80dd-7327c17cb5f0",
          "status": "Created",
          "code": 201,
          "responseTime": 6429,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "062a769f-f818-4aa7-858c-9be498cbc2dd",
        "cursor": {
          "ref": "6495a21d-9a70-44ff-b7d1-a96a362d496b",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cbd24154-e9d6-4b7d-95a7-0d1cbe8ea900"
        },
        "item": {
          "id": "062a769f-f818-4aa7-858c-9be498cbc2dd",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1739c9dd-40f2-49d6-89d8-e72342ad5d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "fc6b4242-1113-42f0-a1d3-e2a49d17c368",
        "cursor": {
          "ref": "02b9f9a3-4ecf-4b0d-8451-136ee699cf25",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dfa4c710-271d-4c48-91af-f905cf08cbc0"
        },
        "item": {
          "id": "fc6b4242-1113-42f0-a1d3-e2a49d17c368",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "eeca2f7b-df0c-41f3-bbaf-487059248e9e",
          "status": "Created",
          "code": 201,
          "responseTime": 4733,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2223382f-f610-4fc9-8848-68e4aabd1431",
        "cursor": {
          "ref": "55082f20-bcf9-45af-bada-cf2434c0ec9b",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0245563c-6944-442b-a171-18db49efc1a2"
        },
        "item": {
          "id": "2223382f-f610-4fc9-8848-68e4aabd1431",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "367a6e22-b958-4f3f-9358-a16fccd990e4",
          "status": "Created",
          "code": 201,
          "responseTime": 6707,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d501bfe6-2f27-4180-b379-59d273d82dad",
        "cursor": {
          "ref": "6ba8c6bc-82c6-4e03-bafb-2e73d452f905",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f5203340-3fea-42fc-ad2e-fdcc040c7758"
        },
        "item": {
          "id": "d501bfe6-2f27-4180-b379-59d273d82dad",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a3f681f2-a88f-4d54-a850-aed624724536",
          "status": "Created",
          "code": 201,
          "responseTime": 5574,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d5fd9f81-f625-43e4-98f5-2db008ab77d4",
        "cursor": {
          "ref": "d84c4d6a-e0ec-4916-a2b0-adb01a365454",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f39cc445-c61f-4ca5-a6c7-9fd4bc306910"
        },
        "item": {
          "id": "d5fd9f81-f625-43e4-98f5-2db008ab77d4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e52f3652-969f-426f-b35c-4e89454b9af5",
          "status": "Created",
          "code": 201,
          "responseTime": 6830,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c91293d1-c07b-4c3e-aed1-d6aa3a790135",
        "cursor": {
          "ref": "a8105542-d2eb-4601-bca2-e34b4c131715",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fcb36bda-911a-44ba-b8c6-4e38bc71f4d0"
        },
        "item": {
          "id": "c91293d1-c07b-4c3e-aed1-d6aa3a790135",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e5d932e9-48eb-40eb-8900-cd6a4ad84b32",
          "status": "Created",
          "code": 201,
          "responseTime": 4850,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7d799fed-0fad-45d3-b9ef-b8ad06694210",
        "cursor": {
          "ref": "6387fe3d-7683-4868-9f0a-2a7c69d9f6ad",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2060499d-92ae-44df-94bb-e2560854bc55"
        },
        "item": {
          "id": "7d799fed-0fad-45d3-b9ef-b8ad06694210",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f73fbe7f-43cd-4825-8394-2fe3e8c2396e",
          "status": "Created",
          "code": 201,
          "responseTime": 6853,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8bbbdf48-21ad-4ed7-885c-f8401d8b1970",
        "cursor": {
          "ref": "93689bbe-6a11-451f-84bd-ec027d9868b4",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "41022f38-40ac-4706-8bf7-6ad0bee548d3"
        },
        "item": {
          "id": "8bbbdf48-21ad-4ed7-885c-f8401d8b1970",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a96be29b-9000-4eac-8284-75f3fdcea3c6",
          "status": "Created",
          "code": 201,
          "responseTime": 4848,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b8402884-8a45-46f3-8ca8-81d138c1a9bc",
        "cursor": {
          "ref": "dd9e202e-1b16-4032-a379-d066581a2021",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ef4de3f0-5e6b-4d30-b9eb-c49af0e8c396"
        },
        "item": {
          "id": "b8402884-8a45-46f3-8ca8-81d138c1a9bc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d0661bf7-55f3-4485-87b4-51fe3239fb99",
          "status": "Created",
          "code": 201,
          "responseTime": 6697,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "d4b17c69-ff81-4a8d-b9c4-cde91497b4af",
        "cursor": {
          "ref": "bf7c85ea-6332-4244-ab4e-10d4678e4fa1",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7dde7c95-1d86-44bd-a398-d7105faf8f2e"
        },
        "item": {
          "id": "d4b17c69-ff81-4a8d-b9c4-cde91497b4af",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "022a4069-8b25-466d-9e41-fc05c3e53860",
          "status": "Created",
          "code": 201,
          "responseTime": 4793,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "1565efc8-ba60-4a46-9db3-1acd7657fa1a",
        "cursor": {
          "ref": "4bc03dba-2b60-40e2-9529-2f5638fe3e0e",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0a7f0975-a96c-49b0-bebe-2aa42f6cb0a6"
        },
        "item": {
          "id": "1565efc8-ba60-4a46-9db3-1acd7657fa1a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c59cb76f-ac4c-4f23-bea1-c839ff0d15e5",
          "status": "Created",
          "code": 201,
          "responseTime": 6440,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f43e4ee9-5a2f-432b-ba07-5c1755a41e6e",
        "cursor": {
          "ref": "134aef61-d9f3-4419-ba5f-4574fa0debdb",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "426e8640-df3a-425f-9522-1610b2aca2ff"
        },
        "item": {
          "id": "f43e4ee9-5a2f-432b-ba07-5c1755a41e6e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b2380c14-c3eb-43f7-9abe-639ef3324d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "7fe15af1-bb33-4b58-b30e-e3a9cb719f4c",
        "cursor": {
          "ref": "df2d4543-83b1-4144-9176-abe157ca8ead",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f336cc49-6ae5-4628-a718-86c043421051"
        },
        "item": {
          "id": "7fe15af1-bb33-4b58-b30e-e3a9cb719f4c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3ae1979a-899c-4adf-b44c-f174fa617b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "fb120130-c103-4924-a05b-40b35576e804",
        "cursor": {
          "ref": "1b5615d1-8250-40a9-9209-902bfb901761",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a90241e8-e0be-4e5a-91fa-3f976d929b24"
        },
        "item": {
          "id": "fb120130-c103-4924-a05b-40b35576e804",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "324fba60-bf4b-468e-8041-cf9da766a4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "928836a2-734b-4256-b235-3351cdb3ee87",
        "cursor": {
          "ref": "8f4906b7-ec27-430e-bece-9ffb4776bd28",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "35f31c39-02be-4e2a-847a-6bc9487512b3"
        },
        "item": {
          "id": "928836a2-734b-4256-b235-3351cdb3ee87",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e1658c23-316b-4794-923f-cf2478e8c3f4",
          "status": "Created",
          "code": 201,
          "responseTime": 4691,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "39050156-aa40-4eed-8376-0bfde09655ee",
        "cursor": {
          "ref": "95d7c820-5b2c-4c76-b6cc-276c1d8da1ad",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d725395a-2541-4dbe-b7f5-c77b087727fc"
        },
        "item": {
          "id": "39050156-aa40-4eed-8376-0bfde09655ee",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "21bc164f-6a84-40e6-aa0a-7c7ad7dc7443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "f6d96da9-09a4-414c-b614-d7ad82724977",
        "cursor": {
          "ref": "1882d8c1-9440-4f1f-8b4a-710ced120d69",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0f94ce56-aa95-4e95-94af-3883a75d9b18"
        },
        "item": {
          "id": "f6d96da9-09a4-414c-b614-d7ad82724977",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1aaa4bf9-7ae9-49b7-8e14-d1a9ebb69426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "ec407b7e-f388-4bd3-8f07-47179f2a2bd6",
        "cursor": {
          "ref": "6b9de168-bf54-4de4-8e4e-0fa8161b7691",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "af0ef9d3-80a5-41c8-b2e7-d7c710625cfd"
        },
        "item": {
          "id": "ec407b7e-f388-4bd3-8f07-47179f2a2bd6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2da28741-2f34-4075-9433-1b8292be756c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "22cd971e-1554-431d-8def-d6f1fc953e94",
        "cursor": {
          "ref": "426b1fa4-ce72-4916-8b88-0fc87547ac27",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b6543325-b18c-41a3-9896-4ffdab8d2a54"
        },
        "item": {
          "id": "22cd971e-1554-431d-8def-d6f1fc953e94",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f552dc79-f1c2-47d7-8bff-ad982ce8846a",
          "status": "Created",
          "code": 201,
          "responseTime": 6851,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "97e64d4c-6dff-47af-8d3d-3a317c5df0b9",
        "cursor": {
          "ref": "0486cc5c-4cbf-4dfa-b6b4-c0e81a069342",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "10163375-8aff-4e94-978f-d1c2c1462d82"
        },
        "item": {
          "id": "97e64d4c-6dff-47af-8d3d-3a317c5df0b9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8560079b-55cd-4f0c-b394-2e3189d9e654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "8214c62a-dd5c-4f83-9225-3927eae5171e",
        "cursor": {
          "ref": "9bb90882-a25b-46f8-9998-feedb375dc4a",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "012b7b55-b797-4e4c-8580-bdee84d044c8"
        },
        "item": {
          "id": "8214c62a-dd5c-4f83-9225-3927eae5171e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bc88e09f-2d9b-4d2e-9fea-5aac14ecd569",
          "status": "Created",
          "code": 201,
          "responseTime": 4837,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ca459aa3-3100-4a99-aced-5e7c8a4059d7",
        "cursor": {
          "ref": "ca68c068-afdb-4c30-b1d6-9c497e0637d4",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a4f905c3-0cbb-4ced-a407-37ab294801a8"
        },
        "item": {
          "id": "ca459aa3-3100-4a99-aced-5e7c8a4059d7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2b7515ab-9295-4d48-b325-c00c63b14e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3d2490a4-9e02-4f4c-b7fa-40f242b4245c",
        "cursor": {
          "ref": "f6fadf95-a6d5-42ff-b74f-a3942b37e441",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "42710a10-f85a-4c30-aaae-15d39c17b06c"
        },
        "item": {
          "id": "3d2490a4-9e02-4f4c-b7fa-40f242b4245c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9bd9316a-0be6-41ff-b88f-64acd1afe713",
          "status": "Created",
          "code": 201,
          "responseTime": 7004,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "9a37e76c-8710-413c-a598-b350172ed50b",
        "cursor": {
          "ref": "17e9b64a-542d-447c-b9b2-3b4adb500e89",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "adbcc5a4-7cce-4de8-864c-688977e4f188"
        },
        "item": {
          "id": "9a37e76c-8710-413c-a598-b350172ed50b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6a3df8b1-bfe5-42c9-936d-cb41522cfa7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4667,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b68ad8bd-793c-4cb2-8820-5ad0b86c0fcd",
        "cursor": {
          "ref": "9ca7c497-b12e-44f2-88b7-9e1d260b4ab8",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e78c9915-7845-4c9b-8bc3-f38168972e3e"
        },
        "item": {
          "id": "b68ad8bd-793c-4cb2-8820-5ad0b86c0fcd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2d3c4a3f-a37c-41aa-88b5-eb78c3232242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6459,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "babd6086-f2e0-4cf3-83f4-e2da916c2740",
        "cursor": {
          "ref": "a87cfe80-1ff1-42b0-bcd6-e97ac8c3603d",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8a0de1bb-6a80-4abd-8e13-4321fc482df2"
        },
        "item": {
          "id": "babd6086-f2e0-4cf3-83f4-e2da916c2740",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5b210405-e346-4514-8b04-7f10e8c1608a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "ec7d1fbd-a1ee-4a21-8832-fc8850db1ba3",
        "cursor": {
          "ref": "fe9a1d22-e60d-4d46-807d-80618f309629",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9cda86e0-e249-417f-b896-3c76abb07960"
        },
        "item": {
          "id": "ec7d1fbd-a1ee-4a21-8832-fc8850db1ba3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c0058116-778e-4353-8945-6516f7733d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4755,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ef404fdb-7a2a-4b9b-9717-7574da577f74",
        "cursor": {
          "ref": "488be9e7-41e5-44b3-9a13-180658209135",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "096cdcf7-998e-4165-b6ef-e60785090b8f"
        },
        "item": {
          "id": "ef404fdb-7a2a-4b9b-9717-7574da577f74",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "33355018-8b8a-4330-85e1-79a1f8f83d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "75e479c6-9520-4317-93f6-f47c79c8ec3e",
        "cursor": {
          "ref": "010c39a1-1d30-4073-a66e-fd57119b6887",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c072ca56-6a92-4028-a74c-68dc99d83083"
        },
        "item": {
          "id": "75e479c6-9520-4317-93f6-f47c79c8ec3e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "42a4e793-6b98-421a-b986-e0fb0d0191ac",
          "status": "Created",
          "code": 201,
          "responseTime": 8446,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "8b7d678c-e63c-41d8-8c6f-09007991c32c",
        "cursor": {
          "ref": "e67f5161-8286-4332-81d6-5e47a0932387",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "56033c0a-8097-4a39-add9-c79724732a60"
        },
        "item": {
          "id": "8b7d678c-e63c-41d8-8c6f-09007991c32c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "52c8ac55-ccd1-4164-b79b-5d4f3070b1ec",
          "status": "Created",
          "code": 201,
          "responseTime": 8964,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "b3ee07c3-46ed-49b4-8347-8e7d324f2639",
        "cursor": {
          "ref": "8897065d-496d-4871-b104-3771ddb8da3c",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "756353a8-1c60-4198-83fd-3db0df80dda1"
        },
        "item": {
          "id": "b3ee07c3-46ed-49b4-8347-8e7d324f2639",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "140d1128-c009-4250-83c2-44831cd222a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "739113b2-cc1d-4123-af93-4ef785d33c25",
        "cursor": {
          "ref": "7f3046c0-f066-43fb-9d3a-c5cb54145c8b",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ca8e3acf-1e79-44a3-afee-dc03669f32e7"
        },
        "item": {
          "id": "739113b2-cc1d-4123-af93-4ef785d33c25",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "13e4d993-f856-41b4-a6dc-183fdc59db37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "7ae46761-8a4f-47c6-9d79-cbdae92149b2",
        "cursor": {
          "ref": "deaff663-058e-41e6-bce9-3605a62bbe22",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eb921801-a6c3-4098-b759-62dd380a12c8"
        },
        "item": {
          "id": "7ae46761-8a4f-47c6-9d79-cbdae92149b2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2bc28042-f44b-4e33-b473-b2b87be76d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "14eb1c71-2c6f-4b71-9b65-3bf7210def1b",
        "cursor": {
          "ref": "1e8a07af-eab6-471e-9a9c-c3862f8c4ed1",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c806b4cf-8c24-4281-833c-0b56f1cb1683"
        },
        "item": {
          "id": "14eb1c71-2c6f-4b71-9b65-3bf7210def1b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "57eeec6d-fc2f-4c1b-b651-7960ae351eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "ad7f1312-463f-4d1c-a919-7498b28b9d3f",
        "cursor": {
          "ref": "de5da74d-7a2c-4c08-9e30-38a74a0b4c51",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "549edc43-d192-427b-a802-ba5bb7c160c4"
        },
        "item": {
          "id": "ad7f1312-463f-4d1c-a919-7498b28b9d3f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a06c6fad-2961-4dc7-9481-c38793a74e67",
          "status": "Created",
          "code": 201,
          "responseTime": 8259,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "eaf6f83b-8a31-424d-b409-9a2fc0e451ba",
        "cursor": {
          "ref": "bd4342dd-021e-4bb1-9025-2bda94ccc5be",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "83dc08a1-b43f-4335-b3b8-6cbbdc7ebc22"
        },
        "item": {
          "id": "eaf6f83b-8a31-424d-b409-9a2fc0e451ba",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d81f4328-b0d3-4f99-b498-48d11cb53d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "3b538447-729e-46b5-be7a-9cf3976422e9",
        "cursor": {
          "ref": "b133f13f-8b69-4ba2-a334-92e89f95ab7d",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2b663d8e-2d54-4f5b-a85b-d0bc29ac8d70"
        },
        "item": {
          "id": "3b538447-729e-46b5-be7a-9cf3976422e9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1e42d247-0614-4e60-bce2-3c5fc6a96731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "ad5f63ad-dbe5-4800-8cd4-688396df5dbc",
        "cursor": {
          "ref": "d0ad91a9-ffea-48d2-8be4-9e04f35c8e56",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "314064f2-8ba1-405b-84c0-ab12c501e7c3"
        },
        "item": {
          "id": "ad5f63ad-dbe5-4800-8cd4-688396df5dbc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a404bfc5-c87e-4bfb-a239-faf76fa85f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "16b0c1c5-b960-478f-837b-3ce38577f038",
        "cursor": {
          "ref": "62537f5a-ced8-493b-babf-5c09e1171df8",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8ee5d1eb-6517-4a91-aa0e-d40f88bf3b72"
        },
        "item": {
          "id": "16b0c1c5-b960-478f-837b-3ce38577f038",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "14baa1b2-20cb-4652-8a3d-b18cb61d027a",
          "status": "Created",
          "code": 201,
          "responseTime": 11006,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "8b0aa790-e81e-4846-8cce-a98ef6ceef76",
        "cursor": {
          "ref": "8d663051-48b1-4c5a-8eab-4cb39bbea285",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9edde81f-af78-4a03-b0d2-2e18b1c057bc"
        },
        "item": {
          "id": "8b0aa790-e81e-4846-8cce-a98ef6ceef76",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5d39c678-fb72-4625-9839-0523f88176e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "04f1e000-5be7-4f74-9290-8f4a0f1fa550",
        "cursor": {
          "ref": "4e544de9-5539-4d29-b4cb-3909456e3eee",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d2f13d66-6d12-41d4-ba62-64d8d7e815c1"
        },
        "item": {
          "id": "04f1e000-5be7-4f74-9290-8f4a0f1fa550",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b0320ed3-56aa-42f7-a155-c73b788a0998",
          "status": "Created",
          "code": 201,
          "responseTime": 8734,
          "responseSize": 694
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "5351998f-d091-4531-85c6-400b210f44fc",
        "cursor": {
          "ref": "3c4ff264-2033-4a6b-b3d4-daf1214f2884",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e1913a08-c49d-4e55-8725-78adced98632"
        },
        "item": {
          "id": "5351998f-d091-4531-85c6-400b210f44fc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "abc7adcb-4737-451a-aa56-ff88cf4833ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "aa8d329d-aa0b-49fc-9fb6-78143d52c901",
        "cursor": {
          "ref": "b93156ca-c4ef-4f63-85b1-b85169724e89",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "45bea992-f12c-42d1-9b83-d944f366603b"
        },
        "item": {
          "id": "aa8d329d-aa0b-49fc-9fb6-78143d52c901",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1bda9ea4-145e-4c31-90e5-ef458617979e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "2a804d62-9267-4640-8791-88e56bd54352",
        "cursor": {
          "ref": "34b89644-0f6b-4bb2-8d74-2316c193e43f",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f234eee9-28c3-4ec5-9508-9794c7ac71d8"
        },
        "item": {
          "id": "2a804d62-9267-4640-8791-88e56bd54352",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8be5a39f-071e-4988-a366-7cf762433467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "ecb82bc8-3a59-4fcd-9857-d6b44ab21f12",
        "cursor": {
          "ref": "98349698-952c-44db-8754-df852154fc4b",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "977806ad-5c6f-4ac6-b9ad-f1eeff963269"
        },
        "item": {
          "id": "ecb82bc8-3a59-4fcd-9857-d6b44ab21f12",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5197e842-268b-4b75-b0e4-44ff609f2354",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 934,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "c3b75aa1-068f-41aa-8901-aaca885bbe69",
        "cursor": {
          "ref": "3ed045f6-03c4-43c7-bbf6-e28d7c078dd5",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "69308547-447d-497a-94f7-db417dca5a64"
        },
        "item": {
          "id": "c3b75aa1-068f-41aa-8901-aaca885bbe69",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c1396743-8686-413e-93e9-f16330021dc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "b2f001eb-82e9-41ae-a34d-3db8f7df3a1b",
        "cursor": {
          "ref": "38d8b160-9b44-4394-9f7f-afa9f7489e39",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2b330dc7-791a-4911-89f4-465a3de6729e"
        },
        "item": {
          "id": "b2f001eb-82e9-41ae-a34d-3db8f7df3a1b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3068b175-8ad6-4b77-b3c7-9830c26bbe1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "74b41e33-bfa1-4eb6-ab68-c5e067d8fb0c",
        "cursor": {
          "ref": "10cdc048-2af1-40c8-8e64-e8bfdc87b472",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a9d9d2c3-2cef-43de-91da-3c0333ed88ed"
        },
        "item": {
          "id": "74b41e33-bfa1-4eb6-ab68-c5e067d8fb0c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ddfbae2d-9c2a-4dbb-9069-b8407545a910",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "6b20f703-2a2a-40ea-9153-74660532488d",
        "cursor": {
          "ref": "a5c65f38-be44-4f73-a5db-2c113a33cef2",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "849a4735-4fb1-4d42-aa83-d44d2cf6d9d1"
        },
        "item": {
          "id": "6b20f703-2a2a-40ea-9153-74660532488d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3c970e00-cc0c-4b78-a39c-4a37afdb22fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "7f823494-8352-4070-a878-517ecec27e76",
        "cursor": {
          "ref": "18a98be6-f615-433e-b540-d5080672fafd",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d32dea49-d1de-4d0d-aa85-f7f7b912116d"
        },
        "item": {
          "id": "7f823494-8352-4070-a878-517ecec27e76",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f74e08b0-dd65-4b82-aac5-77c105fb7a66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "f9edbb86-54f9-4acf-b35e-a194d23ec338",
        "cursor": {
          "ref": "a766fda4-03dc-46bf-8e7a-9c647ac76eea",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "dac42026-3abd-4e33-8b7d-f834a0ff94ce"
        },
        "item": {
          "id": "f9edbb86-54f9-4acf-b35e-a194d23ec338",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d4f5d7a8-97a9-4e5c-9354-9673c69faebf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "49641b20-fdad-41d5-81ad-5d2dd5a0cc77",
        "cursor": {
          "ref": "1b9fcc54-c2a9-4299-bee6-f5062b3fe68d",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3d49399c-27d0-4d4a-97c3-7d921b659e5b"
        },
        "item": {
          "id": "49641b20-fdad-41d5-81ad-5d2dd5a0cc77",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0254dbe0-7fe5-4d7a-8d6c-9eb1b6a65764",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "cdc18c3e-dc03-4740-8dbb-e3ac17e1b8da",
        "cursor": {
          "ref": "a24ba8bb-697a-419b-879f-ef69a4266b55",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a6519415-a24c-406e-9858-afe98407b3d4"
        },
        "item": {
          "id": "cdc18c3e-dc03-4740-8dbb-e3ac17e1b8da",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b39466cb-c925-4bad-b7d0-d70ccea35e50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "899e7240-44c8-4a3f-8f0d-9fcc03c8e71d",
        "cursor": {
          "ref": "3035f228-4e8d-4de8-9549-785f58044027",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6f0702bb-4668-4a93-bcf7-44122d9df93f"
        },
        "item": {
          "id": "899e7240-44c8-4a3f-8f0d-9fcc03c8e71d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "75fdc69f-a984-4b73-930b-4f7bd015736c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "5b5c0f2f-7d4b-4afa-bc83-bf86b3209a12",
        "cursor": {
          "ref": "02cd05de-ab25-4415-9d1b-f2ce1b11b046",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b7a68f69-1e34-4aa7-9b84-403c747b726c"
        },
        "item": {
          "id": "5b5c0f2f-7d4b-4afa-bc83-bf86b3209a12",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9bab4182-2375-42b4-b83d-529c4bdb2d21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "ebbff2f6-f3f5-4ef7-9620-f84b66c44953",
        "cursor": {
          "ref": "6783ea14-7185-4d5a-a0c1-3bdc932603b0",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "361bdd99-4a29-47bf-a013-f5b4e274289c"
        },
        "item": {
          "id": "ebbff2f6-f3f5-4ef7-9620-f84b66c44953",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "07e8b30c-070d-4356-bfee-85b3360ef6db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "c9aa3b42-1feb-4abb-a351-7edd52451e2e",
        "cursor": {
          "ref": "6c124dff-1fe9-4153-8f1a-f1a68c55fac4",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "86b131c9-8ead-4ab6-b3aa-c5668a275120"
        },
        "item": {
          "id": "c9aa3b42-1feb-4abb-a351-7edd52451e2e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "07b843fb-73dc-4448-8e51-ecc0bb439af1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "2e940125-708d-46e9-b7fa-8e38d91338bb",
        "cursor": {
          "ref": "39aa1e84-8521-402a-9482-4153cb6ed3f2",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7c141297-59d6-42f0-b398-bb9ff54aef28"
        },
        "item": {
          "id": "2e940125-708d-46e9-b7fa-8e38d91338bb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4b258193-4096-4e3c-85bc-338558e9e229",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "63408d8b-a762-4327-bed1-c8c9ff637c2f",
        "cursor": {
          "ref": "d2d3e65b-9a75-4240-a16a-6f8b40d72456",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ef37d091-aeae-4afb-a2e7-ffdd696164b5"
        },
        "item": {
          "id": "63408d8b-a762-4327-bed1-c8c9ff637c2f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8c51d59b-c21b-4b17-85af-d632249f3281",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b8307b58-8fec-41fa-8b04-f456b11bcfff",
        "cursor": {
          "ref": "38aba7db-b95b-436e-a0c1-c1f78e2f2fd7",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "088431f3-ee31-4410-b457-938ac52017e4"
        },
        "item": {
          "id": "b8307b58-8fec-41fa-8b04-f456b11bcfff",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e969c613-b2df-495d-84ff-da254bb1184e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "989fa78e-8a9e-443e-b544-910e8c092a43",
        "cursor": {
          "ref": "ac83f3dd-0752-44ce-a2d8-c85a0df7bab2",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "da19ac2d-9058-4720-9e8f-98177041e374"
        },
        "item": {
          "id": "989fa78e-8a9e-443e-b544-910e8c092a43",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "bd33b4e3-ec98-40e0-8c22-25d7ec87c006",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "9927a1f8-af96-410d-82ef-6f662e0d70eb",
        "cursor": {
          "ref": "b3e7e90a-324a-4d25-812a-0920d87334a1",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "43cbdaae-22c0-4151-9386-d0018b67f4cf"
        },
        "item": {
          "id": "9927a1f8-af96-410d-82ef-6f662e0d70eb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6a528608-ec07-4488-958a-0892906a62b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "19ee765e-0d6a-4b20-99e8-87d3a3c898ef",
        "cursor": {
          "ref": "89a5a430-2a26-4462-8ee1-fd15993e3db2",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ec105b5e-08ce-4670-86d0-8707adea5ff6"
        },
        "item": {
          "id": "19ee765e-0d6a-4b20-99e8-87d3a3c898ef",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4a8a131c-d304-40ab-90bc-6897848eeba3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "2e067e69-476b-4d34-9c4a-320d92398d1d",
        "cursor": {
          "ref": "57ede4fb-d9b9-421f-83b4-b2ec57f50801",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7d22d510-eed6-4c80-a015-108221459d04"
        },
        "item": {
          "id": "2e067e69-476b-4d34-9c4a-320d92398d1d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "05ac3400-b6ae-48b5-95db-dd08b2d38e96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "7ea991b7-7115-49e6-8e78-933feb4cf415",
        "cursor": {
          "ref": "1d4505ee-88ba-4a6b-b3a6-11f3f3e8a669",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "25fbd42e-6092-4668-a121-87dc033efa78"
        },
        "item": {
          "id": "7ea991b7-7115-49e6-8e78-933feb4cf415",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "18185537-7da5-4e43-b4a1-b0ef01a13d86",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "afdda7bf-3f2e-453a-b200-309415ecf823",
        "cursor": {
          "ref": "91329e98-45e0-4659-bcae-9ecde348fdfd",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c3d02e57-40cc-402a-b243-7f447b610e45"
        },
        "item": {
          "id": "afdda7bf-3f2e-453a-b200-309415ecf823",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "dcb3823b-5d2d-4d99-b095-2df67c043e25",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "502d9586-72bf-47d9-b29a-81b00713c839",
        "cursor": {
          "ref": "b6cc380b-7e1a-4626-a246-e19cba43f814",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ace0c2ce-703e-4d9b-9457-a7c968322a4d"
        },
        "item": {
          "id": "502d9586-72bf-47d9-b29a-81b00713c839",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "04c8dd49-02ba-40cd-af64-7ff75c87d36c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "502d9586-72bf-47d9-b29a-81b00713c839",
        "cursor": {
          "ref": "b6cc380b-7e1a-4626-a246-e19cba43f814",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ace0c2ce-703e-4d9b-9457-a7c968322a4d"
        },
        "item": {
          "id": "502d9586-72bf-47d9-b29a-81b00713c839",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "04c8dd49-02ba-40cd-af64-7ff75c87d36c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2ac83b2c-7c6d-453b-ab47-cb6c7b39874c",
        "cursor": {
          "ref": "de03728e-319f-43aa-8529-03ebddf20572",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d6bb025b-315b-46b0-a900-5903d5d83969"
        },
        "item": {
          "id": "2ac83b2c-7c6d-453b-ab47-cb6c7b39874c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "27929c2d-a200-4f61-8cdd-aab35100a856",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "2ac83b2c-7c6d-453b-ab47-cb6c7b39874c",
        "cursor": {
          "ref": "de03728e-319f-43aa-8529-03ebddf20572",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d6bb025b-315b-46b0-a900-5903d5d83969"
        },
        "item": {
          "id": "2ac83b2c-7c6d-453b-ab47-cb6c7b39874c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "27929c2d-a200-4f61-8cdd-aab35100a856",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "6c4e8fb2-57f5-466a-828f-5affd663ad42",
        "cursor": {
          "ref": "108d90b6-702e-46da-a596-e4a25697bc21",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cc9c1732-313b-40f3-b881-13ace14323f7"
        },
        "item": {
          "id": "6c4e8fb2-57f5-466a-828f-5affd663ad42",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "be07208a-a840-4b48-a4d0-ea680cef331d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "6c4e8fb2-57f5-466a-828f-5affd663ad42",
        "cursor": {
          "ref": "108d90b6-702e-46da-a596-e4a25697bc21",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cc9c1732-313b-40f3-b881-13ace14323f7"
        },
        "item": {
          "id": "6c4e8fb2-57f5-466a-828f-5affd663ad42",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "be07208a-a840-4b48-a4d0-ea680cef331d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e3d78ea8-32ae-4469-bd11-3f83b3d12c2d",
        "cursor": {
          "ref": "9f83dfee-b3f8-4eeb-b709-886de028565b",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2684f72e-c038-45c1-9bd0-b493fef08ffe"
        },
        "item": {
          "id": "e3d78ea8-32ae-4469-bd11-3f83b3d12c2d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e3c7230f-c047-437c-93d0-212a7f8d5203",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e3d78ea8-32ae-4469-bd11-3f83b3d12c2d",
        "cursor": {
          "ref": "9f83dfee-b3f8-4eeb-b709-886de028565b",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2684f72e-c038-45c1-9bd0-b493fef08ffe"
        },
        "item": {
          "id": "e3d78ea8-32ae-4469-bd11-3f83b3d12c2d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e3c7230f-c047-437c-93d0-212a7f8d5203",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "85864dd7-cac1-4433-a7a5-9f94fbc8edac",
        "cursor": {
          "ref": "2ccd3c24-db34-45e9-a537-31a1a82faad1",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "50a6293a-7574-48df-93fa-b82a4e2c6511"
        },
        "item": {
          "id": "85864dd7-cac1-4433-a7a5-9f94fbc8edac",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "51ec05cf-0e77-4ae6-94e3-83119aa1ffb6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "85864dd7-cac1-4433-a7a5-9f94fbc8edac",
        "cursor": {
          "ref": "2ccd3c24-db34-45e9-a537-31a1a82faad1",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "50a6293a-7574-48df-93fa-b82a4e2c6511"
        },
        "item": {
          "id": "85864dd7-cac1-4433-a7a5-9f94fbc8edac",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "51ec05cf-0e77-4ae6-94e3-83119aa1ffb6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "c4ed37f6-017c-40fc-a7c5-547567670f66",
        "cursor": {
          "ref": "2cd69e52-4e9b-4003-b7a3-7a98a1b64287",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a480fed1-9544-4181-879a-a0df09f430c8"
        },
        "item": {
          "id": "c4ed37f6-017c-40fc-a7c5-547567670f66",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "556c5999-750d-4a4b-9600-e94fd7e1f572",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c4ed37f6-017c-40fc-a7c5-547567670f66",
        "cursor": {
          "ref": "2cd69e52-4e9b-4003-b7a3-7a98a1b64287",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a480fed1-9544-4181-879a-a0df09f430c8"
        },
        "item": {
          "id": "c4ed37f6-017c-40fc-a7c5-547567670f66",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "556c5999-750d-4a4b-9600-e94fd7e1f572",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "82c8932f-322a-4ca5-8fe5-16402c331018",
        "cursor": {
          "ref": "43edd1ed-b531-4b5c-8195-be4ef1c5c1c7",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8b2fab77-0556-4303-8234-81f32292b350"
        },
        "item": {
          "id": "82c8932f-322a-4ca5-8fe5-16402c331018",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ffd498d0-eb5d-43b4-9106-df7b03f4b764",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "82c8932f-322a-4ca5-8fe5-16402c331018",
        "cursor": {
          "ref": "43edd1ed-b531-4b5c-8195-be4ef1c5c1c7",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8b2fab77-0556-4303-8234-81f32292b350"
        },
        "item": {
          "id": "82c8932f-322a-4ca5-8fe5-16402c331018",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ffd498d0-eb5d-43b4-9106-df7b03f4b764",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e1112cbe-ec87-4fac-a722-ea9b5855062f",
        "cursor": {
          "ref": "885db4b5-07d2-4eba-8abb-c50a88773174",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9d266b12-a69f-4268-b214-4abfd2335703"
        },
        "item": {
          "id": "e1112cbe-ec87-4fac-a722-ea9b5855062f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8febe0ec-9ce1-4c9f-8714-75a3b6b2d5a5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "e1112cbe-ec87-4fac-a722-ea9b5855062f",
        "cursor": {
          "ref": "885db4b5-07d2-4eba-8abb-c50a88773174",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9d266b12-a69f-4268-b214-4abfd2335703"
        },
        "item": {
          "id": "e1112cbe-ec87-4fac-a722-ea9b5855062f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8febe0ec-9ce1-4c9f-8714-75a3b6b2d5a5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "390bed15-7cc2-4a84-86f3-a250bdbceefe",
        "cursor": {
          "ref": "cd6f4b95-b8ad-4f02-8572-468640fdf571",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "af7bb674-2782-44cf-9316-51dfa8df5eab"
        },
        "item": {
          "id": "390bed15-7cc2-4a84-86f3-a250bdbceefe",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d2599b09-068e-4681-a161-4b1c8bfdc376",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "390bed15-7cc2-4a84-86f3-a250bdbceefe",
        "cursor": {
          "ref": "cd6f4b95-b8ad-4f02-8572-468640fdf571",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "af7bb674-2782-44cf-9316-51dfa8df5eab"
        },
        "item": {
          "id": "390bed15-7cc2-4a84-86f3-a250bdbceefe",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d2599b09-068e-4681-a161-4b1c8bfdc376",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "8ae3d9e8-8367-4a5b-85a3-919d7640a939",
        "cursor": {
          "ref": "66404b0e-4912-4bc6-b000-c3aed61bda14",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ad6cf2ab-02a8-461b-8480-8b8834342a03"
        },
        "item": {
          "id": "8ae3d9e8-8367-4a5b-85a3-919d7640a939",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c54c79f8-c479-4202-9e53-2115411a158b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "8ae3d9e8-8367-4a5b-85a3-919d7640a939",
        "cursor": {
          "ref": "66404b0e-4912-4bc6-b000-c3aed61bda14",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ad6cf2ab-02a8-461b-8480-8b8834342a03"
        },
        "item": {
          "id": "8ae3d9e8-8367-4a5b-85a3-919d7640a939",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c54c79f8-c479-4202-9e53-2115411a158b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0ec3aa94-038f-4ab4-a0c5-e638673d917a",
        "cursor": {
          "ref": "f7659c3c-d26d-4bdc-be3e-2d1acf410373",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1f07bf25-e572-4ed6-a1f6-2fd067f216b1"
        },
        "item": {
          "id": "0ec3aa94-038f-4ab4-a0c5-e638673d917a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d6f774fe-c43c-4fcb-8af5-2032b950494a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "0ec3aa94-038f-4ab4-a0c5-e638673d917a",
        "cursor": {
          "ref": "f7659c3c-d26d-4bdc-be3e-2d1acf410373",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1f07bf25-e572-4ed6-a1f6-2fd067f216b1"
        },
        "item": {
          "id": "0ec3aa94-038f-4ab4-a0c5-e638673d917a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d6f774fe-c43c-4fcb-8af5-2032b950494a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "28366553-57b8-4924-beca-9aaccafece66",
        "cursor": {
          "ref": "c701b912-fa5f-48aa-8b8a-3be967401bbe",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "de62e314-128d-40b3-8a13-3c1c4f764ec2"
        },
        "item": {
          "id": "28366553-57b8-4924-beca-9aaccafece66",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "96c38f8a-a949-460d-9ff0-1fc3d7748dc0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "28366553-57b8-4924-beca-9aaccafece66",
        "cursor": {
          "ref": "c701b912-fa5f-48aa-8b8a-3be967401bbe",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "de62e314-128d-40b3-8a13-3c1c4f764ec2"
        },
        "item": {
          "id": "28366553-57b8-4924-beca-9aaccafece66",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "96c38f8a-a949-460d-9ff0-1fc3d7748dc0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "96342206-3253-439a-838c-7d8030e2a88c",
        "cursor": {
          "ref": "ae83f2c5-8b9a-4cde-8c10-d39465252220",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4ae3d320-2707-4dc1-9afc-678690a5c8b6"
        },
        "item": {
          "id": "96342206-3253-439a-838c-7d8030e2a88c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "719b40cb-815c-41fe-bd46-65e68cfcb57c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "96342206-3253-439a-838c-7d8030e2a88c",
        "cursor": {
          "ref": "ae83f2c5-8b9a-4cde-8c10-d39465252220",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4ae3d320-2707-4dc1-9afc-678690a5c8b6"
        },
        "item": {
          "id": "96342206-3253-439a-838c-7d8030e2a88c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "719b40cb-815c-41fe-bd46-65e68cfcb57c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "e1c14146-8e8d-4bc0-908b-245da9858ceb",
        "cursor": {
          "ref": "f7348aab-3b93-4a4d-ae39-1b74a9292e63",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "768d1b9d-1789-4ab0-a098-396bfa1b4361"
        },
        "item": {
          "id": "e1c14146-8e8d-4bc0-908b-245da9858ceb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d8c73b67-2776-4ec3-8ae4-a4f7deeac8be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "e1c14146-8e8d-4bc0-908b-245da9858ceb",
        "cursor": {
          "ref": "f7348aab-3b93-4a4d-ae39-1b74a9292e63",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "768d1b9d-1789-4ab0-a098-396bfa1b4361"
        },
        "item": {
          "id": "e1c14146-8e8d-4bc0-908b-245da9858ceb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d8c73b67-2776-4ec3-8ae4-a4f7deeac8be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "8cd486c5-0ee5-4ddb-bdcf-d4cdb7c92376",
        "cursor": {
          "ref": "4518ecf0-fe96-4d0c-9568-d4be24459ebb",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c38bfec7-8a0d-4df0-98f5-5bf906aa8369"
        },
        "item": {
          "id": "8cd486c5-0ee5-4ddb-bdcf-d4cdb7c92376",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ef003bcb-4fad-4738-8d54-eb714b2a4a79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "8cd486c5-0ee5-4ddb-bdcf-d4cdb7c92376",
        "cursor": {
          "ref": "4518ecf0-fe96-4d0c-9568-d4be24459ebb",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c38bfec7-8a0d-4df0-98f5-5bf906aa8369"
        },
        "item": {
          "id": "8cd486c5-0ee5-4ddb-bdcf-d4cdb7c92376",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ef003bcb-4fad-4738-8d54-eb714b2a4a79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "d88a3018-4f51-47ed-bedc-f217adc759a2",
        "cursor": {
          "ref": "ea767575-7e4b-40bc-b86e-f8f144c048b9",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cfc35e05-39cf-4de3-9054-ea1e174a30a8"
        },
        "item": {
          "id": "d88a3018-4f51-47ed-bedc-f217adc759a2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "30308256-0d5f-4145-8d3f-48bed9007ba7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d88a3018-4f51-47ed-bedc-f217adc759a2",
        "cursor": {
          "ref": "ea767575-7e4b-40bc-b86e-f8f144c048b9",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cfc35e05-39cf-4de3-9054-ea1e174a30a8"
        },
        "item": {
          "id": "d88a3018-4f51-47ed-bedc-f217adc759a2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "30308256-0d5f-4145-8d3f-48bed9007ba7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "3838d201-6c7f-4bfe-bd10-014d283f2244",
        "cursor": {
          "ref": "0c2a1afe-8f5e-4699-b71a-579442f3a4e6",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "16292c42-d9d0-4881-9b90-b261f8e09b55"
        },
        "item": {
          "id": "3838d201-6c7f-4bfe-bd10-014d283f2244",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fa135996-2224-4bb9-829e-fec8d3439de6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "3838d201-6c7f-4bfe-bd10-014d283f2244",
        "cursor": {
          "ref": "0c2a1afe-8f5e-4699-b71a-579442f3a4e6",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "16292c42-d9d0-4881-9b90-b261f8e09b55"
        },
        "item": {
          "id": "3838d201-6c7f-4bfe-bd10-014d283f2244",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fa135996-2224-4bb9-829e-fec8d3439de6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5824b001-2e93-4cda-aace-da7c13ea817b",
        "cursor": {
          "ref": "0cfecb35-aa70-48a9-9e49-85ebe6477f36",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5793bb67-ab5e-4b92-80d7-28e4da3bbf55"
        },
        "item": {
          "id": "5824b001-2e93-4cda-aace-da7c13ea817b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "71f9271f-862b-4df6-b296-4db007ad9356",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "5824b001-2e93-4cda-aace-da7c13ea817b",
        "cursor": {
          "ref": "0cfecb35-aa70-48a9-9e49-85ebe6477f36",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5793bb67-ab5e-4b92-80d7-28e4da3bbf55"
        },
        "item": {
          "id": "5824b001-2e93-4cda-aace-da7c13ea817b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "71f9271f-862b-4df6-b296-4db007ad9356",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "18833503-0789-4528-a573-160a9ebdfc85",
        "cursor": {
          "ref": "4166c2b1-5607-4941-bd89-3cfe71fa5801",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ad4267d5-f405-4cfc-9a3b-2144c7e0520d"
        },
        "item": {
          "id": "18833503-0789-4528-a573-160a9ebdfc85",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "73e9f045-f098-4745-96f6-1520bf5cdf68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "18833503-0789-4528-a573-160a9ebdfc85",
        "cursor": {
          "ref": "4166c2b1-5607-4941-bd89-3cfe71fa5801",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ad4267d5-f405-4cfc-9a3b-2144c7e0520d"
        },
        "item": {
          "id": "18833503-0789-4528-a573-160a9ebdfc85",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "73e9f045-f098-4745-96f6-1520bf5cdf68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "27727c1d-dc78-4e1b-ace2-83ed22904bda",
        "cursor": {
          "ref": "d4343b89-8107-4197-bb33-b63a3eb6fd19",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bfe9a626-23e5-41b3-aab7-ecf461978fe4"
        },
        "item": {
          "id": "27727c1d-dc78-4e1b-ace2-83ed22904bda",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "843e631a-d32a-4273-8579-ef9775160cae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "27727c1d-dc78-4e1b-ace2-83ed22904bda",
        "cursor": {
          "ref": "d4343b89-8107-4197-bb33-b63a3eb6fd19",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bfe9a626-23e5-41b3-aab7-ecf461978fe4"
        },
        "item": {
          "id": "27727c1d-dc78-4e1b-ace2-83ed22904bda",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "843e631a-d32a-4273-8579-ef9775160cae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "2fe5e189-39fc-4090-9260-a5da5fa0fb6d",
        "cursor": {
          "ref": "352f46ae-547a-487e-ab82-1b3f8ee00c10",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "de42e686-b2a8-4fba-b28c-a8d51481241a"
        },
        "item": {
          "id": "2fe5e189-39fc-4090-9260-a5da5fa0fb6d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "113caef1-4eb1-492b-8579-aafde1e531b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "2fe5e189-39fc-4090-9260-a5da5fa0fb6d",
        "cursor": {
          "ref": "352f46ae-547a-487e-ab82-1b3f8ee00c10",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "de42e686-b2a8-4fba-b28c-a8d51481241a"
        },
        "item": {
          "id": "2fe5e189-39fc-4090-9260-a5da5fa0fb6d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "113caef1-4eb1-492b-8579-aafde1e531b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "cab77263-6e37-4744-9cba-99b9c3f6dfd9",
        "cursor": {
          "ref": "2506f640-f6ff-4d09-89ed-021175a928d1",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f78fa4be-cca1-46b5-8858-9577c1ec194d"
        },
        "item": {
          "id": "cab77263-6e37-4744-9cba-99b9c3f6dfd9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2baa489b-c43d-41b8-989f-84ece1eb933d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "cab77263-6e37-4744-9cba-99b9c3f6dfd9",
        "cursor": {
          "ref": "2506f640-f6ff-4d09-89ed-021175a928d1",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f78fa4be-cca1-46b5-8858-9577c1ec194d"
        },
        "item": {
          "id": "cab77263-6e37-4744-9cba-99b9c3f6dfd9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2baa489b-c43d-41b8-989f-84ece1eb933d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "59850577-f955-40c2-8295-c1dc6933e324",
        "cursor": {
          "ref": "0950ca48-a09d-4b26-a98f-175c0c80be75",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e93d9e94-f967-48de-ae92-66905c9dd59c"
        },
        "item": {
          "id": "59850577-f955-40c2-8295-c1dc6933e324",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bb9fea89-d650-4bf4-a5b6-274d5d7984df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "59850577-f955-40c2-8295-c1dc6933e324",
        "cursor": {
          "ref": "0950ca48-a09d-4b26-a98f-175c0c80be75",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e93d9e94-f967-48de-ae92-66905c9dd59c"
        },
        "item": {
          "id": "59850577-f955-40c2-8295-c1dc6933e324",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bb9fea89-d650-4bf4-a5b6-274d5d7984df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "b1e496a1-2f84-41fe-85fc-5cc9cb9b76b0",
        "cursor": {
          "ref": "5a8c6bc2-659e-4de1-8662-80921743b762",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5a2a9028-b377-4c0d-86a7-004c7dfe315c"
        },
        "item": {
          "id": "b1e496a1-2f84-41fe-85fc-5cc9cb9b76b0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0ae05bd7-7307-4d91-9df3-54e6e1795bba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "b1e496a1-2f84-41fe-85fc-5cc9cb9b76b0",
        "cursor": {
          "ref": "5a8c6bc2-659e-4de1-8662-80921743b762",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5a2a9028-b377-4c0d-86a7-004c7dfe315c"
        },
        "item": {
          "id": "b1e496a1-2f84-41fe-85fc-5cc9cb9b76b0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0ae05bd7-7307-4d91-9df3-54e6e1795bba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a29eb691-3759-42b5-9255-0e8b902cb7b0",
        "cursor": {
          "ref": "b0d60b1e-3d69-4ac3-8113-4ae9e53a5930",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0e9c68d3-7f50-42e5-9068-0df25f30cb8d"
        },
        "item": {
          "id": "a29eb691-3759-42b5-9255-0e8b902cb7b0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "20afb6be-de70-45d2-9b06-9a18ae19761c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a29eb691-3759-42b5-9255-0e8b902cb7b0",
        "cursor": {
          "ref": "b0d60b1e-3d69-4ac3-8113-4ae9e53a5930",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0e9c68d3-7f50-42e5-9068-0df25f30cb8d"
        },
        "item": {
          "id": "a29eb691-3759-42b5-9255-0e8b902cb7b0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "20afb6be-de70-45d2-9b06-9a18ae19761c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "3000978e-3499-4d20-9a8e-bb1b27876258",
        "cursor": {
          "ref": "4322f5aa-86ce-426d-b4c5-0b63738add85",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "50926207-e417-4ca2-a4ed-1451493523d9"
        },
        "item": {
          "id": "3000978e-3499-4d20-9a8e-bb1b27876258",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9110675b-4884-40d1-be8f-324242d66fb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "3000978e-3499-4d20-9a8e-bb1b27876258",
        "cursor": {
          "ref": "4322f5aa-86ce-426d-b4c5-0b63738add85",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "50926207-e417-4ca2-a4ed-1451493523d9"
        },
        "item": {
          "id": "3000978e-3499-4d20-9a8e-bb1b27876258",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9110675b-4884-40d1-be8f-324242d66fb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "aa27dbc7-26b8-441c-84bd-5f9ee72f5e72",
        "cursor": {
          "ref": "b19e048e-0f8e-487f-830a-1059c18a21e0",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "83ecdcba-306a-4aac-82fd-048b67173599"
        },
        "item": {
          "id": "aa27dbc7-26b8-441c-84bd-5f9ee72f5e72",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8161abbc-24c4-41c0-8bbd-dd9151c62c36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "aa27dbc7-26b8-441c-84bd-5f9ee72f5e72",
        "cursor": {
          "ref": "b19e048e-0f8e-487f-830a-1059c18a21e0",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "83ecdcba-306a-4aac-82fd-048b67173599"
        },
        "item": {
          "id": "aa27dbc7-26b8-441c-84bd-5f9ee72f5e72",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8161abbc-24c4-41c0-8bbd-dd9151c62c36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "896cc28c-3274-4d4f-b0d4-170481cf67fe",
        "cursor": {
          "ref": "33cdfe3e-1b26-4426-8f43-a9428e71b37a",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b2045ed7-553e-4f01-a1c9-afda1e4ed41f"
        },
        "item": {
          "id": "896cc28c-3274-4d4f-b0d4-170481cf67fe",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1b5de176-af14-4222-8b0f-fa09ffe176ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "896cc28c-3274-4d4f-b0d4-170481cf67fe",
        "cursor": {
          "ref": "33cdfe3e-1b26-4426-8f43-a9428e71b37a",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b2045ed7-553e-4f01-a1c9-afda1e4ed41f"
        },
        "item": {
          "id": "896cc28c-3274-4d4f-b0d4-170481cf67fe",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1b5de176-af14-4222-8b0f-fa09ffe176ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "90cb2add-3add-4ee6-8b1b-9d09798aaea5",
        "cursor": {
          "ref": "17f546ce-90b4-478f-be59-6f84a5f2f6b0",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6d4a943a-600d-40d1-9625-2457dfcd7adb"
        },
        "item": {
          "id": "90cb2add-3add-4ee6-8b1b-9d09798aaea5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "85e10419-1062-46c2-95e4-73dab5e85eea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "90cb2add-3add-4ee6-8b1b-9d09798aaea5",
        "cursor": {
          "ref": "17f546ce-90b4-478f-be59-6f84a5f2f6b0",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6d4a943a-600d-40d1-9625-2457dfcd7adb"
        },
        "item": {
          "id": "90cb2add-3add-4ee6-8b1b-9d09798aaea5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "85e10419-1062-46c2-95e4-73dab5e85eea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c2be8cd5-84ca-4903-a5cb-883dbffc7e50",
        "cursor": {
          "ref": "f667fdaf-fd67-4269-8ab2-902690a9b4aa",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "17c1bafd-9ad6-4369-ba2d-54ab7f81debb"
        },
        "item": {
          "id": "c2be8cd5-84ca-4903-a5cb-883dbffc7e50",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a1193cdc-1561-4efa-8a79-94b84f840ad9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c2be8cd5-84ca-4903-a5cb-883dbffc7e50",
        "cursor": {
          "ref": "f667fdaf-fd67-4269-8ab2-902690a9b4aa",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "17c1bafd-9ad6-4369-ba2d-54ab7f81debb"
        },
        "item": {
          "id": "c2be8cd5-84ca-4903-a5cb-883dbffc7e50",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a1193cdc-1561-4efa-8a79-94b84f840ad9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7a3f4062-9778-4d58-b60e-fccfd2a3d855",
        "cursor": {
          "ref": "241aedad-99f5-437e-bd43-58cc5d876c4c",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "77f3c73e-ffd4-4ae0-a522-0a947d89fe2e"
        },
        "item": {
          "id": "7a3f4062-9778-4d58-b60e-fccfd2a3d855",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "631c405e-74ad-45c5-bbcb-764151bcfeb4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "7a3f4062-9778-4d58-b60e-fccfd2a3d855",
        "cursor": {
          "ref": "241aedad-99f5-437e-bd43-58cc5d876c4c",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "77f3c73e-ffd4-4ae0-a522-0a947d89fe2e"
        },
        "item": {
          "id": "7a3f4062-9778-4d58-b60e-fccfd2a3d855",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "631c405e-74ad-45c5-bbcb-764151bcfeb4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b80b9250-e340-4670-bb44-7fe00a5801e6",
        "cursor": {
          "ref": "c0f454c7-6407-4dad-ba9a-2d7c26f2f0f2",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "82d0a381-731f-4dc7-a77e-8484e91009db"
        },
        "item": {
          "id": "b80b9250-e340-4670-bb44-7fe00a5801e6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c4c642f5-cff4-45e6-adb8-c2e0aebed2f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b80b9250-e340-4670-bb44-7fe00a5801e6",
        "cursor": {
          "ref": "c0f454c7-6407-4dad-ba9a-2d7c26f2f0f2",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "82d0a381-731f-4dc7-a77e-8484e91009db"
        },
        "item": {
          "id": "b80b9250-e340-4670-bb44-7fe00a5801e6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c4c642f5-cff4-45e6-adb8-c2e0aebed2f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "5b886daf-97a8-4418-81d7-a297601c4d52",
        "cursor": {
          "ref": "c349f5c2-1485-422d-b06f-2b8c651a6165",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "63b341bc-8275-4e49-b5c8-269620cf61cc"
        },
        "item": {
          "id": "5b886daf-97a8-4418-81d7-a297601c4d52",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cf7e9b35-dd3a-46ba-bb3d-1f852f3a342e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "5b886daf-97a8-4418-81d7-a297601c4d52",
        "cursor": {
          "ref": "c349f5c2-1485-422d-b06f-2b8c651a6165",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "63b341bc-8275-4e49-b5c8-269620cf61cc"
        },
        "item": {
          "id": "5b886daf-97a8-4418-81d7-a297601c4d52",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cf7e9b35-dd3a-46ba-bb3d-1f852f3a342e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "fb37cd66-5687-439e-afd6-9bb18e545ea1",
        "cursor": {
          "ref": "45957d65-e35a-41d6-b126-cc342abf25c7",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "91ca040b-76b9-49b5-a5ef-3affe22e739f"
        },
        "item": {
          "id": "fb37cd66-5687-439e-afd6-9bb18e545ea1",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f201e92c-b782-481d-a51b-67d8d9a33536",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "fb37cd66-5687-439e-afd6-9bb18e545ea1",
        "cursor": {
          "ref": "45957d65-e35a-41d6-b126-cc342abf25c7",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "91ca040b-76b9-49b5-a5ef-3affe22e739f"
        },
        "item": {
          "id": "fb37cd66-5687-439e-afd6-9bb18e545ea1",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f201e92c-b782-481d-a51b-67d8d9a33536",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "290a26b0-ba67-47a6-8f93-5509900b6908",
        "cursor": {
          "ref": "181b4c66-7d76-4f67-aa4b-9eeea70da6d1",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5d9bbe3b-5598-48e2-ba1c-19f385753eb3"
        },
        "item": {
          "id": "290a26b0-ba67-47a6-8f93-5509900b6908",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2df8a629-d8e5-486a-a4ec-5712f04349b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "290a26b0-ba67-47a6-8f93-5509900b6908",
        "cursor": {
          "ref": "181b4c66-7d76-4f67-aa4b-9eeea70da6d1",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5d9bbe3b-5598-48e2-ba1c-19f385753eb3"
        },
        "item": {
          "id": "290a26b0-ba67-47a6-8f93-5509900b6908",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2df8a629-d8e5-486a-a4ec-5712f04349b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "4561b373-524f-439d-863f-66abafccafd9",
        "cursor": {
          "ref": "662a04c2-fad8-4e3b-9cd9-d49530adb604",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bf62bf79-21a0-46cf-a30c-81e49371ae5d"
        },
        "item": {
          "id": "4561b373-524f-439d-863f-66abafccafd9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5b65d613-3fdb-49c4-8f64-db6211727710",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "4561b373-524f-439d-863f-66abafccafd9",
        "cursor": {
          "ref": "662a04c2-fad8-4e3b-9cd9-d49530adb604",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bf62bf79-21a0-46cf-a30c-81e49371ae5d"
        },
        "item": {
          "id": "4561b373-524f-439d-863f-66abafccafd9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5b65d613-3fdb-49c4-8f64-db6211727710",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "54b096a5-94f2-4e74-8ed1-48dd80f90800",
        "cursor": {
          "ref": "0e08f0e3-8883-45aa-be3e-d9d66548601c",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f417cb57-d01c-401c-91cc-59aeac16d48f"
        },
        "item": {
          "id": "54b096a5-94f2-4e74-8ed1-48dd80f90800",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "da6b3aab-afc9-4b83-bc37-8b3f47d00c06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "54b096a5-94f2-4e74-8ed1-48dd80f90800",
        "cursor": {
          "ref": "0e08f0e3-8883-45aa-be3e-d9d66548601c",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f417cb57-d01c-401c-91cc-59aeac16d48f"
        },
        "item": {
          "id": "54b096a5-94f2-4e74-8ed1-48dd80f90800",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "da6b3aab-afc9-4b83-bc37-8b3f47d00c06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "5894aa7c-9046-4181-996c-ff9364a1af20",
        "cursor": {
          "ref": "cfffb431-1e8b-4bb5-8b49-009e04f0a7d9",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c8691c07-49c2-4752-984d-d4cb06bce261"
        },
        "item": {
          "id": "5894aa7c-9046-4181-996c-ff9364a1af20",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a2fdf6c0-e396-4d46-b838-e9d938ae7477",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "5894aa7c-9046-4181-996c-ff9364a1af20",
        "cursor": {
          "ref": "cfffb431-1e8b-4bb5-8b49-009e04f0a7d9",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c8691c07-49c2-4752-984d-d4cb06bce261"
        },
        "item": {
          "id": "5894aa7c-9046-4181-996c-ff9364a1af20",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a2fdf6c0-e396-4d46-b838-e9d938ae7477",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "a140fdb2-7505-4f97-abe8-7e8ad296c625",
        "cursor": {
          "ref": "7bb8b3c0-ff71-4faf-9795-492c2fdee799",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8ba2ded0-1ee1-473f-82ad-7fd72b3e9b30"
        },
        "item": {
          "id": "a140fdb2-7505-4f97-abe8-7e8ad296c625",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8ac95e9a-e8ec-4097-bbf1-833a9924a818",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "a140fdb2-7505-4f97-abe8-7e8ad296c625",
        "cursor": {
          "ref": "7bb8b3c0-ff71-4faf-9795-492c2fdee799",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8ba2ded0-1ee1-473f-82ad-7fd72b3e9b30"
        },
        "item": {
          "id": "a140fdb2-7505-4f97-abe8-7e8ad296c625",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8ac95e9a-e8ec-4097-bbf1-833a9924a818",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "ef53454b-3aac-4e13-8f7a-adb8607875bd",
        "cursor": {
          "ref": "03847fa9-02fc-4d74-9d95-dff9642db9d2",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b7baee86-3de2-4900-ac80-2642852bea8f"
        },
        "item": {
          "id": "ef53454b-3aac-4e13-8f7a-adb8607875bd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bf2fb986-cc1a-4e33-ac6a-962d8facfdb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "ef53454b-3aac-4e13-8f7a-adb8607875bd",
        "cursor": {
          "ref": "03847fa9-02fc-4d74-9d95-dff9642db9d2",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b7baee86-3de2-4900-ac80-2642852bea8f"
        },
        "item": {
          "id": "ef53454b-3aac-4e13-8f7a-adb8607875bd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bf2fb986-cc1a-4e33-ac6a-962d8facfdb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "a48ec7fb-aa44-44e5-9955-8ca63632690b",
        "cursor": {
          "ref": "46119e31-a345-4410-86b0-850e2b31f273",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "abbe4dad-6755-4963-88ef-610b00c33651"
        },
        "item": {
          "id": "a48ec7fb-aa44-44e5-9955-8ca63632690b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "20299616-2474-4836-85ab-88bf738072c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "a48ec7fb-aa44-44e5-9955-8ca63632690b",
        "cursor": {
          "ref": "46119e31-a345-4410-86b0-850e2b31f273",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "abbe4dad-6755-4963-88ef-610b00c33651"
        },
        "item": {
          "id": "a48ec7fb-aa44-44e5-9955-8ca63632690b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "20299616-2474-4836-85ab-88bf738072c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "9b14dd3e-bd24-46a1-9b74-a1b26cad12dc",
        "cursor": {
          "ref": "2b019939-98ce-4fa7-91f2-4a4779422e80",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c20c5488-b4b4-426c-bb8f-5c8148561f3c"
        },
        "item": {
          "id": "9b14dd3e-bd24-46a1-9b74-a1b26cad12dc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "93538690-e674-4892-9a10-89dcad3dd164",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "9b14dd3e-bd24-46a1-9b74-a1b26cad12dc",
        "cursor": {
          "ref": "2b019939-98ce-4fa7-91f2-4a4779422e80",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c20c5488-b4b4-426c-bb8f-5c8148561f3c"
        },
        "item": {
          "id": "9b14dd3e-bd24-46a1-9b74-a1b26cad12dc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "93538690-e674-4892-9a10-89dcad3dd164",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "77fdfd5d-acb2-4ac9-bddb-e2761a96efae",
        "cursor": {
          "ref": "66eb540a-f185-4e1c-9cc1-afd385ecad4f",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "109c7ee8-0c28-41a9-ad09-95c06414a245"
        },
        "item": {
          "id": "77fdfd5d-acb2-4ac9-bddb-e2761a96efae",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4ca92019-cd0d-41b2-88e9-066b1bdb2640",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "77fdfd5d-acb2-4ac9-bddb-e2761a96efae",
        "cursor": {
          "ref": "66eb540a-f185-4e1c-9cc1-afd385ecad4f",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "109c7ee8-0c28-41a9-ad09-95c06414a245"
        },
        "item": {
          "id": "77fdfd5d-acb2-4ac9-bddb-e2761a96efae",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4ca92019-cd0d-41b2-88e9-066b1bdb2640",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "c413ae71-e0b2-44a2-81ff-ce706a9f9877",
        "cursor": {
          "ref": "b2e8d900-10b4-4573-a207-3df6285a5226",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "df64d7ec-3c41-4062-970b-0a936cb03cae"
        },
        "item": {
          "id": "c413ae71-e0b2-44a2-81ff-ce706a9f9877",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0023e552-6017-4b7c-ba27-2d87a6926b94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "c413ae71-e0b2-44a2-81ff-ce706a9f9877",
        "cursor": {
          "ref": "b2e8d900-10b4-4573-a207-3df6285a5226",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "df64d7ec-3c41-4062-970b-0a936cb03cae"
        },
        "item": {
          "id": "c413ae71-e0b2-44a2-81ff-ce706a9f9877",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0023e552-6017-4b7c-ba27-2d87a6926b94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "5865d854-cb50-445c-98da-14d363bebc42",
        "cursor": {
          "ref": "f34092aa-21b4-48b1-8217-49a5cc0c259e",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1ad5e2fb-427c-4060-8ae7-863588a090fa"
        },
        "item": {
          "id": "5865d854-cb50-445c-98da-14d363bebc42",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1c79528f-7198-43e6-8d5f-878132e9f125",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "5865d854-cb50-445c-98da-14d363bebc42",
        "cursor": {
          "ref": "f34092aa-21b4-48b1-8217-49a5cc0c259e",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1ad5e2fb-427c-4060-8ae7-863588a090fa"
        },
        "item": {
          "id": "5865d854-cb50-445c-98da-14d363bebc42",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1c79528f-7198-43e6-8d5f-878132e9f125",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "00e5ce5b-ad8b-47d5-8be5-cffc69cf60a0",
        "cursor": {
          "ref": "5ac3b406-bb6a-4c33-a5af-95e351d65b22",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "24f07d99-1e29-4e4c-99a7-dc09fad60efd"
        },
        "item": {
          "id": "00e5ce5b-ad8b-47d5-8be5-cffc69cf60a0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3b676caf-63ec-4a52-b676-457869bfb804",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "00e5ce5b-ad8b-47d5-8be5-cffc69cf60a0",
        "cursor": {
          "ref": "5ac3b406-bb6a-4c33-a5af-95e351d65b22",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "24f07d99-1e29-4e4c-99a7-dc09fad60efd"
        },
        "item": {
          "id": "00e5ce5b-ad8b-47d5-8be5-cffc69cf60a0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3b676caf-63ec-4a52-b676-457869bfb804",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "ec9da14f-ace8-415a-9fce-32ca616de94f",
        "cursor": {
          "ref": "24810f64-f57f-4517-b519-ae9905725242",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f3ade0c9-41b0-43f6-a0ad-32e4ba061175"
        },
        "item": {
          "id": "ec9da14f-ace8-415a-9fce-32ca616de94f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2e4108c5-44c8-422c-862d-8f1abea4aa02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "ec9da14f-ace8-415a-9fce-32ca616de94f",
        "cursor": {
          "ref": "24810f64-f57f-4517-b519-ae9905725242",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f3ade0c9-41b0-43f6-a0ad-32e4ba061175"
        },
        "item": {
          "id": "ec9da14f-ace8-415a-9fce-32ca616de94f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2e4108c5-44c8-422c-862d-8f1abea4aa02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "bf6e1184-7338-4c68-9916-8bfcb461d96d",
        "cursor": {
          "ref": "7456c44c-1bf7-47ac-b220-a9ec95dec825",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f6d21b7c-6573-4e3b-aeaf-c980b9306960"
        },
        "item": {
          "id": "bf6e1184-7338-4c68-9916-8bfcb461d96d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9e8a01fa-c2c3-4ec5-b500-2ecefcf9fca8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "bf6e1184-7338-4c68-9916-8bfcb461d96d",
        "cursor": {
          "ref": "7456c44c-1bf7-47ac-b220-a9ec95dec825",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f6d21b7c-6573-4e3b-aeaf-c980b9306960"
        },
        "item": {
          "id": "bf6e1184-7338-4c68-9916-8bfcb461d96d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9e8a01fa-c2c3-4ec5-b500-2ecefcf9fca8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "5d282afb-3dfc-4150-a526-5708a1bfc99f",
        "cursor": {
          "ref": "0e28e376-2917-481c-abc8-257f4e6c52f6",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0bbcd99c-b6d2-4d82-991f-7ffedc11b960"
        },
        "item": {
          "id": "5d282afb-3dfc-4150-a526-5708a1bfc99f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4ccf0278-9a2c-4658-8073-7e8f7fb98335",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "5d282afb-3dfc-4150-a526-5708a1bfc99f",
        "cursor": {
          "ref": "0e28e376-2917-481c-abc8-257f4e6c52f6",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0bbcd99c-b6d2-4d82-991f-7ffedc11b960"
        },
        "item": {
          "id": "5d282afb-3dfc-4150-a526-5708a1bfc99f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4ccf0278-9a2c-4658-8073-7e8f7fb98335",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "0e15f5cb-7a35-4007-b948-aa64df73e626",
        "cursor": {
          "ref": "4f7dbafc-3b2d-4eb8-a12a-d316ac4494e3",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4ee5dc4d-850a-412e-a222-3642ad35c1cd"
        },
        "item": {
          "id": "0e15f5cb-7a35-4007-b948-aa64df73e626",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f0619c2e-305e-47ad-8a2d-d8e6217ac121",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "0e15f5cb-7a35-4007-b948-aa64df73e626",
        "cursor": {
          "ref": "4f7dbafc-3b2d-4eb8-a12a-d316ac4494e3",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4ee5dc4d-850a-412e-a222-3642ad35c1cd"
        },
        "item": {
          "id": "0e15f5cb-7a35-4007-b948-aa64df73e626",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f0619c2e-305e-47ad-8a2d-d8e6217ac121",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "ff200910-e937-4573-b97b-7cc8fcf8ccea",
        "cursor": {
          "ref": "412b3d46-57f2-4809-b348-3780e18f1ba9",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dd9a417e-13c6-416d-8856-c3e6f1c14f86"
        },
        "item": {
          "id": "ff200910-e937-4573-b97b-7cc8fcf8ccea",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "067f3404-91e1-4d86-ab09-4906324f9327",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "ff200910-e937-4573-b97b-7cc8fcf8ccea",
        "cursor": {
          "ref": "412b3d46-57f2-4809-b348-3780e18f1ba9",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dd9a417e-13c6-416d-8856-c3e6f1c14f86"
        },
        "item": {
          "id": "ff200910-e937-4573-b97b-7cc8fcf8ccea",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "067f3404-91e1-4d86-ab09-4906324f9327",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "74737664-f226-4496-bdf3-f74b1d68739d",
        "cursor": {
          "ref": "8f7f3b60-8134-440e-b96a-8f4c95bb7a00",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "df78ff54-a159-45f1-b1da-5185a5a29a46"
        },
        "item": {
          "id": "74737664-f226-4496-bdf3-f74b1d68739d",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "6fe56497-116f-4b68-b965-f600c5c2c04a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "74737664-f226-4496-bdf3-f74b1d68739d",
        "cursor": {
          "ref": "8f7f3b60-8134-440e-b96a-8f4c95bb7a00",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "df78ff54-a159-45f1-b1da-5185a5a29a46"
        },
        "item": {
          "id": "74737664-f226-4496-bdf3-f74b1d68739d",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "6fe56497-116f-4b68-b965-f600c5c2c04a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "71634984-84de-43e8-b822-fa63d8ccbbc8",
        "cursor": {
          "ref": "2b05df62-47c2-4fbc-a0c2-0b45455864fb",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3e9d68a9-99f8-4d8f-b328-f57fb5932777"
        },
        "item": {
          "id": "71634984-84de-43e8-b822-fa63d8ccbbc8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cb73edc9-0243-461f-9f77-dbc2583e194d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "71634984-84de-43e8-b822-fa63d8ccbbc8",
        "cursor": {
          "ref": "2b05df62-47c2-4fbc-a0c2-0b45455864fb",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3e9d68a9-99f8-4d8f-b328-f57fb5932777"
        },
        "item": {
          "id": "71634984-84de-43e8-b822-fa63d8ccbbc8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cb73edc9-0243-461f-9f77-dbc2583e194d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "82649800-2d56-472e-81c2-dcabb778e425",
        "cursor": {
          "ref": "b363b2b4-4520-4312-973f-118c759e167c",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "91472f82-dc09-4b36-88e2-df24a415ca22"
        },
        "item": {
          "id": "82649800-2d56-472e-81c2-dcabb778e425",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cb99cecc-0594-4a97-af3c-24550ab19ea6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "82649800-2d56-472e-81c2-dcabb778e425",
        "cursor": {
          "ref": "b363b2b4-4520-4312-973f-118c759e167c",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "91472f82-dc09-4b36-88e2-df24a415ca22"
        },
        "item": {
          "id": "82649800-2d56-472e-81c2-dcabb778e425",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cb99cecc-0594-4a97-af3c-24550ab19ea6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "b8cf1d05-8e97-4419-bf69-a836bbbb31a1",
        "cursor": {
          "ref": "c811043f-2f02-4707-93d7-b07ddf84a5dd",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0fc87870-117f-4150-9106-be990d9b8923"
        },
        "item": {
          "id": "b8cf1d05-8e97-4419-bf69-a836bbbb31a1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1e4601aa-44ee-4a60-91da-7d633e1d1f08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "b8cf1d05-8e97-4419-bf69-a836bbbb31a1",
        "cursor": {
          "ref": "c811043f-2f02-4707-93d7-b07ddf84a5dd",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0fc87870-117f-4150-9106-be990d9b8923"
        },
        "item": {
          "id": "b8cf1d05-8e97-4419-bf69-a836bbbb31a1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1e4601aa-44ee-4a60-91da-7d633e1d1f08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "63dbecdd-dcc9-440b-a550-dabefe63f6c6",
        "cursor": {
          "ref": "7c221464-e296-427d-9e1d-b6641b7c956e",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8e977188-206f-4c3a-bb93-7ab2752c29c0"
        },
        "item": {
          "id": "63dbecdd-dcc9-440b-a550-dabefe63f6c6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e41acd77-339c-4c40-bcd8-c6a49aaaead3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "63dbecdd-dcc9-440b-a550-dabefe63f6c6",
        "cursor": {
          "ref": "7c221464-e296-427d-9e1d-b6641b7c956e",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8e977188-206f-4c3a-bb93-7ab2752c29c0"
        },
        "item": {
          "id": "63dbecdd-dcc9-440b-a550-dabefe63f6c6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e41acd77-339c-4c40-bcd8-c6a49aaaead3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "ac9f8cc8-f859-4c41-90d1-0dfbb2270c8a",
        "cursor": {
          "ref": "4728d6d1-c0d3-4cd4-846a-cf5990ada9c3",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "01997db6-2bb5-46d1-beb2-86f76b775a38"
        },
        "item": {
          "id": "ac9f8cc8-f859-4c41-90d1-0dfbb2270c8a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4b3b2f94-948e-4ea1-9cb8-f6da9f9b6cdf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "ac9f8cc8-f859-4c41-90d1-0dfbb2270c8a",
        "cursor": {
          "ref": "4728d6d1-c0d3-4cd4-846a-cf5990ada9c3",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "01997db6-2bb5-46d1-beb2-86f76b775a38"
        },
        "item": {
          "id": "ac9f8cc8-f859-4c41-90d1-0dfbb2270c8a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4b3b2f94-948e-4ea1-9cb8-f6da9f9b6cdf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "f818a650-293a-4fe4-85ed-36fdd8a96e58",
        "cursor": {
          "ref": "5bf41f39-3a05-447d-8649-0637349c447c",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fab31ea0-6e5b-4ee0-b4cf-59d3ade0cc02"
        },
        "item": {
          "id": "f818a650-293a-4fe4-85ed-36fdd8a96e58",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "38d5aa4d-af70-46de-85c9-eb0e9b77d719",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "f818a650-293a-4fe4-85ed-36fdd8a96e58",
        "cursor": {
          "ref": "5bf41f39-3a05-447d-8649-0637349c447c",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fab31ea0-6e5b-4ee0-b4cf-59d3ade0cc02"
        },
        "item": {
          "id": "f818a650-293a-4fe4-85ed-36fdd8a96e58",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "38d5aa4d-af70-46de-85c9-eb0e9b77d719",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "68d2cfff-671b-4cde-a50c-e2fe1b48f9af",
        "cursor": {
          "ref": "f02d45c0-f481-47ac-b41b-a18a6d79cdba",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bdd5eb74-59da-4f88-9ef1-e23ce84d4752"
        },
        "item": {
          "id": "68d2cfff-671b-4cde-a50c-e2fe1b48f9af",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4a25f407-d784-47a1-aa4e-40b52f878d03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "68d2cfff-671b-4cde-a50c-e2fe1b48f9af",
        "cursor": {
          "ref": "f02d45c0-f481-47ac-b41b-a18a6d79cdba",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bdd5eb74-59da-4f88-9ef1-e23ce84d4752"
        },
        "item": {
          "id": "68d2cfff-671b-4cde-a50c-e2fe1b48f9af",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4a25f407-d784-47a1-aa4e-40b52f878d03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "6f3b3d92-47b2-44c6-923d-2640ad04190e",
        "cursor": {
          "ref": "66cae974-14ae-4f0e-b7c3-7a147ac7588c",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "31da0b16-ddee-4820-b777-6bc044b34c9f"
        },
        "item": {
          "id": "6f3b3d92-47b2-44c6-923d-2640ad04190e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d0737559-fe60-4a4a-8b04-8d75eef7cf45",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "6f3b3d92-47b2-44c6-923d-2640ad04190e",
        "cursor": {
          "ref": "66cae974-14ae-4f0e-b7c3-7a147ac7588c",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "31da0b16-ddee-4820-b777-6bc044b34c9f"
        },
        "item": {
          "id": "6f3b3d92-47b2-44c6-923d-2640ad04190e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d0737559-fe60-4a4a-8b04-8d75eef7cf45",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "5ccd956b-3e61-4c13-a37a-38b9b169968f",
        "cursor": {
          "ref": "25dafeeb-b170-420e-b55c-2ab712bcf827",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2df5af96-a23d-4286-a428-8a5b2552ebab"
        },
        "item": {
          "id": "5ccd956b-3e61-4c13-a37a-38b9b169968f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f04690f5-ca2c-453e-8aad-fedd0f01913a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "5ccd956b-3e61-4c13-a37a-38b9b169968f",
        "cursor": {
          "ref": "25dafeeb-b170-420e-b55c-2ab712bcf827",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2df5af96-a23d-4286-a428-8a5b2552ebab"
        },
        "item": {
          "id": "5ccd956b-3e61-4c13-a37a-38b9b169968f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f04690f5-ca2c-453e-8aad-fedd0f01913a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "f2fb7397-3483-4ca4-8981-655ddc9ab205",
        "cursor": {
          "ref": "fbecd3d2-92e8-4362-afae-0838306785c7",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "448d24a4-d588-49b8-a000-b87063e61b14"
        },
        "item": {
          "id": "f2fb7397-3483-4ca4-8981-655ddc9ab205",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4c4793f8-4ff7-4fa6-9a60-2cba9dbc51eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f2fb7397-3483-4ca4-8981-655ddc9ab205",
        "cursor": {
          "ref": "fbecd3d2-92e8-4362-afae-0838306785c7",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "448d24a4-d588-49b8-a000-b87063e61b14"
        },
        "item": {
          "id": "f2fb7397-3483-4ca4-8981-655ddc9ab205",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4c4793f8-4ff7-4fa6-9a60-2cba9dbc51eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "46329461-00d9-4bdc-9b05-6809aacf3ae5",
        "cursor": {
          "ref": "23ff6c29-f018-4130-80d9-1f8ad7689127",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f3ad1935-68be-4e48-abf5-2988f6b2cb8b"
        },
        "item": {
          "id": "46329461-00d9-4bdc-9b05-6809aacf3ae5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "247980b4-dec2-466d-b8e5-f351c2b57585",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "46329461-00d9-4bdc-9b05-6809aacf3ae5",
        "cursor": {
          "ref": "23ff6c29-f018-4130-80d9-1f8ad7689127",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f3ad1935-68be-4e48-abf5-2988f6b2cb8b"
        },
        "item": {
          "id": "46329461-00d9-4bdc-9b05-6809aacf3ae5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "247980b4-dec2-466d-b8e5-f351c2b57585",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "7a3eea7c-944f-4563-9856-2996b99aa4b7",
        "cursor": {
          "ref": "fd2fd726-5301-4909-8963-8690958755fb",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5cdf2fc5-5f2d-4c5f-aa95-f33292c9a915"
        },
        "item": {
          "id": "7a3eea7c-944f-4563-9856-2996b99aa4b7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4ca98c79-a474-404b-a44c-711cd9c4b498",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "7a3eea7c-944f-4563-9856-2996b99aa4b7",
        "cursor": {
          "ref": "fd2fd726-5301-4909-8963-8690958755fb",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5cdf2fc5-5f2d-4c5f-aa95-f33292c9a915"
        },
        "item": {
          "id": "7a3eea7c-944f-4563-9856-2996b99aa4b7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4ca98c79-a474-404b-a44c-711cd9c4b498",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "67ffbb0f-26e7-4d56-8a0e-9571558c0e20",
        "cursor": {
          "ref": "73245a4b-daee-44e5-8a86-6176c993c345",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "beb5e048-f0c5-4d45-88ca-23f9ba5c5d5d"
        },
        "item": {
          "id": "67ffbb0f-26e7-4d56-8a0e-9571558c0e20",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "68fe82eb-82ef-4ae1-b349-da72c7436988",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "67ffbb0f-26e7-4d56-8a0e-9571558c0e20",
        "cursor": {
          "ref": "73245a4b-daee-44e5-8a86-6176c993c345",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "beb5e048-f0c5-4d45-88ca-23f9ba5c5d5d"
        },
        "item": {
          "id": "67ffbb0f-26e7-4d56-8a0e-9571558c0e20",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "68fe82eb-82ef-4ae1-b349-da72c7436988",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "c0f9e50d-c7b4-46f6-8e0a-272295bb1142",
        "cursor": {
          "ref": "fc948cb1-40ff-4020-acaa-5af3859e0444",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4722c666-fadc-4352-b881-682eed6713ae"
        },
        "item": {
          "id": "c0f9e50d-c7b4-46f6-8e0a-272295bb1142",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "007f17b6-80a8-432e-a12c-cc757ddd99fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "c0f9e50d-c7b4-46f6-8e0a-272295bb1142",
        "cursor": {
          "ref": "fc948cb1-40ff-4020-acaa-5af3859e0444",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4722c666-fadc-4352-b881-682eed6713ae"
        },
        "item": {
          "id": "c0f9e50d-c7b4-46f6-8e0a-272295bb1142",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "007f17b6-80a8-432e-a12c-cc757ddd99fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "0e38a9e9-a0ed-4acd-8454-ca4422b38868",
        "cursor": {
          "ref": "826542e3-7b66-4a87-ac96-2a089f312d3d",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "25095cde-7aed-4b17-b021-663af33581cd"
        },
        "item": {
          "id": "0e38a9e9-a0ed-4acd-8454-ca4422b38868",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f8f4d8f0-e823-4b11-8310-fb3d1ce98b48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "0e38a9e9-a0ed-4acd-8454-ca4422b38868",
        "cursor": {
          "ref": "826542e3-7b66-4a87-ac96-2a089f312d3d",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "25095cde-7aed-4b17-b021-663af33581cd"
        },
        "item": {
          "id": "0e38a9e9-a0ed-4acd-8454-ca4422b38868",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f8f4d8f0-e823-4b11-8310-fb3d1ce98b48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "cdcdb004-e94d-44da-8e01-4377252d992f",
        "cursor": {
          "ref": "cee30ca6-d40d-4281-9b05-1fe940dd94ec",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f41205ec-1653-49b1-bc3b-217a6d1b4101"
        },
        "item": {
          "id": "cdcdb004-e94d-44da-8e01-4377252d992f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "dc33bde7-f7cb-4bdd-b854-6ad7cb4f6edf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "cdcdb004-e94d-44da-8e01-4377252d992f",
        "cursor": {
          "ref": "cee30ca6-d40d-4281-9b05-1fe940dd94ec",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f41205ec-1653-49b1-bc3b-217a6d1b4101"
        },
        "item": {
          "id": "cdcdb004-e94d-44da-8e01-4377252d992f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "dc33bde7-f7cb-4bdd-b854-6ad7cb4f6edf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "8c1b6797-a1ac-402d-a7a9-025b14a5e336",
        "cursor": {
          "ref": "55f4f23f-2ab2-4099-9406-fa3e03f28910",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "aa4ec76d-9a64-4303-abd1-369241e66af6"
        },
        "item": {
          "id": "8c1b6797-a1ac-402d-a7a9-025b14a5e336",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "aa5fcb13-47b7-4306-ac46-c9653fc2825a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "8c1b6797-a1ac-402d-a7a9-025b14a5e336",
        "cursor": {
          "ref": "55f4f23f-2ab2-4099-9406-fa3e03f28910",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "aa4ec76d-9a64-4303-abd1-369241e66af6"
        },
        "item": {
          "id": "8c1b6797-a1ac-402d-a7a9-025b14a5e336",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "aa5fcb13-47b7-4306-ac46-c9653fc2825a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "32109ea8-305a-40f9-a5be-83284e71b2d8",
        "cursor": {
          "ref": "2995dfd6-17c9-4352-89c9-96ca81ff3dea",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "64d65021-61d4-4107-a782-bc2bdaa2fc3d"
        },
        "item": {
          "id": "32109ea8-305a-40f9-a5be-83284e71b2d8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dee3a0e0-43f5-4a99-bde3-db4ced363671",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "32109ea8-305a-40f9-a5be-83284e71b2d8",
        "cursor": {
          "ref": "2995dfd6-17c9-4352-89c9-96ca81ff3dea",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "64d65021-61d4-4107-a782-bc2bdaa2fc3d"
        },
        "item": {
          "id": "32109ea8-305a-40f9-a5be-83284e71b2d8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dee3a0e0-43f5-4a99-bde3-db4ced363671",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "09f9420a-2c2a-4c06-aed3-6efb1c90b948",
        "cursor": {
          "ref": "37d3e37b-7e1f-4cb8-b373-7e7482247888",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f19322e6-47f5-4983-9d1d-c81c6d0ed7e4"
        },
        "item": {
          "id": "09f9420a-2c2a-4c06-aed3-6efb1c90b948",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "41948446-2c95-4f5d-aafa-50f7d947b026",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "09f9420a-2c2a-4c06-aed3-6efb1c90b948",
        "cursor": {
          "ref": "37d3e37b-7e1f-4cb8-b373-7e7482247888",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f19322e6-47f5-4983-9d1d-c81c6d0ed7e4"
        },
        "item": {
          "id": "09f9420a-2c2a-4c06-aed3-6efb1c90b948",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "41948446-2c95-4f5d-aafa-50f7d947b026",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "a30028f3-d276-49aa-b1c9-addb99416e34",
        "cursor": {
          "ref": "779d8c71-e73d-4abf-8f3a-0018e742f727",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "451c3972-093e-4f28-bdc0-a7ff5f097ba2"
        },
        "item": {
          "id": "a30028f3-d276-49aa-b1c9-addb99416e34",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "367e7323-776f-4e84-ba2e-476d0d5de13d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "a30028f3-d276-49aa-b1c9-addb99416e34",
        "cursor": {
          "ref": "779d8c71-e73d-4abf-8f3a-0018e742f727",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "451c3972-093e-4f28-bdc0-a7ff5f097ba2"
        },
        "item": {
          "id": "a30028f3-d276-49aa-b1c9-addb99416e34",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "367e7323-776f-4e84-ba2e-476d0d5de13d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "68f0d2e0-e293-41f2-a36a-bef276acc92e",
        "cursor": {
          "ref": "523eb273-0d79-4b99-b37e-55a0ccf6b855",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6019c9e8-f4a4-4d5e-a2f4-25eb3ec3df96"
        },
        "item": {
          "id": "68f0d2e0-e293-41f2-a36a-bef276acc92e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "879b8e81-60b5-41aa-aaf8-57ae475fa78d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "68f0d2e0-e293-41f2-a36a-bef276acc92e",
        "cursor": {
          "ref": "523eb273-0d79-4b99-b37e-55a0ccf6b855",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6019c9e8-f4a4-4d5e-a2f4-25eb3ec3df96"
        },
        "item": {
          "id": "68f0d2e0-e293-41f2-a36a-bef276acc92e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "879b8e81-60b5-41aa-aaf8-57ae475fa78d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "37b62c7a-497e-4e74-89e0-9a332ba5dfa4",
        "cursor": {
          "ref": "4299a116-9572-4535-a151-eb05b7d1f174",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d8355b77-bca3-44a2-a25b-0d291c77fa4f"
        },
        "item": {
          "id": "37b62c7a-497e-4e74-89e0-9a332ba5dfa4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "04c530f2-5536-4520-b459-06dd7340ed6e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "37b62c7a-497e-4e74-89e0-9a332ba5dfa4",
        "cursor": {
          "ref": "4299a116-9572-4535-a151-eb05b7d1f174",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d8355b77-bca3-44a2-a25b-0d291c77fa4f"
        },
        "item": {
          "id": "37b62c7a-497e-4e74-89e0-9a332ba5dfa4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "04c530f2-5536-4520-b459-06dd7340ed6e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "48a1c876-a264-4f78-9715-b1010c17ea13",
        "cursor": {
          "ref": "a3527123-100e-4bbb-a29d-fab6329b1e90",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dd181229-3865-4c7f-bb50-667728226611"
        },
        "item": {
          "id": "48a1c876-a264-4f78-9715-b1010c17ea13",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "62ce9f28-fa5c-4c63-9f6d-697374276f52",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "48a1c876-a264-4f78-9715-b1010c17ea13",
        "cursor": {
          "ref": "a3527123-100e-4bbb-a29d-fab6329b1e90",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dd181229-3865-4c7f-bb50-667728226611"
        },
        "item": {
          "id": "48a1c876-a264-4f78-9715-b1010c17ea13",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "62ce9f28-fa5c-4c63-9f6d-697374276f52",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "cf58a710-7bc6-4d08-a17c-920b987b698c",
        "cursor": {
          "ref": "1898c817-20a8-4d0e-9570-b96d36c74c2f",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e9273d84-e9ce-4e26-9e28-ab7481e9e9c1"
        },
        "item": {
          "id": "cf58a710-7bc6-4d08-a17c-920b987b698c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "06bdb464-b9a1-4fe8-89cc-e92bee511688",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "cf58a710-7bc6-4d08-a17c-920b987b698c",
        "cursor": {
          "ref": "1898c817-20a8-4d0e-9570-b96d36c74c2f",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e9273d84-e9ce-4e26-9e28-ab7481e9e9c1"
        },
        "item": {
          "id": "cf58a710-7bc6-4d08-a17c-920b987b698c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "06bdb464-b9a1-4fe8-89cc-e92bee511688",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "cc082af3-987f-4994-bcda-af90732c4e51",
        "cursor": {
          "ref": "83c597be-07da-4e74-b0f5-40024c7fe970",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c18877a6-0a6f-41cb-9165-217eb00893a6"
        },
        "item": {
          "id": "cc082af3-987f-4994-bcda-af90732c4e51",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "97a09fa5-559c-4e04-9965-91802f0b539f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "cc082af3-987f-4994-bcda-af90732c4e51",
        "cursor": {
          "ref": "83c597be-07da-4e74-b0f5-40024c7fe970",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c18877a6-0a6f-41cb-9165-217eb00893a6"
        },
        "item": {
          "id": "cc082af3-987f-4994-bcda-af90732c4e51",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "97a09fa5-559c-4e04-9965-91802f0b539f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "b556d6e1-b756-47a0-ba15-9bfec4764df6",
        "cursor": {
          "ref": "03ca056e-e359-468a-9188-b24e608d7571",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "69e37511-aa1e-45c7-9d60-15d8c816f261"
        },
        "item": {
          "id": "b556d6e1-b756-47a0-ba15-9bfec4764df6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "212f200f-f2e0-438a-8c7b-10514e5d1d32",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "b556d6e1-b756-47a0-ba15-9bfec4764df6",
        "cursor": {
          "ref": "03ca056e-e359-468a-9188-b24e608d7571",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "69e37511-aa1e-45c7-9d60-15d8c816f261"
        },
        "item": {
          "id": "b556d6e1-b756-47a0-ba15-9bfec4764df6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "212f200f-f2e0-438a-8c7b-10514e5d1d32",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "87fa4966-fd1a-4c18-aef3-b8a921959cd2",
        "cursor": {
          "ref": "0c6e6595-443d-42d2-911b-6e78b2dfbf6a",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0b329b49-12d4-48cc-814b-c439403ce445"
        },
        "item": {
          "id": "87fa4966-fd1a-4c18-aef3-b8a921959cd2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "20cd00d9-d616-4258-be1d-45edd5d74c8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "87fa4966-fd1a-4c18-aef3-b8a921959cd2",
        "cursor": {
          "ref": "0c6e6595-443d-42d2-911b-6e78b2dfbf6a",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0b329b49-12d4-48cc-814b-c439403ce445"
        },
        "item": {
          "id": "87fa4966-fd1a-4c18-aef3-b8a921959cd2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "20cd00d9-d616-4258-be1d-45edd5d74c8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "f5e3b54b-3581-47b3-a845-88e386c84673",
        "cursor": {
          "ref": "840a8411-da8e-4a4a-b388-8f23f642a219",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a81ec710-3e4d-4026-8e9f-66f909c71e84"
        },
        "item": {
          "id": "f5e3b54b-3581-47b3-a845-88e386c84673",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8b76f391-38da-46b6-bed6-e4bfeca6a0fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "f5e3b54b-3581-47b3-a845-88e386c84673",
        "cursor": {
          "ref": "840a8411-da8e-4a4a-b388-8f23f642a219",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a81ec710-3e4d-4026-8e9f-66f909c71e84"
        },
        "item": {
          "id": "f5e3b54b-3581-47b3-a845-88e386c84673",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8b76f391-38da-46b6-bed6-e4bfeca6a0fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "c73851b4-74bc-4c6d-abca-5b1735ba95f4",
        "cursor": {
          "ref": "da26b388-c838-4691-8392-a433c4eefb02",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f2402208-ea80-437d-8306-0c0c9e5b84a4"
        },
        "item": {
          "id": "c73851b4-74bc-4c6d-abca-5b1735ba95f4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c822ff3f-5aee-4028-8983-bbd939e2dea8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c73851b4-74bc-4c6d-abca-5b1735ba95f4",
        "cursor": {
          "ref": "da26b388-c838-4691-8392-a433c4eefb02",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f2402208-ea80-437d-8306-0c0c9e5b84a4"
        },
        "item": {
          "id": "c73851b4-74bc-4c6d-abca-5b1735ba95f4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c822ff3f-5aee-4028-8983-bbd939e2dea8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "5e555778-d7b6-42f0-82c9-88a2074d9b6f",
        "cursor": {
          "ref": "e02aad30-b800-4afb-a6ea-19e5fd6b9339",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8d813651-f55a-4c56-8e2e-8f99120d3a39"
        },
        "item": {
          "id": "5e555778-d7b6-42f0-82c9-88a2074d9b6f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d19108a6-0d90-4286-bc74-0a209ace4be3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "5e555778-d7b6-42f0-82c9-88a2074d9b6f",
        "cursor": {
          "ref": "e02aad30-b800-4afb-a6ea-19e5fd6b9339",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8d813651-f55a-4c56-8e2e-8f99120d3a39"
        },
        "item": {
          "id": "5e555778-d7b6-42f0-82c9-88a2074d9b6f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d19108a6-0d90-4286-bc74-0a209ace4be3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "e53414c2-391e-45d1-8094-5610593970b3",
        "cursor": {
          "ref": "3a063ccd-18d8-4e1e-9cc3-99d489460f2e",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d0eeac10-30c9-4d07-8e3b-70af2639785f"
        },
        "item": {
          "id": "e53414c2-391e-45d1-8094-5610593970b3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "41579a9e-aa11-4889-8425-c8f8367a3a77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "e53414c2-391e-45d1-8094-5610593970b3",
        "cursor": {
          "ref": "3a063ccd-18d8-4e1e-9cc3-99d489460f2e",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d0eeac10-30c9-4d07-8e3b-70af2639785f"
        },
        "item": {
          "id": "e53414c2-391e-45d1-8094-5610593970b3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "41579a9e-aa11-4889-8425-c8f8367a3a77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "5c6d8459-fbdb-4c30-a5f3-2ba42a8a5fec",
        "cursor": {
          "ref": "1112ddc9-8b24-4958-a90a-6c230e797b59",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "12241a00-9906-4d2e-96cc-9c79af9ee2b7"
        },
        "item": {
          "id": "5c6d8459-fbdb-4c30-a5f3-2ba42a8a5fec",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1d1d1175-f89d-4566-b660-afcd6ae209fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "5c6d8459-fbdb-4c30-a5f3-2ba42a8a5fec",
        "cursor": {
          "ref": "1112ddc9-8b24-4958-a90a-6c230e797b59",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "12241a00-9906-4d2e-96cc-9c79af9ee2b7"
        },
        "item": {
          "id": "5c6d8459-fbdb-4c30-a5f3-2ba42a8a5fec",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1d1d1175-f89d-4566-b660-afcd6ae209fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "1443fd94-7610-4ee5-a57b-5e7b72dd5492",
        "cursor": {
          "ref": "257307be-b15f-458c-87be-fa880bd76692",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "831e25f9-c82f-45e0-830a-8d953c835318"
        },
        "item": {
          "id": "1443fd94-7610-4ee5-a57b-5e7b72dd5492",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bf7597fb-7b89-4ab5-be0c-4c06e54922c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "1443fd94-7610-4ee5-a57b-5e7b72dd5492",
        "cursor": {
          "ref": "257307be-b15f-458c-87be-fa880bd76692",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "831e25f9-c82f-45e0-830a-8d953c835318"
        },
        "item": {
          "id": "1443fd94-7610-4ee5-a57b-5e7b72dd5492",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bf7597fb-7b89-4ab5-be0c-4c06e54922c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "761e9670-959c-4de5-846b-f6a029469e16",
        "cursor": {
          "ref": "13d85999-d5a9-4d1a-86d4-8a383e0226f0",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b31714f0-24ea-41f4-940a-15f93bfc4c96"
        },
        "item": {
          "id": "761e9670-959c-4de5-846b-f6a029469e16",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "487ad3fe-23e4-4d8d-ba23-e9e9150098c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "761e9670-959c-4de5-846b-f6a029469e16",
        "cursor": {
          "ref": "13d85999-d5a9-4d1a-86d4-8a383e0226f0",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b31714f0-24ea-41f4-940a-15f93bfc4c96"
        },
        "item": {
          "id": "761e9670-959c-4de5-846b-f6a029469e16",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "487ad3fe-23e4-4d8d-ba23-e9e9150098c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "2b37f896-5389-41b7-b5c7-5961e6e53131",
        "cursor": {
          "ref": "d981e1fd-9088-4535-9c91-6f2cce700365",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "499a2a8c-7140-4889-8267-78062c2c2612"
        },
        "item": {
          "id": "2b37f896-5389-41b7-b5c7-5961e6e53131",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b267f2b1-7474-4b87-b6df-6bbb5fd3fc24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "2b37f896-5389-41b7-b5c7-5961e6e53131",
        "cursor": {
          "ref": "d981e1fd-9088-4535-9c91-6f2cce700365",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "499a2a8c-7140-4889-8267-78062c2c2612"
        },
        "item": {
          "id": "2b37f896-5389-41b7-b5c7-5961e6e53131",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b267f2b1-7474-4b87-b6df-6bbb5fd3fc24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "9ad3ed77-b26c-4fb6-ab42-3e6a92f38f9e",
        "cursor": {
          "ref": "88ae88f7-6ac6-4a48-80f1-2df62fbafdb5",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7bdafe0f-32a8-4d64-a510-faf2fbe8e288"
        },
        "item": {
          "id": "9ad3ed77-b26c-4fb6-ab42-3e6a92f38f9e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "daeefb04-6e47-4864-96c9-e628a32c33ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "9ad3ed77-b26c-4fb6-ab42-3e6a92f38f9e",
        "cursor": {
          "ref": "88ae88f7-6ac6-4a48-80f1-2df62fbafdb5",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7bdafe0f-32a8-4d64-a510-faf2fbe8e288"
        },
        "item": {
          "id": "9ad3ed77-b26c-4fb6-ab42-3e6a92f38f9e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "daeefb04-6e47-4864-96c9-e628a32c33ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "54e72849-945c-4250-88f5-398a68e7c4ca",
        "cursor": {
          "ref": "5aea7d04-0eda-4199-bd34-9085eebbfebf",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2e32dfe5-b892-424f-a4b7-a844b52bcb36"
        },
        "item": {
          "id": "54e72849-945c-4250-88f5-398a68e7c4ca",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2a8da270-cf2f-40a3-91ba-6af3f35936e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "54e72849-945c-4250-88f5-398a68e7c4ca",
        "cursor": {
          "ref": "5aea7d04-0eda-4199-bd34-9085eebbfebf",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2e32dfe5-b892-424f-a4b7-a844b52bcb36"
        },
        "item": {
          "id": "54e72849-945c-4250-88f5-398a68e7c4ca",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2a8da270-cf2f-40a3-91ba-6af3f35936e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "e655d518-f043-4dd1-b2fd-3690c5928380",
        "cursor": {
          "ref": "2d8d0c4c-e4fc-47c0-8dfb-42b77c0fd15d",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "229f95e9-5d61-4f09-9e30-b044ac9e3a96"
        },
        "item": {
          "id": "e655d518-f043-4dd1-b2fd-3690c5928380",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d3820e17-7237-4c2e-a9ea-9152be803c33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "e655d518-f043-4dd1-b2fd-3690c5928380",
        "cursor": {
          "ref": "2d8d0c4c-e4fc-47c0-8dfb-42b77c0fd15d",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "229f95e9-5d61-4f09-9e30-b044ac9e3a96"
        },
        "item": {
          "id": "e655d518-f043-4dd1-b2fd-3690c5928380",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d3820e17-7237-4c2e-a9ea-9152be803c33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "dfa22408-c6b6-4d61-b83c-eaf842a5cb55",
        "cursor": {
          "ref": "44e149b7-f4af-4cbb-a412-c8a9e307127a",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4bca62a4-2f7c-4266-b079-9214a54de0ff"
        },
        "item": {
          "id": "dfa22408-c6b6-4d61-b83c-eaf842a5cb55",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5a2d97ff-832d-48d5-b215-d253c59642e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "dfa22408-c6b6-4d61-b83c-eaf842a5cb55",
        "cursor": {
          "ref": "44e149b7-f4af-4cbb-a412-c8a9e307127a",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4bca62a4-2f7c-4266-b079-9214a54de0ff"
        },
        "item": {
          "id": "dfa22408-c6b6-4d61-b83c-eaf842a5cb55",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5a2d97ff-832d-48d5-b215-d253c59642e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "1d223a64-275c-4d94-8113-428f0f1a2dde",
        "cursor": {
          "ref": "0e7ba723-ade1-4de9-ab3d-3a63c0b1a497",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9bc869ec-d3e9-4c64-9e2f-824bf698b821"
        },
        "item": {
          "id": "1d223a64-275c-4d94-8113-428f0f1a2dde",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c6e48d65-91ad-491d-83b5-71b344894b69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "1d223a64-275c-4d94-8113-428f0f1a2dde",
        "cursor": {
          "ref": "0e7ba723-ade1-4de9-ab3d-3a63c0b1a497",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9bc869ec-d3e9-4c64-9e2f-824bf698b821"
        },
        "item": {
          "id": "1d223a64-275c-4d94-8113-428f0f1a2dde",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c6e48d65-91ad-491d-83b5-71b344894b69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "f68432df-f204-4fe1-acc4-4b437b5a3b83",
        "cursor": {
          "ref": "d45a585b-1f44-4727-b7da-eb5e643b69f8",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e1bfde21-26bf-437b-ac67-3148b5a97bd3"
        },
        "item": {
          "id": "f68432df-f204-4fe1-acc4-4b437b5a3b83",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "30cf788d-776b-42ae-bde0-970f88bac72f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "f68432df-f204-4fe1-acc4-4b437b5a3b83",
        "cursor": {
          "ref": "d45a585b-1f44-4727-b7da-eb5e643b69f8",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e1bfde21-26bf-437b-ac67-3148b5a97bd3"
        },
        "item": {
          "id": "f68432df-f204-4fe1-acc4-4b437b5a3b83",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "30cf788d-776b-42ae-bde0-970f88bac72f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "849a3ebe-256b-4100-988a-f379f819d317",
        "cursor": {
          "ref": "df979a59-d0ff-4d51-b209-dbf44728d4d9",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "41397251-4d53-4365-8b68-9631c9a0a346"
        },
        "item": {
          "id": "849a3ebe-256b-4100-988a-f379f819d317",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c56364ba-c09d-4421-b1b5-e39c322a3cc5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "849a3ebe-256b-4100-988a-f379f819d317",
        "cursor": {
          "ref": "df979a59-d0ff-4d51-b209-dbf44728d4d9",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "41397251-4d53-4365-8b68-9631c9a0a346"
        },
        "item": {
          "id": "849a3ebe-256b-4100-988a-f379f819d317",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c56364ba-c09d-4421-b1b5-e39c322a3cc5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "a9204024-0ac1-4e0b-81a6-27f8c59c824e",
        "cursor": {
          "ref": "72f8e137-e6a1-4b86-9902-092c93b173df",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7974b1fa-ff89-4d5e-94b4-1452585fc894"
        },
        "item": {
          "id": "a9204024-0ac1-4e0b-81a6-27f8c59c824e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8651d53c-e67c-4d85-86fe-a7eb1038759a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a9204024-0ac1-4e0b-81a6-27f8c59c824e",
        "cursor": {
          "ref": "72f8e137-e6a1-4b86-9902-092c93b173df",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7974b1fa-ff89-4d5e-94b4-1452585fc894"
        },
        "item": {
          "id": "a9204024-0ac1-4e0b-81a6-27f8c59c824e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8651d53c-e67c-4d85-86fe-a7eb1038759a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "50f353dd-8f79-4fcd-8f79-9b3412fcc010",
        "cursor": {
          "ref": "bca799dc-3937-408c-8b1e-c292d844ecd6",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "56f830ee-a783-4e58-a750-5488371f4bb0"
        },
        "item": {
          "id": "50f353dd-8f79-4fcd-8f79-9b3412fcc010",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "52e682bd-3096-4a69-99ce-03a535fcbac8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "50f353dd-8f79-4fcd-8f79-9b3412fcc010",
        "cursor": {
          "ref": "bca799dc-3937-408c-8b1e-c292d844ecd6",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "56f830ee-a783-4e58-a750-5488371f4bb0"
        },
        "item": {
          "id": "50f353dd-8f79-4fcd-8f79-9b3412fcc010",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "52e682bd-3096-4a69-99ce-03a535fcbac8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "bbe7cddb-1ae6-491f-a361-456ec80ad7da",
        "cursor": {
          "ref": "90649301-9852-4b03-a318-aa7b8fe12472",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "63023496-c6ab-45dd-94de-d966f7eac93b"
        },
        "item": {
          "id": "bbe7cddb-1ae6-491f-a361-456ec80ad7da",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "906d728e-b6f5-4885-9edb-8edb332e5b11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "bbe7cddb-1ae6-491f-a361-456ec80ad7da",
        "cursor": {
          "ref": "90649301-9852-4b03-a318-aa7b8fe12472",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "63023496-c6ab-45dd-94de-d966f7eac93b"
        },
        "item": {
          "id": "bbe7cddb-1ae6-491f-a361-456ec80ad7da",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "906d728e-b6f5-4885-9edb-8edb332e5b11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b32e1729-f22c-4e81-b55f-d9c0ea718fbf",
        "cursor": {
          "ref": "9050b992-1519-43d5-aa0e-164ea261f939",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "644ed479-d79f-4f22-9c11-b96d5794a337"
        },
        "item": {
          "id": "b32e1729-f22c-4e81-b55f-d9c0ea718fbf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "253825e9-bd40-45b1-bea0-0dfe04548010",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "b32e1729-f22c-4e81-b55f-d9c0ea718fbf",
        "cursor": {
          "ref": "9050b992-1519-43d5-aa0e-164ea261f939",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "644ed479-d79f-4f22-9c11-b96d5794a337"
        },
        "item": {
          "id": "b32e1729-f22c-4e81-b55f-d9c0ea718fbf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "253825e9-bd40-45b1-bea0-0dfe04548010",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "9108aa68-be78-4727-a2c0-8352c5b65e9b",
        "cursor": {
          "ref": "3e9c5aeb-6872-48dd-ad47-e38f2a3dd5be",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e9502b8a-7780-4efb-b83e-7fd03e779e48"
        },
        "item": {
          "id": "9108aa68-be78-4727-a2c0-8352c5b65e9b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ae7b3b06-2855-4879-85d6-a04ad335ee3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "9108aa68-be78-4727-a2c0-8352c5b65e9b",
        "cursor": {
          "ref": "3e9c5aeb-6872-48dd-ad47-e38f2a3dd5be",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e9502b8a-7780-4efb-b83e-7fd03e779e48"
        },
        "item": {
          "id": "9108aa68-be78-4727-a2c0-8352c5b65e9b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ae7b3b06-2855-4879-85d6-a04ad335ee3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "6a8045a7-729b-47c9-a700-f0b81fb98414",
        "cursor": {
          "ref": "b3806323-0047-4dfb-81e8-b1cb49f67d94",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "90d19063-d5f8-4ddd-ab09-6ba106424711"
        },
        "item": {
          "id": "6a8045a7-729b-47c9-a700-f0b81fb98414",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c5db639f-f496-4d92-b78d-c936a0c72804",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "6a8045a7-729b-47c9-a700-f0b81fb98414",
        "cursor": {
          "ref": "b3806323-0047-4dfb-81e8-b1cb49f67d94",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "90d19063-d5f8-4ddd-ab09-6ba106424711"
        },
        "item": {
          "id": "6a8045a7-729b-47c9-a700-f0b81fb98414",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c5db639f-f496-4d92-b78d-c936a0c72804",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "7c23651b-794a-44ad-a430-bd9c638e1244",
        "cursor": {
          "ref": "c612814e-7a4e-448f-a5a3-0be1e2a44773",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "21af5339-e151-45f2-a5ff-bf1eb0630e20"
        },
        "item": {
          "id": "7c23651b-794a-44ad-a430-bd9c638e1244",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "de666162-b05d-4ebd-a371-fe21a84f0df4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "7c23651b-794a-44ad-a430-bd9c638e1244",
        "cursor": {
          "ref": "c612814e-7a4e-448f-a5a3-0be1e2a44773",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "21af5339-e151-45f2-a5ff-bf1eb0630e20"
        },
        "item": {
          "id": "7c23651b-794a-44ad-a430-bd9c638e1244",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "de666162-b05d-4ebd-a371-fe21a84f0df4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "7210b5a8-e693-4c19-96c3-5a07e1ed8f98",
        "cursor": {
          "ref": "d8ff31aa-6a48-429b-becd-2e471d0c968a",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0cedf7b5-c7d2-4b77-997d-78932324b1fc"
        },
        "item": {
          "id": "7210b5a8-e693-4c19-96c3-5a07e1ed8f98",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "25259fcc-79b1-411a-bc99-cb5fbac7937d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "7210b5a8-e693-4c19-96c3-5a07e1ed8f98",
        "cursor": {
          "ref": "d8ff31aa-6a48-429b-becd-2e471d0c968a",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0cedf7b5-c7d2-4b77-997d-78932324b1fc"
        },
        "item": {
          "id": "7210b5a8-e693-4c19-96c3-5a07e1ed8f98",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "25259fcc-79b1-411a-bc99-cb5fbac7937d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "e15f8a30-84c4-4839-af71-a9d499c16ce2",
        "cursor": {
          "ref": "0ef7d8b7-cb11-4200-8c6e-545bd73c2af5",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bacf0889-feaa-4a0e-a232-91980d7c9001"
        },
        "item": {
          "id": "e15f8a30-84c4-4839-af71-a9d499c16ce2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7c2f5e3f-c562-46c1-9753-91ac2d3ce5a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "e15f8a30-84c4-4839-af71-a9d499c16ce2",
        "cursor": {
          "ref": "0ef7d8b7-cb11-4200-8c6e-545bd73c2af5",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bacf0889-feaa-4a0e-a232-91980d7c9001"
        },
        "item": {
          "id": "e15f8a30-84c4-4839-af71-a9d499c16ce2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7c2f5e3f-c562-46c1-9753-91ac2d3ce5a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "50387b84-70ae-4f6f-bc6b-4c0af8cdb1b4",
        "cursor": {
          "ref": "7b7065f2-ea6b-4a4a-b975-a8233192f882",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "422a146e-78d2-4465-9b03-54640ba6a485"
        },
        "item": {
          "id": "50387b84-70ae-4f6f-bc6b-4c0af8cdb1b4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "95b8be4f-4cfc-4403-88e1-dcb5bc2a8913",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "50387b84-70ae-4f6f-bc6b-4c0af8cdb1b4",
        "cursor": {
          "ref": "7b7065f2-ea6b-4a4a-b975-a8233192f882",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "422a146e-78d2-4465-9b03-54640ba6a485"
        },
        "item": {
          "id": "50387b84-70ae-4f6f-bc6b-4c0af8cdb1b4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "95b8be4f-4cfc-4403-88e1-dcb5bc2a8913",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "e357298f-27c7-4c87-8abb-abb0d377f972",
        "cursor": {
          "ref": "b1002371-061c-4f01-98a8-8f402d05234d",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "94cb6905-e3bd-4d68-a21c-2163b84482e2"
        },
        "item": {
          "id": "e357298f-27c7-4c87-8abb-abb0d377f972",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b7051c19-f832-4097-acc0-697898347824",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e357298f-27c7-4c87-8abb-abb0d377f972",
        "cursor": {
          "ref": "b1002371-061c-4f01-98a8-8f402d05234d",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "94cb6905-e3bd-4d68-a21c-2163b84482e2"
        },
        "item": {
          "id": "e357298f-27c7-4c87-8abb-abb0d377f972",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b7051c19-f832-4097-acc0-697898347824",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "3ecedae1-14ca-4a18-9d06-7b602bcfbfba",
        "cursor": {
          "ref": "1374487b-5cc3-49ae-b37a-c7a0010eb1d8",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a57a4daf-0880-4075-ac19-af0201f44f13"
        },
        "item": {
          "id": "3ecedae1-14ca-4a18-9d06-7b602bcfbfba",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1f00197b-4f82-445d-9c9e-c3d05154428b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3ecedae1-14ca-4a18-9d06-7b602bcfbfba",
        "cursor": {
          "ref": "1374487b-5cc3-49ae-b37a-c7a0010eb1d8",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a57a4daf-0880-4075-ac19-af0201f44f13"
        },
        "item": {
          "id": "3ecedae1-14ca-4a18-9d06-7b602bcfbfba",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1f00197b-4f82-445d-9c9e-c3d05154428b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3a25200a-2a54-48bd-9a04-4e7a0e51a5cf",
        "cursor": {
          "ref": "bbca6a65-e8a3-46dd-8248-016a6134f952",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fee03ede-1db5-4a19-94d4-dc78bbdbae6e"
        },
        "item": {
          "id": "3a25200a-2a54-48bd-9a04-4e7a0e51a5cf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "22802bb6-6a2c-4bbc-8690-53ea82d4e3ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "3a25200a-2a54-48bd-9a04-4e7a0e51a5cf",
        "cursor": {
          "ref": "bbca6a65-e8a3-46dd-8248-016a6134f952",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fee03ede-1db5-4a19-94d4-dc78bbdbae6e"
        },
        "item": {
          "id": "3a25200a-2a54-48bd-9a04-4e7a0e51a5cf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "22802bb6-6a2c-4bbc-8690-53ea82d4e3ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "d4c8e48e-56c3-493b-93af-64be68a47e28",
        "cursor": {
          "ref": "30cc3f6d-7c64-48de-b913-02bfd0f24457",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4edf2eab-16ef-4077-9642-331cfc92a949"
        },
        "item": {
          "id": "d4c8e48e-56c3-493b-93af-64be68a47e28",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "47f3fef7-b921-41d1-a342-0c087136a924",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "d4c8e48e-56c3-493b-93af-64be68a47e28",
        "cursor": {
          "ref": "30cc3f6d-7c64-48de-b913-02bfd0f24457",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4edf2eab-16ef-4077-9642-331cfc92a949"
        },
        "item": {
          "id": "d4c8e48e-56c3-493b-93af-64be68a47e28",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "47f3fef7-b921-41d1-a342-0c087136a924",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "bea6cd21-f9c8-4166-ba3a-284b27446474",
        "cursor": {
          "ref": "d5d2800f-3825-4d01-872a-ec4c13f95a31",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "de07e4d4-790a-4fae-8d62-17aae08064c3"
        },
        "item": {
          "id": "bea6cd21-f9c8-4166-ba3a-284b27446474",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9158a0be-ff7c-40af-9a99-231fd2b5c84e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "bea6cd21-f9c8-4166-ba3a-284b27446474",
        "cursor": {
          "ref": "d5d2800f-3825-4d01-872a-ec4c13f95a31",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "de07e4d4-790a-4fae-8d62-17aae08064c3"
        },
        "item": {
          "id": "bea6cd21-f9c8-4166-ba3a-284b27446474",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9158a0be-ff7c-40af-9a99-231fd2b5c84e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "07215f71-4695-4c4f-bd25-52dddb39b93b",
        "cursor": {
          "ref": "6383e489-2f84-436b-964f-f55e120960e6",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fa7329e6-5b7d-49eb-82a6-a6ff70999289"
        },
        "item": {
          "id": "07215f71-4695-4c4f-bd25-52dddb39b93b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "43a08efc-96b0-40ae-8fe9-71c9d6a25a92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "07215f71-4695-4c4f-bd25-52dddb39b93b",
        "cursor": {
          "ref": "6383e489-2f84-436b-964f-f55e120960e6",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fa7329e6-5b7d-49eb-82a6-a6ff70999289"
        },
        "item": {
          "id": "07215f71-4695-4c4f-bd25-52dddb39b93b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "43a08efc-96b0-40ae-8fe9-71c9d6a25a92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "1ab76398-ffed-414c-b636-340c78c2480d",
        "cursor": {
          "ref": "d0ddf42b-f09a-4369-a43f-5b23a0e62417",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9bcccfbc-55c9-410e-9f2d-fb06c56e0a63"
        },
        "item": {
          "id": "1ab76398-ffed-414c-b636-340c78c2480d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2f85c845-b38c-4099-b681-10bcf90cb8ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1ab76398-ffed-414c-b636-340c78c2480d",
        "cursor": {
          "ref": "d0ddf42b-f09a-4369-a43f-5b23a0e62417",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9bcccfbc-55c9-410e-9f2d-fb06c56e0a63"
        },
        "item": {
          "id": "1ab76398-ffed-414c-b636-340c78c2480d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2f85c845-b38c-4099-b681-10bcf90cb8ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "513dc518-21c5-4d79-b810-f3616920a564",
        "cursor": {
          "ref": "59bc0cff-48f0-4a19-a028-6c312e2e5bca",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e1ce6714-ade7-40f6-a73e-27c487792a06"
        },
        "item": {
          "id": "513dc518-21c5-4d79-b810-f3616920a564",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "db3f73e9-d8e0-4242-8f29-a9b1a23043f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "513dc518-21c5-4d79-b810-f3616920a564",
        "cursor": {
          "ref": "59bc0cff-48f0-4a19-a028-6c312e2e5bca",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e1ce6714-ade7-40f6-a73e-27c487792a06"
        },
        "item": {
          "id": "513dc518-21c5-4d79-b810-f3616920a564",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "db3f73e9-d8e0-4242-8f29-a9b1a23043f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "507bdf9f-5403-458b-8908-f90d7edde1fe",
        "cursor": {
          "ref": "be683001-6790-44d5-b600-207aa57ace07",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d39491d9-4607-42d4-8d41-4380d813055a"
        },
        "item": {
          "id": "507bdf9f-5403-458b-8908-f90d7edde1fe",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "51c67fd7-3782-4a3c-82da-84abafed8c01",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "507bdf9f-5403-458b-8908-f90d7edde1fe",
        "cursor": {
          "ref": "be683001-6790-44d5-b600-207aa57ace07",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d39491d9-4607-42d4-8d41-4380d813055a"
        },
        "item": {
          "id": "507bdf9f-5403-458b-8908-f90d7edde1fe",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "51c67fd7-3782-4a3c-82da-84abafed8c01",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "651f7995-d397-4ddd-ab3f-b9bdd76e45de",
        "cursor": {
          "ref": "5e9c5be3-2f5f-4a53-bae1-0e5dcf7e4677",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cfe03fab-407b-4939-8ca0-0f51698d8945"
        },
        "item": {
          "id": "651f7995-d397-4ddd-ab3f-b9bdd76e45de",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6a07da13-b759-4952-a770-c95713410d0c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "651f7995-d397-4ddd-ab3f-b9bdd76e45de",
        "cursor": {
          "ref": "5e9c5be3-2f5f-4a53-bae1-0e5dcf7e4677",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cfe03fab-407b-4939-8ca0-0f51698d8945"
        },
        "item": {
          "id": "651f7995-d397-4ddd-ab3f-b9bdd76e45de",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6a07da13-b759-4952-a770-c95713410d0c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ded757b7-0222-4a62-9c0a-ec580854852b",
        "cursor": {
          "ref": "1148f348-ea73-445e-a59b-0fcfcd54090b",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a027b980-9f26-4456-b8c1-695bae80cb44"
        },
        "item": {
          "id": "ded757b7-0222-4a62-9c0a-ec580854852b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5b524650-4a80-48f3-b67c-ca7cec639076",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "ded757b7-0222-4a62-9c0a-ec580854852b",
        "cursor": {
          "ref": "1148f348-ea73-445e-a59b-0fcfcd54090b",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a027b980-9f26-4456-b8c1-695bae80cb44"
        },
        "item": {
          "id": "ded757b7-0222-4a62-9c0a-ec580854852b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5b524650-4a80-48f3-b67c-ca7cec639076",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "73777006-0a7a-4b66-8b6d-4caa13246176",
        "cursor": {
          "ref": "b7a001bd-618f-46a6-9a68-52c4a0c2eaa0",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "907c6303-7dbd-4cef-a828-f8fde8d07897"
        },
        "item": {
          "id": "73777006-0a7a-4b66-8b6d-4caa13246176",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b12c12d3-d0db-45da-ac3d-2735e9383b8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "73777006-0a7a-4b66-8b6d-4caa13246176",
        "cursor": {
          "ref": "b7a001bd-618f-46a6-9a68-52c4a0c2eaa0",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "907c6303-7dbd-4cef-a828-f8fde8d07897"
        },
        "item": {
          "id": "73777006-0a7a-4b66-8b6d-4caa13246176",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b12c12d3-d0db-45da-ac3d-2735e9383b8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "d4815f38-e313-48d7-ade8-13c0ae88a6aa",
        "cursor": {
          "ref": "bbc77d45-4c1c-4414-9271-71c4dac47986",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "be059695-f69b-46ce-a83f-18927757324a"
        },
        "item": {
          "id": "d4815f38-e313-48d7-ade8-13c0ae88a6aa",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "128f3419-a461-4a46-91f7-c7b94a2a34a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "d4815f38-e313-48d7-ade8-13c0ae88a6aa",
        "cursor": {
          "ref": "bbc77d45-4c1c-4414-9271-71c4dac47986",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "be059695-f69b-46ce-a83f-18927757324a"
        },
        "item": {
          "id": "d4815f38-e313-48d7-ade8-13c0ae88a6aa",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "128f3419-a461-4a46-91f7-c7b94a2a34a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "0e9dc76a-2a96-40ec-94e5-af11710e9c98",
        "cursor": {
          "ref": "9db2ee8d-3157-44ca-b9ba-68d87046d6e0",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "75c2dc7c-cdf2-474c-bcb4-8f879ef5cd8f"
        },
        "item": {
          "id": "0e9dc76a-2a96-40ec-94e5-af11710e9c98",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "50b0ad59-1007-4c71-945e-d8f9bd901782",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "0e9dc76a-2a96-40ec-94e5-af11710e9c98",
        "cursor": {
          "ref": "9db2ee8d-3157-44ca-b9ba-68d87046d6e0",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "75c2dc7c-cdf2-474c-bcb4-8f879ef5cd8f"
        },
        "item": {
          "id": "0e9dc76a-2a96-40ec-94e5-af11710e9c98",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "50b0ad59-1007-4c71-945e-d8f9bd901782",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "1042662b-b104-4f93-bc63-b68cda5a55ac",
        "cursor": {
          "ref": "1b420db9-2862-4f30-a595-442153a5f3ef",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "61641137-560b-402e-a799-6e03a331aac1"
        },
        "item": {
          "id": "1042662b-b104-4f93-bc63-b68cda5a55ac",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "416a6109-6afd-4284-bf48-5dc6e42e8b5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "1042662b-b104-4f93-bc63-b68cda5a55ac",
        "cursor": {
          "ref": "1b420db9-2862-4f30-a595-442153a5f3ef",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "61641137-560b-402e-a799-6e03a331aac1"
        },
        "item": {
          "id": "1042662b-b104-4f93-bc63-b68cda5a55ac",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "416a6109-6afd-4284-bf48-5dc6e42e8b5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "a196b082-3636-40b9-a10e-0ab94c502963",
        "cursor": {
          "ref": "43fd002a-4440-4aed-acc8-03ba69606597",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1a5ce94a-e02c-4aec-a601-d3ba5ab28242"
        },
        "item": {
          "id": "a196b082-3636-40b9-a10e-0ab94c502963",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "21424663-bff8-47c6-8d63-dd8a90dc5f02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "a196b082-3636-40b9-a10e-0ab94c502963",
        "cursor": {
          "ref": "43fd002a-4440-4aed-acc8-03ba69606597",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1a5ce94a-e02c-4aec-a601-d3ba5ab28242"
        },
        "item": {
          "id": "a196b082-3636-40b9-a10e-0ab94c502963",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "21424663-bff8-47c6-8d63-dd8a90dc5f02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "145000b0-ad8e-46f7-88aa-88eb953dccda",
        "cursor": {
          "ref": "5f3fed69-102d-4113-8113-0d6c70e8ce27",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4119c13d-e6c0-485f-b991-e5be8d83a3bd"
        },
        "item": {
          "id": "145000b0-ad8e-46f7-88aa-88eb953dccda",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c9df1687-0f5a-4369-a439-017b694fdf50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "145000b0-ad8e-46f7-88aa-88eb953dccda",
        "cursor": {
          "ref": "5f3fed69-102d-4113-8113-0d6c70e8ce27",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4119c13d-e6c0-485f-b991-e5be8d83a3bd"
        },
        "item": {
          "id": "145000b0-ad8e-46f7-88aa-88eb953dccda",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c9df1687-0f5a-4369-a439-017b694fdf50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "84b8d946-b03b-4a73-a2c6-1191f6f7bce0",
        "cursor": {
          "ref": "8abc71a1-287f-477e-babf-e0b34c5c463c",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7fe096d2-10fd-4670-8a01-3a294cb98653"
        },
        "item": {
          "id": "84b8d946-b03b-4a73-a2c6-1191f6f7bce0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "08518733-ee6a-4f58-b071-988f2ed8a23b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "84b8d946-b03b-4a73-a2c6-1191f6f7bce0",
        "cursor": {
          "ref": "8abc71a1-287f-477e-babf-e0b34c5c463c",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7fe096d2-10fd-4670-8a01-3a294cb98653"
        },
        "item": {
          "id": "84b8d946-b03b-4a73-a2c6-1191f6f7bce0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "08518733-ee6a-4f58-b071-988f2ed8a23b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "5c2e0955-a207-4a34-acee-af0c05d5d1e0",
        "cursor": {
          "ref": "e8c88fba-496e-4ac3-9c25-80c81de0211f",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3273065a-d23a-4390-819d-d27106f4496c"
        },
        "item": {
          "id": "5c2e0955-a207-4a34-acee-af0c05d5d1e0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5f10efd0-1f78-41c5-9e6e-316feda8bdc3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "5c2e0955-a207-4a34-acee-af0c05d5d1e0",
        "cursor": {
          "ref": "e8c88fba-496e-4ac3-9c25-80c81de0211f",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3273065a-d23a-4390-819d-d27106f4496c"
        },
        "item": {
          "id": "5c2e0955-a207-4a34-acee-af0c05d5d1e0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5f10efd0-1f78-41c5-9e6e-316feda8bdc3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "7520dea2-6085-48d1-b5b6-34728b7be89e",
        "cursor": {
          "ref": "15efb882-e5b3-4cec-a486-9a757d4f242e",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "905baec2-fe4b-4e8e-bf03-c31cc5b9714d"
        },
        "item": {
          "id": "7520dea2-6085-48d1-b5b6-34728b7be89e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5e06fecb-0fda-4ec1-8493-381295f4372c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "7520dea2-6085-48d1-b5b6-34728b7be89e",
        "cursor": {
          "ref": "15efb882-e5b3-4cec-a486-9a757d4f242e",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "905baec2-fe4b-4e8e-bf03-c31cc5b9714d"
        },
        "item": {
          "id": "7520dea2-6085-48d1-b5b6-34728b7be89e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5e06fecb-0fda-4ec1-8493-381295f4372c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "af49ee5c-24c1-4978-bfc6-02670727252d",
        "cursor": {
          "ref": "0702c9e1-f20c-4d6c-923c-2a5f2285f33d",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "64ed4321-1fcc-472f-bfef-bbe7e1ff8c22"
        },
        "item": {
          "id": "af49ee5c-24c1-4978-bfc6-02670727252d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2d8d97b6-f1b5-4902-814d-eadc1d14921a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "af49ee5c-24c1-4978-bfc6-02670727252d",
        "cursor": {
          "ref": "0702c9e1-f20c-4d6c-923c-2a5f2285f33d",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "64ed4321-1fcc-472f-bfef-bbe7e1ff8c22"
        },
        "item": {
          "id": "af49ee5c-24c1-4978-bfc6-02670727252d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2d8d97b6-f1b5-4902-814d-eadc1d14921a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "0b210208-cbe1-4c73-8801-9668aaeacdd2",
        "cursor": {
          "ref": "dfb740c2-c45b-48e4-b601-2b4652ec8c96",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9f37515a-a759-45ca-a486-e51eda15caeb"
        },
        "item": {
          "id": "0b210208-cbe1-4c73-8801-9668aaeacdd2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0773bc50-5a78-432a-ac49-58b1dd7a164f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "0b210208-cbe1-4c73-8801-9668aaeacdd2",
        "cursor": {
          "ref": "dfb740c2-c45b-48e4-b601-2b4652ec8c96",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9f37515a-a759-45ca-a486-e51eda15caeb"
        },
        "item": {
          "id": "0b210208-cbe1-4c73-8801-9668aaeacdd2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0773bc50-5a78-432a-ac49-58b1dd7a164f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "db68681b-c6c5-47c1-8688-d7a76e2cc225",
        "cursor": {
          "ref": "edd9a7a8-23a2-49ec-a151-1f082d066af2",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c249f318-d26c-436f-afe3-315c23f30b33"
        },
        "item": {
          "id": "db68681b-c6c5-47c1-8688-d7a76e2cc225",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3f126974-d45e-4a47-8de8-80a17471f781",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "db68681b-c6c5-47c1-8688-d7a76e2cc225",
        "cursor": {
          "ref": "edd9a7a8-23a2-49ec-a151-1f082d066af2",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c249f318-d26c-436f-afe3-315c23f30b33"
        },
        "item": {
          "id": "db68681b-c6c5-47c1-8688-d7a76e2cc225",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3f126974-d45e-4a47-8de8-80a17471f781",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "4ee6d705-ed6a-4dd5-a3b7-35adffad5281",
        "cursor": {
          "ref": "bf126059-8533-4166-9869-63a18be651a3",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c4355d81-3309-454c-ab87-db0a1eb45be6"
        },
        "item": {
          "id": "4ee6d705-ed6a-4dd5-a3b7-35adffad5281",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7c22d5d2-7f22-4f3a-bbc6-92beff00bc7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "4ee6d705-ed6a-4dd5-a3b7-35adffad5281",
        "cursor": {
          "ref": "bf126059-8533-4166-9869-63a18be651a3",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c4355d81-3309-454c-ab87-db0a1eb45be6"
        },
        "item": {
          "id": "4ee6d705-ed6a-4dd5-a3b7-35adffad5281",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7c22d5d2-7f22-4f3a-bbc6-92beff00bc7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a23cec04-3bee-475e-a0d2-109b76f90060",
        "cursor": {
          "ref": "36a0a0ce-f9fc-4516-ae19-e727afd66e08",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "39545d84-d026-4291-97ca-c7e781364b27"
        },
        "item": {
          "id": "a23cec04-3bee-475e-a0d2-109b76f90060",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5eef075d-ff64-4fe5-9edf-c97cc000f676",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a23cec04-3bee-475e-a0d2-109b76f90060",
        "cursor": {
          "ref": "36a0a0ce-f9fc-4516-ae19-e727afd66e08",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "39545d84-d026-4291-97ca-c7e781364b27"
        },
        "item": {
          "id": "a23cec04-3bee-475e-a0d2-109b76f90060",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5eef075d-ff64-4fe5-9edf-c97cc000f676",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "16396487-0222-4b32-9849-2af78959a535",
        "cursor": {
          "ref": "c3bee914-2a26-4ade-aece-d1c22b6a9d24",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "20fe4bc5-7202-48bb-b318-6cc6c7b7a6de"
        },
        "item": {
          "id": "16396487-0222-4b32-9849-2af78959a535",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1e20dab3-1368-4045-9034-bcc20f14f098",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "16396487-0222-4b32-9849-2af78959a535",
        "cursor": {
          "ref": "c3bee914-2a26-4ade-aece-d1c22b6a9d24",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "20fe4bc5-7202-48bb-b318-6cc6c7b7a6de"
        },
        "item": {
          "id": "16396487-0222-4b32-9849-2af78959a535",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1e20dab3-1368-4045-9034-bcc20f14f098",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6fcbb9a3-a1f8-4461-8ab8-b6ee59eabff6",
        "cursor": {
          "ref": "3f471ad5-8191-4418-ac7e-c45921520ade",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "722de87f-8482-4783-a990-d492c45a1f7c"
        },
        "item": {
          "id": "6fcbb9a3-a1f8-4461-8ab8-b6ee59eabff6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "87161fdb-95cf-4a07-b3dd-48b63d781b41",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6fcbb9a3-a1f8-4461-8ab8-b6ee59eabff6",
        "cursor": {
          "ref": "3f471ad5-8191-4418-ac7e-c45921520ade",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "722de87f-8482-4783-a990-d492c45a1f7c"
        },
        "item": {
          "id": "6fcbb9a3-a1f8-4461-8ab8-b6ee59eabff6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "87161fdb-95cf-4a07-b3dd-48b63d781b41",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "53730f5c-a94e-4e4c-9475-79952ee1e954",
        "cursor": {
          "ref": "77d677d4-d714-49d1-8a7e-ebe51c1091d3",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "76a28054-9701-4cd0-b540-04ef8100a3a0"
        },
        "item": {
          "id": "53730f5c-a94e-4e4c-9475-79952ee1e954",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "928eca13-a733-47e4-aca9-bd5e0730a8b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "53730f5c-a94e-4e4c-9475-79952ee1e954",
        "cursor": {
          "ref": "77d677d4-d714-49d1-8a7e-ebe51c1091d3",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "76a28054-9701-4cd0-b540-04ef8100a3a0"
        },
        "item": {
          "id": "53730f5c-a94e-4e4c-9475-79952ee1e954",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "928eca13-a733-47e4-aca9-bd5e0730a8b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "527ddd98-877d-46e7-94e5-218f6bf0bf0a",
        "cursor": {
          "ref": "5d51c938-23c1-44be-9aed-4b5049817df3",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8a0f1f0c-8f19-44e1-8405-144784fc6de6"
        },
        "item": {
          "id": "527ddd98-877d-46e7-94e5-218f6bf0bf0a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6670d5d0-c5f5-41e5-b496-644433bdb7a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "527ddd98-877d-46e7-94e5-218f6bf0bf0a",
        "cursor": {
          "ref": "5d51c938-23c1-44be-9aed-4b5049817df3",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8a0f1f0c-8f19-44e1-8405-144784fc6de6"
        },
        "item": {
          "id": "527ddd98-877d-46e7-94e5-218f6bf0bf0a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6670d5d0-c5f5-41e5-b496-644433bdb7a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "a561358f-dc2a-44b6-b519-23c62c7e544e",
        "cursor": {
          "ref": "e04aa756-7f73-4f73-8724-3f16e165242f",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a26e1d9b-b394-41a3-ad57-3114c8806dfd"
        },
        "item": {
          "id": "a561358f-dc2a-44b6-b519-23c62c7e544e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5799d551-2d02-4477-b176-ff14c0a787f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "a561358f-dc2a-44b6-b519-23c62c7e544e",
        "cursor": {
          "ref": "e04aa756-7f73-4f73-8724-3f16e165242f",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a26e1d9b-b394-41a3-ad57-3114c8806dfd"
        },
        "item": {
          "id": "a561358f-dc2a-44b6-b519-23c62c7e544e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5799d551-2d02-4477-b176-ff14c0a787f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "dafb6789-1e3a-42e8-993b-c51952466877",
        "cursor": {
          "ref": "97d8a547-be1e-4d8b-877f-ff9a3229b46f",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8d5a7062-8def-409e-8c4c-5cb910ce0884"
        },
        "item": {
          "id": "dafb6789-1e3a-42e8-993b-c51952466877",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fb13d399-1a1d-4750-b7ee-0f6ecc49c5ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "dafb6789-1e3a-42e8-993b-c51952466877",
        "cursor": {
          "ref": "97d8a547-be1e-4d8b-877f-ff9a3229b46f",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8d5a7062-8def-409e-8c4c-5cb910ce0884"
        },
        "item": {
          "id": "dafb6789-1e3a-42e8-993b-c51952466877",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fb13d399-1a1d-4750-b7ee-0f6ecc49c5ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c33335a8-9de0-4a55-abb5-4a777bf16b7b",
        "cursor": {
          "ref": "f31d60af-0d8d-4c49-9103-1b03c74dfe55",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "864321bc-343d-49c7-a1b4-1c8412acb0e2"
        },
        "item": {
          "id": "c33335a8-9de0-4a55-abb5-4a777bf16b7b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9c275755-079f-4253-9726-aef660dcb32b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "c33335a8-9de0-4a55-abb5-4a777bf16b7b",
        "cursor": {
          "ref": "f31d60af-0d8d-4c49-9103-1b03c74dfe55",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "864321bc-343d-49c7-a1b4-1c8412acb0e2"
        },
        "item": {
          "id": "c33335a8-9de0-4a55-abb5-4a777bf16b7b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9c275755-079f-4253-9726-aef660dcb32b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "e38d0a44-13b4-4c7a-9392-4ba128686be3",
        "cursor": {
          "ref": "ae3899bb-a9e4-49fa-927e-66598b485444",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6e7796c2-4a74-4a80-bae1-a5280658aea6"
        },
        "item": {
          "id": "e38d0a44-13b4-4c7a-9392-4ba128686be3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d8f758d2-4778-4608-9012-3ada65440f23",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "e38d0a44-13b4-4c7a-9392-4ba128686be3",
        "cursor": {
          "ref": "ae3899bb-a9e4-49fa-927e-66598b485444",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6e7796c2-4a74-4a80-bae1-a5280658aea6"
        },
        "item": {
          "id": "e38d0a44-13b4-4c7a-9392-4ba128686be3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d8f758d2-4778-4608-9012-3ada65440f23",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "bd6d0483-588f-44e9-8bc7-79bdcb1bf6c5",
        "cursor": {
          "ref": "44c3eae5-a718-4d4c-9521-107d31e45863",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5ae97790-9865-4c37-9c54-b5df10379f6f"
        },
        "item": {
          "id": "bd6d0483-588f-44e9-8bc7-79bdcb1bf6c5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bd6d0483-588f-44e9-8bc7-79bdcb1bf6c5",
        "cursor": {
          "ref": "44c3eae5-a718-4d4c-9521-107d31e45863",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5ae97790-9865-4c37-9c54-b5df10379f6f"
        },
        "item": {
          "id": "bd6d0483-588f-44e9-8bc7-79bdcb1bf6c5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bd6d0483-588f-44e9-8bc7-79bdcb1bf6c5",
        "cursor": {
          "ref": "44c3eae5-a718-4d4c-9521-107d31e45863",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5ae97790-9865-4c37-9c54-b5df10379f6f"
        },
        "item": {
          "id": "bd6d0483-588f-44e9-8bc7-79bdcb1bf6c5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b5081dd0-8758-4754-b1b0-d8bbd29dca3e",
        "cursor": {
          "ref": "331de51e-689d-446f-94c5-8c7453aa5743",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "456ee985-85e9-4d0e-acb9-88469c2e9cd9"
        },
        "item": {
          "id": "b5081dd0-8758-4754-b1b0-d8bbd29dca3e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b5081dd0-8758-4754-b1b0-d8bbd29dca3e",
        "cursor": {
          "ref": "331de51e-689d-446f-94c5-8c7453aa5743",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "456ee985-85e9-4d0e-acb9-88469c2e9cd9"
        },
        "item": {
          "id": "b5081dd0-8758-4754-b1b0-d8bbd29dca3e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b5081dd0-8758-4754-b1b0-d8bbd29dca3e",
        "cursor": {
          "ref": "331de51e-689d-446f-94c5-8c7453aa5743",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "456ee985-85e9-4d0e-acb9-88469c2e9cd9"
        },
        "item": {
          "id": "b5081dd0-8758-4754-b1b0-d8bbd29dca3e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "4e887a9b-58b9-4e17-ada6-6bdbf850bd49",
        "cursor": {
          "ref": "c61ed6b0-7260-42c9-ace7-d07202e71e7a",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b2c9189a-8887-4ccf-a3ae-2fe618bd4840"
        },
        "item": {
          "id": "4e887a9b-58b9-4e17-ada6-6bdbf850bd49",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4e887a9b-58b9-4e17-ada6-6bdbf850bd49",
        "cursor": {
          "ref": "c61ed6b0-7260-42c9-ace7-d07202e71e7a",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b2c9189a-8887-4ccf-a3ae-2fe618bd4840"
        },
        "item": {
          "id": "4e887a9b-58b9-4e17-ada6-6bdbf850bd49",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4e887a9b-58b9-4e17-ada6-6bdbf850bd49",
        "cursor": {
          "ref": "c61ed6b0-7260-42c9-ace7-d07202e71e7a",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b2c9189a-8887-4ccf-a3ae-2fe618bd4840"
        },
        "item": {
          "id": "4e887a9b-58b9-4e17-ada6-6bdbf850bd49",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "55d6446e-3f3d-4dd3-b690-dde11f73b619",
        "cursor": {
          "ref": "28903d30-b340-49e8-a8b6-0fea6b438771",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3b572a1c-86c0-4bfb-a340-0da1db1a5ae2"
        },
        "item": {
          "id": "55d6446e-3f3d-4dd3-b690-dde11f73b619",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "55d6446e-3f3d-4dd3-b690-dde11f73b619",
        "cursor": {
          "ref": "28903d30-b340-49e8-a8b6-0fea6b438771",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3b572a1c-86c0-4bfb-a340-0da1db1a5ae2"
        },
        "item": {
          "id": "55d6446e-3f3d-4dd3-b690-dde11f73b619",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "55d6446e-3f3d-4dd3-b690-dde11f73b619",
        "cursor": {
          "ref": "28903d30-b340-49e8-a8b6-0fea6b438771",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3b572a1c-86c0-4bfb-a340-0da1db1a5ae2"
        },
        "item": {
          "id": "55d6446e-3f3d-4dd3-b690-dde11f73b619",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "25ac6474-65ce-447c-98c0-78510519586b",
        "cursor": {
          "ref": "9ebed0f8-2e3d-40de-bd61-8eaff4f9852b",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "498f2f59-602b-419c-b1cf-9fffc3836f80"
        },
        "item": {
          "id": "25ac6474-65ce-447c-98c0-78510519586b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "25ac6474-65ce-447c-98c0-78510519586b",
        "cursor": {
          "ref": "9ebed0f8-2e3d-40de-bd61-8eaff4f9852b",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "498f2f59-602b-419c-b1cf-9fffc3836f80"
        },
        "item": {
          "id": "25ac6474-65ce-447c-98c0-78510519586b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "25ac6474-65ce-447c-98c0-78510519586b",
        "cursor": {
          "ref": "9ebed0f8-2e3d-40de-bd61-8eaff4f9852b",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "498f2f59-602b-419c-b1cf-9fffc3836f80"
        },
        "item": {
          "id": "25ac6474-65ce-447c-98c0-78510519586b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fcef9716-3a29-4cb0-b927-193c82d0897f",
        "cursor": {
          "ref": "d475fc20-4298-4b42-aa3a-f04d642a914b",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d5a990b1-fe17-403e-91dd-a7f32ad0f1cc"
        },
        "item": {
          "id": "fcef9716-3a29-4cb0-b927-193c82d0897f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "fcef9716-3a29-4cb0-b927-193c82d0897f",
        "cursor": {
          "ref": "d475fc20-4298-4b42-aa3a-f04d642a914b",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d5a990b1-fe17-403e-91dd-a7f32ad0f1cc"
        },
        "item": {
          "id": "fcef9716-3a29-4cb0-b927-193c82d0897f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "fcef9716-3a29-4cb0-b927-193c82d0897f",
        "cursor": {
          "ref": "d475fc20-4298-4b42-aa3a-f04d642a914b",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d5a990b1-fe17-403e-91dd-a7f32ad0f1cc"
        },
        "item": {
          "id": "fcef9716-3a29-4cb0-b927-193c82d0897f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}