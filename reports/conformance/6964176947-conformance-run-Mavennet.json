{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d07e4cde-b3aa-4f1e-86b1-f78a0339e56d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "01769ead-7109-435c-8f63-90a7ad42dafb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "615acd8e-f65f-4d02-a370-f712823a9b72",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3cf14616-af72-4eb7-9cb1-2bb33c802eda"
                }
              }
            ]
          },
          {
            "id": "1d8b82fd-b670-4eee-b2bb-27ed18506b1f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6de6744-ebde-4da9-9506-31a253f5201a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9155d5be-428b-4f00-8642-8210a6d0252b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e72699af-d1b5-4875-92e3-b4e1ca2bfd25",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9a978e09-83bc-407d-b0da-ae3ce881a4ae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "25e9ad4f-21e0-4702-b91a-06cf8d5337d9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9985fa33-bf7c-4a21-ab9c-e6bbb93576d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88f316f8-569a-4bc4-8b7f-176affbddc5d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5300ed9a-c99f-45c7-abd1-cc3d973bde12",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30b6a71a-acc4-430b-b713-508499e04b20"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "72b3a1f3-e8e2-4b19-a29b-be25aa884271",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73497808-519d-4c5d-998a-df9e9bd853ee"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91f8942b-4713-40c4-bb65-d6497a9f47a7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3710c995-5167-45eb-9bcc-5d1a178ae095"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19ab845d-661f-4eea-8551-851279c0fd57",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72aff8d0-a3ae-4aeb-a121-09853d1c244b"
            }
          }
        ]
      },
      {
        "id": "71dd31e9-fc3f-4500-9533-355bb27c8df5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cfd05c44-8281-444a-b0a7-e2ecb419b776",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08965844-dd3b-4a16-828b-c2b1e977f19e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "107a46fb-8352-4dc4-a24f-e3563460635b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4b0393-1bf4-43fe-a20f-51e412c16c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66c9b01d-31c4-4db2-8bca-faff0169db54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb50e4eb-2875-4817-b306-d8f8c75290fa",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3220526-55b2-4d05-b897-4e53f1c40dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "134f9d54-5981-4454-9242-cb6d95d9416e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dc8468-afc5-4b44-b032-376c1f781c56",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8214f67-48df-45f7-a78c-68e88c68ae93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0331dec-c754-4bd8-beed-7f6d38800c08"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "54ceb0f1-268f-41d5-adf2-89f623ee0633",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c77e24d1-7238-44ad-9a38-c918e93a63e1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3862d8f4-28f8-462c-9c5e-409d73c3b94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6e69662-8b68-4f75-a1c5-cd3144dfb14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad3acdc-8a63-45f7-a25d-3aca0a1376b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab69321-158d-43fd-b74b-e7d7c8c7919e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "86cfc373-7e28-4b95-bbb9-7b5fcff0a20e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aebe15bc-d45a-40e0-a216-34644b89cb21",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25c16d01-5f18-49a7-b666-b793423510a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fc20fb99-9024-44fb-86af-b6a183ae5a99"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43923de2-3c57-47c8-958a-eb697bd2f032",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e3a50299-e703-4731-8b13-c1895c27e934"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6645f9a2-1179-4bc6-874e-5e19b8047af3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff0b8814-2cff-425d-9a02-da7c08c45a98"
            }
          }
        ]
      },
      {
        "id": "a07f691e-efed-4cd5-a1e3-0d4fe2110742",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1596ee22-9a00-4437-ba3d-573ca35a7fa0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f01c6a1-7328-4ce7-9bf5-0f5a03b1cabc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9e7509d0-e921-4721-ab46-be624810c75a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e054958-7610-49ff-ba17-4f4d3a01efe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30b1efb-5c44-4169-bd33-ef9d76d674b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d241d459-2ddc-40d5-a4e4-d44ee8033e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "622681f4-aece-42ea-a7d5-569d31965800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3542fac-c6d3-4214-8d68-d0a5aad0d433",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a8804f-9ee9-44e0-bf32-0f68b18b72c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c2bb9f0-7fc2-4f0b-a779-823c189e6322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ddb80f-0809-4935-a931-20bc435a4ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10bf1070-84aa-4c77-b696-3c5d5485f595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1401adb-42ba-4577-b4c4-f2ebffc32d77",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c4c6a7-8733-4e99-bad0-2648ec1a416f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c12a8f9-5edc-43e4-93eb-c8add647615c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a3d8d4-0d99-4dab-88c0-e9dedb9b002e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19ade779-e836-4297-ab43-2e4573f8732b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7ff14e-c157-4bcb-9658-03f9fd754691",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ea2ab5-6506-4d11-8b44-bcad766bcb08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206c23c6-af96-4bee-9296-e9fe0b0a11dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87d9772-3be4-4ccf-80a3-cee78498fd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efd7ef4e-5829-4ba8-9fd7-6c5a07639046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd4853f-5362-440d-8704-129823564364",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83381020-bca8-4c40-8489-093f7f84df11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d575699c-b8dd-432b-b3d0-6ae2c545be20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671aa6bb-6b3b-43f9-bd1a-f3d3eacf0fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df7c514d-2023-4d08-887b-bcb303d7950b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b031854-92ab-4481-834e-f2381aa194ca",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98f00c8-874b-4239-b274-1fe0171db007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b5c29d-68d8-4cc5-8d21-7c23d89b81ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edfd669-66b0-4780-80c1-30fc62c5c9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "634324e9-4615-4c86-bd74-6a74ca300fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e36da2-81a7-4eb2-b580-2252f76ecd45",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55239167-5b69-49be-b60b-5cc0d3f22649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ecee02-e6cc-45dd-930c-0cf1ef70b8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92ee069-130b-43f5-980c-d73aeb76a553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9147d2a-7572-44aa-ac6b-c8bcf9b54c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7656d6c-b804-4deb-8561-19990c7f8816",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee233ee-b4ee-4303-af7e-9eb34957bbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7904738-2a4d-441a-823f-7aac0a727427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f156244f-ac30-494f-82d3-a637995c96a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f27342b1-8397-4e99-bd9a-d1ba380d9a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c3cb5e-d815-4ee1-8f49-fc2817ef80a0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff0b907-f3d7-4acb-8f34-5ce442c6569d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b6072c-98b5-407f-8447-e5d19c369134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d722cc2-f56c-4068-ad38-d6a16ecdc817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1fade62-be58-442c-9a83-d3e8fe58488f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d3f8f3-93cf-4bd0-9c00-75063f6965bd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5eb6d99-c932-4bbe-8e32-d4008d3e2190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f87cf3d-5727-40be-8d03-66135e0b051a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8500ed1-2609-42a2-b843-34f7a80c9a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79d39bd4-e64c-4928-b3e5-fa60f34de153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efbe57f-f1b2-4a19-becb-3caf1f3daca8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b132694-46fc-4d50-b794-8f312ec7f9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9148b39-c99d-4bc0-bfef-7da8c76c5fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc0ca05-19c8-4bb5-a20c-7e5cb080f096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bb1b1cc-04a0-404c-b29f-f905afc4fef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a768fa-9e6e-4960-960e-c405a48788a0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75ff633-cb40-4639-ade3-6f04a083e323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5097a79f-91e3-4976-a249-fd5b3c0bc1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2eda6a-bad3-4865-89ba-4bf7a384adb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d42f50c-d031-4c93-bfc6-4757054e6104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26a048f-cbd3-4f44-9946-3b1cc581f880",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "486b63d7-aa18-44ea-bc6e-109e8e35ea1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e686e3-d4fb-4c96-8768-2ab0d634e199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b1df52-6c42-4f56-8383-52af29fbb3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ef9ddae-eacc-478b-b43e-ba119d4feb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97e12f3-fa36-4640-a518-cf2c7d201002",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85846c89-16ab-4147-be70-4e5ab3c3c8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c207ed87-e058-4a79-97f6-39dac739f997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2072e14d-b57b-4cab-9a9b-dc1b610acff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92d3b00b-4ee5-41ff-a4ef-f0bd623b7485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7720d3-6ad7-4c4e-8b80-36b36c21839f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28503139-4715-403c-967f-ad5c86741628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b416b36-e873-45b1-a1d0-8d8528cc9555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9949799-e3f3-42c8-ab9b-e5a6e5aecdac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18520ada-fbef-4ef2-abc4-e4dc9e13d114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08307cf5-9b11-4b29-b8ce-4071374cb162",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9fb579-4e87-4b3c-90e6-e709abb62870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060c6ee2-cd6f-47e9-ab61-6df014dbb388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b465a2ed-3b19-46e7-8db5-1591cc71e163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef892c7e-0fb6-46a7-bf36-08d98992bfc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ed9c15-093d-41e0-8491-aaa82b1e405a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045f7308-dba8-492f-81bf-b4cc69f4e26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a0cc6c-a692-4cf6-a25d-052503178022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1cf706-d358-4db4-b328-be4b53d8cbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dee65c3a-2462-4f2e-a00b-fd059778f68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e446fef3-e5ce-4df8-9944-8b278442606a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af12c970-ddce-40d3-9345-6caf235ae321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88b444d-480e-438e-87c1-6e6aba74f533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f41112-99a0-4002-a9cc-7bf4ed78c134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b67a7bc4-bd1c-4884-99e6-e0272019de9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e73bce7-798b-4cfe-ba59-7578bbc50956",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2246fc79-12c8-4882-8360-7c453f113f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c7178f-1f7c-48df-9af8-8ffdaa3a7de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca093d83-f6c4-4c0f-b6e6-dedaa7f54e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "147416bb-e77f-49fe-a2fd-2d05b41f551c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f42c58-4319-4ac4-a78a-797a474c497a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44b3a5f-569f-456a-9b07-e47483b69c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97db1739-f20d-4b0a-a3ec-b0fc0189afd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53329f4-b0d1-494b-8f32-1987dca284e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b50d00aa-a478-4e43-9eea-deeb622d945d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa482d2-b290-4561-98a4-b8e65c2b8661",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e32819-f77c-4c41-9589-8dd8a9e87fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35abca2-ce02-4910-953f-59cbc64a975e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107a94a5-8b35-464d-bfc4-5fab634cb872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e831d7f5-0030-4a60-a5d1-fa2a7b9c38c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f30e55-cf16-4c25-9182-67528545c2fd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c49837-d7e5-4e83-9e0a-d91ab44413c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2569e645-0013-4358-97cd-14777fa79536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3143885-2059-4d8c-97fa-69b590e559b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd97a83-af47-4954-98a8-efee456b7772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebe2513-445a-4d3a-be18-b094c2328f84",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68005b2b-0d5a-42d9-a9bf-a898f0e0c4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f12b0f78-a63c-4b02-9cfc-c9d0060cca08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d6f60a-e42a-401a-a780-77fe4045ad41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "256d4708-bb84-4989-bf44-ba542b58519a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be925b19-d495-42af-86ec-b87752aca9a5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7e3fb2-6520-4091-8253-fa1abbd5313d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d380587e-561a-4470-92b5-33e52469dda8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00e5e35-c8ad-491c-b655-ff864937bb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a972ee0d-7d60-45f6-ac8e-b58b390fd1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4b8b33-7534-4a8c-ba80-277fd1719f19",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9516389c-de50-43c7-913e-b7b2fc1b0213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1394b9-ce2d-4b3e-bab2-c61779fb2166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb9945d-8918-45ec-8ea2-660c9de93a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83ba398e-1b07-4077-9a5f-581ec2edf479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c01a61-9b41-4d60-b833-70ba028e9263",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63944142-8b47-4d55-8641-6f6be2253521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae31f2fb-8600-48a2-bee5-5e27a2bec103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc38c202-a102-476a-994c-4fe16f194591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "389bcf6d-b460-4cc2-a25c-3ad57a0789cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e799c17-7f03-4035-8e70-ca401e98268b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c2506c-7095-42af-99e5-05de1119ae0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed2eebfc-aaac-4021-818c-5cc676010c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c6ad10-0701-48af-b2de-5af711fd3279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9754e2eb-d1f9-4a2c-8244-b48d90e0ffb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1cea5b-7ebc-4678-a958-68eb3778ae66",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2827d00d-2a3b-4031-99dc-8ac04fe6a070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681c7348-8785-45b9-bf61-f4e1f5747be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e9bf1e-2c3f-4bd0-905e-075fc7fc0fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d889f34-2bf5-419e-94b4-344030fdbd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a4d3a3-d2fc-4dcf-917e-63f30207c6eb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94c7cc2-c841-4315-809d-8ec5987d9a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64848c87-c29a-4654-8e6e-7016f8b9b85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ef5f9a-544e-4f65-860e-39785cde8b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f240438a-6575-453b-befe-11801b241614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cb38e6-8310-42d0-bc7a-bf3a5f455e64",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7abc289-40fc-4032-a38f-3b4091dabaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a750ddba-eaf8-4f1e-aa54-21b3fb08e4ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd8fdd2-cc98-4003-aa49-0d76c7878a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9518ca63-1268-443d-ba66-0f6f68aee9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc004c6-8c68-408d-8a7a-602caddb5043",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5592ac92-896b-462e-a8f6-4198b26f2b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce71334b-ae2e-4b83-b652-41dcfa94b08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a458bfb3-053d-4f66-8940-c3a18cab8a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad3ab18-e16a-49d6-ac1b-aa3b7173a72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192514f5-88f6-4530-aa12-d3ca0ea437cc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ed8bab-f8dd-43d9-868d-7403824c1ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534ea9d9-2a63-4ff0-8848-438672b897ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dcf953-a05b-4882-a4f8-15d316ae1644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6311d4f3-5d42-4be6-bb96-7e6726c69405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b190870-f282-4904-b82e-fce3aaa8029e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9902dc0-f21c-4919-864b-305eeb48a060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf05835-abf6-4553-b2a2-05c893da5fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6263a0b-f152-445c-9263-87beac5cff76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1974f8f7-2693-41bb-b193-fd2bd378789f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c538dd-df3b-4b23-8df6-0d7e9fc4b24c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65047db1-3ec3-43b9-b091-ee637c796c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec74389-125a-4e5f-bc94-2159e2210bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0f91d4-8d31-47b0-b5a5-2857d4015703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48d2760d-aa58-4ad8-a898-7510dd18a669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac63bf2-99ea-4019-9ec5-281c4f7c0ed2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0023b543-6e87-4ac5-b8d7-6330c21d5c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ebc223-e753-4593-8024-e08700e7e536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31aee9e7-036b-411e-9420-bcbd877d5c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0cfe7e05-b514-4516-b84b-482696a29c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8036b006-7bc5-469b-b6fe-7736f977c3a1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14ac677-1ec0-4020-8a73-4535c538b71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "842dc647-a881-43cd-b642-524bbe6725f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8867b97-e53f-4c2c-a702-64da835c907a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5817a78b-af7a-4256-8e6e-aea53eb694fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435c3061-4140-464a-8746-49888619de25",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5330f973-d9c9-498f-9667-7f6138fa5f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32868a09-c178-4388-abee-038ebdedc27d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd086038-d623-4f3a-b342-f8ab4062828a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21561099-5868-468d-928e-10607c02e463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dd9c4f-3c8c-4a12-ace5-54ee526c78b6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcf1f05-13f9-4679-9f02-3eb447be2191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1798c0a-7ea6-4893-8968-60119daf692b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a52f1b-5067-46ab-ab8b-34d002be89c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2def2e3-7cda-45f1-a666-29728ad8f0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa415a2-a834-4d57-8d78-88daea96b71c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb980b68-b259-4042-9180-7f61d8b5c62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a0d2c1b-9996-446a-8602-344c46e0b2d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e876b42-e1b0-4d62-9195-ae0d71f62981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "558da107-2591-4b7f-aa23-cfa69eeef95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4086a571-b2b9-4c37-85e8-40871249b596",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20517379-85d7-4428-9d0e-fa5b519d629c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa20cfe-2bf0-4edc-aa62-4e385ceb17a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33805897-4c05-43a6-a325-472a61e460cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a654d36-bc93-47f2-98af-36859d91a451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c748282-46c1-4af0-9bb8-47d7ee95b332",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e056fd-68b6-48b0-b0fc-edf35e3bee64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7c98ad-7736-485c-baa5-91dcd22e0260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d58a92a-967c-4bd4-8874-810c7bcf0a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a5a713-2792-44d0-aa4f-e6e6fc5c9d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c903299e-4cd9-472f-80bd-488b4c4b2eee",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1962bb0a-73b6-4649-8660-e5b9c646ce60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79bc2229-4e5c-4c58-acbf-49deb955e261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bae922c-1358-43a8-940a-6460f922b799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fc9a845d-920f-4b22-86f6-90e8d35634ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a12d335-e23f-40fe-87d1-9495144226f3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72ff398-8e10-4781-bd88-c44fdbbc6ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "315e514b-04c4-4af8-b489-56c16ea5fb1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be75233-8043-4deb-8b5c-ccf228387c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "933cac16-9852-446d-8c61-81b47ff3c631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a00d231-f27f-492c-b513-f307e67499a7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278a3aa0-3202-4236-8b56-4c57d0d363b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18e7efb-62b7-4a5a-9b91-9ed8c7260051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb45e9a-6e27-4197-928a-823bc10c2b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb175a32-f2c0-4d03-b72c-8ae42dc7b731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d48561-f1aa-40e4-9ff2-eefa405e50ad",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7391a25-b68f-4270-8ff1-3e6dc099327a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0682654-32c6-4c19-bd11-ceecb99225e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7419a262-6238-4527-a741-86c642f973d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "852bfa31-bac6-4b02-9e27-8eb45789c005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a9b9eb-2404-4883-b5c5-c5276a80e67a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036cefbd-b9ef-4aab-bb08-caa1aa1bb864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a40bb9-aa5e-42c7-9b05-71ef9c3a784f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f11661c-c751-4e60-89ec-fb9c0691370f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83429418-cbc3-4f08-a02f-bda20932feac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e309d96-8529-4588-9187-8206fe97789e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ee691d-b4e8-4b76-8db0-7f1e491d226d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83f0412-5c9e-4861-8f14-3183d56529ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c806e8f0-3665-4d5f-882a-37452af5e738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e8515b-6136-477f-a39d-a4dc8bf169c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3ec5de-61a0-4930-b851-b3ac57137c6d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03adde16-5c00-4535-accf-26da107aefa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c14ad798-5440-4481-a069-bcabf8e20d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640d4409-402b-4adb-8f36-13e5741464d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b38a7d47-95e5-4d5c-8b9d-73f44c007b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d9f8da-ad60-4262-9716-f895a15e8f47",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac16efd-4ff5-4df5-93f4-9fa7778222dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c596af76-959c-46a1-90e6-18ff6e0b5cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294e94e5-23a8-4c21-81b1-387889d01f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8300e09-beed-458c-9063-d7ec47bf931e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530ec181-6665-4d37-ac39-c0c317d94d10",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682fa2e7-24d2-4e95-8320-893bc0938c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f872ec16-7e89-4450-a2b4-20488a0e9bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e247cfc-cde1-4bf5-821a-b842ea15c6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62afe564-0954-4dd5-8719-f59d5aed45b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf3b114-b0f6-4c4c-8af2-8c317c7b86d2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d691f8d5-7ebf-4a14-8b46-271ccf12910d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e229ae78-5f7a-4f75-b1da-83a6d1e441c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5148d6e5-7ac1-45ce-a4fd-52bea146d26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "25c63c7d-1858-40c8-9548-07a7d8577158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd5abae-997e-4994-8a05-844adc708c96",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187848d4-9ac3-463d-81a3-b02bdc17be58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45388560-52fe-41d7-af71-a2a5085d704e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f27ac2e-7d9b-4a38-ac71-02615931d371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a72d95ff-4b82-4e88-a9ad-5ec4ff97e701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e6022b-1692-4e58-895f-e50b38ce84b1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf6e859-60de-40c0-b0db-ef716efbd690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492bc588-b767-44f5-a446-d8ca2101d21a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb71079d-2e91-454f-a848-ade3417a0d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc2178cf-f39f-4159-b394-3ac45e86c6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96dd7e45-8c60-4f2c-a888-40605580020c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f09056-c536-44db-9df5-d160a06f7fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d4309c2-456d-42d4-86d1-a4415a9c690a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c76315-0bad-4cfc-a8a7-5ed0e4e2c3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a4d776-94b3-4f85-83cd-9a76edd81f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532054df-db92-48b2-aa29-a952bb779a45",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be36a5b-7f4d-4e69-99f2-c62aec110473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62fa0944-b267-4aed-9a2d-8bbc9d3d5a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558d651c-d303-4c2e-8c38-8ccb3e0e0897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c38b3acf-4dff-4863-a084-8d529bb4f0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74186f66-3475-4daf-a321-baa9aab634d0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce02915-fc90-4527-9d71-231467972230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052e4631-c097-4c46-bb7b-29c7efe03d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e7eea0-ec14-40e8-b383-0161f0394ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7861a8b6-efbf-4cc9-831c-e7cb53eac9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1293b43e-af36-401c-8794-f68b410f5327",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708534e7-135b-44a0-a57a-f6662c51a976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809504b6-077d-43fe-b77e-da2931b2eefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbd66ee-41f2-4b0e-816c-486952d1d245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5065fff3-8eb7-4500-98dd-f559fca7ea33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fdaa851-32f3-4c40-92f0-f488d959c45f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1f3d2d-500c-4381-a120-f3140b8eac2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4401a9c5-2f01-4e75-97b1-d61f5321434a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ce2d48-a9f7-4f62-8b56-148abdc08c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "72f3f392-49f9-4ae6-95e8-b30461ed0421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33a77bb-416a-4830-894f-4ce3dc7b7ee8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893cf911-038d-4786-bf9f-39840c0ea5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3970f95a-e040-4bc7-aac9-736b54f7760e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be166c3d-7a13-4f55-8a80-b15f28fae940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3f9e2a-4ea6-44e2-932d-25d3f62d01d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4030a4-d1e1-443e-b133-c0e3e36e2f3a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac730315-e7e3-4966-9a55-91718e5094f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6497701c-d48c-49ab-92ac-f73de0c95d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0162e29-66a2-42cf-8e67-c7e88dbede6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a940d007-56db-4f10-bc1e-da00aa7fe994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a33638-782c-4e96-8fe6-5304edda3dca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a91be7-a071-4425-96c0-ddab26adecee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "301e6805-1e5e-4877-9bb0-92bad33404fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f7c286-8ec4-4056-a169-843c20c88edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "857e0549-d134-41e3-a145-9c231248eb31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e1a7a8-ff52-4ea2-92c6-3b577d3f4699",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d896473-2857-4bd6-983d-5e82befed025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72726092-3e92-4d84-948e-e9771efadbff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5bb1f4-d35f-467e-98e9-f9ac2fc2a614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e79089a5-8d9a-43ba-882e-4e94dfa6982d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76240996-3cb2-4d5b-976f-01efbb5ec7e9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90601a3e-5a1e-452e-a815-ba85becd5f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a35165-3656-4765-8e30-27e1ae64d1c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66da5fc-8a93-41ef-b564-5cee09b7fb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1a8b0e-0c30-44e3-a003-87c427f4f815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6d0df7-90b3-4b24-98b7-e6c279b9d9a5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f0e689-c6e1-4fff-9357-aaf45bccce0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebcd78d0-85ae-4cc0-8768-7e29ee6cf4bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772b797b-a1c0-4775-a269-c66848df81e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "709da47a-ac48-423e-800b-27d6c77c47e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590308d3-2e86-4d92-b207-d44f7a4127ad",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683718b3-c067-4628-806f-ca1a50299d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d877bc97-71e4-4436-afda-fc5bda95a236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9730e7-3df5-4610-b0e0-35ec91327105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bca13dba-0822-412c-b762-bf34ccc81486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ccede3-5166-48da-8b95-8dda4a6d135e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f4fd1c-8883-4f53-a0f5-0d415c2cd29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4042480-abe7-4dd2-84ce-945b77587413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8407f0-c59f-47ce-9dc9-93f135279cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44157b5e-229a-46a1-99ff-cb193d5922db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fb3b8f-8528-45ff-9c37-c8aa071a2e5c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc5764c-f1fd-4468-a238-c0bd6388bc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018bfd2d-ad20-4a1b-aeee-d8f6fc562c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38a6775-feb7-4c37-af99-fc10e6334353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4adf8b8b-c5c5-4ce7-97ee-f721eb11d502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a7eed7-236b-41ff-bd11-a648cffe26b0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a2ec36-054d-4fda-95ae-7226f7e66aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f2a0e4-e594-402e-9781-0750c3dc602d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d221a4a5-0025-4cb9-9f08-5ff9003102c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aba1306-8ef3-4cce-b273-0ba7cb10ef14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d7803b-a765-480b-8363-03eb14fdcea6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c36010-00f3-4a41-b682-2ad561209153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2094ea9f-5516-4078-bb08-a73d2d0487d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcab7b45-fcad-4e01-851f-9ad91009c7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "66367ef7-9e89-4be8-b7e3-3cf27dde18bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad71bb5-593c-4bd7-87cb-f155618edfbd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd5216f-81e0-4e67-ae8b-7336666f111c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc0d2bf-9465-4e7f-b9d7-c4b5d538a760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45f8a8d-2f34-40af-9f27-e580e5c8fd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8043076e-d77e-452b-b2e4-1f78aa9d1992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8f7bc0-6a27-4870-b699-963a4487ab73",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8385db-386b-4a80-96d7-8beac8f0a286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e526f7cc-c87d-4f36-bb91-96b911da4891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aea59ae-e06c-46b7-b11a-21d2f6cb61f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "229d9d6c-e810-4105-abed-b22a7c6dfe80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2b8e42-963e-451c-a8e3-0f1b7b801b59",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ee7a24-e352-4fce-8cdc-225836817cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7524bf53-8d6d-4a4d-8fd8-32f1f51b0dc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd71582-6e58-478e-98aa-78bd571ec71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ee995b-5867-48e6-bb19-39baf377b5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622633d6-507f-4d4e-8769-623b3d5b37c8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849257fe-c9d1-467d-923c-59cd994b4593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841b7056-3d93-428f-80bf-25d078eacd0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dddf608-cd22-40e1-a8a0-39bcb6590828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "622e58a7-04c5-4239-af2b-29ec9ac7d951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e06bc28-6e76-4b4f-b7de-6f407557f917",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8c4058-1081-40ee-826a-f8d41f97d38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3293bc5c-8ba2-426b-81e1-8399e910b68d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d71e89-f43e-4f3a-8548-c1f750eacbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81d929c6-2450-4887-952c-641299e58da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d74cc4a-a979-458e-b762-2e22f822d74c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b81ae9f-5840-46c3-9fdb-6b9e6603d79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8587ebb6-0a40-4bc5-9812-33fb063cd97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb14aef9-6006-452b-b6b6-db82a3c33d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc917e7f-a1d5-43bf-8d8d-c340181345f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae53766-d735-41f1-88dc-20fb09e9b559",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef19a3ac-8fd0-4b84-b6c8-f12c649ce199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560fd22d-5efd-4efd-901a-b505867c810d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd7ecec-78b2-4cce-8efc-abc2c90a6ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc084b70-f9b0-4be0-a648-7f33d6f951a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3ce5b1-3798-490d-8384-f776cbbc9edf",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052fc680-dd1f-45cf-9f48-0f18cce8ad11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fba75513-d9a8-4e51-8c54-7a9858664d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f30f02-60cf-4e7c-81df-a52207981f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3632d428-25b0-4fcb-b4e6-f1772a9970f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db74de7-6df0-4c8a-91af-9054fddcba64",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6f854b-6016-414f-a4d0-0063b8a79d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44624313-6418-4cd7-b982-43b9451bbc22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feca3ed6-1251-4234-92bf-cd39d4922dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee1c104-5e2d-469e-9e1c-1f34ca172d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d364712-91ff-478f-8b71-8892f4a8e950",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227ce65a-401b-4525-9079-67e6c82103ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4de266e-1d16-46c8-aa6b-98f7c08e31cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785e7158-cd1c-464e-8b6e-ad55dfb7a7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4494c1b9-917f-45b6-b0d1-816502f36017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf5dc35-8971-4182-814c-c89723a976c7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce01641-5a6f-40ef-82a9-daceb612094f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e82d72-9bca-46b7-8e32-50c47e42bb81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5bb4f1-8f19-4cb9-98c4-bae085c08a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11574403-661b-4d7b-a2ab-303df5010855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a573790-08a3-413e-b7ed-dadae1a997f1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5340a257-595c-4213-94ec-9e8cfc98fac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05cac72b-645d-4090-a4f5-9c728299469d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4a507d-67a3-4b47-a3c8-2d69bd3f7a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "05241b5c-c96f-4b43-8f84-3fb2251e7eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bffc373-efc0-4ed5-8d31-f86308b7150b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3daf2214-f0d8-4df4-8768-b920b9b591a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9cb726-7a32-4789-8005-a5497c0ca90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efcec7f7-5702-4921-b99e-65595ceb7faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "629e1c33-9dae-4fab-bcb5-39eb5c8aff4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b06d83-313c-4879-8a96-666924c8af98",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628c04c5-6387-4685-be98-56908c8a2c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93dbca45-9047-4053-b248-4a6a6985f154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91730bf4-f435-4f4d-8f84-93a401acb4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bdbfdde-d306-4c3f-8215-4bc82a2aad3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629070d2-3d52-4c38-8c68-75015dca9633",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76e0ffd-1989-40cd-8b3a-859dac6d2613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f96bd8a1-0db6-4165-b9ef-4c13058826f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4228faf-a95f-49fa-b7da-6d12f53ec1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2583070-a357-424a-84da-af48c2bc78eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5ae95e-95fc-4ff5-831e-241568046021",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3213e03b-e564-413e-86ad-1bb8e2ce8cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb676ddd-b952-4064-bc14-9f38e9578aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3602eed-586c-4ba6-b13d-3d39466b6466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da529d06-2fc4-43f7-ba3c-ba494fc8d1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d64f339-30b9-4db9-8474-395c2d4b4dfe",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3188a1-8283-4d59-822d-de9a65c97225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91676b91-afae-414a-a77f-809e969ed6fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ea3928-a2a5-4d41-99c6-e6db5d7b60cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "607b1ba3-7bc4-468f-a867-7da7ab6d3663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fdf616-af26-4cef-aaf9-ddfc0506dc96",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33115b34-353d-4f3e-8d1a-bbbc06365109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3348dd0-ac8d-4c2c-8af0-44af837ae983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2e13b6-0123-4b9f-bbb2-160bd8aed0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7695add-666f-4922-b47c-e074619ce4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18698ed1-3fba-49b4-9154-52d1f59e27a0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59915695-8ee6-41f6-b6d7-4adf405985dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d725d4cb-fcde-4a1f-9660-0f7c75a259ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3146b291-ba00-43d9-96a5-5e5aeffa3af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1bed07d-acf9-4706-8aa4-776422e8d9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b791a3-b194-4317-9ee0-56334547b70f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede0c44e-7b6e-4e26-9022-ef1e5ab0139d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1f948d-4c77-4dbe-90b5-5fb32db3a912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74fc19e-6c3b-4fc2-be1c-d4b958d87493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6155ad9b-5ce5-476a-922e-66d9449cb5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcaa532-d220-40cc-b9c9-1cafb88ca117",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00770c38-d91b-440c-b2f9-dd17769bd479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a3416e-7599-4a84-917b-fae5ac6eb7e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e76885c-bd86-4056-afa0-20a1eba701fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1981143-6650-4b2e-bd2a-e1c2002a7873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0345368f-8520-4dd8-8411-5de721c7c594",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92ca8a0-851e-4065-a5cf-c902bfb28a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352a11d4-578b-4c99-ac69-5cad5e523eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7e2000-4eaf-44db-828e-3a3b177259c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "447cdff3-4c39-410b-a62b-524c448cd6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c2cb43-89d6-4eb6-b158-ec618627d5f3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f32149-5baf-4ee8-8629-7993edd37af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3a851f7e-eb60-4413-9686-18ee179d8e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151717ee-953e-4453-b1a5-a30fea978ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5661287c-bda0-4d6e-898e-d5f17e6a6862"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58c6d1f1-cef4-4aa4-b50a-b3cf6e2ba0b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de5eeac9-fe1b-462d-a07b-8717ed439c30",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02aa4a06-319f-40f5-aa6f-d1b9182659df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa5c66d3-a40b-471e-b73b-b368fbcc9696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810b5cb5-0975-4cd5-99f6-3ac3e0026f48",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f7b9469-2c01-4a6c-9c62-f3fd18f20625"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ada0e56b-d3f0-4f7f-8c2b-f977d932f623",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74b0383e-d0df-4ff9-afce-67983fa373a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57f24cc6-b3f9-4489-8ff0-be8396a3908a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2202d0fb-2d78-4f0c-86fe-906a9b035f26"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0e640446-3fba-428f-81a8-ca17ce91a801",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9dea0331-4bd9-4336-acef-08927450bc70"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "10967d84-7eec-479c-9000-30c92b6a7358",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a1a2a0a-a5bd-4ab3-b596-d60a9fcca017"
                }
              }
            ]
          },
          {
            "id": "3dde89d3-895b-4b86-afd4-9d391bad8adb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "145f102c-0136-466e-8671-afdd2b1ac20b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6d1f1c6b-b986-4ebc-a3a5-791243a8c591",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a51bae-2172-4cbb-82da-527bf9960cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6c441c66-2b7f-4e8e-b5dc-7eab19e5a47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f986be4b-1c4e-4ffb-8f0f-010f4f7acd4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41cb5dd-c548-4ccc-8edd-3062e16e9697"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "974f03ba-c93c-490d-a4c1-6ca24848cf84",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f1010d4-0f8b-43d9-a138-01640c67d8d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad48d80d-de7a-4dae-8db8-47bbd83825e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc8f68f4-dc5e-40d7-bd3b-21fc0525266b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bc92a912-f822-42c9-88d0-1b8117c8ae2d"
                    }
                  }
                ]
              },
              {
                "id": "7b8b86b2-6856-4052-a06c-cee728dc7958",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "668561e9-d47e-4fef-b8eb-ba2c20acb094",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "360847b4-4dbd-4e81-83c6-f8d505a83443"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc29a13b-e068-4c70-a84b-f327e8ac4373",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "78db4496-263c-4095-b878-97a291daae53"
                    }
                  }
                ]
              },
              {
                "id": "49d8b0c3-a08c-4211-bafd-8b94e4bc8970",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37e8dbca-7a02-426d-8566-1ff89082414e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75ddc7c1-cd5c-4700-be96-f5a9bec9687a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70f27707-5cc6-4a6a-be74-3a52eae71dda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cc5cec8a-91e2-492b-9e43-d6d754dd223c"
                    }
                  }
                ]
              },
              {
                "id": "45b19d04-f05b-482c-bc0a-6890a6d1b4c5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "daa7999d-6e74-4667-8c96-61f8309a4ebe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea8a30de-2705-4bce-adc3-20b2dcf58808"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f176f136-448f-4bfa-94bb-65aeaf3d2313",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ef62bb18-8950-428f-809c-bf576c382fca"
                    }
                  }
                ]
              },
              {
                "id": "3c7fcaba-7dc6-4548-b882-f10c1a528dab",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f35774e-ef0e-4529-971f-152088e38902",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df2f2f0d-15ea-47df-bd19-b2918f488200"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45147abb-6e1c-4c40-8401-da5f32810176",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1115c108-177a-40fa-ba0c-eb2e35c5acfa"
                    }
                  }
                ]
              },
              {
                "id": "d1a60c21-48ca-4db9-841a-f470288fedc8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fe45414-a293-43d1-bdca-dd6dc8222238",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5da93c2-b2e6-4e3f-9a2c-4d8f835a30e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83b6ccd1-6f38-4234-bcfa-0ffc32231bb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "01494ce5-c1d0-4559-b5cf-c50954eb90a2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0fd23870-d887-496d-9bab-6a1918665f3e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e75b91f2-6979-4260-bb31-fbadb46c03c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eb706c04-8217-4d28-b6b5-f56e52671ad0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e66569b1-75f9-492e-94db-ead63c83432d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e41c2e69-47d4-4812-91a9-137cd8c122af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fdbbd4bd-c3a6-41ab-b4c6-b63f278b1e99"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9f83f50-3474-4de5-aed5-86f5aea0cb7f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf125f6e-b496-48f4-90e6-da413332894c"
            }
          }
        ]
      },
      {
        "id": "87987c80-edee-4db5-9b0c-7459fd2afa8f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1e0b7844-f027-4c49-8131-b60a9cbab5b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c78fd17-e205-43c4-91b9-dd3df8aeb5d0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0842c2f5-edc6-4320-90ee-543372b7ca92",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecac843-8e41-46b2-b76e-83dcfc1120f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc81735-cdce-4dd6-86e6-a8c21de38f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4a0881-74af-4854-b1ef-8dff0799294d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8301178-5ea1-408f-8c8f-d02fee116fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed1739f-c62f-4d1e-97bd-41ce2a17abc2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a9dbaa-a2e7-450c-bd40-b3967610fd44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b9102f-31f3-40e4-a475-dcc64ee56962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd46a30-55aa-4d43-a303-0573b0322474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0c04b1-df01-4a46-8334-17cd54399218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f7b626-c3c4-47cb-9084-fc0244a0ea7a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4910529-c347-422a-924d-9524bee2d175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91fb850-010c-4e9e-b31f-468b459bc125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0bfacb-499a-4c58-8607-812db163f39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c02cd23d-4f14-4f55-b5f0-bc45a601dab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c49362-4691-4c1c-987f-ba767a2fe1df",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447bc060-e2d1-4a09-83ea-8741eb8079fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59b54168-4a6a-432a-b6ab-0c5058298f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1233e889-a520-4541-8ea8-238c403eb504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b820806-5e9d-44ee-8f08-0da3a7ef7815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde2c390-eeaa-41a4-97ee-02ce24923234",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5526be42-fac5-4b9d-91fa-8ac4e5c046ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f49b61d-39a3-463f-87c9-1744385721b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a567850-8330-443f-8241-4d5ae5445686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc20893f-923d-48e4-b20c-d5eff3f66dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5caf3d2-2894-4393-bd7f-3f08d6b2827a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41003c0d-0936-4322-a8d6-d6ed052bd364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8ba92d-c917-406b-989e-85db36cc1c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf33fff-319d-4b29-b7d7-3d7c6cb83d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "987d2d85-1662-4948-b4a2-d7761e00220f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f47528f-f4f5-41c9-80e1-185fff3767cc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ad5a99-cb93-4d06-959f-61371397c532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f4875e-0e15-4186-8eab-49e86ab19135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c133d5d2-72bf-4978-b626-d7aaf9ad4909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4928535a-12e2-4eac-9f37-f9db6c7af122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abaaa1ac-3f49-4dac-b8b6-658d9bfcd57b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b83ab4-8bc7-4b63-949f-62263487a5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa44980-1c4c-4e15-b1e2-9a5a5bd70c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722ed080-b443-4cda-b5f3-2532c87acaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36e9e59d-1b3d-4888-9373-214180b689e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd70140-a3cb-42c5-bb2c-64125b4b28f1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d57f170-d062-4f53-a756-6bdb2e17cb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f8babe-783a-4817-afc6-922bd68752c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c8055d-08bc-4063-8772-7a7b7fe263d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fad2238-c336-4821-a3b6-43bd7f0b2197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89220a92-ed14-4265-a468-e7a9b5f78764",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1885439c-484b-46e6-94f1-c155b4000e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1db057-2973-49fa-adc7-92c13bea20ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c785ca3f-4dfa-458d-8b15-43279a8e847d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f84f527-a78c-40ab-9907-07dc87a0990e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939adc48-ee4b-467d-97a1-ba0d5ce631cc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35aae35-83c6-4ee9-a05b-3eaa5056e9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b180a60e-0996-4abd-8ea9-ed00fb117ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2439cc-7d30-479a-9e53-32e66609a1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fd98362d-7ef1-4e18-970d-cf8494e23c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f457c1-eebd-4f3b-adee-2f1c0bf108b9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4f7391-234b-4c10-9303-a5dcc116d10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bda638-b80c-41c3-ba51-c17dc4347c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3a2bd5-7b8a-4ef6-a538-434582f8fdd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be4c9c7a-86b2-4610-8fa4-8cb5243a727c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8c0a0e-5bae-4bbe-855e-32aa282a4d3b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e68e95-b008-48ce-bbb8-578c5674af31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3a5941-6d69-4d3e-b869-c98897b49899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9675660b-4bcb-4480-b0b3-6d85543e2132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4167d8e9-1080-4c0f-bb4d-2444c0378822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0362c1-e55d-44a6-aee4-40c17e85a679",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9891130-70cc-44e9-abf5-6c83bd05026c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46309646-1a62-436b-92f2-861584e66cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acabf99-86b9-4ab3-a06a-95468902c956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "461be002-5326-4c13-a097-c5dea0b50df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f7de97-4bf8-4a89-adcd-954d34470500",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80a804f-ca54-4f51-8804-58cee2d61644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc82ab4-fc92-4115-b64a-1c2cbec6405a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603ed0b1-d1d9-47e5-94c1-89b65c75a1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3749a4a7-7406-4596-aecf-a0c0014d7f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52a438d-9b8d-48d4-9f58-0f33c665559b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1078520-99d2-4c44-afa4-4083306f7c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff067c84-b8b8-4c09-8cd7-bd75e910863e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb8ce79-23dc-406f-8225-c26f1ee1b2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f77a3426-ced5-4c0e-8ba8-4ab7a269c09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25003c78-e970-4ac0-a85e-2ea72fedd292",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f875d2-2e48-4623-a9eb-ef06147e830f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3814fe96-6411-4773-8c52-123b9de2cf7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0046fd29-0433-44ff-8c0b-3e6f836982d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e372d0b5-a5ba-4521-b340-b66504cd33d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f926c87d-451f-47f7-a3c2-2bf66677229b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fcb892-e61d-4a0f-88e9-5f518c22af12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec9afe4-1dc0-4fcb-aec5-979474ef5d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab3e988-0bfb-43a6-a0d8-8b2d2fed5d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "524cf1b5-89e7-4359-adae-4acc464b7ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51e9e3b-ee00-4c04-a08a-e0fcbb006021",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64424014-73d0-473a-ab78-cbed65b622fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505a2031-7964-4ca6-81ad-34deb3db00a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56daa267-6d55-4689-8721-f5a118dd47a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57921850-6ac7-4e4e-8267-53a0f59c3a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffcb4db-eb11-4d09-a153-b8e04f59c7ae",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523e69b7-68cb-4e43-a7ce-e8408d411328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428df1ee-818f-4770-87d3-1544eff4f741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e40664d-c081-49cd-80f7-f81ab988af35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "badb6465-5190-4f37-8716-1c4b75fdcda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b59f2e1-f338-4b29-a4b4-43d2b0c93ea8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776a9c32-fb84-43c7-952d-aeeb03283fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "587101f2-75dd-4290-8c62-7c60fcfa8a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802008f5-3196-4d69-acc4-a3837a3ceabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53ace59a-6bf2-4cfa-8871-a84f2cef6e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2f685e-a004-417d-a7b6-3575fd1c9743",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692c9abc-b682-4ca6-a659-a28e4c35d945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca7e2ff-25ad-4e00-93fa-713e5344ea9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656a745d-0195-4ab4-aa84-5dd04bb04634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7b1458-fdad-4cc7-ac1c-7b1f8b4f6654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee11a99-69eb-4326-9774-821fd85c6f48",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703b0c95-acb0-497d-9a88-a5aa86f75eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf7c680-4f84-4a42-91be-5e420a3fb78f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0a4a86-9a58-4f48-b84c-d3e6d1ace344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b61e60b4-9e7e-4feb-a125-f94ca0b23248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289fa844-6b5d-4893-a67e-ce244f17ccac",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22386323-aae9-4d01-946e-d9389c53f0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b0fdef-b921-4f2f-a8d6-41cffb65da49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4166b870-5106-4a9d-8bea-651aa08ddd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0916b8af-4fb3-4afd-8efa-5f687be4aa6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a0f5e4-f7dc-43ec-8e01-b9a61d119b65",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04194af-fe58-4177-8820-f7b86225f2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbc4d36-9540-43c0-ba0d-10dd791ad231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a94b22-ddb9-4694-a458-449905a29fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e449909-ee69-424b-a211-56cddb618a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9a7c39-2924-4260-a763-c88750ef7b33",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a98468-1f17-46c9-8def-cb0f602a6aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1068227-acbb-48ce-ae2f-83ad14360c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3400c48f-76f2-4a23-8d63-f3495703c507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39a7071c-939c-4bf2-8298-0526d3edf84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c84109f-3f4d-4adf-9c7b-0c4bde205d49",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e477e362-3bc9-4b33-8536-3448795c94d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c50ed61-a73e-4623-9375-9a1039b7b6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9146e8-3fc5-4c12-9c8f-5d1636a3abae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64426861-6eea-4ca0-a5b0-13337c9460cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af6420d-ee21-4fa7-bf9d-e0dc8a468b13",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65155fc8-3c40-42b4-950d-783209237aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee04219e-ed2a-40fb-b742-c2d1cd3c7a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3c0c59-dfa6-462b-8b3a-29dfe9d46bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce6f3bf-e6e4-4c26-884d-4b3bdd7a1d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad413c97-75b8-48ba-a0c5-777c7163b653",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d0658f-2ded-4681-ae5c-1ad9a95636f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1f0d0d-7b86-44b9-958d-124acd787983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1351ac9-d7c3-4a6a-8201-24a367824e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7279d981-f6a0-4f43-904a-10cd06426326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7f358a-9d98-475a-bff7-fa6e7e273828",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779cdb13-84af-4be9-becb-f30bb5308952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1d1a3f-2116-40d1-b2ac-5ec1df917783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52550f7-d0bf-4251-8e8d-d48144a64c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73b0deac-8498-4f00-b44e-05476a9e684a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c9e8b6-9af1-4ad9-aa7b-70af359d33b4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3eb7f48-9783-469d-b5b8-f26da39adea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7b499e-570c-4f10-8dbb-12fd401882b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108b0a83-d500-47b0-8241-60fa4692772b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d3968e-8bb5-4a2e-be3b-f4ac65c700f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9ec22e-adb1-4d62-9665-5ad1e81e0cb4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16591cc9-19df-434c-893f-4d47c0db2f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74522204-cd47-4c8b-8b15-cfa9431df3b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d5cce1-992e-4be2-b1b7-2867937467ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "caeab8e7-ee62-4cc8-af4c-b9ed71679d6a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1bcd1050-5a9d-4ef0-9121-c6d37f1ad5d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4264f35-c92e-49cc-9a71-c90aaf6c6d6c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529a2849-d90f-4592-b815-6be19761f05c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a23722fe-c06c-49cd-94cb-91b7f73c7ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a4daaf-8ba5-418b-b993-abee5fba1d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9b85ecb-36e0-46dc-bf53-845e91f241c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ebb8736-99f8-430b-a0db-60a8c2e09d72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65219122-ce26-4b01-b959-01ff1917cf59"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f083767-1dcb-4911-89f9-b96e4e297c06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6beb034c-9807-455b-b35b-0b8c6ce2819c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87ad65bd-5e11-4677-a8b3-29c0cb03e826",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1c947dad-f66c-4547-abd0-ae9076c9bbb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85b3ca13-3d3a-47fd-b56b-6038c8daf470",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7fe02160-f92f-4301-80e9-4105b3dcba37"
            }
          }
        ]
      },
      {
        "id": "c964c3bb-c310-4ee7-a4fb-48c1407cfe5c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6ab7c76e-5e41-4639-bb34-dab9839e916e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1ad0726-e509-4e66-af66-a4a1eea807f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "40f155ee-8303-442e-b528-a4400864e948",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89605947-5a00-4592-8220-b7fce9035036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1296aa3-170e-4d08-86d1-0943b0fd08bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfd90b9-1f35-4abc-97df-20f35e303bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c05755d1-bd56-47ed-a4ba-4ae42058458f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33b44dd-af5d-44d1-a82e-7f739fe25d28",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1109d63-8070-465a-90a2-d3cbf231286b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb539136-e3c6-425e-b6bb-cae03f6a4d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64eb05c3-5370-4546-83ba-33659fb9a164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cdcaa20-dfc8-406b-8e42-09d805988877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9fd653-801a-4f91-be33-8ae8007e6604",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1fd0b9-72eb-4510-87a1-bbc9acee6622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe03bc60-d65e-445a-aa00-bf3b18b703d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74982be-5808-4358-af89-7106a4bdb4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f7f150-a391-4994-ab16-6658b1cfd6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6083b0e0-7f9d-4ca4-9ecc-e00967a5bb50",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb36d9c-31df-4a7f-9b04-ba3f53341025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a58490-ab83-4da1-8df4-b826473787bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8948e1-0636-4a9e-be10-494dd4e3308a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "634d53a5-21e1-4c3d-a52d-222f272d5cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996282ad-22d9-4e19-8b67-2a9c29aa8675",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e3aeb9-9955-4ea8-ae4c-d18fdaa93b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cf7208-db68-4fdb-a97f-c149ccf2aab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0cba02-35f5-4aaf-ac90-8861b7be764d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d07efd3-d1dd-44a6-a459-af4b5d9013a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99faf0fa-8ad8-452b-8bf7-261b6e2bb044",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7212623a-056e-42fd-8a3e-3721b99ca323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af5b72e-bb82-40a8-99b5-f48413d375e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6851abce-9b36-444e-92fa-205f536e4ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6dec31fa-a24c-46ae-ab1f-4ae1c188f512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d92a650-e1ed-4cf7-8106-86512cc17462",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5625475f-afa4-448b-bf30-462b98137ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4679a15-0be3-4ebf-8ae9-7965e1eb8409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8122a1c3-9d96-487d-8aa8-38fc68c43ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "18db6f62-a03c-4d71-a95d-3519f0e22b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4e8cb8-ef96-4d21-9fc9-9c0b44cb598c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28df8b1-c8c9-4979-863e-d0fa632b4af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7881d57f-1eda-4f3f-b0cc-c33f2f2c50a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea548f3-3671-46ca-a941-f181b0561dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41669083-0eac-4dcb-979c-02ae18754bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86661fa8-f4c6-442c-9380-e6cf92e79eca",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafc3282-7c1b-44c8-b25e-7948652f6159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e2b6db-8b62-4120-be3d-852c1d9c21f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d01bbcb-6f6e-4a86-92e2-042b414c151f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db59ffb2-6913-4483-b37a-f33098630464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0348db1-0885-473f-b46a-48e0eb5b68ee",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee30baa-2950-43ce-b3d1-27938a41cef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e44c976d-f678-4c04-9bf7-d7a6b8ae3424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d38b4bc-8ad0-403e-a4c9-bd65fdefa8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "480d90a5-fccd-4c40-9104-d24a916c81ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40301d70-401c-409d-8579-1717efb2278f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61da5ff-6935-4b49-bc87-db79268c3201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7b9ab1-d25a-4ae1-bd0d-817c6812da17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a454d8d8-4ddb-4aca-8afa-42578a1be65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "98802bc3-31d4-46d3-99c3-d1222c7f72f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d23931-8208-4661-a41a-7ce43ff32b94",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd253aa-7d12-462f-983c-427c384eeee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f755c4d-54c3-42e6-a01c-fc3cd8444e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db0d21c-be97-4a1b-9fbb-6448b246ca01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8e8604e-b641-4502-81cb-c35961e36489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04754637-5581-4b18-8d15-a75611baf136",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bedae32-e6b5-43d3-9240-76b37f35b945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad41013-2ef8-488b-876d-3c84a14c6b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d824471-5ff1-46b5-a198-d6512b475959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7425015a-a17b-4438-ba53-51353f242b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b02f02b-cfb5-4a72-bf99-5219a0ac696b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a74890e-908c-4f84-9260-e42939d23cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211d8292-6f17-4d7d-804b-665f0a2c5c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c73ea7-e172-40be-839f-41315767277c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa38e36-d444-4a68-8068-bf9936600274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88caf0e-b139-4d56-ad81-d58d482b0a96",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0049281-9c0d-48a5-a54b-686e7f0a872e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d9a7de-a764-4987-9c64-d6709e3756bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb857bce-3f69-4fe7-9b29-3fd73f6b7195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5fbc567-bf69-4bfa-aad5-9c27186ebe5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98eb11df-37dd-4adf-9cf3-1234b183b879",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac81694-1055-4f5f-ae62-11c04b78c785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b9d022-26e6-416a-bb0e-f076c8261225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5448c166-bab0-4b28-81ac-e08c93bc8684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1876780b-554d-4e45-88a9-8d0bdc4852e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e93d82e-e941-45ef-bfc3-64bbeb82b0cb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "787b5409-0ecb-4936-9928-2b25769d5d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7162bd-0e9f-4fe1-ad7a-bfd3c3ce5435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee49d9e4-ec64-46a0-bd29-42c6170e4f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2e4f7a-59af-4f1c-acdf-0c595e5c347e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769a0911-e6c4-48bc-a052-26725a3d36c1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9ed7a4-b61e-4230-9fd5-170228c1f181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abaf38fc-c7cd-4eeb-87b2-44e57c9d46bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a64b33-504b-4faf-bdde-75dc9c3edf46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2123fc-e627-4c0b-8d5e-c1a3108d44c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d7200a-86ad-4001-aa1b-ea5217b371ad",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd349287-3c07-4c17-9ca3-9e98e599e13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93fdb38-e2ac-4068-bc57-44530f197498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd19399-e138-4702-80fe-01d9cc6c56de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e06494be-480d-46f1-bb37-b172c672a1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1cd9b7-e9d5-407a-98c3-ac9146a014fa",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c900d19-3878-4c1c-a24a-1d9e2a7aa476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d4469a0-1d4e-4f71-9c45-93cedbb85fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a715e1a1-683f-4ddd-b173-b73cb76686d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c1c414-4970-4c08-91e7-fce9a1f22701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81dc141-437c-4ad3-90fb-c518237007f7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30522e0c-0c4e-427d-8060-e7ace6554bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50448ccc-9dfd-4457-92ad-bd6df247d3c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f7b56c-b614-4126-8b89-5032a7a00fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af06c3b6-d730-409f-b3a5-e6c6ea661942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450f0b19-e6be-4815-ba5c-4aae4471b5a1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f645de-4118-487a-9294-42f3e7666f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119de128-a4fa-450e-a789-6b4667301646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31324026-79cf-468d-9018-2e91b018775b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "078928b9-cf95-488d-baac-29d4d8371232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efabdc32-93b0-4224-a565-42f75b618f81",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe60acce-c0c7-4ca3-9c76-2986a9fe3645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c446dc-eba2-4e8b-814e-4226ab926029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30de5a56-d431-4687-84e5-ea220c0aced3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a161a9b9-5da7-4ed5-b7cd-927e5a537436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95750f3b-5eaa-4825-9521-b97ead332782",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043e56ea-4e0e-424d-856f-8e745c62c41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c0b747-c059-4ecc-b820-24fe7029cd9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58599ede-9bc1-4591-9fd3-97ed73ef4430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd0a809-9791-4dc9-ae06-8b77edf9ffeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7ad47b-a18f-47d3-b71b-57e45db72347",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0917e592-dc79-4e01-8ced-ad61a82402d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74c7358-45bf-4efb-bf74-d3fa25ef517e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24812224-86de-4c12-ae7c-3a565643ee98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e0de34-2284-4618-b1b5-74df83710a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b311be-0bda-45c4-834b-d57a28f523c6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b142a6f9-2f81-40d1-aaa5-c74672f0903b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50a17f8-294d-44bf-b8a6-e58809260c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cc7286-5597-4006-aceb-bc7993f27e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33901863-bb8b-499b-ba38-ff76d83203c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be9fd3d-a571-41e2-a9e6-7a34d6dc899c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f3c6c8-d84e-4807-b156-b013644b3f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953865d4-49b3-47a2-a694-35f30c2c7038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477d0519-729c-4bce-beec-291d316becf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "981a7532-97df-4448-8578-7cfcd87bfdea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14abcec-5692-4fbb-91b7-f9dfbb595cc7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c536a784-edda-4c98-8843-9b39df8f0bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f4c20e-7c7c-4f4d-98e3-1a9ea7d3c641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff21537-6190-4d72-a56b-ce6c8171f1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9862b2cb-04be-4cf4-a610-5df7c9179828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5751bc67-c67f-4d30-aed3-df2ee455c36a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f348dae-5f79-4509-99b1-1f8a20d032fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd0b29f-0d59-4230-9794-2451c7551d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373651bf-810b-4017-8eca-698caff2ebe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f3dbbad-f6a7-4e4f-af8b-a51d3529c4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54997b9e-cb6d-466d-850e-15b3e9b4059f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f331db-8393-49dd-bbcf-3550510bd09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e26f46b-39cb-45f6-9daa-740cb5841d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cad654c-2c38-4645-9e75-d988fa5300d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afe5d9e2-45bd-4327-9380-2515004de3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8ce6cb-f788-4559-83ad-3ef59ebd79aa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f05ff2-0b63-4147-b53c-de33fb7bce16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55eb6853-30a7-4742-bf75-c78263d21839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e55445-13ef-486f-b9d4-c6ad06a228f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "184b3f75-5d4c-425e-8645-55e249b1045a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8458b64b-debb-440e-9211-e522fad8e96f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09213d0b-e419-495e-be77-79da2a0676b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7f491d-6496-4f37-8221-9b4fb5481e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdd84d1-8228-4e5b-8be2-cddaf782a610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebb797c-8c17-4a04-bab9-df6a43c0c6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147686f8-49f6-4cce-9790-e4fd78603722",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e1a9ce-5e36-42dc-bce5-c9c60ca02824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d37cccd-88d3-4e67-a0a1-66f95d942dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1daea528-7d94-4cad-bc05-b71c2da9a44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be7fcf5f-4e89-4f8e-8b86-5b21bfd794be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0e393d-007f-4dee-9d72-a022c6f77760",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb1c740-1fed-46aa-bdb0-f487a0f32714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a10b2b-c479-46a8-9957-e2e007b96b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff234b4-3585-4cfc-9305-c0aca971d6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b1fb029-7a2c-4cc1-bbf7-4483154c1bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd54a3f5-190c-4ab0-88f3-e54aba181690",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa3ac37-c763-4358-9617-2b5d2cdd6b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53482c9e-088d-4b8c-97f5-f613d7de2180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4406f0-ad2f-4f81-a8bf-2efe82197e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a7af667-5b1b-4eb7-9df7-45a8dfcb9a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c82a5c-a5d6-42d2-bcba-890b8edb4d8f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2508b6-9a35-4224-b4be-0d373caae7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b90d485-9e45-401b-b3b2-7137503c6903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074c0918-717b-4641-a1c5-e5e5a4f6cd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0a84c3-acc8-4374-8db2-42522e3424e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e0703c-1580-45bf-8ae8-a794f7b24871",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd1fa57-e0b3-49c0-a076-6b7dd72bde82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f517b5df-2ae7-40ae-a8af-bc9172e16dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1d9674-1139-4432-b409-6f9be69a6781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d81f9f7-ce8a-44f8-bbb4-9b862968e615"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "94389e96-127a-4cd3-98a5-bbe39820b2a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08ec2668-2f19-4b1c-a26f-3fa5131a00ea",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352e609e-1fad-4607-95de-e660a270114c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "41acf7cb-4bf6-4b97-8d97-84e4911ece6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47846d94-ad54-4cb0-b7f7-ce21c5318649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "715f3010-6774-446f-8655-00a8b67b9f23"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed0744ff-2ae0-49cd-bf90-c57be057c136",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2998b9e-2794-48be-81bd-c1caa415634c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4b5b030-da3f-41dc-8421-a35d12d13eb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "763740c6-93b9-44f7-be5a-9a72a15f4f9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff1dd5f1-8427-4dc6-a27d-1f109c5ac207",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "80956288-786b-4b97-937a-d92e53c7f7be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "812db7ca-2603-40eb-ab0d-ecd9bdc74cb3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70dd1347-ed80-496d-ae3d-bca142d5b0c4"
            }
          }
        ]
      },
      {
        "id": "8014de5c-6a37-4685-85e2-e7020b5b8ccb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9adb8423-c07a-4d15-930d-65b32048c540",
            "name": "Negative Testing",
            "item": [
              {
                "id": "16ee09d6-8a0a-4e47-ab7c-7892ae6e882d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "71d40ac8-2982-4b47-b0e7-d33af526ff57",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f88a168-bc85-41f6-b43d-50d1e2dc8b01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae03c95c-e016-4f32-af30-15ee5d2c3de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2096796-355e-46e6-aeb1-a78bf8644bf0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436b5def-d359-4c45-949b-3d733b7301e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20070918-55f4-42ba-9d29-1804a33896eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d4ce6b-1f20-4bd5-b8cf-cfec9d841bd7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1470da0e-d484-4528-bb97-42d113c289a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c4314c-eea4-4008-ac5a-2797132044ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b039be7-961a-440f-bbd5-c2459a40778d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3524ce86-8e56-4529-8f6c-c43afcc481e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c55b6d-54e4-4f04-bc25-df29ec361c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd106e8d-c0ed-457a-b067-d8b75c842faa",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52af19a0-3726-4c8f-9319-7cf8cdefab69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407169b2-902f-411d-bfaf-ae8ea8022451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ab1697-4dbf-427d-9cd2-0091b94e2a87",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba192055-decd-4f05-8a83-38c226e0f43a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3141a81a-d22a-4343-b9f4-368ad1e1fcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73596655-b0c4-4fe9-8974-30d647f9fe99",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a5f662-4641-443d-abdb-99ef57355d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe02205-e03a-4427-ae70-36ead47109ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a96d21-9c3a-46d5-81e7-1bb596412540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9208ae3-5585-41a3-986a-48fe63d98fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a893bb2c-61de-4cbc-bdc0-f0c646da046d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9ad5e1-37f4-4c1d-bf13-75341f563dbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "547c98cc-0fef-445a-b00e-6195ba0f4a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fb804c-a57b-436f-b7dd-48f95ae067ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "647ba709-538d-43c4-b8ea-a93c1b0a0062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7a6a4c-ac45-4e18-91cd-2800fd73fdfc",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2707ae2-bdfd-4f67-85a1-4c43eeca7781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f55fc6-9216-415d-9984-b36465faf7f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa141f9-f47c-484d-a59e-a302c07fa903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be700e72-e1e8-4b4e-9138-450fea613dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df01480-0fe0-4e9d-b64c-2309fbff503f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6775719-71e0-4169-a2ca-51e464cf4620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3747b723-a74c-4dc9-9501-1c0c030840ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61999d13-96cd-4c1c-be62-57137f676bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c1ff50-ecc1-4bbc-98ff-580287c47f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e03761-4504-4df6-a6ca-83a5ed4b0384",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd98be7-7db5-4d6f-860e-d0c4e5c94484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2131cc4e-d45f-483f-8909-f33317cb2a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f498a557-37e8-4db4-8bf6-5617b7408754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca57bf9c-26f1-44f8-b038-1e92eb0914d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bef48a-27eb-4992-b671-a0234c840da9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b389c999-98dc-4b1d-8ba7-d976e93571e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba96c94-ff45-45f6-9dd0-25a24adba2b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b108511c-8adb-443e-b313-f1c420bf364a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65106d7a-87a7-4b96-899b-4c88862a4166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20599142-87b9-45eb-a495-d2b755f28175",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a2001e-60d2-46f8-b0f5-44da4f9b14d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aeb0fc3-d96e-4a1f-a2d9-9dc3efb2b751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac6c170-24d3-4def-a502-6f6c7c0039cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a69471-eec1-425e-b6cc-7ffe6290f116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c58a1f1-2438-41d0-bee9-4237389ad2ca",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90a65f2-7d28-4921-90ea-8fb928c5ee81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b01a7d9c-d8f1-4b5f-8114-405bdc624417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3e542c-6c9f-4803-9886-398f8a2db673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82db1ffb-3cfd-4573-ac61-3cccaea3077c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a779b49e-afb6-45e6-b88c-4588023486e6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624bd3e7-85a6-4977-bfc9-9748daae14b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81db8c77-7281-4817-ad62-da35ec4d58ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9a220d-afcf-4f70-bf50-9815d8481805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0491203e-cf42-4fe2-81ee-86f51bb3725a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4457bd-2e79-455d-97f2-8fb9308c64ec",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edc19ff-9e7f-4380-a07f-9aceed4d52cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27322be2-da7d-4027-bf6f-4a1650997d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4d80b0-e252-4a13-b00a-a896186758f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5ef50a-2e01-4608-936c-63f7b3be26a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab815f67-93fc-4c54-abff-fc4dc6b13e93",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6c9dcb-266b-48ff-adf9-41f17e254b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3bac0de-d805-4038-8d54-0a91da045add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7feb9f15-b2f1-4d8c-ad91-41b4e7ed2697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5684d3b2-3868-4277-85b3-3a3c16c86c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c84077c-773c-4b59-81b3-650b04b60e08",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f5d718-645f-4cbc-a930-db49417b5ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91899276-9f92-423c-bdc8-432ac438687f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f12476-bfcd-4229-802a-27559b9436b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34098489-66e8-4121-b71c-a50afc619e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26a0349-b955-42e5-b071-a041643958a1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c1f18b-5364-46fd-876e-da7d9fa89bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b46e152-7754-463b-ade9-32411f1fa9f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d871b602-2762-4f2a-bb99-cc81c4e9e686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39cf398f-6eb0-4f2c-9e71-102894c2b9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17730a16-2cd4-4f5b-991f-64e8b00f2f25",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119a93b8-ebb5-4cbc-98e9-fef49a141da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa213e23-bf76-40cb-95a6-46a13c105d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6b6a61-b42a-4ee7-8aa2-ed26a3595926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f583c64d-9fcf-4bb7-a851-d33cbe1395bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392de22f-037f-4d25-ab00-8d70510aa180",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe5d912-4b45-4aeb-93c0-ad9e13da7517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8b3052-6535-4999-8904-83728d7971b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6aff2e-d70e-4867-afc3-42fd9c950832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146a3ba4-9251-4da7-8923-734c06e2edbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84ce40f-76de-4b71-862e-e5570327769d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b89da2d-ab98-4a10-9a35-4b07d63c4e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83b04bc-b311-4fd4-8e13-a40eb8cf6fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b904aa1e-83f7-4466-82be-771a8786b871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef7cb54-680c-4dcf-97a3-ef349ff80c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ac05d4-eb0f-43a0-a646-cdd39dc06688",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87df43b-2e37-4354-a7ef-b91f85bce223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "783388bd-b5c1-47b4-90b9-7e8afd60ff8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec42571a-eb07-49ac-8975-6519509b706d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d5def2-29cc-456b-949b-d058e9c1088f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3582773a-ae5b-4f9f-ab4d-cff10fa84fc3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21000484-a300-400b-8a1b-852aae180d39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14d2ceb4-650b-4106-8207-76f7401f73a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "094e4571-2f78-4694-b9df-5181ab1b67ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4083ce9-fb53-4c32-a8e6-9beb56b259b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90604af5-ae0a-4197-8e12-a6dedd09647c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d0956a-09d4-4706-8c37-503d76001a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "194b4819-8e68-4bed-be1b-9d9d525ddf56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab5f733-45cd-47d1-b0cd-47b4e08d6f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af25f11b-8bb8-458e-8376-6b5ea2837a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f558eb3d-ad8e-4d92-8bfe-bf47622dc9b3",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688a8a69-962a-4167-90b7-ab6443bcc2c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48836984-d8fa-4693-95ba-493280a58eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa8d684-24ff-4248-9a11-352e820eb2d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd376d36-e065-4d52-b69a-de9816f86c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd136cd6-1f57-4fe7-803c-8eca94209137",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe614a61-0ff6-4b3c-8cf1-9946459d8a96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "069a28b2-df4b-46ca-9a42-a5b8c2c9cc45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc3cbf1-709a-4d54-a7d4-cadb2024c134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff569090-cba9-4716-98d0-5ae01ac17de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef158e2-b056-4a38-8c2a-ce7e92f33f87",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e4a0c2-5a17-4f48-939e-7f787e37991c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e138d020-a738-4b44-8480-77c2029a25ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da807ca4-b86a-40b5-85fc-3e353f5824e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3dc787-9083-4085-a71e-5cdbb6f734f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b14e30c-00f6-4232-8329-46196eea4fc2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d3e39b-0c0d-459e-987f-3689f4b2ea80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3658f88-eb48-448a-85af-6e26d626ce5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1face2e7-da1c-44bb-917c-38c49c5bbb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ecc71a2-962b-42c7-b485-7e78f5948622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ccc6a6-82ab-427f-879e-7397ca3aa45a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de40bf7-3a21-4efc-9577-3da806af01a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34a69cad-1ef8-42cc-b714-1496ed3b981d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c11d5c-9e99-47d5-802d-a7f641c342f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb345763-ca43-4f9a-b91a-5d1b41972c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6c676e-2f77-4f6c-a146-d88530eaee57",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c5f447-5d5b-4455-bb45-d6dd30c81be7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b36e7f7-4bbb-4ef9-a1ee-4ad9e44a5af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c642651-a3fc-4b16-af0a-ff020b41526e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5dfc4a-345a-4d0e-8322-7be5484c125b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f7b68b-ae0b-42b6-b30a-8e1412571599",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1987acb3-fc35-4333-8258-ec8b32efdf4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c600786d-96f2-4d08-a5ea-6ab6a2d120fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c274dd4-191d-4e70-9d7c-1652d8227201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f15ee3d-1636-47fc-a2f1-e73efc7fd92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5276cd-fb23-4fb1-a7a9-4a9df5ba4d3b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b42770-bd24-41f4-ad92-6ce21df7096c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb358cfb-2ec7-4cc7-b2f4-7749e1adc583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3890e792-51f7-4e14-9fea-a25aba8cf214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91071cad-dfdf-44c2-b7be-729b3c5ccaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00edecd-d28a-4ce5-9d90-c8a5c56e35c0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d778e7-baa8-4cf3-bbd5-e8da010ab4ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0752bca-f9a4-4f5c-b548-5e8bd78e3151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92961b84-6837-4830-ac22-809590221858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26382cbf-2b3e-479d-ae9d-c636b951f9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f116ff37-78e5-4ad3-a6e9-f33c6a758272",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2b91aa-95fa-424b-979a-b473e3168f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef5e794-e83e-4eab-a0af-6c3e724d6eb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171c546b-cc50-47a6-a81b-33726be16f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83cd0d61-38f1-4fcc-921a-56dd5472e9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c440b2f-bd6b-4444-a016-ec0b7406839b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1acdeb-c1c4-4c04-bcbf-8599ce24c311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958aae78-f167-4e77-994f-14b493ce40ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87973a02-6c0e-4840-bc2a-8d2d8f341f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776b6333-2692-43f2-b123-8535249b2c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067b75a2-76be-455c-a37e-769da6d2e73f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd155f7-d751-46de-93dd-616aca3aa56d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8b4595-dff4-44b4-9ba9-d89b9f6a44f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c630e5f-9006-4e6d-9321-e5bf83725980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73458abd-d7c0-40dc-b8fe-196d324ee03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16088c8-b581-4d7f-86dc-bd96a144145f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fe5d9d-d263-437d-9a63-0d3fabeb301f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8eb667b-eeb1-407e-80a4-209b79c1684e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "814daf3f-f0b1-4022-9485-b010fc444f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bb7190-f826-4480-a391-c0f5db0bdbc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742e38fe-b5c2-4e87-ad87-36f1d2a1fb32",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3633f461-c305-451a-9f1d-6f9e7d1f9000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec01a76-cd28-4fd6-8f44-0559e08f22d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e71c7c-63f9-4bd2-b657-2aec14f16c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e02118e-aba0-498f-98bd-7a0bc9b7f367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e7f04d-e564-443b-a7db-0717bc0c929c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf81475-9852-4b11-ae7a-a1974c7cf5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5308ed0-512a-43d4-b09d-3a22158c0205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b71fcfd-99a9-48f9-b7fa-ff843bfa5762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d3334c-882c-498f-b5d1-c3e989af263d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53d702f-0f03-444b-8256-007a397ed10e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf7234f-c4ed-4786-b0ba-a5216395ffe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3b183f-4685-48bd-9253-f4cdbde74e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825a54dc-639f-457e-ae4d-c67709b94f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25166086-48ab-4791-9e2b-7a0e445e1115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760cb336-2e66-4b6e-8714-d040f5781797",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b065fd65-b5a2-4ec9-88cb-c734d7e1ea66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0cc20f0-80d2-43dc-a9f4-a44294db9e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d547c27-9e27-49b4-8fa7-0d8a4671733e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c33e65c-68d9-45fc-8681-2745866a6be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f15283c-8b16-4c22-903b-5f562af538af",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bc07f5-d38e-4f0f-9586-cb84dc142cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d873db39-db99-4b5b-8222-6fc1545d6fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e0b05d-0da7-46ce-8003-809950791940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f60ff6f-71f6-46b3-8019-7001a26788b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77123ba6-25c3-46c2-bd69-f2bc7e5cfaa1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e83ace-2731-4eb3-9210-089780dc7f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4a12b1-e98f-42ad-abc0-bb317ca186cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b40cbb-f2da-43fb-b49a-670821a25c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cce8848-d533-413d-9900-ae0fb4309aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff3dcc8-89ce-4ee8-99b3-a9e0b31f9235",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9aeedf-0f8d-4683-bc3a-c12d9849e710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e102d9-307f-4ef6-affa-b2fefecf181d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c9be39-4de4-4cdd-aa9e-ff98ebddd85e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "491fc34a-f9dc-4001-9fe4-754a74014416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83caae2e-be6f-40e0-8545-065d07d86711",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c9a1db-74ee-4269-9d7a-bdd07c50dbf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c973b4-56a8-4805-8958-cb8a6099231d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4e07f1-233e-4be2-8763-9c2c83fca379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8bf170-746c-420c-935c-0c2451437f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2deef800-d009-4a0e-9db4-ae682f41fdb2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b03def1-bc0a-43c9-a348-1198997f6932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1ae918-1cf3-4f3c-bde9-d401f0618ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974bca9f-2c72-40ab-b143-398514714681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0b9d5c-ceb4-4552-afb9-9b08313be7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e760690-0c15-4ffb-bbb5-e7b99556b9d8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5ac364-ce37-4159-aa3f-a0979d95e038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d963deb0-3990-46a7-8635-ef330b86fb75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0f5601-5952-4d50-a519-0020d5e07603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaae9445-d82d-4862-8611-ad3f9aedfe3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f8d59d-7876-49ad-95e5-b219f148242c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e1530a-60f6-4b77-a403-9d564e2dc02a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990d4f67-f95d-4c72-a123-819b6b150a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e39b58-cac9-4c03-ae7d-7c5c83fb2a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa949623-0692-4537-84cb-81415ea3d3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf683e9-f3bc-4f4d-8102-337407c550c8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8ed2ab-d26b-4bd5-9814-866f10e8ddba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b6ed43-6a79-47c3-8ad5-d2024bd1feb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1b5486-0ddc-49c3-869d-7cfe0d28c09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de30dd6-8973-4257-affa-0070fd73c428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed51ace6-557b-48ce-8805-2263857bbef7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbc356d-7651-41e9-8dbb-2465f5c37736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb2c5d4-f1e3-445e-b9a6-bbeca2b74e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd90bd05-456f-4490-a4a6-4a3758e5c394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f4e548-7918-4df6-8c1a-b7c0a9009705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f254183-6aa0-4d0f-8669-f5428c6fb2e5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0157f6-bf6d-45c9-bfa8-0112eca5872f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7f4dcf-97fa-4c46-9af8-07b205da3a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97cc637-c4df-4ff6-b904-fdc9cd8953fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c39b533-d901-4bb4-8bf5-3cf8030570b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3618cc-5214-4676-8e3c-b4ea51d7cb59",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb174130-2672-413a-8c8b-15fb54a95a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b1d6a7-16d7-42a9-881d-c152adfa3479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0cf851-91e0-4ee6-aadd-83e64b41f5ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093dd0a5-1a71-4901-8b3c-015a09b96e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c95816-f4ef-4d71-9630-1b679b1447d0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ff0271-8d9e-4e42-a247-9a2f876ededb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5265a4c-1063-40cc-a933-c086130cd6f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da16271f-e31a-4048-add7-cd9a6696b206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1598cac1-971f-4661-bdb4-34c80de464ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8926479f-b482-4be4-95e8-30d75928cd4e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556513f0-72f2-4df9-9bc1-8491329fbc35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e17ceb9d-d2f0-47e8-b247-da8068dfd917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd38428-d549-40fb-9f63-3ca8baf17c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44761ae-110f-44f6-a91a-011728e3390f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3f1479-6c9a-4a5e-8627-e395803b4a2f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448511bb-94a2-4a1b-b0af-6083ee16d7a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6f97d41-1250-4443-8681-31967f1baf9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "430810d9-8fd7-4d62-83ad-52885cdefec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f387d60-d478-4bab-82b5-d3a6cd1e3ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da98a7c6-876b-4d06-ba10-6715d3d874e6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7444f24-7d44-41ee-80a3-6bfa4088cb5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5320e2da-a407-4250-ac6e-41c26034e00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59605c1d-fd52-46af-8e12-c4b1b812e211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "286e4628-cee2-42d0-b013-79a184c5d03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdb4a48-8398-4376-ad91-da08bb00405a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350fdf28-00dc-4594-9d48-c637e196ac6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080c9627-9986-4f64-812b-d27bd4f4b673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ffcba3-8b85-4df4-b064-5553361ad347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f234b58b-0d06-4337-9013-efc47d2ae376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c84b6ee4-810a-4385-90d1-84df0cc2326c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19b30ed-3270-4729-9ce4-9b23d047bba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebcf37b-7dc6-41ef-8c0c-bbe6e9a65265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8aa7cb8-4105-45bd-b853-ffca1c3dbf35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ad4765-d8bd-45ce-85ba-4b11b2270ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e46bd9-dcda-4e9b-828d-ef5c92666476",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e64d529-7298-477f-9221-8240f4f2c858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd35b67-3f9a-416d-ab22-7e7175ffc2bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc92693c-b9ea-454a-b221-561cd7aedda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c07cad1-65da-4952-86c4-fc952af7fb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c471ec-f3ff-454e-9cd7-d482d8108a89",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88916d8c-bf82-44e8-ad6e-19fcd9999372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a05060-b68d-4113-966a-79b4648b0e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52a556c-0da3-499f-9c99-1e562eb5b2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912a4846-f611-4cbd-a460-736667345922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce788e7-d2f2-4d20-a007-bcabd0afe098",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3effa92-96f2-423d-af6a-6791541a300b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb0d0ba-46d8-47ab-b751-dc24c6de0831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e564916e-255a-443b-9c0e-f277cd8b703f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948c0516-9f36-4249-b857-9565d4514ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802549f6-4620-4288-8fe4-5ede78b5c94e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa573ab-f928-4c59-bd17-9945c79f14ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256b4211-1076-4d6f-a9aa-fa3d5dd97504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a186aa-ecb5-4e8f-b921-a6cc003dc1c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea209bc-7b77-4887-a137-8f3ebd27107a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e608e7d0-0c68-4680-b1c3-7faf2cb642e1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9a51b9-f467-4c19-8f32-e520900ebde9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a607246-b3ac-43af-b7b3-7cb05a0c7b80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2fb85e-9193-4f2d-b9d7-90f3702ef9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "540e05e8-89b0-42ef-8073-e2e8c32ded44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057bba8b-932c-47a1-9dd6-a73451d2601f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b846b8e-5bbb-4855-b6f9-efa0a74ecfc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "376e95f5-e5a1-40c2-8561-a0ec3b5e3449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f397b6-df9f-4b19-9492-9d1f7c70e3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc63553d-7549-4a18-949c-40f9e9e370c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456b5968-51f8-4c28-8c8b-5799b0786994",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1272f40f-8b40-4921-a377-e7b9ca50b5cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a964b2a4-e058-4f7d-b36a-91bf7c927cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1577e299-be4b-49bc-94dd-36e6f3955b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eef782d-d83e-4808-8292-6fb8ff99e04f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82842bd4-b79f-4060-9b4c-ad52af24e657",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ee6516-d4a3-4cd6-937d-b434c9c6dab7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1acdceb1-9bd8-425c-bb31-8a1b9ba7fbd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e7dd8f-87ca-4d2b-8e84-df2b460cb08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0465e9c-b2aa-4c09-b62d-f26d3623ba0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c882548e-a95b-44ba-b115-be9734d1d59c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ac9a3d-c84e-480a-885e-78d2cc71e566",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bea7950-9ff9-4c0d-b892-0805ffa6d116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75106906-8355-447b-b511-1983a59fc6f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a12d77-eb6c-4516-a3d1-c2c492470a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1648af7d-fa4f-4ba7-9d76-417d97478c68",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6371f0-7325-4169-95ba-4eb10293d601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ddbd64-be37-4717-8c22-336c43a37722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b951178b-3a5f-4e93-b485-32504a8cda7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d970dca-a393-4bed-96a4-a4957487104c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b313e1c-98da-4459-bedd-21fe76acbab4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a33e246-77c2-4cc6-b4bf-59c16997fd4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eeeda28-4cd7-4e58-9afa-d8cb5c09b782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09194a4-27cc-4d38-80f7-fdd95fdcad9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652b4d80-3cba-48aa-a139-8c61706062eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab517dfb-5691-4a0a-b8c2-8eab2b365ce8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232536db-07ac-4629-8316-f0d903302bb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a37e71-8f85-4641-803d-69e38109a0fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1120bba-dcea-46af-88e4-4dce14dbfee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761d92b0-83ae-4b2b-90fc-436df0ce888d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc2ced4-d18d-4700-938a-0acbbeb2d101",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4894ee79-3371-46f4-890b-53073f1916eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5431f968-250f-48fa-9584-12360e0923f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb137125-cdd3-436c-9744-dff72a5df702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aadd134-30da-4aba-8a17-ab424e16cad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936012b3-7bc6-4458-9411-48bfe3e4e453",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31090e2f-6757-4981-85f1-be63b7f36819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2db6e246-59a7-49a0-8ab0-8b5089c0dea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38cd2e7-f026-475b-b02b-e53ef3472ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dcd038e-e101-420c-aecf-16f97bf23518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10322bf-f8b6-4db1-b468-55420aad1cad",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3658d52e-37a3-4eb0-8e1c-b20d42846b07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbc5ff68-7886-44b1-a9b8-a84e2721c359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970a5052-6ee0-4687-9852-7dc6c3a9f963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf5e94b-1997-46b0-889b-2ec32a9ec8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39990842-9ee2-4374-9827-7178397d880a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dd5a7b-5601-480c-a5f5-0162e08fecef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77255bcb-6611-434d-af12-050138d59336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e811ab98-e7cc-42b9-b7ef-2c8a2a849d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bf65f1-7e8a-4e13-a49d-918d94466c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee603b8-637c-4ddb-84b3-acbd85e59ddd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0606d98-2bd2-4559-853a-0823eafdd74c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c13b7802-b7ba-440a-8134-4d6c6bbeff08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4786f3b4-0653-4df7-a0dd-fafe091333d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0eaa24e-46b4-4612-86d9-7a50ffe5ab31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0c6cb9-8375-47a7-a74c-796efd571c12",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1f115b-75e2-4244-9326-e4fa943e55d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fe5d789-50ae-4cae-9219-2e4791a902b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a868da-ef14-476d-bf49-44b47ac00e73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c4e329-a14d-48c5-96c2-4464f140c64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac8c1e3-a5d1-4367-8c5b-5eb8e8d63233",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a6e83f-9cdc-44ab-a423-eeabeac96bac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b35a641-12e0-42cc-9868-7702590aaeee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eabe3fd-e0aa-4761-adb7-308e8c72538a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23d65577-3df6-4fe9-8add-07d6c8fb0bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237e102b-a4d1-4dd4-b79c-94a1bec6c3a3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b779417-ea2d-4d4d-9a87-c4abb7887837",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0067dd2-cad6-4427-a6cf-09770ba93f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd155288-c8b3-4d12-98c0-6835e113db3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46b354a-dfdd-4aa6-87fd-e0f374551e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31ade75-8557-4d76-9eaa-1eb7123efbb8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4957fa8b-dcc9-4f33-8d53-b210858f242b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19cc14e9-8ab0-49a1-b6af-6a781352a71e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8b5ae0-1db3-4f94-9bb8-1b95efd244ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc920072-45d3-4ed3-8920-a61adcdb45db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93656060-9f9f-43fe-973b-78ee4d323ad2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4bc72c-8f76-4b6c-880b-1db44c8ccc2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d663122-4d6a-4f02-98d1-17f66994fc18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1709fc1-6df4-4304-a6cc-a5f5c5cf3329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3915741-9bda-4482-a062-c5561a96bb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4a69c8-3f0b-4e57-bed6-bcf8a559929a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bf14aa-5208-4d69-9c6b-22d1fc807eef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4e36b99-d66e-4c7f-b19c-269bb84cbd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a4aa70-af8b-4c82-8e5c-cb89962722c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78dc6e7-5ba0-4f9d-aed6-6f75ac74f4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ff9ab4-be1f-482d-9581-f96d394642bd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71948320-7219-45f7-8949-9eca94b6c6bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48cd01fb-0235-4560-9192-9dda5b8a4ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc180fc-c5ac-4030-82f3-6c2db724ff8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61ecc60-71fa-4844-bc6f-cce9f19ea8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea98360-3db9-4343-8be4-28c51d4afedd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd2350c-eb11-47af-a13d-42bf5ef4ffdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b71a41e-1b3b-4929-8b65-d308d155cab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b427d7-b777-4f15-bc05-a317eb115431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d4435e-6e6e-4c1a-9833-f732b9fe8d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37206e3-14df-4f0b-a51f-991c2de38b1e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be6d121-fb34-4f41-ad83-222b8b7cfc5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54c94cb6-6149-4511-b446-c8ececae186f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9cc473-23ea-4924-b066-70e0368e99bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4956351e-bcb5-4250-9c52-5db8ff5d2296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88cc241-648b-4885-92f7-26e1223d6aae",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae826cf4-b57b-45b2-af78-afbb8071b973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d899db9-ff9e-4da2-a3ab-d59c5cfd523d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d0d59f-93df-4883-8299-b2fa4e768100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb49024-1853-41b2-894e-d8e359971066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75178296-a8fc-4837-8c0b-19ce90a75036",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4727bbd4-bb09-471f-99f0-b6d0a0c85c30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6443124-7a63-4c98-b093-e4fe0fe62532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1909ec0f-4d61-429f-868d-55260a10ce14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e475b34-42ae-424f-a42d-a9239dcf611f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d357d6-f96d-4d36-be88-fb673faca71a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dce821-4e22-45a7-8b3f-91a25757b7d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "353c0365-fa8c-4767-8382-d11037a7d964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c27fb1-a9b2-46d5-ab41-0c99fa77ee39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99c5f04-ad99-4ca9-867c-c7e28883312c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14aeb6c8-9462-40cf-8f9e-f4af95ac2267",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca67e67c-134f-4be2-ae7c-bde475bbab57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c70fba0-25fc-4bf7-9605-1ec48b066e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f6baaa-1fa6-4774-87d3-070a677d844a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6233fe84-0aa7-4ef3-852f-bc104e0caba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07da97f-7e67-4502-95f3-dbb8a3be4020",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5454d670-2a7f-45fa-a4d9-3aa0debb8e58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535f3c15-8be6-45d9-bbff-3fc97b1d3e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6dace7-2b71-489d-8995-fd53286115b6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ebbcee0-6abf-4789-924e-f6bff79cc5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0effd61a-ae10-4572-b0e5-b4e4141cf477",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ab893c-8411-4cb0-a1d7-6cfaedbc6283",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d68adb3b-474f-4c74-bd83-ddbeb5f52263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33f1042-914b-4586-aef1-b973d14f85d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5b99d9-a1f5-49b7-991d-73c4000dfe6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b45ba0-6f24-416c-98e4-c7ebb5dc5380",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2822cc0f-6915-476f-93bb-d447af86d38e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e4b8641-9616-4270-b3c0-2d6f3cc09f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bb421f-17e7-4326-a233-d25f9ec20240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a637e53-98cd-48db-9755-39948a0c185f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfce8bfb-f5da-4426-8828-16645e845801",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecdf9a9b-7731-4c07-adc3-f24c667dc35c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae577db9-2ff6-4145-8afe-08de0bceb620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05cdd91c-664d-4c28-a62d-3e94307e1508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284f9c2d-1d53-4cd8-9574-95ebaaaac312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c52fe8-1e3b-4e25-aa62-efc15aeee02e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188346a6-1d6c-4e81-925b-7a1f13bb1b47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dc37527-5cdb-4569-914b-48bc836229de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea09359-3b5b-4e2b-96ba-5b465508a1e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ea81a1-4efc-4340-8b1d-272ec7b95117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c326dfe2-7687-4ce0-8801-6f34a3b7c544",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592bce8a-4ef5-4c6d-95d2-a00c8ba0acbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e198c3c9-63f4-41e3-810a-9da6f6711dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4e029d-4540-4f0d-b911-ca30685cb82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24128117-a365-456a-8d85-5055540684f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5326b4-65d4-43ac-89ae-ad16d4db5321",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a15f7f6-5d9c-41bc-ae6e-60b7d14c31f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18338873-72fc-48ee-bb74-eb107082e4bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab31a71-bc0b-4105-99c4-d4f60951907a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59353875-7b35-41eb-83a4-6239240c3ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77e7bcb-d2d9-4164-a358-99ea66c3f465",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53d732d-e9ca-46d0-bb7b-e92226be59c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80027096-1b2e-4d93-a928-80ae1955657a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d948c44a-6fe2-42e6-a0f2-bfa25767bd4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b412b610-84f3-4d2b-9e19-505f90730030"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "789478fc-8dc7-4032-a05c-039047db2c25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49f9e010-814d-49ba-9d14-51567ba474e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38bbb258-a1d6-4a2a-907f-85e893b85a23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfbe21f3-a750-4a51-b4b1-7c42e1f2417a"
                    }
                  }
                ]
              },
              {
                "id": "7137bc30-9290-4d2b-98c9-0a8018e3a3a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fe694f3-aca0-4f88-add8-c4bab7259329",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f14b1ae-aadb-4364-a74a-7f3a80553bea",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c1b0854e-1fcc-4bf7-828f-c22d33c7c9d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b0708d-d83b-4c36-b677-37d53f05b0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "587790d0-1393-4199-b034-f3f4698b6270"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75abed03-4d27-47a1-981c-2739842aced0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08e02d1b-15a5-4962-9e12-efaca7f6aa46"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbcc6fb8-6cb0-4940-922c-4a676097f299",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "499073d6-b124-41ca-b341-0a8552342d9c"
                    }
                  }
                ]
              },
              {
                "id": "c6489984-d974-4c58-b071-c855b04f2ef0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8665fc42-983f-4f68-b52f-5b11b0d7de53",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320c82bc-9372-4492-9643-9db34c22d561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "eeee8ade-cf62-4a18-8353-010e486b8b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f7169c-c445-4fb7-9d2f-3b5bedd6c377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90020ce-5d92-4781-b66b-17aaf1d61c4f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1f7bbefe-9ed8-440d-8fc3-70886fd00520",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5cb79578-ae30-44b5-82ea-712f36793ee8",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee3596b9-2336-4fc9-9f94-14789f158824",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b6a129eb-aff9-4b55-a453-c6de1b3a8255"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32f71e0d-1cd0-4ce9-839e-274f329fa00c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08304877-a94c-485c-9a32-7acd7bfa6f9c"
                    }
                  }
                ]
              },
              {
                "id": "f1610b6c-be31-4e83-a09c-16a2beec0118",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2625119-82ac-4ba8-a779-d5d3098139ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1b3d27bc-8b38-4652-86a7-a15687567070"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6f734fc-d8cf-4c5e-abe0-a2f2794436cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54f6d37b-923f-4522-a840-9eb1b4fc80bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aaa69037-6d82-47c3-9149-3731095307cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e7d0c41e-4683-4944-83d7-0a10b4375ae0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6666a808-51c4-4c98-aa08-3df2aa8cbeb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0862d07-2334-4d1c-9503-4fd0bcf86112"
            }
          }
        ]
      },
      {
        "id": "0810b347-2d03-4a63-8e00-aad2f972e6f7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f263a28c-1b2e-4bf9-917b-498a55963fcc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "661ad0b5-f06c-42dd-985d-937204df86ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b80ca7a8-7d95-4859-bd86-720e5df4dcda",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1117b7d-2ce0-42df-b322-85f24a147340",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "661add12-9fae-4051-bda8-c8257b47a4b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9e9a2d-85b4-41db-8c23-cb47ad1f685c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "857c1a16-f0b7-4b48-a5e9-00d557c833d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aaf4395c-71ac-43d6-afc2-049c521d0b92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe0a4acb-1ede-4394-8e96-d1e05db85df8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b086aac5-8386-47bf-9c55-b28639794e75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f15783b4-6e90-46e9-a630-3ae31623ea27"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6707619f-25af-4fd6-b68a-be702f2a80bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d1390c8f-9c1f-400e-9f7b-44470fb07f74"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75a577da-c5d9-446c-8861-dce40a3913be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de62e919-72a0-4700-a34c-28810fb7759b"
            }
          }
        ]
      },
      {
        "id": "fced6b6f-4028-43b9-830e-0ae29133474f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2047e867-c5a2-4a7f-9109-a215db1d9c6b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d58ebe2-1462-4c71-a728-f08f03657c3c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55c31133-34c7-4715-84ce-ccd5aabb3879",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13e5151-c45f-4ca5-a505-2de22cb61b76",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5db8640a-e37d-485d-9df6-936f963b830e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82711ff-752c-410d-8411-22a69beea9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c816ae24-6322-4f30-8619-cff66288762b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "622c5f0a-e7c0-4c02-b279-012fb30d33c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ebe0571-f711-4974-913d-bbc1e3be8e35"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c4a7d64-e5e3-4a20-aacc-b0fbc56fe5ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "990420c3-5808-4ef4-842c-9ae4bfc0bd07"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "149e3143-75e2-40ee-bee9-ffd9c496dd18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b36e12b9-bee2-453f-9629-f6c9b752d9a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c5e7858-7fbe-492d-a23f-0de72f0e16e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "748d99c3-a89c-44b9-ba05-c26d9b4c7868"
            }
          }
        ]
      },
      {
        "id": "4a0f3d6d-c0a3-4a38-ab36-7c5515ccb70c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fa52866f-d245-49ea-bac2-eb3b641ca231",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a07fc96e-49f2-41d4-9338-c8d33a05f912",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4537812-80c0-4d56-af4a-d505233332d9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49839fed-7b2d-47a1-b8a1-7e176b479c67",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27130d7f-a16b-495d-b42c-60a049c41b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83734e0d-d627-4c72-a303-90f43be8f94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3aa14464-c6cb-4070-a465-abcf824cc170"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aeefe9bf-6f5f-42d9-ad60-bf35e81ef52d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ce49d1c-1edf-4024-b02d-888d14cf4ae9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d6cdc2b-d695-4155-b503-804b0c9f132d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50915547-6504-498b-a8b2-d9e5c7f86d9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d74254b1-4ab0-4280-a1c7-e2803d0d9810",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9b842b6c-5978-4574-96ff-eb83c8ac2a83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4761f027-6c8a-49a7-9275-a23fb6f2aba6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6dfe260c-1382-4446-afb9-c1de9b39c53c"
            }
          }
        ]
      },
      {
        "id": "aceb6496-d6aa-414a-affa-d0dc3f9aaa5f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad7e2672-dcf3-4ee1-83ce-7e33ddbf0acc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b72d99b-5669-4b1b-8c52-239921e46a4a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3d294a1a-213c-473b-9c19-6251926fd76b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "238758a5-2238-4c0a-8503-3ed2015e3020",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97086849-5318-47e3-95d4-19d43ff2a8c4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.59298245614035,
      "responseMin": 9,
      "responseMax": 1499,
      "responseSd": 106.92999490509298,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700699733631,
      "completed": 1700699762015
    },
    "executions": [
      {
        "id": "01769ead-7109-435c-8f63-90a7ad42dafb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "80afe476-b1fd-4850-bd01-d3b3e3eb32b2",
          "httpRequestId": "a269bbb3-b018-4bff-a889-0d433cb5dcea"
        },
        "item": {
          "id": "01769ead-7109-435c-8f63-90a7ad42dafb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b868912a-0c1e-4d4b-ad1b-3c8977e6c74c",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "1d8b82fd-b670-4eee-b2bb-27ed18506b1f",
        "cursor": {
          "ref": "6449727f-d83c-4fe2-bc10-d2f4b1d3427d",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "febc255d-5dc2-4538-b7cb-06be5d0251fa"
        },
        "item": {
          "id": "1d8b82fd-b670-4eee-b2bb-27ed18506b1f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0ad62fc4-612b-4410-95b7-9273a3aa69bb",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "25e9ad4f-21e0-4702-b91a-06cf8d5337d9",
        "cursor": {
          "ref": "03375305-2984-4687-b134-d32e2006e68b",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ed40cec3-d75e-4ed3-b2e5-70b3d02ab0ad"
        },
        "item": {
          "id": "25e9ad4f-21e0-4702-b91a-06cf8d5337d9",
          "name": "did_json"
        },
        "response": {
          "id": "0233a361-f8e4-46d5-9b63-3c7d2334d106",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107a46fb-8352-4dc4-a24f-e3563460635b",
        "cursor": {
          "ref": "f4df342f-b0cb-440a-b47c-194154b328c8",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "40eaf3ea-1723-424c-b7a0-4c302c0e0347"
        },
        "item": {
          "id": "107a46fb-8352-4dc4-a24f-e3563460635b",
          "name": "did:invalid"
        },
        "response": {
          "id": "4001a8cf-5c58-49b3-a319-f7cf15e72341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107a46fb-8352-4dc4-a24f-e3563460635b",
        "cursor": {
          "ref": "f4df342f-b0cb-440a-b47c-194154b328c8",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "40eaf3ea-1723-424c-b7a0-4c302c0e0347"
        },
        "item": {
          "id": "107a46fb-8352-4dc4-a24f-e3563460635b",
          "name": "did:invalid"
        },
        "response": {
          "id": "4001a8cf-5c58-49b3-a319-f7cf15e72341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb50e4eb-2875-4817-b306-d8f8c75290fa",
        "cursor": {
          "ref": "5411fe46-6d24-42a0-a24c-ebb8d538b7be",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d85a94dd-b6d5-4d2e-bab2-84235fdcf919"
        },
        "item": {
          "id": "fb50e4eb-2875-4817-b306-d8f8c75290fa",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "25a873b9-4516-46b1-b817-9067e76a94ac",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03dc8468-afc5-4b44-b032-376c1f781c56",
        "cursor": {
          "ref": "78be9559-f533-42f7-8562-df33a2ae1c12",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8e3b2067-5cde-496e-bf09-112784800a4f"
        },
        "item": {
          "id": "03dc8468-afc5-4b44-b032-376c1f781c56",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "96cf37f6-468f-4393-a80d-a87d0583de78",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77e24d1-7238-44ad-9a38-c918e93a63e1",
        "cursor": {
          "ref": "aa2cc04e-148a-4c85-987e-4e6171ee6e40",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b6b771ad-3553-4740-9c66-5f1bf078e5fc"
        },
        "item": {
          "id": "c77e24d1-7238-44ad-9a38-c918e93a63e1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4d3242c5-df1e-4bc9-86f8-46ed0c1c90dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebe15bc-d45a-40e0-a216-34644b89cb21",
        "cursor": {
          "ref": "14ea39ae-4e65-4cea-911d-08c5cf98c1f7",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c6bbf35f-cc17-4c22-99a9-e5e65414e40f"
        },
        "item": {
          "id": "aebe15bc-d45a-40e0-a216-34644b89cb21",
          "name": "identifiers"
        },
        "response": {
          "id": "4c213e38-6757-415a-ad5c-db0f75f7cf47",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7509d0-e921-4721-ab46-be624810c75a",
        "cursor": {
          "ref": "b962f6dc-6788-4635-9922-f3929c3a156c",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "53aa960c-8174-49db-9195-4a31f6c974cb"
        },
        "item": {
          "id": "9e7509d0-e921-4721-ab46-be624810c75a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f72d085f-deee-431d-81cd-c8d7c151536c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3542fac-c6d3-4214-8d68-d0a5aad0d433",
        "cursor": {
          "ref": "87f87e2b-0639-439e-aa5d-1e5eeae895a2",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "91fd9f7b-e2ed-4e32-9806-adb492b5bf6e"
        },
        "item": {
          "id": "a3542fac-c6d3-4214-8d68-d0a5aad0d433",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c5cc571f-4421-4d2d-8841-d1871fe35815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1401adb-42ba-4577-b4c4-f2ebffc32d77",
        "cursor": {
          "ref": "16be8427-482a-4e03-aa7c-ad16c31ffcd7",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f9cdc193-3181-4279-a411-0d37defe4e04"
        },
        "item": {
          "id": "b1401adb-42ba-4577-b4c4-f2ebffc32d77",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "28bb7db1-fd96-478a-9cf2-36c3861b054c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7ff14e-c157-4bcb-9658-03f9fd754691",
        "cursor": {
          "ref": "695ceb90-446d-4d6b-801d-780c81ece2ac",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a4f7d49f-77c8-4304-9326-1a05db827487"
        },
        "item": {
          "id": "dd7ff14e-c157-4bcb-9658-03f9fd754691",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "90dbbd42-c904-4bd3-8215-84df1ee1c0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd4853f-5362-440d-8704-129823564364",
        "cursor": {
          "ref": "5592dff4-3dc2-40b4-8520-78a147313fb8",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ded767ab-cf1e-4dae-8872-db1ee44f338c"
        },
        "item": {
          "id": "4dd4853f-5362-440d-8704-129823564364",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2b49249c-17a4-4748-96be-0506613b8ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b031854-92ab-4481-834e-f2381aa194ca",
        "cursor": {
          "ref": "a5c84f86-1ab7-42ce-836e-abfdb5806eb4",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cb51757b-5344-43a1-aa55-ca1a0a645461"
        },
        "item": {
          "id": "4b031854-92ab-4481-834e-f2381aa194ca",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "01a1f4d2-9c0c-4917-85a6-1655adfd3f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e36da2-81a7-4eb2-b580-2252f76ecd45",
        "cursor": {
          "ref": "4c7f596e-a916-4904-a856-f95f45d94f75",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9b469a92-cf02-48e1-add1-d4a3443d38b7"
        },
        "item": {
          "id": "57e36da2-81a7-4eb2-b580-2252f76ecd45",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "437c4e61-9ef5-4aa7-9e9f-31f5e98ec93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7656d6c-b804-4deb-8561-19990c7f8816",
        "cursor": {
          "ref": "162b7cba-9466-4f07-afbd-e6ad1730c462",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3ffa8e56-fb8f-4773-bc6a-697db9dbc06f"
        },
        "item": {
          "id": "b7656d6c-b804-4deb-8561-19990c7f8816",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ba7cd656-921d-45e0-b0d9-88e360c353cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c3cb5e-d815-4ee1-8f49-fc2817ef80a0",
        "cursor": {
          "ref": "2364a61c-7443-4fd2-9556-36abe311d50a",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "94d262a0-e350-4bc5-b285-bb4db3967024"
        },
        "item": {
          "id": "55c3cb5e-d815-4ee1-8f49-fc2817ef80a0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ed0e60ca-16b9-49a6-b6d4-cf4844d6f5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d3f8f3-93cf-4bd0-9c00-75063f6965bd",
        "cursor": {
          "ref": "3e502b27-4d5b-4388-b695-633aa797f457",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a42b807d-1cb6-4f29-a171-92283b950b4d"
        },
        "item": {
          "id": "93d3f8f3-93cf-4bd0-9c00-75063f6965bd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "296a3403-557f-4cc8-a40a-1d2e00f5b2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efbe57f-f1b2-4a19-becb-3caf1f3daca8",
        "cursor": {
          "ref": "a3dd49fe-c705-4a6c-a726-7307f65c4e72",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ff6b3fbc-37d6-4bd1-bbfc-ebe63356b205"
        },
        "item": {
          "id": "9efbe57f-f1b2-4a19-becb-3caf1f3daca8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3b16b667-6716-465c-a36b-52599957012d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a768fa-9e6e-4960-960e-c405a48788a0",
        "cursor": {
          "ref": "25eca64b-a75d-4fc0-87e1-386ef7b14c44",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8e656304-6ace-48cb-8656-03d2dd6b3727"
        },
        "item": {
          "id": "08a768fa-9e6e-4960-960e-c405a48788a0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f5cf3d27-0c27-46f8-893c-51e6aa62e226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26a048f-cbd3-4f44-9946-3b1cc581f880",
        "cursor": {
          "ref": "47023c9c-5829-4c98-a5ff-5a8e34966797",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c654226d-54e8-4995-a631-60e47ffd4772"
        },
        "item": {
          "id": "b26a048f-cbd3-4f44-9946-3b1cc581f880",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2eec63a0-b894-4e73-bc09-17c40a3c0df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97e12f3-fa36-4640-a518-cf2c7d201002",
        "cursor": {
          "ref": "7e3b8328-f167-4a42-85e0-80c9a9c8ff53",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b3ac5c70-35f2-4c2b-8b5c-5babf30a50d8"
        },
        "item": {
          "id": "d97e12f3-fa36-4640-a518-cf2c7d201002",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bde71e2a-8dc8-48eb-991c-649d688edf53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7720d3-6ad7-4c4e-8b80-36b36c21839f",
        "cursor": {
          "ref": "4780e352-c9ec-4690-b5ba-f3c90ac8526a",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b3dc3a2f-814f-49f4-8648-6a5bd1e140e9"
        },
        "item": {
          "id": "1b7720d3-6ad7-4c4e-8b80-36b36c21839f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4599d89d-77b3-46bf-8ac5-d2bbe2220504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08307cf5-9b11-4b29-b8ce-4071374cb162",
        "cursor": {
          "ref": "30610d39-6532-4a23-9337-f4ea1d89b654",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "358856a3-11d5-4153-a8a3-d63c0a571df6"
        },
        "item": {
          "id": "08307cf5-9b11-4b29-b8ce-4071374cb162",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "57dc2816-5fc7-4e4c-aafc-3a1a5896dadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ed9c15-093d-41e0-8491-aaa82b1e405a",
        "cursor": {
          "ref": "252197d9-d128-41e4-870d-cd94415db971",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "12437ae7-0b2c-4b80-997e-50ab142a6f0d"
        },
        "item": {
          "id": "82ed9c15-093d-41e0-8491-aaa82b1e405a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ff7c7da0-e457-42fb-8b3d-5b40691b2228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e446fef3-e5ce-4df8-9944-8b278442606a",
        "cursor": {
          "ref": "ad13d9fc-7e57-429d-8443-270dd0f4748e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2c647df8-5a25-4379-b56f-7cbd880b3b8d"
        },
        "item": {
          "id": "e446fef3-e5ce-4df8-9944-8b278442606a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "36e84c77-f3ec-4636-bf02-9273a72b47db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e73bce7-798b-4cfe-ba59-7578bbc50956",
        "cursor": {
          "ref": "06b9de36-d5f6-414a-84ca-57731bfd64d0",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fb7d306f-f90c-4f01-be7c-66a6f70419f3"
        },
        "item": {
          "id": "4e73bce7-798b-4cfe-ba59-7578bbc50956",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "27ef714c-b55b-41d8-82ab-401f5b11e834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f42c58-4319-4ac4-a78a-797a474c497a",
        "cursor": {
          "ref": "dc1e5dac-e4af-452d-ba85-ba92e9521826",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "93999677-cc2f-4d6f-8612-fd73c4b97b96"
        },
        "item": {
          "id": "71f42c58-4319-4ac4-a78a-797a474c497a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0c8f86cb-aed1-4858-b805-f6982257dc6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa482d2-b290-4561-98a4-b8e65c2b8661",
        "cursor": {
          "ref": "2663134c-d92a-4cfb-b0b0-d895a3135754",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a8b5edac-cc8a-4705-9a97-f835eab5f770"
        },
        "item": {
          "id": "afa482d2-b290-4561-98a4-b8e65c2b8661",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4075d388-7061-4716-aeb6-404c043ce4ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f30e55-cf16-4c25-9182-67528545c2fd",
        "cursor": {
          "ref": "2825f3d1-a2d2-4758-a8fc-d19aa018c22d",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1db0d204-3e2f-4792-9260-5d4da93961f9"
        },
        "item": {
          "id": "f0f30e55-cf16-4c25-9182-67528545c2fd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3368fa60-84fc-473a-9041-b4d4b3325e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebe2513-445a-4d3a-be18-b094c2328f84",
        "cursor": {
          "ref": "73321db9-d53e-4f02-8a21-4a9c4d5c135a",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f994baf3-e17a-44ab-ba80-6068303165c1"
        },
        "item": {
          "id": "eebe2513-445a-4d3a-be18-b094c2328f84",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "62f00879-6918-46b7-b022-0064065aa8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be925b19-d495-42af-86ec-b87752aca9a5",
        "cursor": {
          "ref": "89bbbe4d-5de9-4129-865b-3b6c7e22ddd0",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a14108c6-6f97-44c5-882e-890bc8552cad"
        },
        "item": {
          "id": "be925b19-d495-42af-86ec-b87752aca9a5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "23bfc807-9a6f-436c-9502-11c27143d15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4b8b33-7534-4a8c-ba80-277fd1719f19",
        "cursor": {
          "ref": "3720a81c-8f51-4b6d-919c-5e0af313a2b3",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4c016628-b308-49fc-893a-c34ff88fe5f6"
        },
        "item": {
          "id": "6e4b8b33-7534-4a8c-ba80-277fd1719f19",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9b2e7ddd-510d-4389-b399-0f8d7c2f1060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c01a61-9b41-4d60-b833-70ba028e9263",
        "cursor": {
          "ref": "4455fee7-d0f7-429f-9249-3b6b47f898c4",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "29f587f8-89c9-4cf1-aee6-383fc48b737f"
        },
        "item": {
          "id": "e2c01a61-9b41-4d60-b833-70ba028e9263",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e2ee6419-75e3-49e3-b73d-b0751e2d609f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e799c17-7f03-4035-8e70-ca401e98268b",
        "cursor": {
          "ref": "5784b3e1-d330-47b3-8902-c23881fe32d8",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "214f4f92-77c5-4b68-acf2-7869f18b8285"
        },
        "item": {
          "id": "4e799c17-7f03-4035-8e70-ca401e98268b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5d58af0c-4085-4355-bbf5-623054a8812d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1cea5b-7ebc-4678-a958-68eb3778ae66",
        "cursor": {
          "ref": "cb364016-6fa3-4dc2-9c55-117261c4f2e2",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0b41d99f-95da-4253-aafd-7fe315238b10"
        },
        "item": {
          "id": "1f1cea5b-7ebc-4678-a958-68eb3778ae66",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "55dbb964-5fd1-494d-8381-45a849cd2565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a4d3a3-d2fc-4dcf-917e-63f30207c6eb",
        "cursor": {
          "ref": "580ea63e-98e3-49cb-b256-f0309f5b2431",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a72fcb52-3135-4921-b52e-772b6da4364e"
        },
        "item": {
          "id": "12a4d3a3-d2fc-4dcf-917e-63f30207c6eb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b240d093-783f-4a6d-91c3-f95ad7ea707d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cb38e6-8310-42d0-bc7a-bf3a5f455e64",
        "cursor": {
          "ref": "ed00639d-f573-42f8-9889-4f51d0f44cdd",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "88a2c191-58b6-4b3e-97b2-d0fd459edf3d"
        },
        "item": {
          "id": "e2cb38e6-8310-42d0-bc7a-bf3a5f455e64",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bdafad93-769e-4a7f-8462-35c2669fa375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc004c6-8c68-408d-8a7a-602caddb5043",
        "cursor": {
          "ref": "1b57adc6-6e8b-4384-b1c4-a9217b884e87",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1a5ebae4-6ff2-4162-8b1a-e089d49dec71"
        },
        "item": {
          "id": "6dc004c6-8c68-408d-8a7a-602caddb5043",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1d0ae4d2-9bb9-4837-b1fb-469c2392e883",
          "status": "Created",
          "code": 201,
          "responseTime": 1499,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "192514f5-88f6-4530-aa12-d3ca0ea437cc",
        "cursor": {
          "ref": "f86eec8a-1d21-4a32-9f46-1206cc38bb37",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d2c94762-9148-4f5b-b3cd-40a4204ce6cb"
        },
        "item": {
          "id": "192514f5-88f6-4530-aa12-d3ca0ea437cc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "74f4c311-012f-494c-b25d-2dbb7e48bee3",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8b190870-f282-4904-b82e-fce3aaa8029e",
        "cursor": {
          "ref": "ad5b6112-e3f9-47c2-9649-a4d5c4808f4d",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d948cb96-1425-4fff-a5aa-3cc359d42850"
        },
        "item": {
          "id": "8b190870-f282-4904-b82e-fce3aaa8029e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "17b6d29f-1c56-4ac4-8b15-24621fdf882c",
          "status": "Created",
          "code": 201,
          "responseTime": 217,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "73c538dd-df3b-4b23-8df6-0d7e9fc4b24c",
        "cursor": {
          "ref": "01b63e3a-4741-43a2-ae52-a1f1e13e1879",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "98cab511-ba4d-47f1-8f99-07ce1a87a4da"
        },
        "item": {
          "id": "73c538dd-df3b-4b23-8df6-0d7e9fc4b24c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5cb47fc0-4d7c-4783-b5d2-0c5ca76dc091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac63bf2-99ea-4019-9ec5-281c4f7c0ed2",
        "cursor": {
          "ref": "f4a7fc07-25a6-42fe-b359-43fd1a4a7b89",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c00a826d-987c-425d-b958-b7130f9712b2"
        },
        "item": {
          "id": "4ac63bf2-99ea-4019-9ec5-281c4f7c0ed2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "12c00abb-450b-4a90-8df3-22b47ec02b7a",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8036b006-7bc5-469b-b6fe-7736f977c3a1",
        "cursor": {
          "ref": "47f47d1c-29e5-48c6-a1e4-11d04d52ae32",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "08bbfbe9-e9db-4ddc-878f-079889f88bd3"
        },
        "item": {
          "id": "8036b006-7bc5-469b-b6fe-7736f977c3a1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5ece006a-e4ec-4df3-9bd3-5b1ac46f4abc",
          "status": "Created",
          "code": 201,
          "responseTime": 382,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "435c3061-4140-464a-8746-49888619de25",
        "cursor": {
          "ref": "5b4c2932-794f-4d85-8ead-4feb6f7ab7bf",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5407aff2-b7f1-4eff-92f2-9b4dff0fa47a"
        },
        "item": {
          "id": "435c3061-4140-464a-8746-49888619de25",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "da421936-b58b-4a55-8314-5b46e176acfd",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "82dd9c4f-3c8c-4a12-ace5-54ee526c78b6",
        "cursor": {
          "ref": "5b98fab7-cc91-4938-acc7-5b9314af8cd1",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "81e3c348-5550-487d-a194-3cf170ec1428"
        },
        "item": {
          "id": "82dd9c4f-3c8c-4a12-ace5-54ee526c78b6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c2fabc93-24e3-4bfc-86aa-eaad44fdd951",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6fa415a2-a834-4d57-8d78-88daea96b71c",
        "cursor": {
          "ref": "6902aab2-65e0-4dbc-afcd-fc5b7c3c7496",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7c5691ac-ba6e-43b8-972c-7b72f1c8377d"
        },
        "item": {
          "id": "6fa415a2-a834-4d57-8d78-88daea96b71c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "32ea4266-69f4-4cf2-a95b-54350c10d034",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4086a571-b2b9-4c37-85e8-40871249b596",
        "cursor": {
          "ref": "f7d03b2f-5e35-47a8-a683-d78fdcc25dee",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6a597e8b-aa0d-4841-a9a2-f0433f55314b"
        },
        "item": {
          "id": "4086a571-b2b9-4c37-85e8-40871249b596",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fd50eb5d-ccb5-48f1-a3e5-ce6b5d38ac2c",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3c748282-46c1-4af0-9bb8-47d7ee95b332",
        "cursor": {
          "ref": "9fc38cbc-dd3f-49c3-aa99-673ce00ed7ff",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bbc79fc3-0b3c-4261-99e1-430a8c980bd8"
        },
        "item": {
          "id": "3c748282-46c1-4af0-9bb8-47d7ee95b332",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "79466989-1c3d-4e49-bcbb-06d526807ac3",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c903299e-4cd9-472f-80bd-488b4c4b2eee",
        "cursor": {
          "ref": "ed454f5b-a635-4e54-b74c-ed04b5146156",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f8908b56-9978-4ee7-9731-bb399036b6d5"
        },
        "item": {
          "id": "c903299e-4cd9-472f-80bd-488b4c4b2eee",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c1050c1d-75f4-4221-a7a2-08956f578db3",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5a12d335-e23f-40fe-87d1-9495144226f3",
        "cursor": {
          "ref": "c4fa6e51-4672-4176-a534-9b61492c84f6",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "05d489f3-657a-4833-bbe3-070f461d2e08"
        },
        "item": {
          "id": "5a12d335-e23f-40fe-87d1-9495144226f3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c166abed-eb84-428a-bb45-d9eb6a81b7c4",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7a00d231-f27f-492c-b513-f307e67499a7",
        "cursor": {
          "ref": "cf099aa9-7af3-46d1-9c62-0bbdbc45159c",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "98a344b1-7346-40e1-82c5-ad3062d806df"
        },
        "item": {
          "id": "7a00d231-f27f-492c-b513-f307e67499a7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9d987716-3a71-4e87-9cf7-fd57c94e263d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d48561-f1aa-40e4-9ff2-eefa405e50ad",
        "cursor": {
          "ref": "2445b798-95ea-4ba9-8164-47350defd911",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "00115c9e-814f-4dae-becc-555209f72cf2"
        },
        "item": {
          "id": "41d48561-f1aa-40e4-9ff2-eefa405e50ad",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1ef375e7-aacb-4dec-9fd0-4e204340e4fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a9b9eb-2404-4883-b5c5-c5276a80e67a",
        "cursor": {
          "ref": "3405f8bc-f847-40eb-a565-9a312095820d",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2b26dd7b-7eb1-4aa4-8e32-f9f7b5599567"
        },
        "item": {
          "id": "49a9b9eb-2404-4883-b5c5-c5276a80e67a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a1d1a8e2-3613-4d01-83f9-2911815d8f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e309d96-8529-4588-9187-8206fe97789e",
        "cursor": {
          "ref": "22ff0fd0-7512-4ad5-af16-715de4334d45",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5d350497-9f1d-41b9-bdd0-53539f9a95cd"
        },
        "item": {
          "id": "8e309d96-8529-4588-9187-8206fe97789e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "65d3a3e7-83cf-4e59-872f-315ef5641586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3ec5de-61a0-4930-b851-b3ac57137c6d",
        "cursor": {
          "ref": "2ea49496-2d13-48aa-8d37-90ede86e9000",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "73873fe4-ae44-4a3c-b3d7-c382fdc9a161"
        },
        "item": {
          "id": "3a3ec5de-61a0-4930-b851-b3ac57137c6d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5140e768-ab70-4421-b8a1-3b5480bfa4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d9f8da-ad60-4262-9716-f895a15e8f47",
        "cursor": {
          "ref": "a787a21f-a33b-449d-88f0-2bb1161b6f9e",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "efcf0fab-9818-4bb5-992d-6ec4428b7e97"
        },
        "item": {
          "id": "e1d9f8da-ad60-4262-9716-f895a15e8f47",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f45fc3ca-03d1-4ace-a5db-1c2723899871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530ec181-6665-4d37-ac39-c0c317d94d10",
        "cursor": {
          "ref": "2c1dd1b3-86a3-4693-a73a-0b2c956632b9",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4caca344-5df0-4d48-aa77-26ec236e56e2"
        },
        "item": {
          "id": "530ec181-6665-4d37-ac39-c0c317d94d10",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b6e6a58d-b8ab-41ce-a0d1-0dea7433e4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf3b114-b0f6-4c4c-8af2-8c317c7b86d2",
        "cursor": {
          "ref": "299d0e23-db01-42a6-8b92-f3fa3e3852fc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b2d9ca1e-0bfd-4bfa-bb5e-78dd30948e22"
        },
        "item": {
          "id": "6cf3b114-b0f6-4c4c-8af2-8c317c7b86d2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b076540c-be78-4d7e-8835-4884159dc1e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd5abae-997e-4994-8a05-844adc708c96",
        "cursor": {
          "ref": "49a773fd-9313-40f1-9021-37700346d31f",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d6746f05-3ff0-4a0c-82d0-a39b0c523d69"
        },
        "item": {
          "id": "4bd5abae-997e-4994-8a05-844adc708c96",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "68c025b1-e817-4caf-acda-22c512a6a85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e6022b-1692-4e58-895f-e50b38ce84b1",
        "cursor": {
          "ref": "e6373369-9535-4bd0-a533-a0886aedd655",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "92cc1079-349c-4013-bd2f-328b1fbe1356"
        },
        "item": {
          "id": "66e6022b-1692-4e58-895f-e50b38ce84b1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4d0ea9d7-53af-48b2-a755-b78c9547bf45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96dd7e45-8c60-4f2c-a888-40605580020c",
        "cursor": {
          "ref": "f70f1c27-c8d5-4d23-84b7-f6e2dfcbebb6",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4c56f4e4-b669-4c9e-90d5-d8d6936050a4"
        },
        "item": {
          "id": "96dd7e45-8c60-4f2c-a888-40605580020c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5a82d024-077c-44a5-846d-cb532a84a440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532054df-db92-48b2-aa29-a952bb779a45",
        "cursor": {
          "ref": "ab682a87-5fef-4ba7-953d-94b29e7224fb",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5d87b057-0715-46b4-baa2-1983c5c12cbb"
        },
        "item": {
          "id": "532054df-db92-48b2-aa29-a952bb779a45",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "79b4d84e-2e05-4110-90c8-cda33aa64cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74186f66-3475-4daf-a321-baa9aab634d0",
        "cursor": {
          "ref": "d86269e9-9e08-498c-b656-c3f76f1e99bb",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "582b00db-8790-4b72-a238-9a6a8481fd8c"
        },
        "item": {
          "id": "74186f66-3475-4daf-a321-baa9aab634d0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "42786bfc-1cac-41b8-8b63-86f7c6997008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1293b43e-af36-401c-8794-f68b410f5327",
        "cursor": {
          "ref": "ed6bbe4b-72dd-43c0-9c36-16bce254e5dd",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "387f046d-1b55-4826-8529-f3a116b82e9e"
        },
        "item": {
          "id": "1293b43e-af36-401c-8794-f68b410f5327",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "41ab9123-11e9-4edf-a530-e6a23b7f44b1",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3fdaa851-32f3-4c40-92f0-f488d959c45f",
        "cursor": {
          "ref": "36cf6e4d-4130-4b52-962c-846a004539a6",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "52b1de7a-0550-41fd-9a0c-3d947328c2a1"
        },
        "item": {
          "id": "3fdaa851-32f3-4c40-92f0-f488d959c45f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "35760f0d-afa4-44b7-b3dc-a9e05ac27e1c",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e33a77bb-416a-4830-894f-4ce3dc7b7ee8",
        "cursor": {
          "ref": "b521bc5b-7924-4f48-ae49-845b21aa55d3",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b076edf6-97ca-400b-8a6b-05eefcc5c3c5"
        },
        "item": {
          "id": "e33a77bb-416a-4830-894f-4ce3dc7b7ee8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8e07dbe9-260d-4c13-b5fe-65181f746edd",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3c4030a4-d1e1-443e-b133-c0e3e36e2f3a",
        "cursor": {
          "ref": "95230ff5-457c-45c5-b4ae-75bd7030db46",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8f615b42-5491-4155-a7d1-bd78cd748803"
        },
        "item": {
          "id": "3c4030a4-d1e1-443e-b133-c0e3e36e2f3a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c1072b4f-bab8-40aa-85eb-4f1cb3969a38",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "34a33638-782c-4e96-8fe6-5304edda3dca",
        "cursor": {
          "ref": "11fa892a-a2bd-43e0-bafc-0f6358cf9244",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9683d1f1-8bf5-4d67-8fa4-bb7fb7d1ba22"
        },
        "item": {
          "id": "34a33638-782c-4e96-8fe6-5304edda3dca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8e456c8d-5c23-41d2-98d6-fc0548c50e7c",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a7e1a7a8-ff52-4ea2-92c6-3b577d3f4699",
        "cursor": {
          "ref": "f27eb35a-69a9-430b-9722-0bd0d4b2498d",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ec9bee96-0734-469c-8ee8-3684ef1e1e6e"
        },
        "item": {
          "id": "a7e1a7a8-ff52-4ea2-92c6-3b577d3f4699",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "284296c9-2801-49ed-97b7-5a4e5219cc28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76240996-3cb2-4d5b-976f-01efbb5ec7e9",
        "cursor": {
          "ref": "c3b0b5d6-b06b-4664-8c51-260d57c13ec0",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5c370549-1281-49b2-82d6-abcb31c31164"
        },
        "item": {
          "id": "76240996-3cb2-4d5b-976f-01efbb5ec7e9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9d88075d-5991-4f85-85db-119fef8c4cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6d0df7-90b3-4b24-98b7-e6c279b9d9a5",
        "cursor": {
          "ref": "fcc2a238-3d0e-4bdc-b941-4f3024ecc882",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a08d00db-7ba9-4895-9631-0be8c14a571f"
        },
        "item": {
          "id": "df6d0df7-90b3-4b24-98b7-e6c279b9d9a5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "354f388b-4a16-485f-bed1-045f9bea262d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590308d3-2e86-4d92-b207-d44f7a4127ad",
        "cursor": {
          "ref": "08433dd8-90d7-4996-9df7-4e04fe3e7507",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "201c7e5e-8f32-4d6c-807c-5c5c5273d532"
        },
        "item": {
          "id": "590308d3-2e86-4d92-b207-d44f7a4127ad",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "dceb29ec-109c-438a-a39c-335f62562f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ccede3-5166-48da-8b95-8dda4a6d135e",
        "cursor": {
          "ref": "c2c67068-65c7-4f15-af47-2c5a024b372e",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fa0f6783-62de-4a38-8a8a-c277e4ab9d2c"
        },
        "item": {
          "id": "78ccede3-5166-48da-8b95-8dda4a6d135e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cb4ad6ff-f698-4539-878c-b206c58f4b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20fb3b8f-8528-45ff-9c37-c8aa071a2e5c",
        "cursor": {
          "ref": "becefe17-e5d7-4808-b5b1-047001d3ab12",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cf212fa9-e87e-487d-ad77-cc3d41faa055"
        },
        "item": {
          "id": "20fb3b8f-8528-45ff-9c37-c8aa071a2e5c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "62ef7aec-7407-4692-9aee-1a2e7b16a50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a7eed7-236b-41ff-bd11-a648cffe26b0",
        "cursor": {
          "ref": "ec02555f-c610-4524-a4f3-9e558f769e24",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ba2679e3-5924-4c0f-b966-1ee6d4757c45"
        },
        "item": {
          "id": "b0a7eed7-236b-41ff-bd11-a648cffe26b0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "66666e0e-96d5-4b57-8092-4cd5c441fa39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d7803b-a765-480b-8363-03eb14fdcea6",
        "cursor": {
          "ref": "6d1d3d4a-f403-4ac3-b191-540c694c7323",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b721b723-ea76-42e5-9d53-539fc00f0efd"
        },
        "item": {
          "id": "21d7803b-a765-480b-8363-03eb14fdcea6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f3902590-5229-483c-ab35-9c90f0157a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad71bb5-593c-4bd7-87cb-f155618edfbd",
        "cursor": {
          "ref": "ec9731e2-c10a-4563-9941-2bc63a740183",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6b2b6ecb-05af-45f8-aa97-9f15ba944129"
        },
        "item": {
          "id": "1ad71bb5-593c-4bd7-87cb-f155618edfbd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c6c6c7c3-f147-4bd0-b3ee-645f9d343adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8f7bc0-6a27-4870-b699-963a4487ab73",
        "cursor": {
          "ref": "c18bb8c2-7b77-4e01-83c6-a475e55e80a0",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2d9f1fd1-3129-4e75-8465-5eaedc27d42d"
        },
        "item": {
          "id": "8d8f7bc0-6a27-4870-b699-963a4487ab73",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "971c5b07-a34f-438f-bea1-05ac26182fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2b8e42-963e-451c-a8e3-0f1b7b801b59",
        "cursor": {
          "ref": "19753ab2-4516-4136-b953-34dc8576d51a",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2c6d9e81-e777-49f2-af63-add6a4c6a04f"
        },
        "item": {
          "id": "4f2b8e42-963e-451c-a8e3-0f1b7b801b59",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2a9ab161-6725-4bf4-af34-4aff16ee7098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622633d6-507f-4d4e-8769-623b3d5b37c8",
        "cursor": {
          "ref": "368677a3-3b31-4063-9ee2-ed7549b958ce",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ec3c4680-7fd7-497d-9aef-60d69420b216"
        },
        "item": {
          "id": "622633d6-507f-4d4e-8769-623b3d5b37c8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4d1ce284-c3dc-445a-b629-f6e016889e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e06bc28-6e76-4b4f-b7de-6f407557f917",
        "cursor": {
          "ref": "76f69d35-c7a1-4e00-88a3-6ec0b1441e96",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f50107d7-e135-4791-8e60-787b80c02ee9"
        },
        "item": {
          "id": "6e06bc28-6e76-4b4f-b7de-6f407557f917",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d0d85981-aef6-43bf-829f-b9a446f6bdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d74cc4a-a979-458e-b762-2e22f822d74c",
        "cursor": {
          "ref": "ee5fe319-0ec6-4ef2-b658-ece7d2a5aca8",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dfd8afaf-efbb-4d66-94fe-332eaeb6de7c"
        },
        "item": {
          "id": "5d74cc4a-a979-458e-b762-2e22f822d74c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bb1a8b58-9749-48da-8524-80efe3056dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae53766-d735-41f1-88dc-20fb09e9b559",
        "cursor": {
          "ref": "b1320ec8-bd61-4e39-ba53-cf4c7957b8c0",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "58c65938-f500-4fbf-b596-329046f9661e"
        },
        "item": {
          "id": "eae53766-d735-41f1-88dc-20fb09e9b559",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "991c3961-419a-46bb-9ac4-de415375194b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3ce5b1-3798-490d-8384-f776cbbc9edf",
        "cursor": {
          "ref": "0a7799f3-5173-4a48-b253-7eb875cbc4d9",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "646f89fa-f0da-4e24-ab30-87f204633534"
        },
        "item": {
          "id": "3c3ce5b1-3798-490d-8384-f776cbbc9edf",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1784de8b-a424-4f8a-b68e-46362ffbde9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db74de7-6df0-4c8a-91af-9054fddcba64",
        "cursor": {
          "ref": "0119e09b-3af0-41c1-a639-f788d3b25c61",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fe7cd7fb-1f8e-46a9-81c1-7dab4d31c009"
        },
        "item": {
          "id": "8db74de7-6df0-4c8a-91af-9054fddcba64",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "eb8a1346-1e31-42e8-9595-7e2271f40fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d364712-91ff-478f-8b71-8892f4a8e950",
        "cursor": {
          "ref": "d22cc080-3462-48d3-a1b8-59865861626b",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "811d4abd-2de3-4fc4-8a63-11d9cedaaaee"
        },
        "item": {
          "id": "7d364712-91ff-478f-8b71-8892f4a8e950",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e9c9b1fe-13aa-4dbe-ab2d-f86d5836e051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf5dc35-8971-4182-814c-c89723a976c7",
        "cursor": {
          "ref": "f8035c34-9288-4b01-822e-dab2351bb08f",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d208f1af-255b-4bd2-ba63-b4ae5c0f87ff"
        },
        "item": {
          "id": "cdf5dc35-8971-4182-814c-c89723a976c7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e1eff16d-b43e-4935-a553-76e878761f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a573790-08a3-413e-b7ed-dadae1a997f1",
        "cursor": {
          "ref": "9065b1d9-572e-4447-85a6-46bd6e3b74c7",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c997028d-f4d8-4254-b4b7-8a6e84a680d5"
        },
        "item": {
          "id": "7a573790-08a3-413e-b7ed-dadae1a997f1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e7ce1790-e1da-4bbe-a8ab-77bd98c174b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bffc373-efc0-4ed5-8d31-f86308b7150b",
        "cursor": {
          "ref": "3cf56155-98dd-47ec-99b7-62a5a40e4344",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1d26e9d5-2f38-4ab5-b2ba-3272c2ba277f"
        },
        "item": {
          "id": "1bffc373-efc0-4ed5-8d31-f86308b7150b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6c45ffd6-d8ec-4044-b4ad-6636598bf3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b06d83-313c-4879-8a96-666924c8af98",
        "cursor": {
          "ref": "0bd81ce7-507e-4729-b281-3be03a282a46",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fa1a1754-f6ee-47ff-b844-c94320662df3"
        },
        "item": {
          "id": "15b06d83-313c-4879-8a96-666924c8af98",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "68761cdf-62ae-4e42-90d8-f87d70ac02cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629070d2-3d52-4c38-8c68-75015dca9633",
        "cursor": {
          "ref": "7fd1d502-666f-4867-ba4a-8cfa6f423935",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "dcbe41fe-a3fa-4a0e-9d2a-8b35e879140d"
        },
        "item": {
          "id": "629070d2-3d52-4c38-8c68-75015dca9633",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "41853e8d-d4d5-4056-b154-c672bc76bcce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5ae95e-95fc-4ff5-831e-241568046021",
        "cursor": {
          "ref": "0f0de9ff-a2cc-4ffd-9214-9e6ef975def7",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d7ee35e4-b265-4644-918b-2c6000b8ec7c"
        },
        "item": {
          "id": "2e5ae95e-95fc-4ff5-831e-241568046021",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c91605d3-974e-47fb-9c36-abb2a9a57a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d64f339-30b9-4db9-8474-395c2d4b4dfe",
        "cursor": {
          "ref": "e185ae1d-4c5e-45d6-9e29-d0531bf78c1b",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "13ed3af4-cd91-4931-bc53-3ee75a97bb09"
        },
        "item": {
          "id": "0d64f339-30b9-4db9-8474-395c2d4b4dfe",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "baf2ea02-e3c1-4656-9480-9731d077fbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0fdf616-af26-4cef-aaf9-ddfc0506dc96",
        "cursor": {
          "ref": "967356b9-11a8-4e28-8f7b-176071a611c5",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "695a4693-429f-457d-aefe-c49489ef1d8a"
        },
        "item": {
          "id": "f0fdf616-af26-4cef-aaf9-ddfc0506dc96",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2de6febd-0251-4fec-98e7-011c34c1c58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18698ed1-3fba-49b4-9154-52d1f59e27a0",
        "cursor": {
          "ref": "bc4c996f-c14a-4888-9849-38aff12ad6bf",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e51b0be3-0452-4d49-a664-ab68eaa43428"
        },
        "item": {
          "id": "18698ed1-3fba-49b4-9154-52d1f59e27a0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "150a0586-3a56-4f0f-97e6-2faee2b771ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b791a3-b194-4317-9ee0-56334547b70f",
        "cursor": {
          "ref": "0a9caa29-a9ee-4a65-9ed0-8bb297f3027e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "26f0cd26-8722-4c7b-b3be-ec6afbdfab38"
        },
        "item": {
          "id": "15b791a3-b194-4317-9ee0-56334547b70f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ab543212-710e-4034-932a-fd39d1cec8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcaa532-d220-40cc-b9c9-1cafb88ca117",
        "cursor": {
          "ref": "60feb094-26f9-460a-ad70-687840853a52",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4222427f-67d5-40d6-a17d-540cf555aa0a"
        },
        "item": {
          "id": "ffcaa532-d220-40cc-b9c9-1cafb88ca117",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d4638137-196b-4ac7-912b-959115212711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0345368f-8520-4dd8-8411-5de721c7c594",
        "cursor": {
          "ref": "c88e4f5f-e0a0-4ead-b029-6b50e76db0fb",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f9bc2d49-056f-4acb-8e17-46bd29f32aa1"
        },
        "item": {
          "id": "0345368f-8520-4dd8-8411-5de721c7c594",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fad050c8-4edf-4c60-9d66-fcdfa1ffbd65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c2cb43-89d6-4eb6-b158-ec618627d5f3",
        "cursor": {
          "ref": "0ce94ecc-4fbf-4b38-994b-e9318a811a1e",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "11ccc240-2ff4-45a3-91a0-984131cdbddb"
        },
        "item": {
          "id": "71c2cb43-89d6-4eb6-b158-ec618627d5f3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "493c0bbb-e801-48f8-a951-a186900f1182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5eeac9-fe1b-462d-a07b-8717ed439c30",
        "cursor": {
          "ref": "9c8dfc20-fd7b-488e-9fdc-e19ec000a43b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "016fc773-ba73-4b6e-945e-ab6e5c64b905"
        },
        "item": {
          "id": "de5eeac9-fe1b-462d-a07b-8717ed439c30",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ef191373-a02c-4584-be11-9e3f5b5c4e19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1f1c6b-b986-4ebc-a3a5-791243a8c591",
        "cursor": {
          "ref": "5fb3b5ed-b9e8-4d67-9fdd-15acf5e715e8",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dd891263-7ff4-4163-acbb-746e95ddf4b7"
        },
        "item": {
          "id": "6d1f1c6b-b986-4ebc-a3a5-791243a8c591",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "dc78100e-7838-465e-943d-beec4610e862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "974f03ba-c93c-490d-a4c1-6ca24848cf84",
        "cursor": {
          "ref": "e30a07b4-eb12-4065-b895-9ce750f537f4",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "71dff4dc-a13f-42ad-8850-47c20e7c3959"
        },
        "item": {
          "id": "974f03ba-c93c-490d-a4c1-6ca24848cf84",
          "name": "credentials_issue"
        },
        "response": {
          "id": "db0e52c2-5414-4f36-8ee6-40eea77c5a8d",
          "status": "Created",
          "code": 201,
          "responseTime": 404,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8b86b2-6856-4052-a06c-cee728dc7958",
        "cursor": {
          "ref": "fc904c33-8dee-4a67-b122-dddcea48a723",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "127cebf1-9cda-457c-9806-dbe4463dba7d"
        },
        "item": {
          "id": "7b8b86b2-6856-4052-a06c-cee728dc7958",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "cea08936-9530-4a70-9e0f-a3f63e21d060",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d8b0c3-a08c-4211-bafd-8b94e4bc8970",
        "cursor": {
          "ref": "be5496a1-9f49-42f6-a705-75d5fd8e7ed6",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f712ab80-a479-488d-a030-a0af37fbaa50"
        },
        "item": {
          "id": "49d8b0c3-a08c-4211-bafd-8b94e4bc8970",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "83bcdae0-d69f-409b-833c-3fd6af7daad7",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b19d04-f05b-482c-bc0a-6890a6d1b4c5",
        "cursor": {
          "ref": "ca6c09b5-1183-4781-9d37-c5ed2bff4485",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c4ceea65-a207-4551-b5e9-a141b53f192f"
        },
        "item": {
          "id": "45b19d04-f05b-482c-bc0a-6890a6d1b4c5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8eed0a16-81e5-4615-a935-89a2118ea4c5",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7fcaba-7dc6-4548-b882-f10c1a528dab",
        "cursor": {
          "ref": "b7020050-3027-456a-91b6-ee9bdf77fe3e",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3ffdf2e2-f07a-4e04-8155-18d6095dd244"
        },
        "item": {
          "id": "3c7fcaba-7dc6-4548-b882-f10c1a528dab",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "18b07ef6-1391-4f3f-801d-28903a5185d5",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-23T00:35:48.134Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-23T00:35:48.134Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d1a60c21-48ca-4db9-841a-f470288fedc8",
        "cursor": {
          "ref": "992b497b-cc7b-4833-8878-37583ecd515a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "41da9394-bc24-4d4e-aba8-10bc96c38ac9"
        },
        "item": {
          "id": "d1a60c21-48ca-4db9-841a-f470288fedc8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d76551ab-c1e4-47b0-99ff-1ee4ac8918f3",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0842c2f5-edc6-4320-90ee-543372b7ca92",
        "cursor": {
          "ref": "657fe6ff-b6ec-4fa2-8cb8-6073ba0e3f3f",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "55f03bc5-b761-4e2c-843e-7e3c20d8037f"
        },
        "item": {
          "id": "0842c2f5-edc6-4320-90ee-543372b7ca92",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0d0cde7b-3e86-433e-afdb-822f19dc0846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed1739f-c62f-4d1e-97bd-41ce2a17abc2",
        "cursor": {
          "ref": "889136ed-0791-4526-8cd6-0aef772b1208",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "27fc497a-9160-406d-b37e-870727db96cc"
        },
        "item": {
          "id": "7ed1739f-c62f-4d1e-97bd-41ce2a17abc2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f17e7924-d8f0-410a-b56e-5bb8ca107834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f7b626-c3c4-47cb-9084-fc0244a0ea7a",
        "cursor": {
          "ref": "531d87c5-689c-46d3-b08c-5316bee12a52",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e32a639b-762e-4d8e-a818-7b5585121114"
        },
        "item": {
          "id": "e7f7b626-c3c4-47cb-9084-fc0244a0ea7a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e334b5b9-b752-495a-93c2-a08bd3289b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c49362-4691-4c1c-987f-ba767a2fe1df",
        "cursor": {
          "ref": "33db5c4a-13d9-4ec8-aefe-9bb56e743e24",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fbfb901d-b247-49fa-9284-1042034f45b8"
        },
        "item": {
          "id": "89c49362-4691-4c1c-987f-ba767a2fe1df",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d06b285f-bab0-43be-b30f-7ad16b6a1c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde2c390-eeaa-41a4-97ee-02ce24923234",
        "cursor": {
          "ref": "88d785a5-6a14-4555-9dda-5d9c4280a59c",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a0b9f8ab-816d-48bb-ad5d-5dd0f00be9fe"
        },
        "item": {
          "id": "dde2c390-eeaa-41a4-97ee-02ce24923234",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "321713b2-e9ec-4bcf-ac62-9b16a28d7315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5caf3d2-2894-4393-bd7f-3f08d6b2827a",
        "cursor": {
          "ref": "a5701433-e4dd-4d56-9b28-7f0938c240c7",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d4cacf72-c328-49a9-a730-8e424e826209"
        },
        "item": {
          "id": "c5caf3d2-2894-4393-bd7f-3f08d6b2827a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "840cc908-e83b-4988-bc7f-58e87142a421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f47528f-f4f5-41c9-80e1-185fff3767cc",
        "cursor": {
          "ref": "f97e6c0b-c7af-4a37-b54f-ab7c7075c4ba",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7a17f130-0a35-48cb-945b-ec92186ea938"
        },
        "item": {
          "id": "4f47528f-f4f5-41c9-80e1-185fff3767cc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b4959af2-bc90-4099-bef6-9db20d9dfa8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abaaa1ac-3f49-4dac-b8b6-658d9bfcd57b",
        "cursor": {
          "ref": "35b0b16f-30ba-4e7c-b02d-195b7c92af48",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9749a231-2fe9-4885-a874-53dddbd14ccb"
        },
        "item": {
          "id": "abaaa1ac-3f49-4dac-b8b6-658d9bfcd57b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "66c1fc4a-ca3a-4ee3-9ac4-9848d5b4b0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd70140-a3cb-42c5-bb2c-64125b4b28f1",
        "cursor": {
          "ref": "6d73c46d-3a7a-4691-9469-a9e15c8247f9",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "095f4489-3ce8-4842-94a1-beafa4c9d2d1"
        },
        "item": {
          "id": "2fd70140-a3cb-42c5-bb2c-64125b4b28f1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0c93edf9-55cb-4723-9221-a9a6e9ac2eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89220a92-ed14-4265-a468-e7a9b5f78764",
        "cursor": {
          "ref": "9845ded9-a6bc-4541-9001-5bf47cc0857f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a69adaf7-f158-4ac5-9b76-5e5d5df62584"
        },
        "item": {
          "id": "89220a92-ed14-4265-a468-e7a9b5f78764",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5803a7ce-2c8a-4729-9cc5-db4851592490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939adc48-ee4b-467d-97a1-ba0d5ce631cc",
        "cursor": {
          "ref": "e2a2e842-8bfb-422f-a6a5-a1fab7cd6fc3",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "72718643-ea52-4368-9f71-3c94e670685c"
        },
        "item": {
          "id": "939adc48-ee4b-467d-97a1-ba0d5ce631cc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f822e4c0-3521-411a-ade6-0057ae9b1ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f457c1-eebd-4f3b-adee-2f1c0bf108b9",
        "cursor": {
          "ref": "21c2341f-60f4-41cd-81e7-68e9b8e175a1",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8a9d5d05-6b51-4fd6-bece-28223620be36"
        },
        "item": {
          "id": "84f457c1-eebd-4f3b-adee-2f1c0bf108b9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8d842d99-bec5-4a78-bb99-c2f720178b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8c0a0e-5bae-4bbe-855e-32aa282a4d3b",
        "cursor": {
          "ref": "89e102c4-7c67-442d-bcd6-1339e4c94bcc",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c0409d9b-9a23-4704-8b93-041a3e906084"
        },
        "item": {
          "id": "ee8c0a0e-5bae-4bbe-855e-32aa282a4d3b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e096b1a0-8216-44b5-912e-a1f8860774fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0362c1-e55d-44a6-aee4-40c17e85a679",
        "cursor": {
          "ref": "f817e064-a959-4871-bf52-b2546b9883ab",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1f15bfa5-39c2-4b03-905e-06ddc402892f"
        },
        "item": {
          "id": "8b0362c1-e55d-44a6-aee4-40c17e85a679",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "75717c7f-740c-4b96-8a1f-f1756347c1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f7de97-4bf8-4a89-adcd-954d34470500",
        "cursor": {
          "ref": "ab3eccd9-9a3a-42aa-9390-d51453887af2",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b19952d2-aa7b-4672-80d0-59347636dea5"
        },
        "item": {
          "id": "96f7de97-4bf8-4a89-adcd-954d34470500",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dc3e4cc1-90bc-4a2a-9bdc-74230b012f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52a438d-9b8d-48d4-9f58-0f33c665559b",
        "cursor": {
          "ref": "8b6f6957-c425-498f-a8ee-ade5d6a975c8",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "69eda8cc-0fe3-4dc1-8e1c-d859badde7af"
        },
        "item": {
          "id": "f52a438d-9b8d-48d4-9f58-0f33c665559b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "526a1c42-1048-4fcf-b6be-322b96c12ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25003c78-e970-4ac0-a85e-2ea72fedd292",
        "cursor": {
          "ref": "12d4b3fc-d155-4a19-80ca-d7c30e53e4d5",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1f77a4df-1bb2-48cb-8714-35feb89f28dd"
        },
        "item": {
          "id": "25003c78-e970-4ac0-a85e-2ea72fedd292",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4064542c-c86d-4b94-8a3e-728aec50e871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f926c87d-451f-47f7-a3c2-2bf66677229b",
        "cursor": {
          "ref": "d101e573-1272-4883-b23c-19eef07b9555",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "40cf4f95-10da-4d09-b01c-7263a59a23c8"
        },
        "item": {
          "id": "f926c87d-451f-47f7-a3c2-2bf66677229b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a444e8c5-76fe-409e-85db-daa269a69b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51e9e3b-ee00-4c04-a08a-e0fcbb006021",
        "cursor": {
          "ref": "cef07636-cab3-4695-8e87-12ba6980b73f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f04b46d3-e82b-4683-9cb7-37df6868cbc9"
        },
        "item": {
          "id": "f51e9e3b-ee00-4c04-a08a-e0fcbb006021",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "263f7fb2-91c2-4851-8211-eb8e770f5a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffcb4db-eb11-4d09-a153-b8e04f59c7ae",
        "cursor": {
          "ref": "c8c6006a-20be-4f9e-afa7-f8733a5186dc",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "291fe4f9-472d-4b78-af5e-1b6df8963bb4"
        },
        "item": {
          "id": "3ffcb4db-eb11-4d09-a153-b8e04f59c7ae",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d17f8640-783d-4cb5-82a6-a23fdcd3dc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b59f2e1-f338-4b29-a4b4-43d2b0c93ea8",
        "cursor": {
          "ref": "9b1ed2ca-5ab8-4b5e-ae60-7fa31cd8e902",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8a7622f7-7546-4161-acc8-fe9018a6ef79"
        },
        "item": {
          "id": "7b59f2e1-f338-4b29-a4b4-43d2b0c93ea8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "88e30bb3-93b4-467c-91b2-f6a35aecc12f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2f685e-a004-417d-a7b6-3575fd1c9743",
        "cursor": {
          "ref": "218c50c4-3de6-4bbd-95a3-3bf58966c24e",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "561bd80c-130c-4833-8f98-023618c313ea"
        },
        "item": {
          "id": "0d2f685e-a004-417d-a7b6-3575fd1c9743",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c805aef2-8e43-40f9-99f0-383dba8df467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee11a99-69eb-4326-9774-821fd85c6f48",
        "cursor": {
          "ref": "e7d53647-9d7f-40e5-b0e6-13cd16429870",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "42d880b0-dbef-401f-9597-ea3f29c8e3a1"
        },
        "item": {
          "id": "fee11a99-69eb-4326-9774-821fd85c6f48",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8a7cc8fd-1bd0-4816-bcda-465a544cf166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289fa844-6b5d-4893-a67e-ce244f17ccac",
        "cursor": {
          "ref": "bdece76d-cd6f-4073-baf5-6e5ed1fa717a",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "af457689-4b07-4448-b7a8-12203d9b98b6"
        },
        "item": {
          "id": "289fa844-6b5d-4893-a67e-ce244f17ccac",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "35f5b945-dc18-4570-a2d6-d7c6e4d0a34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a0f5e4-f7dc-43ec-8e01-b9a61d119b65",
        "cursor": {
          "ref": "2bc57f78-6c53-4532-a445-e984cb56aef2",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ef1f9095-749f-4ce6-a980-9e32920579ce"
        },
        "item": {
          "id": "01a0f5e4-f7dc-43ec-8e01-b9a61d119b65",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a67d9b9f-adff-4410-a830-e074fb67874c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9a7c39-2924-4260-a763-c88750ef7b33",
        "cursor": {
          "ref": "94bb75b7-eed8-43d8-9388-14efd22ccc50",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7ecc0d6e-94a1-47ee-9f9c-748a369bfc4f"
        },
        "item": {
          "id": "fd9a7c39-2924-4260-a763-c88750ef7b33",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "85c1bdaa-32c0-448c-83fc-714274590471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c84109f-3f4d-4adf-9c7b-0c4bde205d49",
        "cursor": {
          "ref": "d07b7873-590b-4db3-9f58-9b9dde226a3e",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "dc12e822-e5a0-4bb6-9016-19c0e469c5df"
        },
        "item": {
          "id": "9c84109f-3f4d-4adf-9c7b-0c4bde205d49",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0dd9f595-4c4e-46c8-b3c1-fca4bed8415e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af6420d-ee21-4fa7-bf9d-e0dc8a468b13",
        "cursor": {
          "ref": "66c78c41-0b56-4fbe-9c63-e3e0f08d26dd",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "92974e47-8d15-4de3-8604-82dd9ec60121"
        },
        "item": {
          "id": "4af6420d-ee21-4fa7-bf9d-e0dc8a468b13",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "512654d5-0388-4a8a-bdba-2673b90eebc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad413c97-75b8-48ba-a0c5-777c7163b653",
        "cursor": {
          "ref": "c46a9563-6cb4-4b94-9854-1b314a8cdbe8",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2d7bb63e-8839-46fd-93cd-1f48a1beabb9"
        },
        "item": {
          "id": "ad413c97-75b8-48ba-a0c5-777c7163b653",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8267a3a3-d522-42f0-8394-6b4163101c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7f358a-9d98-475a-bff7-fa6e7e273828",
        "cursor": {
          "ref": "9ad6acf8-48ad-4261-9843-16b33837f809",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "36cf30bc-c700-4e75-8092-6f4ae9741cef"
        },
        "item": {
          "id": "ea7f358a-9d98-475a-bff7-fa6e7e273828",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "80fa1b23-d486-4178-bf98-1324b281ac70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c9e8b6-9af1-4ad9-aa7b-70af359d33b4",
        "cursor": {
          "ref": "4966109f-7cd4-4053-9580-91f0fab5a070",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b30dffd5-a209-43a5-9915-a179928262e0"
        },
        "item": {
          "id": "57c9e8b6-9af1-4ad9-aa7b-70af359d33b4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "649759b0-51da-4cff-abd9-b141fa3d91dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9ec22e-adb1-4d62-9665-5ad1e81e0cb4",
        "cursor": {
          "ref": "be5c5402-03be-4168-8bb3-6c5682186af8",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a7c50c22-52bb-45a2-9210-e8ae2add2065"
        },
        "item": {
          "id": "2f9ec22e-adb1-4d62-9665-5ad1e81e0cb4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a5c62f97-be9c-4a36-9326-d8f79c5cfcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4264f35-c92e-49cc-9a71-c90aaf6c6d6c",
        "cursor": {
          "ref": "efcdb5c7-484a-4c4b-bc58-8434e05ac936",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1f836373-d7bc-4c1e-a124-cfbaf0fd8c76"
        },
        "item": {
          "id": "e4264f35-c92e-49cc-9a71-c90aaf6c6d6c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8339d38b-7b67-4a02-81d3-78e132a10164",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f155ee-8303-442e-b528-a4400864e948",
        "cursor": {
          "ref": "078493ea-5297-4f37-9678-d5b5afd8018e",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "07d95d0f-bd85-4112-9ad4-ce7ecf386a96"
        },
        "item": {
          "id": "40f155ee-8303-442e-b528-a4400864e948",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "79ed5f6b-8b49-4eee-aee8-fbc6e871103b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33b44dd-af5d-44d1-a82e-7f739fe25d28",
        "cursor": {
          "ref": "68784362-2069-4668-9f06-7d4d7ff66aef",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4145f145-f75b-4b20-8894-c1fc367eb406"
        },
        "item": {
          "id": "d33b44dd-af5d-44d1-a82e-7f739fe25d28",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "935256fd-10b8-4af1-b733-3f44b8a945d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9fd653-801a-4f91-be33-8ae8007e6604",
        "cursor": {
          "ref": "8fcd7795-a7f7-4404-8a32-de48b0a0973f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1fb08dbb-7bf4-4aab-8d5a-d2850a6910b3"
        },
        "item": {
          "id": "cb9fd653-801a-4f91-be33-8ae8007e6604",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "826ee298-2570-403b-a94e-b306e8dfc47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6083b0e0-7f9d-4ca4-9ecc-e00967a5bb50",
        "cursor": {
          "ref": "6817d712-1cef-4f71-a0d5-c27d523d238c",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4e812370-6ebd-4132-9028-2ebd64080664"
        },
        "item": {
          "id": "6083b0e0-7f9d-4ca4-9ecc-e00967a5bb50",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4ad245b0-691b-4a97-8ece-c80a0bdfb561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996282ad-22d9-4e19-8b67-2a9c29aa8675",
        "cursor": {
          "ref": "5ff86066-3751-47c0-802c-3f5a92529443",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0a5b83ff-8bf3-4ce9-ba19-7b76a8f9324f"
        },
        "item": {
          "id": "996282ad-22d9-4e19-8b67-2a9c29aa8675",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "108684d8-2187-42e3-bcff-cd57984d8ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99faf0fa-8ad8-452b-8bf7-261b6e2bb044",
        "cursor": {
          "ref": "dc441b4b-5a66-41a6-bc37-0ef805ffd097",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f6603e7c-ffff-4fe5-8564-d193e9b45498"
        },
        "item": {
          "id": "99faf0fa-8ad8-452b-8bf7-261b6e2bb044",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a8441fac-b6f6-47cc-8d33-e74f65b3421b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d92a650-e1ed-4cf7-8106-86512cc17462",
        "cursor": {
          "ref": "4bbaed1a-baa4-4efd-85ad-923eead542fa",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "12eecdd4-0188-43fa-8b39-995b08359975"
        },
        "item": {
          "id": "8d92a650-e1ed-4cf7-8106-86512cc17462",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c20cd96b-5317-41fb-865f-3c9b2c05f139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4e8cb8-ef96-4d21-9fc9-9c0b44cb598c",
        "cursor": {
          "ref": "8f97e4ba-3997-42be-93f9-2c12d28aca8a",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1c8d8a65-9fd7-4268-ae63-eafc47c2a416"
        },
        "item": {
          "id": "fb4e8cb8-ef96-4d21-9fc9-9c0b44cb598c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e428315b-e47b-40fc-903c-e1bd2681ab2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86661fa8-f4c6-442c-9380-e6cf92e79eca",
        "cursor": {
          "ref": "19d0cfda-b201-488a-b19a-c46fe63c45ce",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "07d311f3-9e86-46f6-88d3-60de321b9d2f"
        },
        "item": {
          "id": "86661fa8-f4c6-442c-9380-e6cf92e79eca",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6c3ec4d0-6e08-4ba6-ae48-d9cf405ed2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0348db1-0885-473f-b46a-48e0eb5b68ee",
        "cursor": {
          "ref": "4b56ce84-555c-44fe-83cf-155f76093775",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "83f232f7-7efd-4e6a-8b2f-7e5bbca4304e"
        },
        "item": {
          "id": "e0348db1-0885-473f-b46a-48e0eb5b68ee",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1b57d70a-7490-4958-b74a-fdc9d5aa54eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40301d70-401c-409d-8579-1717efb2278f",
        "cursor": {
          "ref": "6dab394b-849f-47ad-9c63-a79b75e9c27b",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d32e282d-fff2-4cd2-b7f5-43e8ad3a2fe7"
        },
        "item": {
          "id": "40301d70-401c-409d-8579-1717efb2278f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9a85d405-c595-49d8-8f63-4fac522b5c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d23931-8208-4661-a41a-7ce43ff32b94",
        "cursor": {
          "ref": "76db8d65-3053-445f-afa9-3c215fcff4af",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ed3b8fdc-5d0f-41cd-86a2-77e6c8054335"
        },
        "item": {
          "id": "09d23931-8208-4661-a41a-7ce43ff32b94",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7fb1b43d-216c-42fd-b7d0-9ceff4ee8dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04754637-5581-4b18-8d15-a75611baf136",
        "cursor": {
          "ref": "c37a8e13-8fa8-436f-91a2-8679edf21709",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7270d9cc-9f7e-467e-a49f-98ecb61a2a6a"
        },
        "item": {
          "id": "04754637-5581-4b18-8d15-a75611baf136",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e49128de-ef89-42bc-8c3c-40070cc0c21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b02f02b-cfb5-4a72-bf99-5219a0ac696b",
        "cursor": {
          "ref": "efdeaf1d-81fd-4899-b9d5-14b3c453aafa",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "23d54441-333d-4391-bbb3-9396dde981ba"
        },
        "item": {
          "id": "9b02f02b-cfb5-4a72-bf99-5219a0ac696b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c8fa3c8d-d531-4073-86ca-d4898336f675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88caf0e-b139-4d56-ad81-d58d482b0a96",
        "cursor": {
          "ref": "f5e84af4-2b89-4332-9dc3-973801e245e0",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f9230c0d-a8fe-4448-8885-f335364de3a8"
        },
        "item": {
          "id": "d88caf0e-b139-4d56-ad81-d58d482b0a96",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "56ea0aca-c90c-4c03-936b-09601f2d1bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98eb11df-37dd-4adf-9cf3-1234b183b879",
        "cursor": {
          "ref": "5820affc-5f34-4cfc-8a2e-b14bb3b716d2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5aa460fa-0efb-4d2c-87a3-a3d1d1cc4f1e"
        },
        "item": {
          "id": "98eb11df-37dd-4adf-9cf3-1234b183b879",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "45a1046c-2659-48ee-bced-809b7320ef07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e93d82e-e941-45ef-bfc3-64bbeb82b0cb",
        "cursor": {
          "ref": "43d1a610-e23a-44e8-86a2-45db7eb2aa3f",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bff96331-bb4b-4acf-b93a-30ecda3596e8"
        },
        "item": {
          "id": "4e93d82e-e941-45ef-bfc3-64bbeb82b0cb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3df2db2d-e61b-42cd-a5ad-597ceba8a74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769a0911-e6c4-48bc-a052-26725a3d36c1",
        "cursor": {
          "ref": "93592506-e988-4da4-91fd-60f0d65d127d",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fe3085a2-52a8-42ca-afac-b47034c9b073"
        },
        "item": {
          "id": "769a0911-e6c4-48bc-a052-26725a3d36c1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "20adfe06-410f-41fa-a462-7accb5e6eeb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d7200a-86ad-4001-aa1b-ea5217b371ad",
        "cursor": {
          "ref": "61647fe0-a662-4bce-b429-128d381cd5d5",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fa6bae54-8f3b-4761-a61e-226a73e73ff2"
        },
        "item": {
          "id": "f3d7200a-86ad-4001-aa1b-ea5217b371ad",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "139e13ec-1fb1-4f97-b567-eba81cb998b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1cd9b7-e9d5-407a-98c3-ac9146a014fa",
        "cursor": {
          "ref": "71a61fda-a0a5-440c-98cc-d4142244de94",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "632cb12a-53ea-4349-82bb-4d1ded3608c1"
        },
        "item": {
          "id": "ac1cd9b7-e9d5-407a-98c3-ac9146a014fa",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "225e88f9-2155-4409-8115-9fa8cb092705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81dc141-437c-4ad3-90fb-c518237007f7",
        "cursor": {
          "ref": "e26cf760-8916-4889-9963-f7c7dea5c50e",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "84dcb584-d6c5-470e-93c8-db4e81e0b22a"
        },
        "item": {
          "id": "f81dc141-437c-4ad3-90fb-c518237007f7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3ee478f2-60e4-42b1-b390-cb97f4b71ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450f0b19-e6be-4815-ba5c-4aae4471b5a1",
        "cursor": {
          "ref": "13613b24-6213-47d3-8036-19d3555b76fb",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "71052caf-bcc3-4403-94e3-d3e13db272cc"
        },
        "item": {
          "id": "450f0b19-e6be-4815-ba5c-4aae4471b5a1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "de26843a-4cc2-43a2-acc6-5ce512b4a85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efabdc32-93b0-4224-a565-42f75b618f81",
        "cursor": {
          "ref": "826e7fdc-be31-420b-a2d9-25633442f31f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "472a5a1c-61d7-444d-a2a9-3583b97ffe5d"
        },
        "item": {
          "id": "efabdc32-93b0-4224-a565-42f75b618f81",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a9b2a8b7-bea7-444b-bb86-eae3af7d1b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95750f3b-5eaa-4825-9521-b97ead332782",
        "cursor": {
          "ref": "85d550b4-d58a-4b40-af61-1e652802f219",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9031d158-f5e4-42fb-9bb6-b67475dc67d4"
        },
        "item": {
          "id": "95750f3b-5eaa-4825-9521-b97ead332782",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fce6e920-2329-49c1-87ea-6102842dd5ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7ad47b-a18f-47d3-b71b-57e45db72347",
        "cursor": {
          "ref": "2279b5dc-de58-485d-8294-e1d02b9605d2",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "04f7e35f-9ba5-431b-89ab-7796146fcd5c"
        },
        "item": {
          "id": "2f7ad47b-a18f-47d3-b71b-57e45db72347",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dc0be92e-ba28-4a79-b9ea-0aadfbcc6376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b311be-0bda-45c4-834b-d57a28f523c6",
        "cursor": {
          "ref": "212a8951-96f6-46d8-9bfe-cc4b010586ac",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "172c70a9-249e-4efe-a568-2f34b5f110b0"
        },
        "item": {
          "id": "c3b311be-0bda-45c4-834b-d57a28f523c6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a5470286-bdee-4206-b46b-392387b856ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be9fd3d-a571-41e2-a9e6-7a34d6dc899c",
        "cursor": {
          "ref": "2ee036a5-db40-432e-87c3-9a7d8b6b0f0e",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "61128e9f-1922-400f-8f62-4c65d7d97608"
        },
        "item": {
          "id": "2be9fd3d-a571-41e2-a9e6-7a34d6dc899c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b3073312-fa9f-4c9d-8608-cb70ce4fbaf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14abcec-5692-4fbb-91b7-f9dfbb595cc7",
        "cursor": {
          "ref": "3ceb52ea-9e81-4eeb-892b-743ccb28226c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5a37932b-a33e-4e3f-b353-24bef69fbcac"
        },
        "item": {
          "id": "d14abcec-5692-4fbb-91b7-f9dfbb595cc7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7df7f493-094a-45d2-a54d-2cc942acbcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5751bc67-c67f-4d30-aed3-df2ee455c36a",
        "cursor": {
          "ref": "e8c3f459-682d-4ac8-bc3f-af7aadf1aded",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bc35ba18-3944-4b1c-a861-8e7094513778"
        },
        "item": {
          "id": "5751bc67-c67f-4d30-aed3-df2ee455c36a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dfd38929-d9aa-4d8f-a578-df6d5e65b8b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54997b9e-cb6d-466d-850e-15b3e9b4059f",
        "cursor": {
          "ref": "6196f4a5-2dfd-4ad9-b4d3-9a0f7011e900",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e11f5245-41cb-4fc2-9f15-485258a0a5f7"
        },
        "item": {
          "id": "54997b9e-cb6d-466d-850e-15b3e9b4059f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1aaa84ea-7d7c-4ecf-8c11-99a27181a0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8ce6cb-f788-4559-83ad-3ef59ebd79aa",
        "cursor": {
          "ref": "5546989a-8fcf-4850-b419-f2e0add5d137",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "89588786-c342-455f-966e-93a83bebb4c7"
        },
        "item": {
          "id": "ce8ce6cb-f788-4559-83ad-3ef59ebd79aa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "92b50685-4277-4163-a73d-25801d1c4e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8458b64b-debb-440e-9211-e522fad8e96f",
        "cursor": {
          "ref": "10309f4a-95df-4dd3-ba85-72427a2d06d6",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9c3a0337-3010-4f1a-9eef-6aa553620298"
        },
        "item": {
          "id": "8458b64b-debb-440e-9211-e522fad8e96f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1774e080-e151-4e9c-8a48-41c48e05ac36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147686f8-49f6-4cce-9790-e4fd78603722",
        "cursor": {
          "ref": "03bf008e-007f-49c6-a2c7-6b48af907323",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e037a720-3620-404e-8c2c-d12f186fea5e"
        },
        "item": {
          "id": "147686f8-49f6-4cce-9790-e4fd78603722",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d7615236-6859-4407-8d3b-a5daa54750c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0e393d-007f-4dee-9d72-a022c6f77760",
        "cursor": {
          "ref": "b5292f78-5e19-4d7a-848f-3b739a8a0234",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "330d3820-4439-4f91-97dc-880b4e54e149"
        },
        "item": {
          "id": "4c0e393d-007f-4dee-9d72-a022c6f77760",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d8cfc19d-a1a7-470f-9507-8ca233e1ed33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd54a3f5-190c-4ab0-88f3-e54aba181690",
        "cursor": {
          "ref": "f61a5968-1af9-4198-b49c-a163942187fe",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "44d1f462-cf49-4b0b-ab4d-d9c4d8ac229a"
        },
        "item": {
          "id": "fd54a3f5-190c-4ab0-88f3-e54aba181690",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "3e72f1e8-2fb3-4160-9747-94971978485e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c82a5c-a5d6-42d2-bcba-890b8edb4d8f",
        "cursor": {
          "ref": "c8613b76-cf5e-4728-98ab-461ff77da142",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3885cae5-19d4-465d-8825-5e1009528c4c"
        },
        "item": {
          "id": "c5c82a5c-a5d6-42d2-bcba-890b8edb4d8f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e9f763ad-7dab-471c-8150-8156f73b2db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e0703c-1580-45bf-8ae8-a794f7b24871",
        "cursor": {
          "ref": "146ce7e8-0310-4990-9007-23363f5a1b5a",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9c15262d-1321-4e07-9785-958e73247f86"
        },
        "item": {
          "id": "e1e0703c-1580-45bf-8ae8-a794f7b24871",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "99eaa467-94fc-4c97-b99f-2e74dbd74360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ec2668-2f19-4b1c-a26f-3fa5131a00ea",
        "cursor": {
          "ref": "08023f51-6158-499b-a585-ad9d291fd6bc",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3dc858dc-7a65-410e-82b6-a990b2e3177c"
        },
        "item": {
          "id": "08ec2668-2f19-4b1c-a26f-3fa5131a00ea",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e26faf85-ddc9-47f9-86a8-de51d21cc59c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d40ac8-2982-4b47-b0e7-d33af526ff57",
        "cursor": {
          "ref": "802858db-8fc4-477d-80e9-1941f93288e3",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9d0048a8-1440-48c2-82d3-b67760c08492"
        },
        "item": {
          "id": "71d40ac8-2982-4b47-b0e7-d33af526ff57",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2563d459-f8f6-40d7-9016-8ee273e712ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2096796-355e-46e6-aeb1-a78bf8644bf0",
        "cursor": {
          "ref": "a08e87ec-fd27-48c5-8568-d7d8386086bc",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b6741bbb-2825-4e7f-a611-cfb6ba7449e1"
        },
        "item": {
          "id": "a2096796-355e-46e6-aeb1-a78bf8644bf0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "918885ca-8125-4865-be70-3e7101f6de5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d4ce6b-1f20-4bd5-b8cf-cfec9d841bd7",
        "cursor": {
          "ref": "13d6e364-e4ff-4289-8294-7c80580ecfd2",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e2a99b52-8177-4340-86e7-f5d78055d8b7"
        },
        "item": {
          "id": "e5d4ce6b-1f20-4bd5-b8cf-cfec9d841bd7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "03d74c0f-4e76-4eb6-a81e-42f66dcf4a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b039be7-961a-440f-bbd5-c2459a40778d",
        "cursor": {
          "ref": "abc697b8-9bc2-4563-8bf1-31315d2809a1",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d2087ef1-e98b-4556-b0f2-98b99e129525"
        },
        "item": {
          "id": "4b039be7-961a-440f-bbd5-c2459a40778d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "181fc0b2-fafd-4b86-92b2-d8f9427a163b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd106e8d-c0ed-457a-b067-d8b75c842faa",
        "cursor": {
          "ref": "a79ac74d-b8f7-49d1-a206-f0502991aea0",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f24a20da-14df-464a-bc50-6914085d2cdb"
        },
        "item": {
          "id": "cd106e8d-c0ed-457a-b067-d8b75c842faa",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3a79cc96-c20b-4716-93a7-76ae657bf1fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ab1697-4dbf-427d-9cd2-0091b94e2a87",
        "cursor": {
          "ref": "f9c72dfa-78de-42fa-8a3a-2be34b9c197f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d0080d55-f05a-4477-82ba-7b25bfb6e814"
        },
        "item": {
          "id": "93ab1697-4dbf-427d-9cd2-0091b94e2a87",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d49947c5-c648-469f-82e0-c9da3360c5d8",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "73596655-b0c4-4fe9-8974-30d647f9fe99",
        "cursor": {
          "ref": "bb3e8c48-cf47-41b8-9789-53a833dff446",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e2758868-fb69-46b0-b0c6-6dc037c047de"
        },
        "item": {
          "id": "73596655-b0c4-4fe9-8974-30d647f9fe99",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "670b29f1-a3ae-4216-9d80-a76fd8f37a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a893bb2c-61de-4cbc-bdc0-f0c646da046d",
        "cursor": {
          "ref": "b6d58a67-acb5-4f4d-b2de-9234e637be15",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ff757352-4f70-4da7-bfce-6d79235aa2d4"
        },
        "item": {
          "id": "a893bb2c-61de-4cbc-bdc0-f0c646da046d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "31f16246-ab35-4e21-84df-2072e7ebbcf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7a6a4c-ac45-4e18-91cd-2800fd73fdfc",
        "cursor": {
          "ref": "ec9c92bf-4910-4259-8388-fefc04686d51",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a11c96d7-1a91-4937-a3d2-4846cd49ec57"
        },
        "item": {
          "id": "8d7a6a4c-ac45-4e18-91cd-2800fd73fdfc",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8375f14f-67f8-445d-bc9c-48e9a71ca414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df01480-0fe0-4e9d-b64c-2309fbff503f",
        "cursor": {
          "ref": "15f6afa8-7b26-4649-a23b-426d900453fb",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c4c9fad4-161c-428e-b3a5-efcac3a8374a"
        },
        "item": {
          "id": "8df01480-0fe0-4e9d-b64c-2309fbff503f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3a4b9287-9bfc-42ce-bbb0-9e0b44b6c8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e03761-4504-4df6-a6ca-83a5ed4b0384",
        "cursor": {
          "ref": "7ccdae90-1d3c-439d-b337-9e2519cbe29b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e24bb32f-eba5-47e6-bdab-f1d96172b9ec"
        },
        "item": {
          "id": "03e03761-4504-4df6-a6ca-83a5ed4b0384",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d6eb22bc-4077-453b-af9e-75424c1b41c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bef48a-27eb-4992-b671-a0234c840da9",
        "cursor": {
          "ref": "93694086-3ecf-4c12-b4b5-5f5a7c6a76ee",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "35147106-1279-4116-9746-28dfcb32b00f"
        },
        "item": {
          "id": "e7bef48a-27eb-4992-b671-a0234c840da9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f7c26ec2-68dc-4781-88fd-9031af8c48b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20599142-87b9-45eb-a495-d2b755f28175",
        "cursor": {
          "ref": "037056ae-db0a-41f8-91a1-a60bb15f0016",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0a976ae8-fa44-4edb-97e9-0451b5953c18"
        },
        "item": {
          "id": "20599142-87b9-45eb-a495-d2b755f28175",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3d66f537-5794-43f3-9f4b-3a4093ab19f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c58a1f1-2438-41d0-bee9-4237389ad2ca",
        "cursor": {
          "ref": "f4fd77c1-1d2d-41be-a0c9-d524cbb67dd9",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "da5812b6-0810-43da-939f-58cfc4912550"
        },
        "item": {
          "id": "3c58a1f1-2438-41d0-bee9-4237389ad2ca",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b0cdea2b-c8c2-4b48-9550-4dd82aaed41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a779b49e-afb6-45e6-b88c-4588023486e6",
        "cursor": {
          "ref": "7454e4e1-c525-4029-b7b8-8da0e3c54245",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "22d50472-e66a-4267-bb7c-7c6097c6fa47"
        },
        "item": {
          "id": "a779b49e-afb6-45e6-b88c-4588023486e6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "047c78c8-6415-4b17-8075-c8fece38871e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4457bd-2e79-455d-97f2-8fb9308c64ec",
        "cursor": {
          "ref": "cc9664fd-67d8-45dd-b94c-814f302a4861",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b4447e68-8700-4f94-b819-e4f734308380"
        },
        "item": {
          "id": "6c4457bd-2e79-455d-97f2-8fb9308c64ec",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d2abc8ff-f8a6-4236-a942-598239a82df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab815f67-93fc-4c54-abff-fc4dc6b13e93",
        "cursor": {
          "ref": "dc80e7a3-dee1-4fed-93d0-200f679d2ddc",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ad491210-312c-4340-9b87-7ab14f427fd8"
        },
        "item": {
          "id": "ab815f67-93fc-4c54-abff-fc4dc6b13e93",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "08e3fa5a-0809-42de-a907-809a525231e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c84077c-773c-4b59-81b3-650b04b60e08",
        "cursor": {
          "ref": "af6ea105-c8bc-41d4-995b-48f13f133835",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "39663d72-8ff7-4143-a013-31557512e5cd"
        },
        "item": {
          "id": "6c84077c-773c-4b59-81b3-650b04b60e08",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b5603f6d-6ada-42ee-8474-39103b2d8934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26a0349-b955-42e5-b071-a041643958a1",
        "cursor": {
          "ref": "20cea90f-0104-476e-b884-5afdb2bb3c26",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ec355a9b-0b48-4e67-97b2-2b604122cbd0"
        },
        "item": {
          "id": "e26a0349-b955-42e5-b071-a041643958a1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "67eb1a49-63df-4d82-80e1-ba31f2ab41c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17730a16-2cd4-4f5b-991f-64e8b00f2f25",
        "cursor": {
          "ref": "6617c7b5-195c-4bb1-b667-2aaa325e14aa",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "31ecb3e2-b9a2-48db-8790-4c7350cbee79"
        },
        "item": {
          "id": "17730a16-2cd4-4f5b-991f-64e8b00f2f25",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d9deef08-2f85-4307-a804-598de2a2e276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392de22f-037f-4d25-ab00-8d70510aa180",
        "cursor": {
          "ref": "6a00604f-8bfc-4f37-835a-d14541dd45f5",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f485b060-8673-4b78-adac-0438f98658f9"
        },
        "item": {
          "id": "392de22f-037f-4d25-ab00-8d70510aa180",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c4551520-de90-4ee3-8f19-bb13ffdefbcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84ce40f-76de-4b71-862e-e5570327769d",
        "cursor": {
          "ref": "fa53aa03-afa3-48d1-b054-78b8ad37640d",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7b95b602-c1fd-49b4-8138-99e4bcc03441"
        },
        "item": {
          "id": "d84ce40f-76de-4b71-862e-e5570327769d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "16a53067-fc28-4c33-a231-acfd72a654b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ac05d4-eb0f-43a0-a646-cdd39dc06688",
        "cursor": {
          "ref": "d9308d0d-a135-4f5e-88a3-879409836ea1",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "eaabdd4b-14dd-4d6e-bec7-cb4a093ddbfd"
        },
        "item": {
          "id": "e2ac05d4-eb0f-43a0-a646-cdd39dc06688",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "559ce89a-e6a1-410f-aa87-17c66e55633f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3582773a-ae5b-4f9f-ab4d-cff10fa84fc3",
        "cursor": {
          "ref": "eb36a324-15c2-47ac-ac71-b3c7cb92d780",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5cb310de-b40c-48e5-9b57-711e5d7fe9a4"
        },
        "item": {
          "id": "3582773a-ae5b-4f9f-ab4d-cff10fa84fc3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "938020d6-10a6-41d8-b15d-b171f171f9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90604af5-ae0a-4197-8e12-a6dedd09647c",
        "cursor": {
          "ref": "8b182148-3180-43b7-bdee-76a3fd17f318",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "63f5d8d3-ec87-4ddc-8d56-86c6d61ce621"
        },
        "item": {
          "id": "90604af5-ae0a-4197-8e12-a6dedd09647c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2825a8f6-a267-444e-83fc-38ba02f4492c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f558eb3d-ad8e-4d92-8bfe-bf47622dc9b3",
        "cursor": {
          "ref": "ffb6418a-3a1b-4145-9932-0f5b6d2518ae",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1af61c10-4775-426f-80ab-25033681543f"
        },
        "item": {
          "id": "f558eb3d-ad8e-4d92-8bfe-bf47622dc9b3",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e9c6709b-8476-41fc-baec-a87a2b830c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd136cd6-1f57-4fe7-803c-8eca94209137",
        "cursor": {
          "ref": "4edd7095-b489-49e8-a3c2-6006aa373ffc",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b899ffef-0206-4d87-8961-ca5b06870c2b"
        },
        "item": {
          "id": "fd136cd6-1f57-4fe7-803c-8eca94209137",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "508436d6-b1cd-442c-a9fc-3a8bb386a052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef158e2-b056-4a38-8c2a-ce7e92f33f87",
        "cursor": {
          "ref": "033cb9b0-4c24-4ecf-bd6b-090d1905a45d",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6e5d989a-a7c8-471a-88cd-ca4690403ddd"
        },
        "item": {
          "id": "4ef158e2-b056-4a38-8c2a-ce7e92f33f87",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9dff8d3e-6301-46d8-b0e1-1ca426b39fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b14e30c-00f6-4232-8329-46196eea4fc2",
        "cursor": {
          "ref": "2e94e554-76c8-434f-bf7b-4abdf60dad4c",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0a855594-903f-4747-8ad5-946895e9b4c8"
        },
        "item": {
          "id": "0b14e30c-00f6-4232-8329-46196eea4fc2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "93b81b8b-072c-46af-a25c-067cefb13227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ccc6a6-82ab-427f-879e-7397ca3aa45a",
        "cursor": {
          "ref": "5336f72b-4525-4461-8d07-68bc1c9b5215",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fa53ff99-8554-450d-91d8-2cb0d8c338ab"
        },
        "item": {
          "id": "98ccc6a6-82ab-427f-879e-7397ca3aa45a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "016900dd-bac4-40e5-87dc-9c1767ef47e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6c676e-2f77-4f6c-a146-d88530eaee57",
        "cursor": {
          "ref": "5fd3a044-2e11-4bd2-95b7-22b8fd5752c3",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "72196ac9-de46-4da5-958b-e2bde923df5d"
        },
        "item": {
          "id": "dc6c676e-2f77-4f6c-a146-d88530eaee57",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9b18133d-7961-4693-8e28-a55377e803d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f7b68b-ae0b-42b6-b30a-8e1412571599",
        "cursor": {
          "ref": "82d7e8cf-b74f-40c8-903f-86f8d923916f",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "12dd85f3-eb6f-41d2-b1f1-cc13af59ab94"
        },
        "item": {
          "id": "62f7b68b-ae0b-42b6-b30a-8e1412571599",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2d4242e3-7612-4b9d-8a73-f01831126fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5276cd-fb23-4fb1-a7a9-4a9df5ba4d3b",
        "cursor": {
          "ref": "c217bfb2-783a-432a-b628-a48346866729",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9260404d-49c3-482b-a9a7-eec97ad8466c"
        },
        "item": {
          "id": "dd5276cd-fb23-4fb1-a7a9-4a9df5ba4d3b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9c92256a-2e4d-47e1-89d6-5e01cd6bf9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00edecd-d28a-4ce5-9d90-c8a5c56e35c0",
        "cursor": {
          "ref": "a5b26ab0-b61b-4325-b4d5-329d0d843822",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "60119fe8-18eb-4044-9ad9-4d37c6a4732f"
        },
        "item": {
          "id": "d00edecd-d28a-4ce5-9d90-c8a5c56e35c0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "63b7eeb2-16cf-41f7-9e4d-4cce8b0d2a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f116ff37-78e5-4ad3-a6e9-f33c6a758272",
        "cursor": {
          "ref": "ea3613f5-4537-4992-9285-537364798660",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "37874219-9e3c-45b5-a4a4-9c47ed976602"
        },
        "item": {
          "id": "f116ff37-78e5-4ad3-a6e9-f33c6a758272",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a0a3f941-7828-40eb-9a9f-11c8f9155bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c440b2f-bd6b-4444-a016-ec0b7406839b",
        "cursor": {
          "ref": "e14311fe-7227-4bf0-b086-d93a4e9fb891",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "655a6fb5-f40f-4ccc-8234-9e97449704fe"
        },
        "item": {
          "id": "5c440b2f-bd6b-4444-a016-ec0b7406839b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1f230fa9-3469-43d5-9a64-3a451097af67",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "067b75a2-76be-455c-a37e-769da6d2e73f",
        "cursor": {
          "ref": "02cbd8e1-7dc0-48a7-a06a-76615a29800d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8a43265b-c4ee-42d5-aecf-3077d6239be4"
        },
        "item": {
          "id": "067b75a2-76be-455c-a37e-769da6d2e73f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d922eaa6-d891-48b6-96a3-d5ab7b98be3b",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e16088c8-b581-4d7f-86dc-bd96a144145f",
        "cursor": {
          "ref": "eb855ae9-5648-415c-bf81-8ed48d972d7f",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b9d6ae4b-d9f6-48a3-a00f-8312e789636e"
        },
        "item": {
          "id": "e16088c8-b581-4d7f-86dc-bd96a144145f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9e32b90e-09e1-454b-bb82-ad4da96f92a8",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "742e38fe-b5c2-4e87-ad87-36f1d2a1fb32",
        "cursor": {
          "ref": "8f3cee14-d1af-446b-8b6c-ba6319feb43f",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3013e64d-5124-4533-9003-0b472369f53c"
        },
        "item": {
          "id": "742e38fe-b5c2-4e87-ad87-36f1d2a1fb32",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c6923fea-7bfc-40a8-889f-1d78a4fedfcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e7f04d-e564-443b-a7db-0717bc0c929c",
        "cursor": {
          "ref": "7b8e79a2-36a7-4756-9d79-0c0c3c99fe80",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bdee02d5-df80-4878-92dc-8055334dca9b"
        },
        "item": {
          "id": "85e7f04d-e564-443b-a7db-0717bc0c929c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "01064108-1d82-4fe8-b04e-843317ef942f",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b53d702f-0f03-444b-8256-007a397ed10e",
        "cursor": {
          "ref": "e59e2dfe-fd56-4e16-a80b-b1738c4fbcf7",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c84985bc-933c-4f03-ae80-9341ad43292f"
        },
        "item": {
          "id": "b53d702f-0f03-444b-8256-007a397ed10e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ce1378c3-4956-4e7a-9344-9e7e11b31191",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "760cb336-2e66-4b6e-8714-d040f5781797",
        "cursor": {
          "ref": "783bc558-80da-4d8f-951c-3787655ce851",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7144b0d0-e753-432c-8b08-4d335d06668d"
        },
        "item": {
          "id": "760cb336-2e66-4b6e-8714-d040f5781797",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d58d7109-e5f6-4dd8-977e-b76013810ebe",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6f15283c-8b16-4c22-903b-5f562af538af",
        "cursor": {
          "ref": "52ec3c8b-a8d3-4dab-8bf2-ef85fe30fe7f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8cd67d4c-1c9f-4eed-9ca3-cec0b806e00b"
        },
        "item": {
          "id": "6f15283c-8b16-4c22-903b-5f562af538af",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ca6d041b-3ca4-4271-8a65-50b66951a71e",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "77123ba6-25c3-46c2-bd69-f2bc7e5cfaa1",
        "cursor": {
          "ref": "0ddda2be-8b08-45fc-9373-57eaf312a2d4",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e6caebe4-3e03-492c-b278-8b2a322a659a"
        },
        "item": {
          "id": "77123ba6-25c3-46c2-bd69-f2bc7e5cfaa1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "915c79f7-98dd-44ab-96af-a166eb3d8747",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "cff3dcc8-89ce-4ee8-99b3-a9e0b31f9235",
        "cursor": {
          "ref": "114250bb-b659-4ce6-8f8c-e9881ef195d3",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5a200b1a-0934-4c70-a46f-95488c103f58"
        },
        "item": {
          "id": "cff3dcc8-89ce-4ee8-99b3-a9e0b31f9235",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fa9333ff-d2bd-4cf7-a72d-6be2306801cb",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "83caae2e-be6f-40e0-8545-065d07d86711",
        "cursor": {
          "ref": "af272339-7bce-4386-905a-decbb7878e0b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c7ef5ea8-0246-416a-a6dc-41fb4156920e"
        },
        "item": {
          "id": "83caae2e-be6f-40e0-8545-065d07d86711",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "32a82917-0181-47ea-a362-b42f77895aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2deef800-d009-4a0e-9db4-ae682f41fdb2",
        "cursor": {
          "ref": "a167746a-1d7b-4b5d-b346-715885113499",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9e16e4ad-d783-482f-aac0-8effc5d8af49"
        },
        "item": {
          "id": "2deef800-d009-4a0e-9db4-ae682f41fdb2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "be817f0b-2811-4b55-96d6-fb8e7da04fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e760690-0c15-4ffb-bbb5-e7b99556b9d8",
        "cursor": {
          "ref": "278e4ecb-f639-474f-81d1-e14cb372ab3f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c467caf1-5b93-48ad-8494-d2c6104283ab"
        },
        "item": {
          "id": "3e760690-0c15-4ffb-bbb5-e7b99556b9d8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c3cefe01-2df5-4665-8e59-d128379550cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f8d59d-7876-49ad-95e5-b219f148242c",
        "cursor": {
          "ref": "a142feb9-d6b0-4159-8347-3286b99a15d3",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "16738b1c-a054-4c91-82cb-428f60b417cd"
        },
        "item": {
          "id": "66f8d59d-7876-49ad-95e5-b219f148242c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f2d4e09d-bdb0-4cbd-9247-ab91ca481bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf683e9-f3bc-4f4d-8102-337407c550c8",
        "cursor": {
          "ref": "ef122350-5088-4183-921d-fe2b3f42c671",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "948c704e-8640-4102-913f-e37f1fc264ac"
        },
        "item": {
          "id": "7cf683e9-f3bc-4f4d-8102-337407c550c8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "64828878-0ae6-4784-8951-4ea105469a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed51ace6-557b-48ce-8805-2263857bbef7",
        "cursor": {
          "ref": "514e8a74-69fa-4d18-8817-bf56b4ac5e0f",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f28a7921-a361-4691-94ce-c95d36eb323b"
        },
        "item": {
          "id": "ed51ace6-557b-48ce-8805-2263857bbef7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b5dbc497-feb9-4bb2-8998-d0bdec115cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f254183-6aa0-4d0f-8669-f5428c6fb2e5",
        "cursor": {
          "ref": "a1385574-61b3-460e-a230-82b3ab04546b",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e1bea65f-edcb-4d8d-898d-ee83d105266a"
        },
        "item": {
          "id": "4f254183-6aa0-4d0f-8669-f5428c6fb2e5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "207a21c4-cfaa-4e8d-8afe-52dc34db4a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3618cc-5214-4676-8e3c-b4ea51d7cb59",
        "cursor": {
          "ref": "e4d6b112-1712-4982-b4ca-f3e9955bc2ce",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "481f74af-9d42-421a-b4d9-000e31e490a6"
        },
        "item": {
          "id": "bb3618cc-5214-4676-8e3c-b4ea51d7cb59",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8149a4bc-04bd-47fd-b367-bff80469bee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c95816-f4ef-4d71-9630-1b679b1447d0",
        "cursor": {
          "ref": "2ec2a3a5-c0c3-4a17-bfe4-62caff6d1e39",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fd853bc7-601b-4296-b1de-d0ac0f59f065"
        },
        "item": {
          "id": "00c95816-f4ef-4d71-9630-1b679b1447d0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "bd040ece-2e0c-4e47-a6a1-f8e9131d2cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8926479f-b482-4be4-95e8-30d75928cd4e",
        "cursor": {
          "ref": "0ed5146d-1fe3-4cc4-8a0f-b44fe9abb2d0",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2dcb7e85-bb21-4800-9d29-799d19f0b1b2"
        },
        "item": {
          "id": "8926479f-b482-4be4-95e8-30d75928cd4e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e7a17e20-628d-4e2c-861f-0b493859d37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3f1479-6c9a-4a5e-8627-e395803b4a2f",
        "cursor": {
          "ref": "96f22064-3032-461a-8e87-0f4048758d93",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "35643433-9beb-4082-8296-b07cc6a0fe7a"
        },
        "item": {
          "id": "0a3f1479-6c9a-4a5e-8627-e395803b4a2f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "05e2f688-7510-4ddc-9702-e3cb1304db01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da98a7c6-876b-4d06-ba10-6715d3d874e6",
        "cursor": {
          "ref": "6d2813d0-111a-454a-9110-f6c733e23a14",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d67313de-e7dc-4b4e-81c7-dbb2700d7f20"
        },
        "item": {
          "id": "da98a7c6-876b-4d06-ba10-6715d3d874e6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "635af750-787b-49b2-8c6c-685c34394cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acdb4a48-8398-4376-ad91-da08bb00405a",
        "cursor": {
          "ref": "8e364c2d-9ae3-472d-91b3-8410392951f1",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5e78377e-6d92-43b5-b990-85135af99e3d"
        },
        "item": {
          "id": "acdb4a48-8398-4376-ad91-da08bb00405a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "54a4e7ff-7dce-436b-a562-b6a02433cbe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c84b6ee4-810a-4385-90d1-84df0cc2326c",
        "cursor": {
          "ref": "c4280fd8-27cc-4e27-bd9c-2b910092e1b0",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "60819d5d-d828-4cbd-8f17-83d3678bb287"
        },
        "item": {
          "id": "c84b6ee4-810a-4385-90d1-84df0cc2326c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "953741f3-ea46-4cea-8172-d36fabf2de69",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "32e46bd9-dcda-4e9b-828d-ef5c92666476",
        "cursor": {
          "ref": "96eb97ae-faa8-4bc1-a4e7-b2d442471c0d",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b3f8b840-3ae8-4a45-9bc6-2f7b2def47c0"
        },
        "item": {
          "id": "32e46bd9-dcda-4e9b-828d-ef5c92666476",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0b85a21c-c70b-40d9-b7eb-b3669c316c6e",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a9c471ec-f3ff-454e-9cd7-d482d8108a89",
        "cursor": {
          "ref": "2707368d-f7d8-4884-9fe2-912f6c7636ae",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "57fc6c26-8353-460b-918f-9625efc6f86f"
        },
        "item": {
          "id": "a9c471ec-f3ff-454e-9cd7-d482d8108a89",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3dad8172-a267-4ea0-8768-48942051b630",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "5ce788e7-d2f2-4d20-a007-bcabd0afe098",
        "cursor": {
          "ref": "c50c49c0-44c8-408c-9194-d2ffdfbd0dc3",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "86425450-daeb-4d5f-a211-492640984084"
        },
        "item": {
          "id": "5ce788e7-d2f2-4d20-a007-bcabd0afe098",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "522f9373-5b9f-4a7e-b56b-c222db94980b",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "802549f6-4620-4288-8fe4-5ede78b5c94e",
        "cursor": {
          "ref": "53389867-021b-4efa-8b0c-8919a7b2fd8c",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f80f79b3-c49a-4c42-bba5-d56bcb5d0239"
        },
        "item": {
          "id": "802549f6-4620-4288-8fe4-5ede78b5c94e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "73bd9223-d00f-4739-bb61-99f5c7706f2e",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e608e7d0-0c68-4680-b1c3-7faf2cb642e1",
        "cursor": {
          "ref": "7a94224f-6cd8-4a9c-98e9-cae11b795586",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c5d60938-1a55-4d83-875d-22c03806050e"
        },
        "item": {
          "id": "e608e7d0-0c68-4680-b1c3-7faf2cb642e1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "49763c76-f6d3-4c56-9432-fab6fa3cfac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057bba8b-932c-47a1-9dd6-a73451d2601f",
        "cursor": {
          "ref": "6df53e75-dfba-4096-b471-0c48e2ca6150",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "db8e7729-5123-4b13-9411-dcbd84940039"
        },
        "item": {
          "id": "057bba8b-932c-47a1-9dd6-a73451d2601f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6b9d81b2-1816-4dd2-8b6b-e458e7ba3b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456b5968-51f8-4c28-8c8b-5799b0786994",
        "cursor": {
          "ref": "252b2d85-9a16-4fe0-9236-5a9ff2e44903",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "07f574a2-5e25-4896-b1fd-4ca596ddcdf4"
        },
        "item": {
          "id": "456b5968-51f8-4c28-8c8b-5799b0786994",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "45212c7b-4e42-458c-a830-16721eff026a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82842bd4-b79f-4060-9b4c-ad52af24e657",
        "cursor": {
          "ref": "f71a8eee-fb81-408c-bc79-be72bd457f24",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5097690d-3cf6-484e-84e7-5cd8a9c856da"
        },
        "item": {
          "id": "82842bd4-b79f-4060-9b4c-ad52af24e657",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6142f100-0652-46fb-86a4-7137c86dbdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c882548e-a95b-44ba-b115-be9734d1d59c",
        "cursor": {
          "ref": "ac2edfea-aed5-446d-a8f0-7be9dc12b82f",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "87968803-eb8c-40c8-b761-d72568b1c115"
        },
        "item": {
          "id": "c882548e-a95b-44ba-b115-be9734d1d59c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "581b01b9-65ac-48fa-965f-a2d3da741b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1648af7d-fa4f-4ba7-9d76-417d97478c68",
        "cursor": {
          "ref": "f99b67de-83c2-4451-87b1-5113c6384704",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5c3dcdfc-83d2-4e82-a82e-fe5dc54a9ebd"
        },
        "item": {
          "id": "1648af7d-fa4f-4ba7-9d76-417d97478c68",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "abb0eef2-bf0a-4908-9b18-86a352bf7734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b313e1c-98da-4459-bedd-21fe76acbab4",
        "cursor": {
          "ref": "f3ea3054-1e3b-4b50-aa6b-669b97f2707f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "db87793e-0243-4b52-a821-a87a0de7f361"
        },
        "item": {
          "id": "8b313e1c-98da-4459-bedd-21fe76acbab4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "da995721-aab3-4830-8f64-1a900d40a242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab517dfb-5691-4a0a-b8c2-8eab2b365ce8",
        "cursor": {
          "ref": "006f927f-3688-46f1-9497-cd4be67462a1",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e022911d-bd3d-4272-8df6-dfd9ed1674fa"
        },
        "item": {
          "id": "ab517dfb-5691-4a0a-b8c2-8eab2b365ce8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7e110540-066b-469a-92b2-f6b1d93b83a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc2ced4-d18d-4700-938a-0acbbeb2d101",
        "cursor": {
          "ref": "a1fc247e-346d-4076-8daa-9712a942d878",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bc233d38-03f4-4c24-8ab4-2f6a0ebb1f84"
        },
        "item": {
          "id": "3bc2ced4-d18d-4700-938a-0acbbeb2d101",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "84b267ba-67ce-4007-b685-8d8ca974c611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936012b3-7bc6-4458-9411-48bfe3e4e453",
        "cursor": {
          "ref": "38dd1ada-7371-48a9-a248-2b58bc3d4fb7",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "828f5f40-407a-41a2-bcd3-d03ddd3e09fe"
        },
        "item": {
          "id": "936012b3-7bc6-4458-9411-48bfe3e4e453",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5573029d-835c-4323-a8c2-72c4f41be09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10322bf-f8b6-4db1-b468-55420aad1cad",
        "cursor": {
          "ref": "7f695226-68a7-4bf5-8ef8-f109908b9086",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c18f264f-0085-40de-91bb-8c58a5799cd1"
        },
        "item": {
          "id": "e10322bf-f8b6-4db1-b468-55420aad1cad",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d4a5eb3c-397c-4d55-8741-b697e981f0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39990842-9ee2-4374-9827-7178397d880a",
        "cursor": {
          "ref": "5c5ee925-baf0-4cbd-af7d-2a83eaf7dbde",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "ce83d552-5f1e-4376-8a7b-fbc948202298"
        },
        "item": {
          "id": "39990842-9ee2-4374-9827-7178397d880a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4e3436d7-b8a0-4b5e-8c33-f0b30a0d4c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee603b8-637c-4ddb-84b3-acbd85e59ddd",
        "cursor": {
          "ref": "a1618d8d-bcfd-4cf6-a129-fba22561a78d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1b9ed7fd-34e3-4fcd-a55d-790708c73e78"
        },
        "item": {
          "id": "9ee603b8-637c-4ddb-84b3-acbd85e59ddd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7a955379-8260-4e3f-a343-e920f4ffc0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0c6cb9-8375-47a7-a74c-796efd571c12",
        "cursor": {
          "ref": "83bca4a2-7624-4643-83f5-f0e854585d86",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "2de49ef8-3dd2-45fc-a61f-6461820f9970"
        },
        "item": {
          "id": "9d0c6cb9-8375-47a7-a74c-796efd571c12",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0c735cbf-4d0a-4e8a-a9b5-38533a53ec13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac8c1e3-a5d1-4367-8c5b-5eb8e8d63233",
        "cursor": {
          "ref": "5b07c7c9-fa9e-4c75-9cc6-eef46e3f042e",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "8cdbf1b4-8074-4579-9e1b-d4ef8d0f53f8"
        },
        "item": {
          "id": "eac8c1e3-a5d1-4367-8c5b-5eb8e8d63233",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1c1978b0-35f3-40a7-a3e5-7f3b54f04fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237e102b-a4d1-4dd4-b79c-94a1bec6c3a3",
        "cursor": {
          "ref": "45ca5354-3320-44e9-9c64-6bdf883e724c",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "77821da6-bbbd-4cc3-b629-9c5357d22bb7"
        },
        "item": {
          "id": "237e102b-a4d1-4dd4-b79c-94a1bec6c3a3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "573d3b97-b65b-4aaa-9139-9e3184c7a5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31ade75-8557-4d76-9eaa-1eb7123efbb8",
        "cursor": {
          "ref": "607df29d-ce42-487e-9a37-7e869468d012",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3a4ff620-8788-4f5a-91c0-a941412e90e8"
        },
        "item": {
          "id": "d31ade75-8557-4d76-9eaa-1eb7123efbb8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bf12da16-be1f-4aa5-bfd8-527c0bb2ab2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93656060-9f9f-43fe-973b-78ee4d323ad2",
        "cursor": {
          "ref": "768aacb0-8593-40b7-bdb7-c6411c63ee23",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3730c79f-2ff7-466f-bc43-f6f34873c45f"
        },
        "item": {
          "id": "93656060-9f9f-43fe-973b-78ee4d323ad2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6a845d6e-60c9-44b8-a4bf-5d0d67569e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4a69c8-3f0b-4e57-bed6-bcf8a559929a",
        "cursor": {
          "ref": "0412e3df-39b9-4583-a417-f16e83092352",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "246fbb9e-ca5a-4550-b9e6-116b4e1aaf68"
        },
        "item": {
          "id": "1f4a69c8-3f0b-4e57-bed6-bcf8a559929a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "29f10297-eef3-4954-b78d-f8bb0269f631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ff9ab4-be1f-482d-9581-f96d394642bd",
        "cursor": {
          "ref": "c4df9d03-de09-422e-9f5a-ac9edf1ee206",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3ea9f648-55f3-4757-9896-f98e3c2c1434"
        },
        "item": {
          "id": "d4ff9ab4-be1f-482d-9581-f96d394642bd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2f31a58f-30d4-4326-9dac-f3b40ca1ccce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea98360-3db9-4343-8be4-28c51d4afedd",
        "cursor": {
          "ref": "a499217b-4c5b-48e4-af40-c679a579ea3b",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "80d649ed-c58a-4e7b-8d17-3e18c061842f"
        },
        "item": {
          "id": "0ea98360-3db9-4343-8be4-28c51d4afedd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f163f6c0-ecdf-46be-8cda-b9fe5310ad97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37206e3-14df-4f0b-a51f-991c2de38b1e",
        "cursor": {
          "ref": "10d9bca2-ddb1-4c98-a0ab-38febf2f6175",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "81905ff6-6436-4ad1-8ddf-74457126aa1d"
        },
        "item": {
          "id": "f37206e3-14df-4f0b-a51f-991c2de38b1e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a2df0559-fd45-4008-8cc7-a7ecf11e42a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88cc241-648b-4885-92f7-26e1223d6aae",
        "cursor": {
          "ref": "071a15e3-575f-4860-8b94-939f690ee247",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8c14108e-bc10-4917-8fe1-010491c67911"
        },
        "item": {
          "id": "a88cc241-648b-4885-92f7-26e1223d6aae",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a1162e48-7fd8-4eab-89a5-bdf05607a6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75178296-a8fc-4837-8c0b-19ce90a75036",
        "cursor": {
          "ref": "7fe19cac-90ef-4329-b4ee-4491731d2855",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c857dffd-d37b-4c93-a0b9-a9e7df36787d"
        },
        "item": {
          "id": "75178296-a8fc-4837-8c0b-19ce90a75036",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8871c948-8681-41bd-bc7d-5d6698eac37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d357d6-f96d-4d36-be88-fb673faca71a",
        "cursor": {
          "ref": "3fc8e367-d700-4f5f-b19c-8bee5b8efdfa",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "9c3f623e-87a4-4b0d-a304-229d8f269026"
        },
        "item": {
          "id": "85d357d6-f96d-4d36-be88-fb673faca71a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "23281c55-0107-4df1-80fa-ac6ae00de579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14aeb6c8-9462-40cf-8f9e-f4af95ac2267",
        "cursor": {
          "ref": "a4aaf603-4537-4508-bb58-5142bacdab18",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "85b4f3c6-c4ad-4583-aa92-44809579aecf"
        },
        "item": {
          "id": "14aeb6c8-9462-40cf-8f9e-f4af95ac2267",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "30769bba-2ccd-41bc-81b3-7e5d577042f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07da97f-7e67-4502-95f3-dbb8a3be4020",
        "cursor": {
          "ref": "a51a64c1-37df-4689-8f54-80789f7e5466",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a985bbf6-760f-46c7-a212-c2435d017291"
        },
        "item": {
          "id": "d07da97f-7e67-4502-95f3-dbb8a3be4020",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "98d647fd-d450-402f-bbc5-34f6086a0874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0effd61a-ae10-4572-b0e5-b4e4141cf477",
        "cursor": {
          "ref": "c7d8f7d7-733e-42d0-8270-7440ff680abe",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "54aa7901-fe35-4726-a117-0a1602f55cdb"
        },
        "item": {
          "id": "0effd61a-ae10-4572-b0e5-b4e4141cf477",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9e37b86d-4c55-4839-b7b5-b5c38c317244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b45ba0-6f24-416c-98e4-c7ebb5dc5380",
        "cursor": {
          "ref": "ccfbee6b-241d-4b65-a163-82f4548214bf",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e899f414-423b-4da9-ac26-25fafa7e72a9"
        },
        "item": {
          "id": "73b45ba0-6f24-416c-98e4-c7ebb5dc5380",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1467e5ef-3f28-4902-94ad-8541dfbf7a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfce8bfb-f5da-4426-8828-16645e845801",
        "cursor": {
          "ref": "b68db07a-c392-461f-a932-e8243c494ad3",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "aa6ee213-76bc-492c-b25b-f8833e3ca9a0"
        },
        "item": {
          "id": "bfce8bfb-f5da-4426-8828-16645e845801",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "88a09320-ba59-4c9f-8d4e-efbe597add7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c52fe8-1e3b-4e25-aa62-efc15aeee02e",
        "cursor": {
          "ref": "4ab16067-ffdd-42ce-aff7-0b9363cb16ad",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "9c65e7ab-b0b3-4304-a56c-2370acc0c464"
        },
        "item": {
          "id": "f2c52fe8-1e3b-4e25-aa62-efc15aeee02e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4fc3a084-ffb6-4189-b275-7d8c04405243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c326dfe2-7687-4ce0-8801-6f34a3b7c544",
        "cursor": {
          "ref": "06cd0c30-14a5-4761-9e41-1dc78cfbce74",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "0ebc705f-d583-45a6-91cf-22f8a56691dd"
        },
        "item": {
          "id": "c326dfe2-7687-4ce0-8801-6f34a3b7c544",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "eff6f12c-c486-46f0-99ec-94b9f4f1a2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5326b4-65d4-43ac-89ae-ad16d4db5321",
        "cursor": {
          "ref": "0769a1e2-90d9-4923-a4d9-08515044862d",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6b6c1844-4f9e-4588-8772-1553d752c012"
        },
        "item": {
          "id": "bc5326b4-65d4-43ac-89ae-ad16d4db5321",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "499551bb-cb07-434d-96c6-4035f2f70649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77e7bcb-d2d9-4164-a358-99ea66c3f465",
        "cursor": {
          "ref": "34cd31d5-a928-435a-8647-795f1d964598",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "81f7654a-7935-4632-a9de-df2ad4facbdb"
        },
        "item": {
          "id": "a77e7bcb-d2d9-4164-a358-99ea66c3f465",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ca11c9f9-6587-449f-a816-9ed53bab91d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe694f3-aca0-4f88-add8-c4bab7259329",
        "cursor": {
          "ref": "8081e3b3-8579-4a8d-9748-6072bf1ec108",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2a471dcb-6667-45af-ab86-8db63a7fe95a"
        },
        "item": {
          "id": "9fe694f3-aca0-4f88-add8-c4bab7259329",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3271999c-489b-4279-a7f7-e6b799fd8b4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8665fc42-983f-4f68-b52f-5b11b0d7de53",
        "cursor": {
          "ref": "710a68fe-2f94-4b51-a2aa-1add646a3584",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8fc293ed-2b7d-4e8b-8478-5c89714b7bd2"
        },
        "item": {
          "id": "8665fc42-983f-4f68-b52f-5b11b0d7de53",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "74cc3d6d-2e0a-4707-b0a4-6e045c01fb8a",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "5cb79578-ae30-44b5-82ea-712f36793ee8",
        "cursor": {
          "ref": "534f2ada-b2c3-4057-b07d-2ad8d375aa7a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "2667e3c8-7347-4021-a900-1153d18c81e4"
        },
        "item": {
          "id": "5cb79578-ae30-44b5-82ea-712f36793ee8",
          "name": "credentials_verify"
        },
        "response": {
          "id": "28c824a3-083b-4ebb-9587-9140f4d0db72",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1610b6c-be31-4e83-a09c-16a2beec0118",
        "cursor": {
          "ref": "a7082a1b-6fc3-4f26-87a1-135dea2febc4",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "96765fc2-acbb-4ea6-8ace-3ad6e236fe24"
        },
        "item": {
          "id": "f1610b6c-be31-4e83-a09c-16a2beec0118",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "db0fa24b-d108-4f4f-8459-00fd6baea055",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80ca7a8-7d95-4859-bd86-720e5df4dcda",
        "cursor": {
          "ref": "6601a1d5-2d90-4e9d-8765-0e41b0349b88",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0d1eb5ae-86e8-457e-96d2-ddd0b88a96b9"
        },
        "item": {
          "id": "b80ca7a8-7d95-4859-bd86-720e5df4dcda",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "51f7fef8-e950-46d5-acb3-78f7a44a3197",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80ca7a8-7d95-4859-bd86-720e5df4dcda",
        "cursor": {
          "ref": "6601a1d5-2d90-4e9d-8765-0e41b0349b88",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0d1eb5ae-86e8-457e-96d2-ddd0b88a96b9"
        },
        "item": {
          "id": "b80ca7a8-7d95-4859-bd86-720e5df4dcda",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "51f7fef8-e950-46d5-acb3-78f7a44a3197",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c31133-34c7-4715-84ce-ccd5aabb3879",
        "cursor": {
          "ref": "57ced940-f2d3-4c69-ac47-6d6ca6082220",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "67b376e0-a85a-4932-b01c-3fbdd37e8e50"
        },
        "item": {
          "id": "55c31133-34c7-4715-84ce-ccd5aabb3879",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9b28ca23-ffbc-4b83-8dc2-73e7d0eefb6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4537812-80c0-4d56-af4a-d505233332d9",
        "cursor": {
          "ref": "a59bc3c2-5139-4104-b166-9784158c3026",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "029fba31-588e-4c82-9599-0b19ad092e63"
        },
        "item": {
          "id": "d4537812-80c0-4d56-af4a-d505233332d9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "83a56c73-5784-4e36-8834-2017dc18e060",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}