{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "eda90f53-379e-44bc-bf5e-893bd1decc55",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3a00edf2-2989-451b-8f3c-53212c84c729",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "de6aca48-6800-441f-a4af-9fb8f1baf1ab",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ee82db6e-559d-48f8-825e-080775640b63"
                }
              }
            ]
          },
          {
            "id": "5e61e7b0-6a97-4f75-848b-c72171ad65fb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f4bb89f-7c0f-44ac-93d0-4ad09b7b876f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a5ed2751-5a30-4120-a474-21f83a693af9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f82b8d01-2536-4ce1-85f4-2243755b92f5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6019cf26-f45c-4cd6-a477-45d922933b93",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ce3de2b5-46d0-4c81-83c1-8c365c6dac74",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58387f49-512d-491b-830b-e80133e23fcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfd7df86-c2b8-4463-9e22-0480bdcf7eb9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2ead3c35-1ffc-4fcf-996c-adcc91d465a7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1cbf1375-e35b-4c0f-9450-885ac37522b0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5e90ffdf-f124-485f-9a59-c8e123037e3c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e6c811c-cd29-4f72-bda5-d812f1f4b524"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae29f877-9723-4a6c-bf77-d5174ee2edd0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ccd2a504-611a-4895-8335-36297c3d3828"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17ec278e-b982-4b5b-9125-fafb50cf1788",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75045254-2b95-49fd-bab3-7b6b1777eecb"
            }
          }
        ]
      },
      {
        "id": "881689c5-0dc0-45f1-9ed0-bb22bf221599",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "355b33f2-e77f-400e-bb39-11d2c5f72f05",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9089b73-e829-4591-8c14-a4633513fdb5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e69de6a2-76da-4d75-bced-85243094f78e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "777f4e49-0365-415b-9836-9df9b4925125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36969c7a-7f1a-4906-a20b-c775d3f41e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f566117b-8ce3-425e-9b56-0cc283bce4a2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63faec1-2a36-4bfb-b869-b26624a84d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87b1c0d0-89fa-44e5-b682-54f4d19182dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f794b3-dea3-424e-b153-1539b364caf9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59506cfe-25a3-451e-b923-462b770e5c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b114513c-1acb-476e-af55-3329fe231eb9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "645855e5-8b55-4302-b8a4-b8b8bf1d49fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b00be81c-e8f6-4bf3-bbb0-d5f700e7ebc9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f44e1a-f6d3-41a2-b637-9a2587e82e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b0cf3e3-6dbd-46e2-ab73-7922cbfb1f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be9f75e-b574-4804-a1b9-108c20c5e22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fdb3549-e929-477b-9e10-742296e07169"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4e03162d-a2d4-4b17-a125-1c27ee54a586",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9635131c-af81-40bd-a1c9-7ae58b6a8287",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3e6c3d2-ac93-4c14-b1f9-0121e163e4b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5e567d0b-b9ab-473c-aba8-9bf71781a50e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "762016ad-597e-4321-99c4-b51a177af02e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e0e502aa-bf4c-4dd3-b190-95d6f6c21c1c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eff24fe2-4f7c-4a3b-b097-b338b8dd863b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d79bdb53-89fa-4571-a86c-ceafe0984156"
            }
          }
        ]
      },
      {
        "id": "e0022cbe-fe21-45a5-89ef-57e00b430d38",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "afb738fb-0b64-4694-aaea-85fce283896a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52210202-b008-402b-8b19-7ba4887cadb1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e48cf2e9-f8a0-4fb9-b269-0839820f4f59",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd3729e-0c4f-49d8-ade1-4d9f7578c3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "368360d9-6d7e-41a0-8ecd-b6b2c9dbeafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85105104-c05c-4ba1-858b-2ce5eb9bb264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a1ee901-d047-4e95-b06c-96b04ae8caa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8652bab1-15a4-4f14-b7b6-ea18b5c95fbb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb2a701-7f7b-4b23-94db-ee54a6fbedb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203dfee3-9848-4f7d-ae19-80037a2672e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0baecb1-bcff-4a40-bb77-8936da343258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57548e42-16ac-4137-a71e-188a54ca069f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa56883-6669-4823-9ab7-7f387489578d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab13292a-f9a0-4fd6-9a48-b1ca10a0573e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0efc95e6-c3c8-4088-a057-cdb465ea0ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3056ef84-582d-4a59-a1c5-e0da0fae3463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b68cb3f2-2dd2-4a62-befd-b8a1ac691e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366d0a51-144c-429b-bdd0-8eaec0302c0d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58cbff2-46bc-485d-a6ac-3ca5714db280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920d8226-7116-49c5-9513-8ff7d4e35f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f86d690-ac32-47cc-9703-469977d5a322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56e2d6c6-e6ae-4994-a1b4-e0e271b698be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da544b7-237b-427f-b4df-bc1e15850748",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e940fe33-31ee-48bc-856c-0bcaa48df5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d681093b-4383-4d67-96f9-828735e46e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec6390b-a8b0-4070-ac53-da65ca82d587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2248406-143b-4f11-bc10-4abc96a4053e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f76934-6227-4a44-a06c-cb508170e8e5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae61f89-1bf3-4ab9-b82c-7884fa2bee19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c06d1c-9637-42a7-b3c6-22f5ef3be30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d275ddb-d12a-415a-af4b-0b07a3da9359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5c0478c-8d9b-489b-ab6c-eaf57b143ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7ec807-6497-4dc4-a29c-b71208d2345c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dd108a-2da4-4435-9704-2fde762978f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d979cc90-24cb-41a7-a0b2-79a18a8d7650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd948cc1-3dfa-430d-84f3-cc3d98be0640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4cb5bc5-27cf-4e46-b819-996f761f3258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dee6ff-7c10-47d6-901b-03d3c4125f63",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599ba978-41db-49fa-8ca9-520b5380c2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e440387-dbf6-4e7b-9183-ffa5e95f304c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae47561-51b5-482e-b06f-7820c6d634ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96a66ed3-5712-4f92-a813-a6c1d93928dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a910d18-1e7c-496e-a9be-f4b6566b19e4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d811a8-7103-48ad-969f-bce3e0630f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f3540a6-cd64-497e-9c13-e9f3554cbfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31410a46-c0da-424c-8718-92e7f965360d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f08abd34-ccdb-4da1-9d0b-296723b4eb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd88950-202f-43ba-bc05-757f6f7a2537",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef07f74-794b-486c-bb68-06d9f003accf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2588bcb-bda7-4efb-b003-2999c4c713da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27524fe-6ab4-4b68-8451-20f39bbc5b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bed9f967-ccdb-48e9-b058-c2d31dbc2e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac338af-4b8c-45c5-8402-397ef18f5c2d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493673f0-3e68-4b45-92ac-30185e68de30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "929e9798-9fdd-45bf-a0da-537ada357e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe28667c-7e19-4aac-bbc7-0a732cae0491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a3743ed-989d-4a68-bd78-bb9fe9d16884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98904738-bc08-4c4c-9de5-eee9e4a6f05a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ca7149-9792-4afb-87d9-2bfcaa944949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be9ad08f-d746-4e11-b4fb-0acf4cdf2248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306f941b-0172-4417-87b3-0aaa9fed3218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a1b5550-dc46-4fea-b3ba-f866527b5b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992bea98-c8b0-4c35-a9c6-a879356ce312",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0ff840-ddb4-488d-a000-f582fc929571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af55a01d-b836-4b7b-a7fd-5bab44b22acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e27ad7-b097-4f7c-abdc-6c2745319b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e672bf15-4ca1-49fd-9a96-655533db851d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afd928b-5548-4e3c-a851-bd616a810f4a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b375568-3d54-4bac-9e26-e6240b9fec36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf8294e-1a33-4df4-8943-c09dc068814a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d1e4b5-f898-482f-8dd3-faeec1752ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ce87ffd-7df9-47a5-b30a-f135000c7541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8baacb9a-1ac2-4afb-a489-5317a76d8441",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d06ae5c-aa38-494b-ae0b-a030df73e116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0dc4f5-9b16-4e6a-8bb7-20e6fe85edca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cd92a1-7265-4922-a0d9-a91b39e507a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd6d2f94-aa1e-4c23-b221-ebf9d4fb38eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374e85e5-4b33-4534-89fd-ab9a1f3645a9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a878c7e-64df-4653-9f0e-d31a27118da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46aa145a-e04e-481a-ad94-241ffa71fafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d57fc5-85b5-4879-a57a-c82c65aab2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bdcf07f-4aa2-4bd9-96dd-fb3c9de0138b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87eb2cd3-c683-4055-8ba8-51fee91ccd80",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec15942-d24e-4d80-a7a4-ce2039af2ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1152c671-5da3-49ea-b124-a217d0147eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32057ac-701b-4852-aeea-ade2d8e44997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa3984a5-bdbe-45ab-9643-359c6a1fe55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030941aa-ff98-4825-88c4-b9d9ed18e9dc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fcf664-41b9-4588-9494-86be2edf7d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021f4a48-f049-4d5f-b2b4-d2a70d02fc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d4321b-9512-4cd2-98f6-d0962a654973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "df7f5aff-8470-4f6a-a128-f12beffe521e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13513926-a0c6-4442-a594-d027280c4185",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "072f2f28-c84f-4fa2-9d81-54c9f379490c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143fe040-2ec4-44e0-8da4-ce4626b98584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fa6fdf-6c2a-41af-8668-056c73c68168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d46c12e-d266-41f5-a542-7fd56391d68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f0c270-31dd-4e0c-a2f5-935636bff6b7",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a60b9a9-4e36-47de-b82e-22970992de30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43426763-8fc0-4c72-8e3a-1e759a168113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2eecd66-a549-46be-988a-a0ff89b29650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57dfce73-b6c3-48af-86f6-d174fcbcf9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb695346-ca63-4686-9a10-bf4472d1910c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1439dc1d-6665-421b-9e44-67b2b28b515d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef85ced-8d44-48d5-b3b6-6e07cc0b1c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32e51b8-8c41-4be3-b54f-fadc73348d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed4133d-8530-4c00-a862-34830f52715f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ba4254-f4b0-4847-b288-e66452e20231",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a4697c-c194-4c79-8f4a-10bf8178d720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0e6a19-80c9-4ba4-9cd2-4b86928792e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0281efe8-7c08-42c9-98f2-9aa6cad44977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "791e3a3f-ad60-49d0-a7fa-8ec9e462a5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b29618-f36e-4195-86ae-88b0583cd8cc",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfcd595-c75f-48a3-a0f4-eae868bf20df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c0e303-bdec-4884-bc99-9797c9b86cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9224425f-bfc2-496c-a9b7-f5aee177a002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8cdb36-a626-4deb-a0bb-7d2a245aea2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf0b28d-1566-4f83-88ba-8cceb3c89376",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5259e2f1-53a4-4483-9f13-8635a456e636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b58f96d-3c08-4eb4-b100-604b4aa478b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22262fa-8fad-4e0d-9566-bea8a0edc368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "39f8c2c9-cc9b-403a-89ec-ab53ec4ad900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97268ad-3740-42ec-ab4c-acb3c83c12ee",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af69c479-bd99-4ecb-be90-e1675d14a9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6df241-34e4-4cb6-9d78-ee0b926d4608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926f5de7-4798-4390-a114-6420e08a1aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4d034a-d81e-4826-a5a5-1009dc5de8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb49c28-f21e-470d-88d0-b03aad1ebe1e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4453caac-63f4-4d82-900b-9714892cf115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114bdb09-a48d-44f0-8f02-72d1fdb24a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bc478c-e999-4cd1-a44e-b76d37cf71a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8b74cdf-d98d-4ff5-9065-ef142599a240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d21b154-f6c9-4a70-a376-f54d744a9a93",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eee0105-945e-4044-ad48-4fee41de16cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c66fcc-09b1-4be8-a32a-e6b33d0fe519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2494ef0-705f-467d-bc0f-3e544d2e62e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "48030ef5-f0db-4e12-8ede-47b10955342a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fccf64-51cb-4aa7-ba91-de89960cb953",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bda2a9-b22e-4fb2-949a-0e186f6ae391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18beb998-62b6-44f4-bf89-7e8993161b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1aa6a7-ad19-4d83-9e69-f26d9dd5a350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "725677db-1847-4d32-b50b-57d7a9596b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4e49b5-4280-47df-86f3-120d8653bc4b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd124af-1e4c-4553-ae0d-05049a6bb9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c820b797-ace7-428f-8f9e-ed0de579f763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72735a49-b98a-41b8-a55c-218fa807633c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "077d36e5-dab3-4a76-860a-793242be6e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949f888e-de1b-4255-a5a7-95ab6c7b4c8c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad670ce4-5b2d-41e7-a573-80092ecf1a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ddc08b-b754-4aea-8d0d-13318b1b5865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25f6f7d-fdb5-43f8-85f5-f89ca6ff7382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8457f591-e89d-412a-af88-0194e61069c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0fe638-cf04-4621-9e6f-0daa3fc9b360",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c402c2c-b0a3-49c4-b5a1-4860201631db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f319ac67-e185-4246-bd91-68d402feadd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecd86f3-ed1e-45b6-86ff-28652c28169a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "87a52f3d-1d7a-4e77-947a-58e5cddf0956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c94bfb6-a45f-4022-abbf-1c964b5a48d6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9208f1-53fc-484a-88f5-be7941d7a080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4715065-2e0e-4851-b5e2-864a2bfe4435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dea551b-57b3-49a4-a08f-131e59e1613a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a359b8c5-4258-455f-ace9-93f5714afad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb35b6c-b40c-4071-a723-be5009b53c54",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db72ca29-3542-46ff-9b1f-86ed1542a6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e2a54c-3e81-46ef-977b-05108ca3da0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b2b3bd-b7d6-4d5f-9a79-4b9db6e982d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d559a30-5813-4f10-b219-ca5e97c15300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f06e46-7c96-49fd-98e3-0202e7b5be93",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe9794c-5719-4c13-ab07-a342fc0e1ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a235635-2d7b-4fe2-a925-651111c20617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c153d73f-45c6-4fba-9362-0d579697e419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a870ff28-7479-491a-845e-f403beccb1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c3bab4-8364-41d7-af6b-fb0948dcc050",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b76db70-a2b9-44a7-a98f-c7dd0e2ab940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37eb094d-47a7-4cff-9e8d-59a047433a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf92cf44-8e7b-46ea-aa9f-322801b178c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f95f5e05-f873-432b-bdfb-099612dfa291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0ccf6b-4b91-45f7-85aa-7a2cdfea5b42",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255b694e-5e46-4883-a1a7-850e08d4a53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a92bbd57-92ab-45ab-8452-0b8d70539df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69623aa-b622-4254-aa88-d90db8322417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f016dad8-91c9-4de3-82bb-0b4fd4a917e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fabb951-8e45-4202-8eb2-470b8ae7de4d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f2addd-0389-4cc0-8a2c-8ce71663a9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe419a53-e7c4-4790-ba0d-9aab017adb97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df767275-d75b-41a0-8163-f7595aefe0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da0c9cbd-14ea-4ed0-beec-cc668fe78ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67db51e4-6929-41c1-911a-b74e0f3ac911",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b0cd7d-4a69-43fc-82b5-c7cfe62a545a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2d9ac5-c1c3-4c5a-aa93-bf126b2c1c05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918de03d-2f38-4575-b146-c79fb878802c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d57c95e4-e1ed-4b4c-b863-ea87bd85e836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cd9a86-79dd-48c2-8cca-297241e13184",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33adaf12-6f37-4727-93ee-5ffdf8a6cc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b4111d-c2f2-4617-8eb2-a3ead7cdd3da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bdc987-bdeb-4f50-87d9-6f585a8edab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "db7bd6e6-7b08-467d-894d-e83f9fb0d214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4109669-08e3-4938-b3a1-3a93f91a5799",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188c27c7-bdbf-4220-9208-8f19d7e0eb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba64412-9195-45fc-85d4-9cbb9b9118bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed57c6c-5530-4655-a833-ad23a55c05ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9890e502-b4d4-4c8c-a1a5-912cb377aba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629d453a-40f3-4f8f-a2a4-e7c7892129ac",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a48faa-f2ad-44b6-8c5e-32ad09cbfe33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c896934-ba59-488e-bfe7-af25b02f541d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85c709d-b700-4679-bdc9-38b328fe2d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4554836e-8a5a-4be4-bb96-723f082c3fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dcbd349-55bf-43ee-92aa-4dd961c4b6cb",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb29cab2-5be0-4912-8069-4e0beaf622ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd2e976-6d88-48ab-87f0-2f9806270dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb0a8a3-d462-4dc6-8225-533334a03321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "554227cb-f94c-4f35-9235-44b9992aef51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d18778a-cc0d-4b17-b9b9-94d15e5c67b9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da46a333-d83c-413a-9717-30a5be7922b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a3b600-1247-46ef-9186-95d2d17eb3cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1deefbf3-37af-4e65-aacd-543d0a10c9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a324a18-df42-4878-be13-9f5383575e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f011e17-00db-4b2b-b893-d48512034751",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd94bd9c-a94c-49fa-bc6c-d534e58be1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a92d65b-1c65-455e-819f-90b544e99e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b964c9-3b85-4123-b9bd-98cf8a7e8d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "763eb9c5-2668-43fd-af4f-4baf0c66205f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140d7d23-1cf7-4e42-9038-2fae46bec0b7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feea93f5-f16b-4b4d-b3f0-969914c004ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fecff0-9b68-4d29-be6e-080e730cc1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1438d431-74fe-47f0-a750-810121cfe7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eceb0623-8597-4657-94f0-341318f9e4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c382ad3-fe26-4942-ac41-0b01e734c6d1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71018faa-a044-430f-8a39-c3ff7d1e61b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ea4e17c-c0b5-425f-b844-d1f930dff48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59426006-555b-453c-aa19-60bf8e41026e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c6eae8-ebf5-45dd-a619-55287b4c1e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edb6116-a99c-426e-97f8-59a4fc2e7e8d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf8ca5b-ce76-40c2-aa33-f675f9415bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b1bc07-0197-4bee-8c85-ce640624e877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e19389-8c5c-436d-8226-769300edd57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40e52516-c59b-4c49-bffc-8ac916c6d035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9431da-fe55-4a26-93b8-e9da30de7749",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dde396a-0783-409f-829a-d4edeecc70c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90540d85-496a-437f-91d8-13a86a40e2df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d70b1e-7e16-4525-9a4a-593db7211390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b872bef7-67b8-46dc-a381-a3e27cfc6d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af55595-615a-48b2-a16e-42636102fe3c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dbb159-4a2e-44a8-9f74-e60e6300badd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6f654d-d14c-4b47-b37a-1e743e72dd3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa34a9a1-a92c-410a-a27f-da955f77a33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef8e99c-b076-4a44-9580-27b3a7ccc21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb8f0ad-2fdb-4e33-b75a-750b09da7cff",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4525e519-b1a6-45fc-861e-d5b0c19550bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956d37fc-04e9-4b25-a433-ec993c39ccf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141cd108-5796-478f-b2ef-24fc28907412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee0e4f0-2aff-4945-9d19-030c36ffc37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a76ed3a-5def-4db4-9063-d5d4ee3c3489",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc87da5c-24cc-4726-95b4-8e07f9c7e950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0711f4-be7a-480d-9256-76de4b17cce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536cc471-3b33-4e48-b601-3142b3661e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1459bbe-4af5-4f85-bbd4-c2567b18514a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de7b2da-81f5-496b-a743-bc2fecb64666",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779210aa-db95-4c7e-a250-bce2d857aff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f395248c-cc4d-4291-a6a0-72900790e7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501ab17f-467c-457d-9dcb-9e9b7e805018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f371a856-ce55-4525-872f-29de1ff22904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057d99e4-5c6c-486b-b019-f1bf04c95455",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193fa6cd-5b1b-4402-9a89-e689123670c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a2e63d-bba6-475d-b4c1-11331aaeab4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93e57dd-8e66-4f24-9633-20e1cf225946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d42e39fc-0de4-4c2a-b9f2-fbd25884b803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77e3193-00f5-4125-9808-f83c80ffa90c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63968d3-f37b-451a-9c6f-b923fcbaeb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d8c932-c1aa-4259-b2a1-cb994824136b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea41d1b-712a-4dac-a1fe-d5db5b7d6421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1165e0f2-376c-4fa8-9db1-3ea0b2c2bcf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0445dc5c-8045-4e33-8f6c-6875a8c134f1",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bc6800-217e-4fe7-b930-127966ad8071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067550c5-bca0-4430-8a35-67fc0256a85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4f4e3a-1a6f-44a4-ad29-0259f0656cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7362e35c-3389-48f8-a2cc-b9a1d4bc25a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06a53cd-e23c-421c-a126-f156d7edc84e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3975462-cc06-4118-ac9e-ed7d6eec685d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b723f0-a4d6-4e90-828e-f8e49986ffe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c728337a-954f-4592-b060-6c0cfa164c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4f56b72c-13f9-4e7d-ab02-28763e3afe14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5297100d-d7fe-4580-a7bf-af5d4955a192",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5308ff0c-353a-4658-80b2-08823087f228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7a1d4a-3ffa-489a-935b-356279f718da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94eb5309-1f8d-4a13-ba15-be950e0cac26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e011df-fc98-4f20-8d56-d4d9c90361c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d051ef05-526c-49fd-b6a5-863690e3b7e2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cbe0f4-808a-4a66-8aed-215f90566f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32682c21-1660-4c0c-b2d8-ba768f300761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b10b4a-9b3e-4e4d-87f5-5b1c96a75868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a08bc0cb-e326-4a3f-9aa5-4eb2f9ef4acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d475d3b7-8889-44e6-a3d3-552c04f7182a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193898a5-9484-4208-be0b-bdb5d9d13a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4b5e83-5d3c-4fde-9c1c-4195d9f5379b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6910dac3-7e30-4cd2-a6d1-7a6c59b1aec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "caf05526-3fb7-460d-b401-16cdde4b39cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348ce9a8-09b7-4a29-9ac5-3bd75b443161",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9baf920-bd08-4714-b68b-815b37e04b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4aedf86-6e43-4bb3-8c4f-d0afa08d0684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e082cf-d9f2-4905-b608-fbd90e43fa5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6558a8d5-02e0-4245-8c2b-84ee80d167f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c00ebc-63ab-4dd9-b114-38402eb78cdb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf5fe7c-f181-439d-a647-b0af177c5e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd39bd58-ab17-4696-a989-c357bf7a9ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70e395b-c394-403c-96f9-fd60012a4c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "62843f21-cb86-437f-9d82-170c75a79235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd9c05f-4d9e-43ac-9bd8-8774ed3f32a4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951f22f4-ffca-4eea-a2e7-1a2c3ba722c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e47bb2-27c5-466a-8b5c-aff8f31eec0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3ef6e6-0091-4fee-b708-938ca01b6681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec07486-1713-44bb-b417-2cdec6d8cfff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc70991-373e-4527-903d-90adcea3e66f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c67d25-07bf-4711-a401-0d3d6e5f347c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f53fae-aab6-44fe-9a8e-eb7a1b4acb92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73aa25c1-fd86-41bc-a98f-6c4cdb59181a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "45d2b468-562f-4b9d-b42f-3552b457b519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d060400e-0b1e-46cc-9686-2d5b65438fde",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461c8451-0952-4798-a335-3706c9591835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94dd247a-e30a-434e-9486-7149a5c3cbc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4523e382-c3d8-4ff2-a8cf-1b6f43b7707d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d25f92db-f823-4235-b34b-504fa8c49156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685ec2a3-e1e9-474e-af3f-54e1020be4de",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29caad21-5134-421c-9756-5040e30108bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4839bab6-91a4-4ef4-9b76-a8c63f649722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0f088d-2d9f-4979-8193-e15844e8f5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a785179-c88a-4eae-82a9-5575efd9c57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43586fb-618e-415e-b489-570bd9342717",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc352b1-3553-47a3-aade-5a9e3e5d59e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa11287-cfca-46f1-aa1f-944aaa3ad6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff122ea-e0ad-4dba-b698-92eeb30c26e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2da7765-27f9-4ddd-bb85-3f006177888f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b664072c-2ac0-4264-8df9-0f76b4a48383",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf513ca-bb8e-412c-aa98-9ea0ab168675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7f980d2-dab4-4db1-b3cc-6c2c44c5a0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88576fc1-c03d-4146-b01d-ce2d8ce329fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd67df5-1f86-4a0c-b3e2-8b17bd6151a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a052a4-bc03-461f-8938-989860572939",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2115744f-bd38-4c64-be73-adad1ea9356a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c93ce77-d151-41bb-9d15-e74cb56348de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c121045-57d2-4a74-9c0b-dfb8fa4d1494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "05619a8d-8dc4-4bd6-bdfc-cab23d7100b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc70412-0b42-4ee6-93f2-0344eeed3482",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfeb4c31-32e6-4ae8-8e08-0c45ee65c062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e688057-d8e2-4bd2-9fea-be7b896c206d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e0de53-f834-45a5-ac59-c2cfb666be78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "34ca466d-a086-455c-9d79-fb516ca34eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4136620b-2a73-4218-9eb1-a9ccc7f61c40",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85168e9a-bbb2-463e-a463-5f11d63b8905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d463a84-c0f2-4bd0-95b9-7ad6ca621e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf1e14f-d398-4635-a71f-e88ed265d6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18cdb71a-2c33-4bbd-a4c9-67d806784088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b62ee1-943d-49d5-8719-a249b13a4fcc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88ec88e-d3ea-45da-aa4c-d3f1c70283e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0baf7110-383a-4cbe-b022-b350393286de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df29b91-5548-4195-85bf-2211fbb440a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "344875d0-1d56-4895-98ba-e8010a4ccc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4322048f-acd9-4984-b4f4-26807e28a95d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9297df9-865e-4afc-a983-d4f4394bfe93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a242fc33-7fc5-4fd6-ab93-32f105ff07cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217e51ee-4b57-4af6-b2a6-8537febf7900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "427e3f00-bc17-4f88-816d-2968917e5e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbf5da4-daa9-4797-a1ca-15d364d1464d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99190bd-b8bf-422e-8129-cd3e4162ee55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ede98a5-571d-42d7-9c8d-d560d12f902e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e5d924-038d-45d4-a3ce-b13266a4d747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19d8afa6-2be9-4a0c-817a-4430e4726aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70abdbac-a210-4549-9659-7607045c579a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bfe87e-1384-4f57-9bd2-dc2e1a16f83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3968239-e663-4d0e-81c1-8f62d72065ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e9a228-686c-49ed-9229-6d1159b95a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fab64b48-861a-4416-9cda-5eb9c6baece6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574e798f-0659-471e-b510-111cab76ea53",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd63e9d8-a4f9-4d34-beca-a4f9e7f28b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec6143a-c095-4ef7-92a1-533e9db16361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39ec981-2a55-452a-a4dc-d95549879391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1f5478-e287-42f1-9c73-f7a0820ea8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906d1e5f-3350-4620-8a41-bb675254c83e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b9f3d3-45c7-4d6a-bb7f-20366cf8ecd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747ba567-1246-493c-a1ef-9406720f4c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac9f810-1b71-4931-beed-958116e8212f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b30bb7-c4d1-423f-b8a6-1aa526296c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b69b2c0-25a4-4c3d-b08c-26727df84b4a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89d980d-464a-4849-bb45-8d4d04060dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca2167b-7a3e-4444-85c1-c6b207d17d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d4b4f6-d4e7-4a73-b4f1-c414fb3670d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7eeb5d4-c6fd-403b-94ef-635d781b162a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9f79e6-f005-423f-bb11-38ae402a2f97",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf345c72-d14d-4bd5-9c45-358e1fdae2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b605917a-f3a4-4219-bbea-7519fd68d41c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627adc5f-bb20-4700-96eb-d448cd1c8da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b49d97cf-39f1-4b46-ba45-87d94de7790b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cdc572-af15-4f38-a8ae-ca26bba23146",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5bc13a-116b-47d2-af9c-1e11ee00f8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273e2510-6c7d-4636-ad3d-ad4df33d20ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c6f09a-bf07-4abf-926e-da2e115d7dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89e374d5-f87f-40f6-9915-bf38f874635c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e4e5d3-e4ab-41b1-864a-dbbdecc9ff5d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ced182b-84cd-4b3b-bc7b-2826adfbd4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fc8ce4-7ffe-485c-8047-50d992646dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e015d52-7da5-484e-9cb7-693fd6524f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a44b74-448a-4207-bfad-d531fde2311f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a16affb-6aa0-440d-aa16-f0dc442aff6e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90dc493f-5e31-4418-9ea4-d61949b96519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b32c36d-5868-43a7-88b4-d14ed206a865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe06c956-b91c-4e6c-8d6e-7af72c0ddcef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "40dcee20-fd6d-43fd-961f-2f74fae3a6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189b7e89-f33e-4233-8fb1-0a027974fb7b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10fd559-8fb5-4f20-95e1-48d6942189df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6af7068-529f-47dc-a7d0-14cb26065d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343d59f3-f69f-4658-b82f-7a42de27fcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3827a770-8274-4f93-97c0-b8c3014c33d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1634d044-0ce8-4414-b0af-112ebc1c8b0e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccfcf76-110b-4fbe-bb4f-7c5a306dc42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1d58c5-df45-42e0-8f60-9db739110762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852bfd70-f46c-45f9-aa12-92604ebfe9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47cef06d-3341-4d58-89cc-488b1ec02db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1b0f1b-7fa9-4f21-b7f5-919cf91afcfd",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee59338-f70a-415f-a1ae-f40aeac5e246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e7e4cd-6988-4634-ace4-5a3ee2e61949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b878c6e-31eb-48d1-b297-2258c640651a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bfe11e9-49be-4099-b064-266c5fe35971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023589bf-ac21-4ba6-a1ec-d9fd62456ea2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e4409b-c82b-4b97-9e6d-4c8994db3c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdef8524-c25e-4b28-af33-5d374e3d434f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358d4e7e-33dd-430d-b77c-61c8be74b7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43a1d9bb-d748-43a5-9beb-9444272dc59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2f2b7c-e3d4-4243-8fff-e4ff35eec145",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21275b25-df84-4fc4-862a-d6ee4852961f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3dd3958-a77d-489e-843d-e20df3b04240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefcb657-2fc1-41d0-8e9f-fd8ccd59798f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "90a6f78d-bcc9-4fad-a4ef-9487f000b247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1283cd2e-a7aa-4cf4-867a-669254f36b57",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3123f6-98cd-4592-99d6-5488362bbe48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bae76c9-76c9-47a6-941e-938a3f0e239f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b476ed4-109e-42e7-9274-c2240e2d564e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "94597527-f07a-4ab7-9a01-e2dc01b517c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5ff838-0ac0-4397-b66b-f216484cd2cc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040f3360-761b-4d1d-8338-f6bbfe8ee915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b035775f-d6b7-4ebc-afd9-f98c00227ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2a92f7-1037-473f-9f18-439eda6c472f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "94007465-4ecc-4ac1-9c61-7b7444c6477f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6d67b2-0b6d-4b78-b1d5-9766aa3bf2e7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca5f46d-e8ea-4870-b534-c407578ebcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305c8e83-366f-4870-9c9a-5821e144e628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f78df36-49ed-485e-bc08-c1816d550eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca3efee-009d-4c40-b4c6-c2f419f052e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafe8a6e-5eea-4bb6-b711-9af159512844",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc4731e-abe5-4088-8f99-fc7d529f9743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716e39d3-d426-4b61-9d0f-053aa2eca47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8770aa6d-375d-4ede-a7d4-35c3f2d29e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3234e040-e719-44de-b418-ed719b4ba17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32271308-2fa6-45c5-849c-e651c118b75c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa555fe8-5ecc-472e-b71d-fb2670bc3a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c8853c-8451-4769-bae7-3db840bd1c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786c5f23-ca86-4940-895e-877bb5934374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "16648cf1-3877-4d90-902e-717d19039745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4879a94-cec5-42fd-aa46-4389b91f821a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046079c1-4daa-4e63-b50c-2ce54f3f9982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f2c40657-574d-4af2-976a-f2561a8bab91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d939c6-3aa2-4ca3-afe6-44662dce0650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e7891f5-818f-4f1f-980d-667099c72da0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cea9a7bf-ac39-4393-9896-3faa5fc9cfe3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7985dbe6-952f-4caf-88ed-023ba1814ab9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaba2d2b-b8d3-4555-b33c-df4c213b0d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce914232-acb3-423c-b553-979feebc2295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e39a4f-e822-433b-a44b-dbb99033e1ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2db6fd2-6d09-4902-b910-8c34a351f6ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcff29ba-9fa2-433c-b835-97ba513b94d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3eb50966-5e8b-4c75-9b77-0f44c1587d28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0370705-08c2-4441-95b8-52def1a7effd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "118607a2-cc33-4dc2-87ef-61debb05b21c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c2085c7e-8739-4bf8-b51c-f9250cc3b643",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fcadeb53-4a13-47d2-b197-056396a7fe5c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6d7677c-a2d8-4662-978d-5456c8b0d802",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dd72e2c6-c41e-47b8-b281-df61fac6d44e"
                }
              }
            ]
          },
          {
            "id": "351dad67-dca5-461f-a287-5e5e50ba0d7e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d3384742-79e2-45be-bc19-911f8e088037",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "9c0b15ca-cab6-4940-81fe-b561fe3b8e6a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1d0022-3955-49f1-80ca-496b14d4cc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "af902d7d-040a-44bc-abe7-29dbe1cef702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db26c61c-ffc9-46a8-ab9a-4c65c6379cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78892e2-410c-4bc8-bb44-f0c8027d707a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "040cb212-0357-43fc-8c5d-edaa708e69d4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95636289-1b14-485d-af1e-ab6e90030a35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "143f25d6-6439-4eb0-9e28-379011cec3e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfa6081c-82fa-4f5f-a168-e2f0f240a259",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "12fabf15-72b1-42f7-b537-61dc8593f0ab"
                    }
                  }
                ]
              },
              {
                "id": "a1951e27-306c-4a53-b57c-4eb74d82e2f1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b066ae0-5e8e-4a56-98da-a4514d1f4c41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "835ed51b-c3b3-4d03-acca-49e1428c538a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91f6e0ea-cbaf-4009-a47e-3776a5e33135",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b299cfca-c1df-4c63-9572-d14c78534352"
                    }
                  }
                ]
              },
              {
                "id": "66357585-e01f-4f34-baa6-eff2d1f014c7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b50974af-149c-4972-87ad-12f736ec8c07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d637a227-56a5-4abf-84ab-485c2b44ff1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f33f73c-c418-4278-a1fc-f19f55760926",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "33399a83-8b4e-4659-bc47-2f6f0f31deea"
                    }
                  }
                ]
              },
              {
                "id": "93748e2c-cff2-4bab-9eff-b3c3c804ac18",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc48149c-bafd-4819-a5a5-a48ab8643be9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "acf2d122-0371-4efc-87ac-a1b80dd2a1da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f0dd663-17c7-473f-80b5-3df7a088ca60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9b03eb81-c3e8-44db-944f-bfbd6d4dcd08"
                    }
                  }
                ]
              },
              {
                "id": "79658690-e6b0-4e27-9f26-a6b03031f1e6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63d242a1-c596-4554-9658-5a078e5d2ffe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a8b0470-1ef6-40a5-bde1-43c129ae4c10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c0f1c6d-8b43-45d3-9d98-7de4387ecd27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ee3d49be-6441-4ac3-b6ae-b319dc83fff5"
                    }
                  }
                ]
              },
              {
                "id": "500f8e37-e44d-4d5c-b781-3161512f61ec",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ade2824e-f6f1-4506-92a0-c6f7d85a542f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d69d4ee-ac7b-4d0f-b2ab-7c933af44c3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8c6ee3a-5234-49de-b1f0-b4b2b44644bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2f693e99-b8fd-4bf8-8905-7ed389d81222"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ba4bff8c-1bfa-48d5-a477-113c8af86b87",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "723ada71-6cc8-4053-8c92-dd344f482452"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1bef7629-922c-41f4-a975-ed26155f7e60",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8cdb0fc1-25bf-47c9-896b-b1c259765cce"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ec1b32c-7f9b-46c8-b778-3ed14cc483b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "29a28877-25eb-4349-8fd4-3c080fbac0fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4156411c-9bcb-48dd-b93a-d8c81935ba99",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "683fa2fa-ba91-41fc-9c46-f4de75d722e2"
            }
          }
        ]
      },
      {
        "id": "fa681c09-fa96-4dbb-b790-eca4efdd85f9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "79740d9f-aea4-49ba-800e-b757231c2cf5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a406cae-e97a-4141-9564-c76512207b1e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9bbf5bcc-1361-4a46-87d8-66dcae5e30aa",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fadc02-5a56-4e84-9bb1-9e30e7e2cbc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edfda4b-199b-4778-af78-00970464af56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92891f3-27cc-4af0-9c53-3ff26dbb5a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "553abf16-bc49-4c23-b527-8668ba7dc59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddfd91a-6465-42a8-9d92-745c1bc8bd91",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4dd4a6c-a3f5-44a7-8d69-0d80fc81a19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce570a3c-9c4b-4b91-8aaa-c81c95965e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a16665-d71c-472d-8cea-6005b4832b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb085b1e-33d9-4940-baca-9398fc2e0964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa55ef21-d97b-4f66-b336-a8fff4b601db",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2d832f-f8c1-4ea2-8812-b93bb035a6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0e0011-0068-41ab-9690-748445fb953a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcacf5fe-63d9-4f67-bb1e-411ac68594ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9674dad-df9a-4e50-8b46-9cff77dd1e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac34bee4-9a45-4c75-a10f-aee0c1458d84",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a96a97b-ebba-4155-a065-0c10f18275e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d524e8-8a91-46ac-a6f4-0f6bcbed724f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f5f148-27dc-4421-a0e2-de2e90878d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8974ef67-b663-4f6d-bd14-9a6a8562dc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1899fa3-5f04-43a9-b037-bd60068b8768",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2c725a-3d1f-4316-b87d-558cc82488d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea47522-6080-455b-9ffb-028d5b69827c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51881fe-7a0b-4236-bb41-c55ebd0fff70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6881f3f2-b971-4254-aa43-3aec25aad384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea86280-32af-43fd-b31c-2b857945cae3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdb7bba-4d13-4a1b-b303-b21ca2aec267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb9bf23-f654-4cc8-b130-1f109e543187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f11931-bed6-437f-b60e-ece05267112c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab6b55f-8435-49e1-8748-d71ba95e044a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8870bcf7-0f49-45ca-9bb4-d65651634e57",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2bfea5-7fde-436d-ae93-831d052f39cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21a78fe-c11b-4632-affb-76997d002f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5941e834-0dcf-412c-bd65-e6a28482d792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "66179429-d0e4-45d6-81f9-a3ef1a1830cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c9e5f6-b92d-4475-a93f-1026eda0f41a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a77168-b828-4ad6-813c-8e4ece75a613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83f24b6-b0a2-43c9-8072-19ceab21e50e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2492e38-621c-46f6-a6c9-9e2140d9840f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b600d5e-1abf-4fdc-b07c-68c41e51eb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108527af-05fc-403f-88fb-38660e52a242",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166ac4ee-5f29-4ca0-9e11-6e66f532c210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a401c516-2086-4af0-b529-1007bb5e7af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a699c766-8398-4ac4-a53f-b5a09fd8c189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a4733a-a4ef-4c06-949b-630477342410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e661148-436c-47c9-ac0d-07229e8f7cc4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38df5bf5-52af-4c53-ab6a-1ae31a0e32c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1450117-3e63-4517-853c-d97df4f60a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21664468-52e7-4489-b3a5-11f990fa3720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "906af22f-38fe-4dd1-897a-dd5a168de12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e435127b-8d48-4725-bb65-751b955e531a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35345fcd-8e27-4b6a-81b0-0f9ae439a984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22383415-fa1a-4333-8aac-67e25bbd234b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2c738f-5c65-4070-a603-e44c7d1537c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e41abf9c-74df-4258-95bd-89fe7624a4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c444ed-bb38-4bd4-bbb2-e6ae8e1beaad",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b030b2c-6d1b-435c-9c41-aca8f4643488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12dc6d35-bbb4-4279-baa0-3a7f375c9bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3add8a79-b3c2-4ef4-a6c6-0f2d9ca067c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c15df87f-520a-44ab-b027-9376f130264c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452d471d-7daf-48d1-a11c-6b673d4e1a10",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adebe5c-c700-4b42-ab5f-db6036724182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811e8300-9b10-475e-89be-6c7972222fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32166001-7ae4-40fa-bd82-6b89a86dd332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8369fa-6932-47e4-a71c-ed2d08325315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f039702e-5d7f-4736-a1a9-09e2fca99e2d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb1bb83-55a5-43a1-b46d-b6578749f1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4930046c-2d14-4027-bc2c-8b10b73e2389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89347e23-fb5e-4810-9e79-6456c11fe735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "60991de9-3cba-4f16-9ca5-fdecdb2061a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad090fc8-a51c-4bb9-8b6a-3e93239257d9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72645dc-f482-4ae8-96e8-377ade9d354a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b7eca1-ae29-4920-bb5b-fdf4500bcf87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571c540b-dabb-4734-b7db-fbcba57a6c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "92d404bf-8eef-4170-97cd-ea25fb840b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef08a43-961d-4791-a575-4e19e4357692",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4c6a98-1f2e-49a1-be26-b3068da46f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "917aa6ff-8d9b-4d51-b746-a33ed05e2c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e37b08-1c92-4687-94d4-f727091c128e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "812df1eb-e0ae-4e6b-912b-7d779662efa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe59cd4-675f-4952-93df-11ed76807ad1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ffbf4d-d0bc-4bf9-a8d2-b11fae31fe30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a389e442-9acf-4db4-8d7b-f22c0c6de933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94543cdc-3381-41d6-9d9c-391f9c8148fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7821cd2e-52a1-449d-8eae-c26dddc4285d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237bed9c-5f7f-4156-8416-a13437765388",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890dc267-d516-4ae2-ab36-783d89703dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914145ee-4e14-4010-92c6-5b817496afb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2b113a-3a6f-406e-af5f-e0ae16c79f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f090613-3a4c-40d7-b6f5-4a3bef2958dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eedd622-f1e1-475d-8431-08f825ef213f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8997aeec-5dc8-4b1a-a0b5-d2c7ee90f4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "937ad61e-2d2a-40da-a456-ae69a59a445c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc84a5e-a417-4ffc-b65e-98876bf0377e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef07b98-21e5-4b2b-bee2-b7f7b4944629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663ed069-b7e7-471d-8515-7d50683dabe7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3de753-b4aa-4acc-a144-945a3fe575fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01793b9c-e774-4825-b98f-f88803696df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb441e8a-f36e-4485-bf36-5ac92c6ab8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54f05b04-ea14-4634-bb6e-452cecad1a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d54a16-007e-4183-b0a4-770d26d6da97",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad33b7e-594a-4086-997b-d941ded62b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9778817e-8686-40fc-b918-d57ba755b0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ced0e84-cfc9-4d0b-ab90-0c33489881b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f54615-38a8-4cf2-ab3b-19031c5a3b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d35bb85-313d-42b9-ac91-588e72e6f11d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7beb7a75-e423-42ef-81f0-eb6717516540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e60eb01e-8ee0-49ec-b27a-703992ed9ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3462d3cb-1ece-48a5-897f-40463e50974e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1349749-df43-458a-9f1c-ce3c63804b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de11fb23-f17f-4f57-b361-f97262c7fa41",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746b2d6f-b9dc-40c9-b8da-4cfea2e78dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54779d33-91a3-4985-8ce6-91c79cf08846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8c9815-72c8-46d8-8777-19964c532e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24d0a17a-dd38-46d0-b688-36ca3d9af587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b07404d-d560-405a-a2a9-086cbbd2adda",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b329596a-7a4b-4b4f-a9bc-8ad491834e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7694030-08aa-4e09-855e-5f7d3e6dab39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d0d644-e103-43a7-99f8-ba049075ae33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f4f6557-bffa-4892-8465-3d1369d40dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9aaa3a0-339d-40c5-ac68-cc76d4c0abb0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de727d54-9fa8-4bae-b144-3b9de4982de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1307be1d-2216-443e-bf0f-5b0e771d48bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe718b10-c2f7-46fa-980e-4712367e1bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bea1572e-cac1-42bf-86bf-b2ff026ad80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b45e729-90b2-4e25-af3e-fd998237d8f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c65d174-5b86-4627-b8b4-c0b90c2254d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735fc1ee-667f-4375-92c1-14f62cab55e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421ba470-ec48-4b05-ab12-67abe29b0426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea669f3e-ce65-4cc1-83be-a5a77f576c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5744c176-eb02-43ac-b028-d55737ac9dc6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1726715-d881-4306-9113-17bdd7eb0ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1524c00f-f33d-41b2-b9cc-9467b6bc0db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdde50c8-7705-46d6-a2d3-487a29c06eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24e215c0-8552-432f-afda-7a652b8336de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5607fdd-072b-4fe3-a9e1-6f6fd7845f5e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9729f91d-d86d-400d-8fce-bb06a56b4272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee7ae7e-0bc3-47eb-a774-521a9ae4860d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbfd386-4d87-4038-b5de-63a7e6cedc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "157d3a70-2f51-4c46-af76-c4dc49fd17fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bcbc4a-1cb6-41cb-a709-82b7b53527dc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae7918d-04df-47d4-97f5-a50fef1ef2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612ab200-4e73-491c-9e9d-b01c5b629d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f196f431-d63c-4151-89d3-5131245f2c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07185f27-ea14-42aa-a0dd-e1efc465aa55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fcc712c-b125-4652-980d-9a483b2ce1a5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6bf0aa-703e-45d6-8923-278150f513c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d10d977-3b9b-4190-923f-1760354758f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85265d6-109e-4210-9278-70d156e2ad45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "184880c5-550d-448e-be80-606072f23335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aadd82e-ded9-4a95-a150-6d9d078705af",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d911ffa-1754-4149-b256-f3e4ca6c7059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078b6d04-e6da-4549-ab93-c80f7d0309cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8607d6-f0d6-4cfa-a894-0596cd720c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1919ab12-179c-4093-bfd9-24195735c4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51e6a06-4b19-4466-a868-36d9e3867a72",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b16d7fc-4759-4bbf-a0d3-3338d01705a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e8c6db1-7fc3-4235-b6a9-e24665fc25a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56ccea4-34cf-4ce5-ac16-570d269e9df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6117b9b7-9f80-444e-ab6e-a1193b767b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540d7150-11b3-4578-8ae4-abaea3d03e38",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430f198f-16da-4916-b081-da1005260e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a8442a9-ead4-46d5-b8a3-857f335a9f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8da1740-777b-4fd5-b656-0fb048293ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "429b118a-46b0-46ca-9754-b3a4accfc279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16385017-eeaa-46f8-85f9-381bfd9f0880",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a01cc6c-989c-4164-ab05-64f1f0ca5001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d489f2f4-428f-41dd-a610-c70276812c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a1849f-b6b3-4326-95ad-2a78154a9526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b95e05fb-fff7-4761-885c-22b39faf3b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad32636-18e9-4565-b1b9-28a5b67ea5c6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668b5e52-f073-47ba-a1d9-c300200dd9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "780252a9-7e5d-4839-949b-42211ebbf229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e23734a-73ff-431a-9574-174b8f344b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dac90e5-c95d-4104-ba78-5bba0427ab2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e9f546-f9d9-4127-949a-9983afe2c6fc",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d207d149-53f7-4572-926a-de77b9de6975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79dc3126-8dbc-4c1a-8193-1adbaaccd398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714f561d-eac8-47dc-9486-3df56dcaff40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79baed77-3b10-4088-a1dc-8e2a07c71fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8d2c98-15e8-4003-9751-805c6ff0259e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968dd1b0-d874-443f-b17b-50bd337189e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2acb3f94-b429-4d8d-8713-8e7408ea6fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4876aa09-89db-49af-8818-467c0f5a68cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56e4fb24-4bc7-4b46-acd0-4828b12b9b55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "66800a91-b6fa-4b2f-854f-efbe55d91505",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "651afd55-9340-4e25-91f2-90cf314f3492",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b20c72-8701-444f-b472-8c2596dd6a44",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec41bbe-577b-47bc-8507-dc77cd2dcf56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ba3189-90b5-4ecd-975f-0a961fc0502a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b817d9f-70ff-4064-8896-107cbffad741"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad766823-ec5a-409a-a147-31f70450f96e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db958732-dac1-4928-bf35-58ed15774792"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f2fc91e-1a38-4af3-8dab-cbe9098e136e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7b642e0-acc3-402d-895b-74ffaec516db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fbd41c68-b35d-4d59-8ca0-c36cfdbdad58",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "72b92448-18ae-470a-8f89-72526e69cf0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d719dd5-e0e1-44aa-bffb-79b9f9b3b11c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20513054-6ba1-42d8-b807-90dbfc71dd2f"
            }
          }
        ]
      },
      {
        "id": "7eec763f-c3ff-4a76-b549-372f8996ef93",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5c31f6a3-3a2e-4811-805e-b1166c94e75d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31898c91-a56a-4694-920a-c71aa2ea4345",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "83533b8a-41e8-449d-83d6-08226add902d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e46d98-0647-47ab-97b5-cc2370842c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cfd8ac2-5ff3-4b84-8528-82095927aaf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bda6e7d-3262-4b39-8f9d-4a0d02eddc4c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612f9b37-2887-44b7-a3cb-f22f0ce75b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b0506a-8b17-45e4-bb61-f7e9a165105c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d0fc4a-f78f-48c1-b308-4b2871922b32",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d946399-0d0f-4643-8f20-29c94c7651b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c570b25c-ccff-4785-9fd9-7bcef313c440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9938acba-c05a-405e-9344-9527d2f97def",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed56784f-4c09-40be-b909-7badf86bd529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d157a77-598d-4bb1-bf5e-1aaa329a910b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a49776f-ab99-4176-bccb-e3699433af42",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dea6316-d15c-4971-b19b-03f4622d684c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb43b7b8-0570-4b72-9089-4fadc827cd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b96c6b-1c60-4abc-9f33-69f077cdc8fa",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f694a85-f15f-4608-b4cf-01e44ac65f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1236e226-42fa-4701-992e-a777901e7986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03458eb-39a0-4857-b975-d2b17c8353ac",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a75598-b3d3-470c-ba4f-5f6043e122af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537aac53-7616-4ccb-898b-e465e12a709b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacb864c-5ac2-4ae3-9d5a-ed833a5d818c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089e5d4f-a715-454b-957e-3d131c2580a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3704fb9a-8d96-4448-bb58-e5be93a3c547",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8444da28-ad70-4694-a7ed-e63c22e01f66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76fe136e-8d95-4f0b-a0bf-7a20c5b2c9e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0597e102-19e8-4b09-bb23-cdb32318dbbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6ab4f6-7666-48de-85eb-8aadff07795e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97fd28b-1d43-49a2-a915-365c7e64b439",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f88ad09-95d7-4daa-aec1-e30c8643b57f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e89559e-fef5-4aba-93cc-4091162e5ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d82bcc5-abb4-49cd-b704-39e6ad9432f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca388b75-4e87-458a-8a5f-ff7f353c7c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3165dae-69b9-44a5-b844-f76729b6c0de",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7624ad18-5625-4f69-b8e4-e1e631363cb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8b4395c-d84a-409b-b1df-9d1b21f161fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "385ada8f-9d00-4b17-9695-3d265c635197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2de5ed-743f-48a1-b046-6abd2dbf30a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2050b09d-e920-4478-9e43-fc6e87e21818",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c1e813-64e2-4d8c-97b6-0b6a20f852aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65e33b8-a468-4b13-8110-584ed991c91f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f5538b-9b63-45ec-97d5-c946791da6f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3c5f85a-7e6d-4051-81fc-fda5ac00da73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdc2ef2-d2ec-4a1a-9ada-6eeaab830d41",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ca9f17-c49f-45a6-9d3e-4fb92cbba315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39e929a-b06b-432d-b44d-6fce2444424d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0b6064-87e6-48a8-86bd-63e5f212b613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd9399b-8261-4ebf-a97a-f8a835dd0446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da06f9e0-221b-43d9-a6aa-d6d22b29f7af",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f0727f-f22e-4427-8ed2-1b6e8ec18cb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13c5a224-f4a0-4c77-872e-b9adf36e441d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168b802e-be74-40c7-a131-82f3e37b9f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86835acd-f5f0-403f-915f-f401df7a02f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a445c042-4841-47d2-b501-78d4d3e7538a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042bcb21-cbc5-4c37-b02e-d672bbce4bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e8f957d-0726-4e6e-8fa7-502a3b460768"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a04497-785a-4e30-bf7e-f08e6597c154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99279fc-2c2f-4c11-bcb3-fbcf1cdca183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a6111e-9546-4d6b-8c53-abde64c7901c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11cb4e7-5dfc-4f65-bdb3-1c19883b85af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc07cce7-16a0-4897-89b6-4f1cef4d6e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3597068-1ecb-40f9-8e14-0b6d057f60bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7442bd32-7c69-4738-ac47-15a556ec6707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30aa60c5-8117-465c-a32d-641a66b19ddd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a4b7cd-990f-406d-856d-64ad2c16ae6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "975615fd-a2e5-400d-bbc9-5cf2813256fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "572c00fd-cd26-4cb1-80ce-c18ac153112a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3471e0-c4e2-4741-b366-c03b850173a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f71cf52-c05c-4ba8-b902-2c781829b76c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab09728f-456e-4931-8d26-40ac15f769b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59758dcc-c241-41b4-97b5-a8498af7fc7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a6c4b9-4e5f-491e-bca0-95b2b3093087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aeb21df-4500-4619-88e1-5fd02957e4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16ddfff-3e31-4d33-b703-b4a308b09902",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad4a296-544d-4724-9fea-7e3c0f3e6bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ef7fde-dc35-4903-8cde-7379d788407f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24aea82-5f18-4498-9db6-5d04fc74d300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b2167a-eaaf-4126-837e-4b6a39de7688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c269c0e5-601c-4bd1-84f4-34b7f2ebc8b1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e23a93-7f09-497f-b55a-03e33245bf93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ef03e7-3fbe-4780-9646-cc6cebd510c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd47ac0f-1728-4253-8733-34e1a8309165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61ddf7a-eb55-4cf5-aa10-25500af67c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bd5375-201a-49ab-88d4-d26df5d0f9a0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21120bfe-507f-48f7-ba42-edeb7637b2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4806735a-afe4-4a4c-a7ed-d3c9f5b5887a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d600685d-1bfc-47ec-af26-219f60e708e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7a5cd8-d588-4dc3-8b08-e4057f8b934e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b52367-aa06-4aef-8933-277f98e70c84",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e10a56c-33dd-4050-98af-91b2fdf5b6ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0cbd09d-6fe4-4054-a5da-aec710bfa194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa43249c-f683-4240-a71c-55d70571a8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c3884b-bcee-4918-bd3c-6b22d60cda94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18668971-63c6-47e9-8584-68883b4dd212",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0175f417-287f-462c-ac49-2f3edd0ce35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcfe49f7-eaef-45df-bb78-4f4de162dd9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173249bb-e200-4b51-bd4f-3972d1c5406d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "540d6db6-e778-4c3e-83d7-f9b78b164bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c224664-c68e-4a1e-8711-bf99374030b6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342a1a70-a824-4875-85f7-877a96ca642e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380c7cf3-9ab4-46d3-b431-bb6727694a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "269de2b0-6346-418e-a1d5-b5c4083f6b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb161e52-7bf8-4001-aafa-cc1e7e4dfce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab048435-aac2-4af0-bae1-154bc661aecc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2460e8-6d1e-4cab-ae08-2007e75f000d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0cf07fc-4424-4787-aee4-dc4b1ddf7842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adb431e-cdb7-4036-9752-43089bdc6b66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabc5287-327a-4823-b88f-d33fb26d4744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd187b0-b2ed-478a-834f-c83b9430209a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d079bf7-8752-45c8-aab9-48ebf0bc727b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "112bdd7d-c97d-4638-aa92-0725871a8bd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b90d345-e710-43b6-9c87-10ffaa809086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b99f996-45fd-49cb-8732-ed3a49e0b24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8d9e5c-87e5-4283-8904-6bc251b6926b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22bf94fa-07e6-4a9e-b228-696abf87dc9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43ac5b65-9682-40ac-925a-80bea6d758da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfbbfcf-5a2c-4e07-9018-cea167aa176f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238f5e8d-dbe5-48e5-95f9-e256d61307bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfd44af-2cb8-47db-adbe-06757fe4dad6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8328e16-9fe8-4b60-a518-7137974e8f64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "986187e2-0a57-4b7a-94f9-1105e4c563b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ac5936-0a9f-4ad1-84c2-5064ed67ed04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1a82f4-6b59-42b1-a4bb-a1d83d3bcec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a7fece-544f-4c5e-aa20-dfeb1098814e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea406a0-2475-4cf4-9ac8-070b137aaafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d86dde0-b6a0-4440-8407-20d366bc66eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "376a9b5d-179f-4ced-a038-fc854d10c0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18aea986-01e6-4c8b-99ca-4ba8c4a927f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0411e234-b6e3-4e92-acb8-4e13329a3438",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044496b6-de1e-4f01-82fe-f2b00b8f36e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9969cb7b-c2b7-4443-ba4d-889a20848f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc62ec6-869a-4ccc-a589-2bb3558ae79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b7eb51-e949-4f41-bbf5-08d390304d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b9d982-1eed-4428-8e44-2230e7510766",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6074cd-d45f-4fc2-affb-707f969945dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e02b9771-bc88-4ca2-b8a1-dc584327cc00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff88147f-6254-4e70-9c2d-dc91025759b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d942c0a0-cb47-4a55-9d8c-f0c1a92bf7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d46f337-2360-4d3f-ad3e-c762122221a5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cef4781-c401-4c35-a0f9-90853bcc9fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2d5d99b-59a2-4f84-9e1e-69b503cc5d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5d447e-066d-4c49-bd2a-efb02ae91b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9451f35b-0c98-4cab-a3a4-8c8631d7b6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836f816f-f876-480d-abc7-c4a36ea583fa",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b988ed57-8b8c-4f73-b36c-763af59dabe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "083c433f-1a06-43a5-84ee-fa07fa64dcae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19edd0fb-0656-407f-8be6-348578e2c0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f49f5ed-4f45-4fbb-8680-ae4e7250f1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac9c703-2c5a-4ba0-b97e-e58d689ead99",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5610c434-a9b7-4804-b5a4-069adec57710",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd612ca3-d6ce-4ae5-b828-06cf9ebb5fcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a026fb16-db52-4a97-8072-557b771cf6b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e9af489-58e5-49c8-ae16-e1a5e08e13e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c1c302-1946-46a2-b7e8-c6641be07a4b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8549753b-a1aa-497e-b483-a66a55d3333c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b8c5d7d-c412-45a1-928e-c0588215be0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3bc5c2-afcc-49e7-85f4-fec7fac6fbeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e930c37-7287-4fa7-8e14-887cf89dce86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e008eb9-7c6e-4d3a-8cd9-3fc7e44e2dd0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932c52d7-aad6-400e-a55e-9dc75e7cf5b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f54020c-3b79-48f0-a1fa-9e6856ffbd16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c814b1-0998-464c-b9a2-87a5d76858d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0477644e-8329-45eb-a564-5698dd1b7bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0152a416-796a-40ba-8298-47b29eb4706f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba89536-2399-4a4e-990b-41af293fc55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c0b381-8902-4de8-876f-70792ae6518d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b18efb-1e13-4309-88fa-1977475d818e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24023361-499e-43ce-a8a3-2a33aa6faeb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e106837-c12b-411c-970c-6baafd401883",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5bd8f8-625e-428a-b28c-e44655ef22e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a54dd3c-2e60-4c43-9a10-16deff3c4d12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62923715-42cf-4cfe-845a-158f4616f1ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88f1734-7690-4d04-a32f-43ad58b69392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa18ea0b-85b9-42df-9c30-6c0d1349c6e1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45aaaf31-01f2-4425-b5b2-56d3ef647b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d81552ae-6ac9-4551-9628-ac7cf49d221b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202014b6-4c14-45fd-91ce-9912bd414dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ee484f-c830-495f-8330-fcf021c347c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8e891e-ef88-4705-b76b-ec74224f517d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae838208-ee0c-48f4-b764-f25775628ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0b0c59-ad14-4a9a-93aa-d2b09fc494ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a93b27-2bc4-453f-b2d2-5671e613347d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c286912-f721-4b5b-9b9d-9a8f21a37df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f879bb4-e178-41e0-bab3-82fd60467c99",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb03bd6-c83d-42ec-8e34-035634f0ebc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d260b4b-d299-4d57-846d-25eb87733dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86c85b8-fe38-4593-98fd-f9fac9a443a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c9388b0-556c-4eb4-a44b-5af49a50384d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09662da6-f32c-4064-9eff-78609890d867",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2361035-d0f3-4ca7-901a-aae4d746526c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a79800-2918-47d9-bfd1-e6f16265b3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57533161-5fd1-4711-af94-b0003433f926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e4e541-684f-4a72-81eb-814ca5415cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2500eefb-07c5-45fe-89a7-42c21d812442",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5f78a0-0b77-4cdd-b52f-7b2998258d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782d65d1-916b-4d04-9a1f-893d9a4ae251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4055ca2b-1c4f-4e24-b244-e2b360aeae55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73719505-90e5-4356-bec1-e11ff95f70a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c5db47-7f3d-46df-adf2-4f99b10bdb40",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8cacb7-d87c-4872-a527-dcbb093a300e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3097c32-f12e-4498-aafa-04d4d0977553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce8486f-43fe-4561-af07-cef3e3189fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9de774c-a590-46ee-8aa6-6af4116d2885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633e9729-e52f-47f9-bcd8-74a9ff96f739",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df582f0-09ed-49da-86b0-503e7a03615e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5f2e85-6fa5-42b5-91e4-c0e36e62b21c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdb7106-b4f9-48be-905e-ddc70749825c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0120568e-de59-43e5-a5e3-63c77805823c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad97925-5595-4774-b1b5-572a5d7a0de6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb0b9a6-d3e2-41d7-95c3-156b86adfdf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2196fc-568e-4850-ae3a-0a4c1650231c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab28de6-6bf2-486c-b280-6abdfd4b1d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908d2364-30f8-4bb2-9ea6-d278f9b7017f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a777e7bb-5ec7-4277-ad2f-958ef3b9567b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5856e39-9a43-4ece-87ab-1c22909293b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531a604c-a664-4849-9adb-24a2ecf49c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba2351d-5db7-4ab3-a0db-5ab5031342a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7348ab13-2edb-4f98-8dac-b9ccd7dc8445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241b9db5-2dd6-4e1e-bc45-60f2b006eb09",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6688b32-6a23-4160-a866-96b81d39ed84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad81689-bb5d-442f-800c-1fda23f33c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1203d2-b0e7-40b8-90cc-d60e119e4d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ccdb4d-5cad-4f11-9162-7cdc244ccfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69242b57-0fae-4429-9909-48703f5d6f2d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92abb2b8-a6d6-45e5-b9dc-b89e1b5677de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c026638e-beb0-4232-bd09-89f8fb5e555a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4adc0b-a4d0-4979-a4c2-6cd84ee4808b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44afb8cd-28ec-4f33-9943-0005a06481e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99be219d-8e88-4c8c-b3b5-2011a6445bf2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4145ed1d-16fb-4273-9010-d071740ad457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c366e5-45ba-4678-b47a-6d3eb50cbe51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33deed4c-2998-4f3d-a28d-63da5d897c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067082fd-c46c-4ea2-a2c7-0733e45422af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5624980-7ee7-471a-bc95-092fcae52092",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b99b801-1a89-4f17-87d1-3d7ee4bdb599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787c8a2e-236c-4a25-a888-ff7bf1db5e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "319c5097-a3b0-459c-82f2-931db0209341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187d2b04-4831-4a6e-8733-8d5887f767ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbd36f0-f80e-4f67-bd84-1aab5caa25c0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b61516-1934-48e3-81e5-0b876112df14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d0d8f4-a345-44d2-a9cf-ba91dfc3de31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a84846-696a-4eac-9575-2f9e3500f904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d1b9fa-0168-4dd9-a8c8-d00cf699511a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a25a8c4-76e8-46c0-a70d-f045db4b1de6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74eb953-0d06-4745-9ba4-ab1d93deea37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9423cf-76da-402e-9853-7410ec3debfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20eef9b4-d37f-4bc4-bb3f-347687931ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f6f417b-c5ac-4ee3-8d59-cac80a03ffab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ad213c-37ac-41a9-ae09-387a48fcde65",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1305cd-3b12-496b-80e1-8d352ff0b3fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aefb775-0a82-47a4-a95f-c70889c453a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cb53ea-ce96-4b8e-a569-900ecdd0bafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32bae35-6970-489d-abac-b2bf8c15d709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba059864-802f-47df-a7aa-4809825c5df7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04701d93-7246-4055-a0ba-23b0f80ea6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a62874-39ec-4cdc-93a0-15c40b07aa35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702431bf-e0a8-47f8-9648-9d70c54e00a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce68112c-4196-4274-ad36-d60a64002118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3a86b7-d643-49c0-b30f-a70bcf3def59",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e1e931-faf3-4e13-b031-c6e317366863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749bf47a-cfca-4ac4-99dc-47576814db43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71eb36c9-878e-4a93-b14b-3d04d6037ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b2e2d6-d577-47ca-938f-13823a877c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de041b15-f3dd-4800-8c52-7170dee5caa0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec5c1f4-413a-4292-9bc7-d94832662ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4798ff57-2060-4b42-8c0a-d6754d863b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af56e34d-69ef-48bf-ab91-b4a609811d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9870ad57-5c68-4940-8bee-a447d57b7c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a53c305-f309-4a6e-a0c2-1c1628c1a8ed",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f1acb8-402f-40bf-937c-116067dcd1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98214e44-4597-4eda-a394-7d023eb10dc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394f89e2-96ae-4881-8098-c9d3a9d1a82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9492d16f-cdaf-42a9-b63d-55ac4f46abe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa02ba4c-8263-416e-ad52-32e7deaa6276",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13342a9-6c60-4a21-8483-88332e6b6c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f5afeb-cc45-416d-b3e4-3dea92e1bebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e018560-51fb-47f1-ad08-e37d9db83f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111a2bb7-3ec3-4e2a-8f7c-67e8b73837a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b345ef-e52e-47e5-abd4-ee07bc6ab1a0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d9dfed-50b5-4e65-9a71-c4f08287799a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05cd999-5bee-45c9-a63f-6b0f7733a79b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36386573-2413-4b0b-a79b-7cdcaf0591c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0130c87d-0ba8-4f74-81c2-630ae704c363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d77c19e-bca1-48b4-8a14-1d14578465e0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707ba8a9-0491-4c59-9a77-ea3320ff7eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ff1c69-175a-4a36-af0c-816db52d75da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98fa46b-4016-4a6b-a7e1-172a92449dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894ebaeb-86f6-4f05-bee8-9b9794e92438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f69f817-f6a8-4628-ac3d-cb3183047b54",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5514271b-5411-4e23-9aa9-d1958624c460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70dc093-d18c-4734-9f64-c7505e41e437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "471c1b78-5958-4b38-a28a-4e65b0a1abda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10a4aa4-dbf4-408e-96ff-a8e4f1562e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260ba9a2-67ed-47fc-beeb-7c6ec9d0d99c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720599d7-5bae-4f34-a80e-6da6ef86c65d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a10719-f8ee-4c49-b52c-63ff9ee7e072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d600be04-407d-4e7b-9ed7-cc7f0084f430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9678e1e-cd83-48bd-81f4-bb1d8f2f2cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b165c4-5d5a-4027-8acc-9c2d5906ccdb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14d446e-a4d6-42d1-8e38-1f3753196e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4f8433-00b9-4f07-b308-3134d9cf1d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db44266-4b13-442c-8651-a1197ef96da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c7e653-249e-46bb-ad7e-3c36ae9c4ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13bfb7cc-a399-483c-98db-f73c068d9889",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15cf7c8-6c96-496b-8d4f-c89816fc8b95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41c984d1-49fb-4ce3-85e5-35e41de518d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4557bb06-3013-4bb0-9697-b3cb0ab4483c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc585dc-4fc8-4522-a4c5-ed4d999ca901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d11ab49-43a9-4a16-9d65-94612dd7ed24",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326cc338-96ab-4515-842d-a582ba4f7c5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d629685f-7f36-4f36-96b9-c3f79a67ffc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba097605-c0cd-4a54-a436-609530b71987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff4b66ed-82bc-4310-ae8f-7ecd422c11dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1fac7b-1d22-475a-8172-f0a220e3b8e3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae29566-faa3-4bcc-9643-19163c099488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c79becd-9a97-4611-a244-ffbc91235198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7492cb-99fe-4ffb-9224-e9f559449d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9318a5-071a-4173-b83a-5f54a85a4e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb1ade0-200b-4498-ad00-42b0c487a0d1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcc008d-39f7-4d9c-a8d4-2aaac6778eb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "246824a9-142f-4415-98e6-5345dd4aebe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d1fd49-519e-494c-b603-7706af1fb284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0691a88d-4efe-4cbf-aa78-736018524532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0742e25-d946-475c-b504-fcdc2eba4de3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d97c090-1463-4914-8f56-fa17449c5ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b27a3af-6231-4c66-b6e6-656fa2ac132d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1fe0eb-df70-48f2-8ed6-0ead83087177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "540eb906-72e7-452d-b11a-1e26c892bca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cd0b56-a17b-4566-a7d9-f93eb3640e42",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873834b6-7aa0-42bf-b0b9-c67d657bf961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aab06a9d-39f8-4500-a369-121c7131de82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d804050-7eb7-4ce8-b791-099734ddda24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e9ef6e-3892-40d5-94a5-ac8e4fe7128b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d607979d-7346-4b2e-97be-d8d82204af98",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15545d71-f299-4d34-bf35-97b3134d2fda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b380675d-3703-4825-91d2-6efe521b1ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bf806c-615a-43f1-8b7e-cb9c6e8645b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071bbeb4-3ebc-4814-a54c-cc32ec8fb412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ae3f46-e83b-4772-9989-a47a48497048",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced1ae30-c21e-4060-af83-f3bf3d74c4af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db656053-3690-4eb6-94af-618a1b22b2f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f121574-af30-4aa7-ae8a-79ab0cbd429e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfac6ce2-b037-4cbf-bec6-b44c33fdde3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688f614c-4f68-4b2c-9f20-a73db6591e1b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d60f019-39b1-4481-9205-18f1c3f63ee8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12f5282c-a87d-486a-ba14-69b8dead0230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ffbe23-0d2e-49ce-b56a-d197a9b66dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee595ba-b0ea-4ba9-9678-b0472ca868e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14cab610-0493-4936-80fd-752fdd602801",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b350cfb6-b1c0-40c2-b7b0-0402f1b4a5a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39540d74-ac36-49ba-953e-b201132887f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4be770-e8db-4711-8e82-464a2dadd613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf32ad8-812b-46a2-92c1-880d79206907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dfe673-e478-4bf8-938b-ab69dc4575c9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87918bee-313a-471c-a486-34eb5d1b188f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea676471-1062-4645-b304-38f576fd8a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "622be5be-943d-45e3-9117-04103f21c35b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec102af-eda7-4d75-a29b-121a2e461e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9353c555-a735-4a04-a5aa-3cca1e9a5ddc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5558a84-6c02-457d-a6c7-94a8efefc7e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bab5c91-1ebb-4ae5-bacb-7237f0b30459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3cbbde-f3b4-43e7-8ab8-fc4716903e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ea7766c-cf5c-4912-8ebd-c056a2cdca7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200d2df2-6d47-41f4-bd4f-82efb8c2d7f5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba1fa55-dbb3-4169-b2c3-92a15e9267ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ea6c3b0-fb1e-45f8-9682-7477d38f5001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4f0fde-5ea2-4989-a255-419237b3ca57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e65e575-1ac1-4cf1-86f0-c3b8a1c8702d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743cf3d3-ac35-4a4d-8520-03209c76f37a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcb1b0f-566a-4ee8-90b8-a8ab8d108f77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2716a5f3-6a07-485a-935a-710f803dc4ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a51d52-0cf1-4cf0-91b0-c2202eec440e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ee1f32-6b59-4830-a5a1-60cbfb4cba56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e15335b-d1d1-43ab-837b-b829ebf52803",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42aedd61-c76c-4574-bd57-4ca3f7abf888",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43d1f490-dd80-40d0-b67b-56d4551bcee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca772a1e-1045-4791-a221-3721c7da7f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06182009-5118-44dc-876a-a0bb8cf34633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79268fd-c5b8-4d29-bf63-25724a59dc5d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55536e9f-c184-4dad-abd6-33f4bddb71ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "527a28d9-2def-4ebc-b027-039555720ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42972c0e-f929-4656-95bf-3906368bf989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b87870f-7ce6-420b-a075-d6429c1eba75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b54061e-e3fb-4c12-bf41-1955f9ff2aaa",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb358410-a130-4ab6-8c5b-e485a3ab7cec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a6aa234-dde7-4f3d-b2e9-83335588da65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55ca3fa-a7f1-45ee-9cda-48b5db338a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd00ecc-34a8-4218-839e-6be9d1ea2b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e629a8-43a7-4475-a179-20bf71d196a3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2bb48c-7734-4893-aee6-f405f8fedbc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fe8e4f2-7105-4e08-99fd-1dc7ff397055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf150277-6163-4d23-9d11-05a12e0aadd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f2b2325-78fa-4eec-88b5-b9e6132bcda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae37b636-586e-44d9-9edb-6b195f91d34e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e165845b-4ade-4d4e-b3d6-8e63d657280a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7e00d3c-79e7-4e9c-8127-418d64bb415c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a589915-881c-432c-993c-c1d5145a53df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87f9c71-9ea7-49da-a8ff-b4922b3e15e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c359163e-ef44-4c2a-966e-550c74b010da",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9404d82e-a013-425e-aa73-b204ab8f03af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe36f9d2-32a0-43f6-9393-981381689b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "575d8dad-6fe8-41ad-b953-00814f2fe24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3045339-fa15-4c90-acd3-b9d572b7d511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11dbd106-b496-4695-9b13-98bad41f93f8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71239f6-ba85-4282-a23c-392d874d8d78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45a20628-beb7-460a-98f1-3d27d40ce6d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5f0dee-486e-467c-a613-7449d6fdc8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6372f3ab-dda1-47a0-962d-0145a995b1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb19f44f-0640-4e37-ac88-effe82b6271d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a823c3-e688-49bc-a480-cb328b86340d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecec6cd0-a8f3-4897-9ed3-69c4798f9691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4d42f4-2282-4fb9-b360-aed943c9ecc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de0cbcdd-e5a8-4cad-8cfe-a8fe44d66787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf977f71-ad23-4c03-98cd-3c2417da797c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32082c7d-ceb9-4955-9ac5-839061ea0ef5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbaef589-2844-48f5-888c-fee31d61b592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19848912-1772-47a5-b235-834d842a4a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5ba821-cda2-496a-b58c-fb54a8a19bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b30068c-9444-4dfb-80ec-aa5cdc2677a3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd774d4-326b-4c4f-820e-1129fe47cfe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54c881d5-e46e-48f8-8722-81c4e4ef0482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcbf8b1-9b6d-4b16-a10f-b1ed5dc5dd21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d0388f-321b-443d-a863-6b59de529472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f3a292-3375-4a97-89d0-2b4518b2feba",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5f7d66-cfbb-43eb-9fea-e4118066ad64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6412302-e6f7-4d88-9d9a-fc09db229577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ade8db-c120-4b28-8a7c-52882b052484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c2f594-2fa4-4c7f-9eb7-db1a8398cabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c15b134-b10e-4126-beda-b11d86cbe30d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68751d00-d1e7-4b06-94ea-5dacfd5cb824",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02c8d2ef-70eb-4056-b74c-e033c1cc1520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b07a998-3b75-466c-ae09-cfaa186dbacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c74e4f-27c6-44dc-9aa9-85a27904a181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e792647-1c1f-4e12-a38b-d797edeae762",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d950b9f-7027-42e0-a7a3-5ca815591b2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef6d160f-830b-4c54-8c89-eaa0dfc7e214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a603fe14-d183-49ba-bea3-719b09d7059b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274cbc4a-c9ef-45ba-888f-de8917476ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e512866-277b-45c9-9540-5534c2aa1f8f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d84396f-b22f-48e0-930c-910693ccf31b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ce6934f-609d-4e94-8592-f2b4ee9e1f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "139589a4-ff44-41dc-b00c-938f612236f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c4ba624-db0f-48ef-837c-9bc5da158875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67bd964c-3495-4fff-b6c6-c6679a40b757",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e019cc44-c344-4d7a-825e-1ce29bbd1756",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e26d01f-d114-4bae-bc5c-a616361cc4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5c79e6-0da9-42d2-9eb6-1012a1f99d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6111e536-f147-434c-b4d5-b3e8613cf9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a78b972-9502-496e-8b03-a8131f77455f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd8148c-8e62-4844-b817-30a024169734",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0224b1d6-2c92-4cbe-a1c9-8b406a341708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5be379-2ec0-4e54-9428-30be0c33def7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f6cb60-7c2b-4687-b047-77dfba909a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d08fba8-620b-4320-9bdf-114400eaac36",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb48567e-4be2-4251-a2d0-f5cb68a0fa77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7457481-5568-444e-8131-868f54831c52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf06fd5-5926-4814-8656-2e92f19bac2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e13a643-8c30-430e-bab4-7a6b1169e736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc646a6-669d-4a66-9ed6-19f98171de11",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e96799-5d76-430d-bb35-d954dd1225b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1f9c82f-b135-456c-ae3d-f8c74bb95708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5132387b-7501-4cda-9813-c8945f457c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7bebaa-ea2b-4eed-a4d7-cb6f5733c898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067f57e9-16ad-4ece-b978-8829b476aade",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e4cc6e-374f-4f06-8310-ea6c7f6662c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4eaeaab-9519-422b-aa23-060338ee1374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb3e593-cba5-4fff-8426-1a847cc1750e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85739ac-048c-4f1e-953d-388b7ca9e9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8922f1a-ee3b-4033-b850-02cee718499e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7c15ea-ced1-4557-a604-59930879628f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5e311a6-6b3a-4ecd-8d9f-18c783723fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5fd5a4-3e54-401c-b8a4-e98cf357a638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027446aa-bb78-45a8-82a8-5069316cec82"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c1fefd7-1a33-441b-a72e-2688ef04a276",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d0fe6dc-6acf-4c3a-aa72-61e515555f14"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58feb308-550e-4d49-9822-24bdcb663002",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa76340d-0ea7-4599-b81d-9d3b6787775b"
                    }
                  }
                ]
              },
              {
                "id": "67b8ec89-81fe-4f4a-80d4-d4374a7f0e45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "773dfd99-b068-4b3e-8cbd-3049c04826f7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe640f7a-45cf-4561-82ee-18f6b9e65711",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "50153ff6-5694-4038-826e-5422729e9bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72e6ffe-683d-4d6f-a6fe-c5782c00df03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1c2cd53-d9d3-44aa-b203-eed5fe430e9c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecfb04ae-ae8b-4ab8-8a44-578b0a02c665",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce38f3e5-f59e-4d38-bfe1-8ee7c1a2ce96"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7703de0-e95f-4976-9ba0-a18bead9d7ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75cc1a1f-387e-46c2-a933-b8ab977e5839"
                    }
                  }
                ]
              },
              {
                "id": "89fcc33f-2035-4f11-b82c-d27f959d7b09",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "43978d05-d124-4a9c-bbc1-1879c08ff85b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609c72aa-25f2-4e9f-b8ab-7452cc59ff30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f53a6b67-7028-41a2-aa36-5886d07035cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5565cb9c-964c-4c8d-8f6b-61203dc0256b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff4f0cb-80e7-4b3c-9e74-8e68ad641aff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6c98dab2-c41b-474d-a942-1ee21a4d289b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f3d283d2-2495-4f57-9c54-40d1c1624cf6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5e5ff21-87c4-4a22-8148-4cd997c09a71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "99e3c03b-ada9-406d-ab54-ed1da4a9a39e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6aafa6cc-9d9f-4c53-b15a-11c0fa8a02fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8ee30ac-8aa0-4dad-9c23-6127be0d3501"
                    }
                  }
                ]
              },
              {
                "id": "9249058d-d076-4395-ae68-d20b1d288276",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eee82fc4-8968-48f0-afd0-4bd416a48ce5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3b6c1c25-fbcb-4e7f-9e09-184f79915add"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc3131ba-8ce1-4fb2-8415-fc8c9c6f7c5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd1d85a0-c5c3-4bfc-b8b4-14809c4f09f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a2da03b-ded0-4406-8bca-1bf72f034f43",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0d68e9bb-b307-4d13-bcd8-d2ec72c636b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09a11d8f-9c57-4a6c-98b0-0480fa26a572",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7242364-f2ed-4125-a809-88231524facd"
            }
          }
        ]
      },
      {
        "id": "22c9d24b-2d0e-4b73-8027-bcfa83ddf46c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "36cc1d8b-446f-4c8e-bcd2-44baca5e3b0b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8583b21-d43d-458b-9dec-ef7678076c52",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4695c91-bcd1-4de1-ab58-10a45aa640a7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6d7c6e-72cb-48a1-b191-6b29fe8ffba1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "feab2ad0-7d7f-43ff-83b0-f03ab3e7ff7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49146465-971d-498c-960d-42ce38bc6898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1927a451-a183-4404-b8f1-554e6f625915"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fb2af50-eab8-4fb4-b64a-f5ce007e9acf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bea8ceb-5e82-442b-9f74-6ff844f38993"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6596aee0-02cc-45eb-b087-6d818fa9eb72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2c372a7-0ec6-467b-9f8a-404b5607d40a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e294fa5c-bc63-409a-bf7a-5a8f8b10e66d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0b34a6ea-5061-4f7a-bb86-374ee2aa7758"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52c1e296-d54c-46a2-8c5b-904554019209",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5652471d-7ad6-4a81-9824-b8be594368bc"
            }
          }
        ]
      },
      {
        "id": "6c9448a3-546d-4c77-8db4-698e3b688b07",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "80a34aa7-e73e-43b9-8026-e47db3b80e3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d761db78-c6e6-48e9-bb19-de497cd4521b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "94e92eac-1714-4473-8018-85ccfb734fa2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e94ce7f-9320-4a6f-a235-ea0cdc9e1b49",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96084df8-7454-4489-81c7-460e7043411b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e63ea1-028d-4359-a269-19594b5d77d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae2f4cc3-1a18-4795-a286-835201108de9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d771d2bc-44df-4f03-b448-703036a5c64c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1bf5848-1133-49d5-96bc-d18b9d9da910"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20466b8e-1bac-4a06-a18b-5d794c6ff72f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df9f74f1-fcfa-4f99-829b-c6cf71bec613"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87972bd5-b22f-4f05-9af6-6716791c56df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "522c32f5-b24b-4f12-a3c8-8ed46ac8f1c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d5ebcd0-cf90-413a-a81a-c720d64f8c3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f69752d7-21e4-400c-9c68-34428e083d2c"
            }
          }
        ]
      },
      {
        "id": "e3b0527b-055e-4b9c-8972-ecd5287cff66",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1ee6417c-38b0-45fc-9714-c83250cf37d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "785c9724-fa68-48c3-8986-3902b78df087",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06f0a156-1d5f-4035-9ebf-c9354839e4ea",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9097a96f-67c1-4965-900d-cec88e83fa0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "248c166c-2007-4afb-82eb-f0cc25a58597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e76a31a-4620-4dd0-83dc-d501af4ffcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f9ecd06-4918-4aed-9243-4d3fc7e42e35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14f1f908-ed5f-4967-886e-691d99cb3887",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f8235ec-d2f8-48df-b253-472c72a2ffe1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc0f107f-5734-440d-b505-d21a81d8ef18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d01c43c-64bf-421e-b948-6a46bcaa0151"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20d20488-e28d-4a37-9fb3-05d89a2e1a5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "222d7f0b-f8bc-4d76-a311-866ab6a7fca6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2103b995-9d19-4cf0-91a1-c95834ea516a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13539774-af87-4e78-856c-e29df5c75d96"
            }
          }
        ]
      },
      {
        "id": "f73d980c-bc7f-4ff7-a98e-31ceae4e6edb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64493e5d-7240-454e-bf42-61368f1625f8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e349cb99-756e-420a-81f5-fd86ab55e267",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2ac43670-c236-4ee5-84ad-00e3719a19db",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc2b07c6-a196-44f4-99a9-7408bbf0ffb7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41229308-bb86-41d9-b68e-92efd0313772",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 52.111111111111114,
      "responseMin": 10,
      "responseMax": 609,
      "responseSd": 75.49920868104397,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713918916603,
      "completed": 1713918938973
    },
    "executions": [
      {
        "id": "3a00edf2-2989-451b-8f3c-53212c84c729",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f260c70f-8d2a-4674-bef8-5b0fed51e6ab",
          "httpRequestId": "e826f959-b47e-4b25-bc8f-123ca6d0cef3"
        },
        "item": {
          "id": "3a00edf2-2989-451b-8f3c-53212c84c729",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "93b90a8c-0a8f-44f1-9a3a-72d90ad03249",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "5e61e7b0-6a97-4f75-848b-c72171ad65fb",
        "cursor": {
          "ref": "1f786184-ddd9-4eab-82a8-08c7c750f9d2",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3ff6a787-46b6-4d84-b7cb-388a86d88754"
        },
        "item": {
          "id": "5e61e7b0-6a97-4f75-848b-c72171ad65fb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ac977a5f-578e-4dc6-bd32-b4262a0f0df7",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "ce3de2b5-46d0-4c81-83c1-8c365c6dac74",
        "cursor": {
          "ref": "3511f156-0079-4082-99d0-a70ae12fe2db",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1c7903ae-ace9-4e08-be4b-ba335ab81b1a"
        },
        "item": {
          "id": "ce3de2b5-46d0-4c81-83c1-8c365c6dac74",
          "name": "did_json"
        },
        "response": {
          "id": "3345b4cb-8edf-472f-8d9c-0cc7fc4459da",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69de6a2-76da-4d75-bced-85243094f78e",
        "cursor": {
          "ref": "be2b7b49-fad9-485f-b6cd-802602c10b8f",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b8e37d7e-e181-4f0a-891c-0fc33d22baa1"
        },
        "item": {
          "id": "e69de6a2-76da-4d75-bced-85243094f78e",
          "name": "did:invalid"
        },
        "response": {
          "id": "29f44964-8e4b-423a-9f28-faa7e3047f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69de6a2-76da-4d75-bced-85243094f78e",
        "cursor": {
          "ref": "be2b7b49-fad9-485f-b6cd-802602c10b8f",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b8e37d7e-e181-4f0a-891c-0fc33d22baa1"
        },
        "item": {
          "id": "e69de6a2-76da-4d75-bced-85243094f78e",
          "name": "did:invalid"
        },
        "response": {
          "id": "29f44964-8e4b-423a-9f28-faa7e3047f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f566117b-8ce3-425e-9b56-0cc283bce4a2",
        "cursor": {
          "ref": "9ffb1569-63a3-48fc-865d-78d02e16e1e7",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3e99685d-6f4e-4444-a5a7-a12283e5cff8"
        },
        "item": {
          "id": "f566117b-8ce3-425e-9b56-0cc283bce4a2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5aeda58f-e4d6-4e33-9d1e-8c35a8c5671b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 294,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f794b3-dea3-424e-b153-1539b364caf9",
        "cursor": {
          "ref": "a209e79c-38d0-4225-bb1d-1469ef61d1b1",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "73950b43-f085-44d5-b48a-6cefd31fe2b7"
        },
        "item": {
          "id": "d7f794b3-dea3-424e-b153-1539b364caf9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "00f68f97-e727-44f2-b159-839c27373bad",
          "status": "Not Found",
          "code": 404,
          "responseTime": 28,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00be81c-e8f6-4bf3-bbb0-d5f700e7ebc9",
        "cursor": {
          "ref": "8c2e5f1e-0ad0-46f1-977c-eae54dacd861",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "20bf3182-2af2-4982-b830-4de35e2dc497"
        },
        "item": {
          "id": "b00be81c-e8f6-4bf3-bbb0-d5f700e7ebc9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cf71385e-68d1-4ea3-86f0-599d29121182",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9635131c-af81-40bd-a1c9-7ae58b6a8287",
        "cursor": {
          "ref": "7e267c29-4bd7-48d9-9551-c85f3cdb5be1",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f33694cc-b3a4-4bc7-93f8-22100fb49fcb"
        },
        "item": {
          "id": "9635131c-af81-40bd-a1c9-7ae58b6a8287",
          "name": "identifiers"
        },
        "response": {
          "id": "8f25522a-7a8a-4ffe-9739-dd35b562a69f",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48cf2e9-f8a0-4fb9-b269-0839820f4f59",
        "cursor": {
          "ref": "bc50955d-d4cb-4c95-b6a0-0d5291943038",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9fa71b77-42c2-45d2-8b9f-b1a6012fd784"
        },
        "item": {
          "id": "e48cf2e9-f8a0-4fb9-b269-0839820f4f59",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8652d89a-6062-4291-b7ac-93ee6a986da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8652bab1-15a4-4f14-b7b6-ea18b5c95fbb",
        "cursor": {
          "ref": "56e4374b-d16c-47ee-b185-3c5946a2cc04",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "72b44626-4c88-41d9-8742-1a8ba215f573"
        },
        "item": {
          "id": "8652bab1-15a4-4f14-b7b6-ea18b5c95fbb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "60fd8bbc-cda1-4f45-9f5c-106b7aad9506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa56883-6669-4823-9ab7-7f387489578d",
        "cursor": {
          "ref": "451b91b5-57a2-451a-a9e4-ef873290baee",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "89ac91ea-e8e2-4d27-9df2-749ebf7ed2a7"
        },
        "item": {
          "id": "3fa56883-6669-4823-9ab7-7f387489578d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4e9e5d17-23b8-4d9d-b2b0-aa98328f1c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366d0a51-144c-429b-bdd0-8eaec0302c0d",
        "cursor": {
          "ref": "a1d22495-ea25-4cd7-b9c5-130f768130ca",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c6c9494a-fa4d-49d8-b376-235a5e2ef556"
        },
        "item": {
          "id": "366d0a51-144c-429b-bdd0-8eaec0302c0d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8815cd45-c4c3-4fb2-9dcb-38acc5486e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da544b7-237b-427f-b4df-bc1e15850748",
        "cursor": {
          "ref": "599d83ec-d334-4984-aea5-da344a0341c9",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c9312008-7ebd-4e81-b892-6bf643172a4a"
        },
        "item": {
          "id": "6da544b7-237b-427f-b4df-bc1e15850748",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3db99625-4ab0-456d-887b-788d5acd3ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f76934-6227-4a44-a06c-cb508170e8e5",
        "cursor": {
          "ref": "3f36a4ab-c706-4613-9e6d-6fb19be37f4d",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f8261c49-ee93-4d95-809c-6bf9df5f69d7"
        },
        "item": {
          "id": "66f76934-6227-4a44-a06c-cb508170e8e5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "82a71c36-5711-4fa3-9350-39bbeb0f6de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7ec807-6497-4dc4-a29c-b71208d2345c",
        "cursor": {
          "ref": "e19835e6-41a8-4f9e-bb65-6369b1da8fab",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c4e1e471-a6f5-4099-8c93-3935a8bf2281"
        },
        "item": {
          "id": "4b7ec807-6497-4dc4-a29c-b71208d2345c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a09b9c43-0259-49c1-8e27-eeb0e82e1c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dee6ff-7c10-47d6-901b-03d3c4125f63",
        "cursor": {
          "ref": "e4ba0398-5497-4296-9032-5c7eff30d815",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d1663bf3-b168-41da-8281-f24d41e913b6"
        },
        "item": {
          "id": "d9dee6ff-7c10-47d6-901b-03d3c4125f63",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "74db14b2-3aff-46e4-bd90-e5d11e81c0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a910d18-1e7c-496e-a9be-f4b6566b19e4",
        "cursor": {
          "ref": "000458d7-6913-4591-bdb0-aac7172443e1",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d0c63ac1-3108-41ee-8808-7422552fbbaa"
        },
        "item": {
          "id": "9a910d18-1e7c-496e-a9be-f4b6566b19e4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7585402c-d28e-411b-acc5-68de021ccc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd88950-202f-43ba-bc05-757f6f7a2537",
        "cursor": {
          "ref": "9bcde0d6-eb71-4c09-a685-96e8784a4948",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e7821499-5a84-48cd-bba2-d281cbcd5f0c"
        },
        "item": {
          "id": "edd88950-202f-43ba-bc05-757f6f7a2537",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "97b0bc61-0cd7-43f1-8fa4-1dd22cdb4c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac338af-4b8c-45c5-8402-397ef18f5c2d",
        "cursor": {
          "ref": "07b7073b-bea0-423e-854c-4f0ded116750",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ac485504-eaa8-4c14-b52f-cfdc1688869a"
        },
        "item": {
          "id": "eac338af-4b8c-45c5-8402-397ef18f5c2d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5cacc2a5-88cb-4717-849b-4ee76da4da64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98904738-bc08-4c4c-9de5-eee9e4a6f05a",
        "cursor": {
          "ref": "3a6c1227-f71b-46c3-b8a1-a802132eb26c",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c7ebd8fb-7559-4122-b5fc-2d51ea765282"
        },
        "item": {
          "id": "98904738-bc08-4c4c-9de5-eee9e4a6f05a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c7bd03d0-f926-4f33-b1ea-1d26ca6ea94b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992bea98-c8b0-4c35-a9c6-a879356ce312",
        "cursor": {
          "ref": "d11df4e7-6883-48a4-aa0f-dac28a365036",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bb7ef90f-c983-4e8f-bc86-64251733f7ff"
        },
        "item": {
          "id": "992bea98-c8b0-4c35-a9c6-a879356ce312",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d5d65d6b-092a-4da0-b08a-6d8451d134b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afd928b-5548-4e3c-a851-bd616a810f4a",
        "cursor": {
          "ref": "0f64ebe0-ce33-4676-a62a-c2663b6e8115",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "686577bb-aeaf-4b7d-ba12-34d342ddefcf"
        },
        "item": {
          "id": "8afd928b-5548-4e3c-a851-bd616a810f4a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "222e50dc-9c06-4c4d-b57f-09646a6a36ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8baacb9a-1ac2-4afb-a489-5317a76d8441",
        "cursor": {
          "ref": "8f895f8c-0f84-44bc-a788-be92bd7676fe",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "29058c36-a0c1-48bc-95ea-59ffa5b3cd10"
        },
        "item": {
          "id": "8baacb9a-1ac2-4afb-a489-5317a76d8441",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "63a4a2b1-e548-4467-83e3-e1d8596c81b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374e85e5-4b33-4534-89fd-ab9a1f3645a9",
        "cursor": {
          "ref": "b1b65e3b-8614-4b59-8888-46d1d9ce1f6e",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3edff39c-a365-473a-aefa-0f65112d98e7"
        },
        "item": {
          "id": "374e85e5-4b33-4534-89fd-ab9a1f3645a9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b7d7ca35-495a-401d-bf68-7ce3ffa5d838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87eb2cd3-c683-4055-8ba8-51fee91ccd80",
        "cursor": {
          "ref": "90ad849d-8167-4276-916b-3243025a262a",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "95ace585-d4ee-477c-b3a0-31c135253aef"
        },
        "item": {
          "id": "87eb2cd3-c683-4055-8ba8-51fee91ccd80",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fdb22f1d-9a8f-4f55-bf5e-b548df33b910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030941aa-ff98-4825-88c4-b9d9ed18e9dc",
        "cursor": {
          "ref": "9ef0b568-fb95-4ab0-989b-54c91e586619",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "94fc94ec-8118-455a-a499-edd4024d39cf"
        },
        "item": {
          "id": "030941aa-ff98-4825-88c4-b9d9ed18e9dc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "90156e28-ba60-49c5-b0bc-e33ba0e6c027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13513926-a0c6-4442-a594-d027280c4185",
        "cursor": {
          "ref": "fe8ea6d3-c56c-4731-bb62-78de8f850b9e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e43f2be7-c8aa-41a2-8886-c502abc8dcc1"
        },
        "item": {
          "id": "13513926-a0c6-4442-a594-d027280c4185",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "42c60605-a596-45ca-b8fd-f4fd6837319d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f0c270-31dd-4e0c-a2f5-935636bff6b7",
        "cursor": {
          "ref": "0a13e19b-eb74-4758-ac9b-478e38a19c47",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8065ede8-eb3d-4151-a048-ab0d5dc31207"
        },
        "item": {
          "id": "92f0c270-31dd-4e0c-a2f5-935636bff6b7",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "91a5c21e-7ccb-4f2c-a624-796ae416db5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb695346-ca63-4686-9a10-bf4472d1910c",
        "cursor": {
          "ref": "e2417f06-586b-4296-a5a6-ae3c497c0979",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1d44fef8-c0c9-40bd-8d23-1fbc17f2d09e"
        },
        "item": {
          "id": "bb695346-ca63-4686-9a10-bf4472d1910c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4c214f6c-a6ac-4130-a8be-58a33bdca9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ba4254-f4b0-4847-b288-e66452e20231",
        "cursor": {
          "ref": "9e7d7ecd-b4bb-4cee-921a-063ad334a7bd",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "81ef191f-5bdb-42cb-8227-ae13510f29d3"
        },
        "item": {
          "id": "d4ba4254-f4b0-4847-b288-e66452e20231",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c07198ea-791b-4541-ae11-d75f4da4d61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b29618-f36e-4195-86ae-88b0583cd8cc",
        "cursor": {
          "ref": "c9a9104a-5464-4b75-b886-d3abff7a0c0d",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7e400fa2-8762-4a52-81ca-be76215e178c"
        },
        "item": {
          "id": "93b29618-f36e-4195-86ae-88b0583cd8cc",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "aec6da0d-4ee7-4479-a9a3-52087fe6c1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf0b28d-1566-4f83-88ba-8cceb3c89376",
        "cursor": {
          "ref": "6f866ead-5bd5-4677-9393-51eb30a010aa",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "496215e4-4eb8-4376-9836-73ad944f59b7"
        },
        "item": {
          "id": "acf0b28d-1566-4f83-88ba-8cceb3c89376",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fa3463a5-7723-4d26-87d9-55d71658cb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97268ad-3740-42ec-ab4c-acb3c83c12ee",
        "cursor": {
          "ref": "8d8c4b63-40d0-403b-a52f-74673266421d",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c0deabc9-5abe-4cdc-8863-e8b0ebde1631"
        },
        "item": {
          "id": "d97268ad-3740-42ec-ab4c-acb3c83c12ee",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f34accf9-4b3c-453c-b7cf-4bec51043b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb49c28-f21e-470d-88d0-b03aad1ebe1e",
        "cursor": {
          "ref": "0623782d-99da-4a32-a0bd-9a202013b900",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c8e0a338-f528-43cf-9c92-9ab78bb75c05"
        },
        "item": {
          "id": "6fb49c28-f21e-470d-88d0-b03aad1ebe1e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "94707ab2-ac03-4d33-ab19-99c4b4630b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d21b154-f6c9-4a70-a376-f54d744a9a93",
        "cursor": {
          "ref": "304a2ce9-9291-428c-8ee9-92fb2dc0cb8c",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "217fb87d-6900-4b7b-a463-e8e6dd1e29de"
        },
        "item": {
          "id": "4d21b154-f6c9-4a70-a376-f54d744a9a93",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ef2d8baa-9cfe-4fff-8337-fb3a554b75cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61fccf64-51cb-4aa7-ba91-de89960cb953",
        "cursor": {
          "ref": "237aa5ad-6920-4846-a622-c4a38f6c35a1",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "89462913-5c0e-4d3a-aacb-c0b0c43c615f"
        },
        "item": {
          "id": "61fccf64-51cb-4aa7-ba91-de89960cb953",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "95a7ae53-04da-4af3-b124-ceff84c4bef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4e49b5-4280-47df-86f3-120d8653bc4b",
        "cursor": {
          "ref": "2caec9e7-14ff-4f8b-80ce-7c5809077ebd",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e54ad795-5f07-4d4d-95fe-1164f3d24b39"
        },
        "item": {
          "id": "6d4e49b5-4280-47df-86f3-120d8653bc4b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bc19d829-fbf2-4a8c-a58f-c2dfa9091e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949f888e-de1b-4255-a5a7-95ab6c7b4c8c",
        "cursor": {
          "ref": "9cde36e9-bbff-42b1-aae8-ae321fe6bfb7",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "97b26b80-e69f-4503-9903-ad64bf36f7ac"
        },
        "item": {
          "id": "949f888e-de1b-4255-a5a7-95ab6c7b4c8c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fbb32157-d384-414a-9d4d-15f7e42870c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0fe638-cf04-4621-9e6f-0daa3fc9b360",
        "cursor": {
          "ref": "875534cf-1c73-4c49-9715-df8697376993",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "23c511cb-fa72-4786-93e9-41cde5a92853"
        },
        "item": {
          "id": "0a0fe638-cf04-4621-9e6f-0daa3fc9b360",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f707ce95-bf45-421e-a1b7-e03009a8551c",
          "status": "Created",
          "code": 201,
          "responseTime": 609,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9c94bfb6-a45f-4022-abbf-1c964b5a48d6",
        "cursor": {
          "ref": "26c2d1d7-c7e5-4e35-9fbd-eb832d6852c1",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b2da23b2-108c-423f-a205-5b82f0caca7a"
        },
        "item": {
          "id": "9c94bfb6-a45f-4022-abbf-1c964b5a48d6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "824f13b3-7a14-4d59-b7a2-5cf9f64bace9",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9bb35b6c-b40c-4071-a723-be5009b53c54",
        "cursor": {
          "ref": "bb2c2ee5-151b-4139-81a9-c39b44bcf955",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c033afdb-8a6e-4847-954f-2933061152ef"
        },
        "item": {
          "id": "9bb35b6c-b40c-4071-a723-be5009b53c54",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d3e32170-390d-4c8b-8803-d07ad71484de",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b8f06e46-7c96-49fd-98e3-0202e7b5be93",
        "cursor": {
          "ref": "df726ebf-f461-4a2a-812c-bbaf9595a3db",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "23a95354-08fe-45b6-af2d-96a5520cb2e5"
        },
        "item": {
          "id": "b8f06e46-7c96-49fd-98e3-0202e7b5be93",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5b92ccfb-69d5-4936-bbc2-5b8a9140b382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c3bab4-8364-41d7-af6b-fb0948dcc050",
        "cursor": {
          "ref": "7e5af681-439b-4071-89c1-68b7baf82eb9",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9ff4d1a5-81b4-405f-9a0b-d961e843ab3a"
        },
        "item": {
          "id": "00c3bab4-8364-41d7-af6b-fb0948dcc050",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "eb41be47-ea92-48f0-8ba5-c93c5fc0e8cb",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9a0ccf6b-4b91-45f7-85aa-7a2cdfea5b42",
        "cursor": {
          "ref": "29cb7840-dbc3-429d-b7d2-eabbbeb2dcda",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f456af5e-ed5a-42a8-a4fd-51b84a38ba0e"
        },
        "item": {
          "id": "9a0ccf6b-4b91-45f7-85aa-7a2cdfea5b42",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c701d210-f646-402d-b6eb-1b5be30d79cd",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5fabb951-8e45-4202-8eb2-470b8ae7de4d",
        "cursor": {
          "ref": "e5897e44-f997-4d96-88f9-b526720d8291",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "04a4a472-52d3-4055-be26-8874aafa7558"
        },
        "item": {
          "id": "5fabb951-8e45-4202-8eb2-470b8ae7de4d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cd45b5fb-abf7-4639-906b-9e5e4b94be1b",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "67db51e4-6929-41c1-911a-b74e0f3ac911",
        "cursor": {
          "ref": "8526c649-ee9a-4824-819d-663692b48e02",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "669108b1-2cf5-449b-8325-bfd7fc33bc44"
        },
        "item": {
          "id": "67db51e4-6929-41c1-911a-b74e0f3ac911",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "18b14330-afcb-4a75-9600-ab5ecef28995",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d6cd9a86-79dd-48c2-8cca-297241e13184",
        "cursor": {
          "ref": "2a154872-4ffe-4abd-a731-94e74a1df919",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "86ac8cfc-8bed-4ebc-94dc-2ac25144f305"
        },
        "item": {
          "id": "d6cd9a86-79dd-48c2-8cca-297241e13184",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0f7eda52-d33d-4f59-a5e8-0f3dc77becb8",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d4109669-08e3-4938-b3a1-3a93f91a5799",
        "cursor": {
          "ref": "1c237f57-aad2-40fb-8172-f229c7a75356",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "15c9d285-22a1-4617-a17b-8b348afad0d4"
        },
        "item": {
          "id": "d4109669-08e3-4938-b3a1-3a93f91a5799",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e2c6a344-9b91-4f36-b97f-732e2820524a",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "629d453a-40f3-4f8f-a2a4-e7c7892129ac",
        "cursor": {
          "ref": "eed988ff-ff83-40b1-8ba9-12cb03c83880",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "62c477e6-c3f7-4827-8948-908e68cab913"
        },
        "item": {
          "id": "629d453a-40f3-4f8f-a2a4-e7c7892129ac",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "be5a9662-a990-4b70-ad32-177fa3360f77",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6dcbd349-55bf-43ee-92aa-4dd961c4b6cb",
        "cursor": {
          "ref": "228fdb9f-efe5-481d-8748-0cb5a2f7797a",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4532277a-40e6-442c-8657-9e56d3326242"
        },
        "item": {
          "id": "6dcbd349-55bf-43ee-92aa-4dd961c4b6cb",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c2ec874b-7754-4471-a8b4-a7727ebdb207",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0d18778a-cc0d-4b17-b9b9-94d15e5c67b9",
        "cursor": {
          "ref": "ad12a880-86dd-4a71-b106-7631ca5f2b8e",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b7f2dfb7-80f1-470e-8c51-6a9bd4a24ccc"
        },
        "item": {
          "id": "0d18778a-cc0d-4b17-b9b9-94d15e5c67b9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6b656da5-7dd8-493d-beae-2008d0159525",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9f011e17-00db-4b2b-b893-d48512034751",
        "cursor": {
          "ref": "19aef208-db0a-4a8d-b210-58bc09653199",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5d0d1cd6-98b1-425e-857c-0d04d25bf7e3"
        },
        "item": {
          "id": "9f011e17-00db-4b2b-b893-d48512034751",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6503df44-5cba-46e1-914d-cb203c337bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140d7d23-1cf7-4e42-9038-2fae46bec0b7",
        "cursor": {
          "ref": "7bd6d979-05e4-4946-a389-df1e3b11dde5",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "38080e0f-2bec-4e6d-815b-a648f8dabbd0"
        },
        "item": {
          "id": "140d7d23-1cf7-4e42-9038-2fae46bec0b7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "43f135ac-5854-4501-a740-bebec5979a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c382ad3-fe26-4942-ac41-0b01e734c6d1",
        "cursor": {
          "ref": "666dc3dc-aab1-4a16-b16b-a75bc574313b",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "65bbd06c-bdc3-4c60-ae1d-562b28143206"
        },
        "item": {
          "id": "3c382ad3-fe26-4942-ac41-0b01e734c6d1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "004bc70d-9490-4bfb-bd9e-4a67d71f8473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edb6116-a99c-426e-97f8-59a4fc2e7e8d",
        "cursor": {
          "ref": "a2d7d06b-e700-42c5-96eb-c200528010e9",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a0f17a4f-3160-4410-9bca-4d1cb25b0d3f"
        },
        "item": {
          "id": "4edb6116-a99c-426e-97f8-59a4fc2e7e8d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bd5a106c-555d-4eb2-bd68-460673da08c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9431da-fe55-4a26-93b8-e9da30de7749",
        "cursor": {
          "ref": "00523526-5e3d-4678-bf00-c257b770c6c3",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "637e2bbb-80ee-4a71-812f-bb98445584f5"
        },
        "item": {
          "id": "9b9431da-fe55-4a26-93b8-e9da30de7749",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d5aa8c6c-ff5b-48d6-8ec2-12f354365d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af55595-615a-48b2-a16e-42636102fe3c",
        "cursor": {
          "ref": "a7080245-d821-4dd6-817e-f0dfe5feaca1",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fcd124f6-c5af-434b-9cf0-05bfbef1cd97"
        },
        "item": {
          "id": "8af55595-615a-48b2-a16e-42636102fe3c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0bcccf50-0260-4d9a-b199-1bc295f0b344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb8f0ad-2fdb-4e33-b75a-750b09da7cff",
        "cursor": {
          "ref": "e4248ae9-c89c-420c-a839-f2270bf4a408",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "dee60bd4-d625-4716-bc79-540d232e3d7d"
        },
        "item": {
          "id": "7fb8f0ad-2fdb-4e33-b75a-750b09da7cff",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "00797229-20f7-49f5-89f4-90d50a75f53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a76ed3a-5def-4db4-9063-d5d4ee3c3489",
        "cursor": {
          "ref": "d407abc0-ee09-4d83-afc1-758b6f3eb7f8",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5c817fd3-7614-4879-88a1-7a4af850a760"
        },
        "item": {
          "id": "0a76ed3a-5def-4db4-9063-d5d4ee3c3489",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "44f3fce4-ee15-49f1-8cd1-bd3e0ac85191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de7b2da-81f5-496b-a743-bc2fecb64666",
        "cursor": {
          "ref": "275c1b7c-1e43-40b9-9cf9-0d6277fb160e",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1d611dd2-5284-4665-b28e-e617d65fe730"
        },
        "item": {
          "id": "6de7b2da-81f5-496b-a743-bc2fecb64666",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f4e84bb2-2ad1-4040-bd23-54468a292aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057d99e4-5c6c-486b-b019-f1bf04c95455",
        "cursor": {
          "ref": "74bc26c5-73b9-431d-ba81-65b62e0d7f9d",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ea070378-5d80-4607-84fd-2197239524bc"
        },
        "item": {
          "id": "057d99e4-5c6c-486b-b019-f1bf04c95455",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fe51e0b4-2f97-46ef-979d-1abc10b8de63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77e3193-00f5-4125-9808-f83c80ffa90c",
        "cursor": {
          "ref": "f9fcae33-09a7-44e5-9561-a0ca8954c04b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cd833c2d-d04d-446f-aec9-1066d572cbfb"
        },
        "item": {
          "id": "c77e3193-00f5-4125-9808-f83c80ffa90c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f579b51b-dc0e-4263-bbba-8ab2afb53065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0445dc5c-8045-4e33-8f6c-6875a8c134f1",
        "cursor": {
          "ref": "d286b621-5883-4348-b04d-684239678b45",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c40797ca-db81-4523-9a6b-c5a79356b1b8"
        },
        "item": {
          "id": "0445dc5c-8045-4e33-8f6c-6875a8c134f1",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "40c0400d-1f92-43b9-a16f-ff735bed9874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06a53cd-e23c-421c-a126-f156d7edc84e",
        "cursor": {
          "ref": "9d5e9080-616c-43f9-9690-eef014572cb5",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "702f57db-342d-448b-a8bf-93189906ce57"
        },
        "item": {
          "id": "c06a53cd-e23c-421c-a126-f156d7edc84e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "77e1c374-4f49-459e-bff9-c855e260f302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5297100d-d7fe-4580-a7bf-af5d4955a192",
        "cursor": {
          "ref": "5edaea08-a476-4ef2-b3c2-2683d160576a",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3ecb3803-92c4-4c8b-8507-81314d090ccd"
        },
        "item": {
          "id": "5297100d-d7fe-4580-a7bf-af5d4955a192",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fc78958b-27b8-4e4e-8806-7e4d6bf47f32",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d051ef05-526c-49fd-b6a5-863690e3b7e2",
        "cursor": {
          "ref": "bf2e11e6-1a11-4d6d-a21e-5de060e112a6",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d6006305-6c23-493c-aed1-52207c757362"
        },
        "item": {
          "id": "d051ef05-526c-49fd-b6a5-863690e3b7e2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "09ccaf4e-6b7d-4372-8474-1f150cf0c61b",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d475d3b7-8889-44e6-a3d3-552c04f7182a",
        "cursor": {
          "ref": "082c35b5-5a9d-44fa-9bd6-e12fb7800900",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a1be830a-186f-4199-8f48-5791cb68c391"
        },
        "item": {
          "id": "d475d3b7-8889-44e6-a3d3-552c04f7182a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3f1ae166-5474-4d40-bf80-68f0953f9dc2",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "348ce9a8-09b7-4a29-9ac5-3bd75b443161",
        "cursor": {
          "ref": "3534805d-bed9-437e-959e-1ab59b38f0e9",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3ef35d30-53a0-4585-b8e9-1842d607b879"
        },
        "item": {
          "id": "348ce9a8-09b7-4a29-9ac5-3bd75b443161",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bc29d628-afb4-46ab-b033-59637b847770",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "84c00ebc-63ab-4dd9-b114-38402eb78cdb",
        "cursor": {
          "ref": "b782de13-fdae-4223-95fd-2c59b3095ab7",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "815f9673-2a4d-4253-a65a-7fe98d652456"
        },
        "item": {
          "id": "84c00ebc-63ab-4dd9-b114-38402eb78cdb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0abe9205-0d47-4e6b-8049-b2831e9caed1",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0cd9c05f-4d9e-43ac-9bd8-8774ed3f32a4",
        "cursor": {
          "ref": "bc3b0a61-dec8-4a2a-a227-5eb1ce099d65",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "694537fc-bb7f-460d-b2d6-ae4ab20309ae"
        },
        "item": {
          "id": "0cd9c05f-4d9e-43ac-9bd8-8774ed3f32a4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a164397a-c63e-4f0f-9f53-f00e7cb07580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc70991-373e-4527-903d-90adcea3e66f",
        "cursor": {
          "ref": "62b62c5a-7f34-463b-8696-9623a2b6e104",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6265d6c8-c523-4d91-a66a-19089640d713"
        },
        "item": {
          "id": "0bc70991-373e-4527-903d-90adcea3e66f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f267c406-8f6b-413a-9150-1e87c167fae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d060400e-0b1e-46cc-9686-2d5b65438fde",
        "cursor": {
          "ref": "2a8384c0-0929-40a5-aa08-2deb7f56b34a",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8bc67d5a-d620-4185-86e7-92bb7bf17182"
        },
        "item": {
          "id": "d060400e-0b1e-46cc-9686-2d5b65438fde",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9b4b281c-a404-4cd8-9575-73ea1f7201a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685ec2a3-e1e9-474e-af3f-54e1020be4de",
        "cursor": {
          "ref": "2fd387fc-cedf-4ce5-9b21-57856356b725",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "94fcebc3-f52d-48e6-a7c4-f29e521536c0"
        },
        "item": {
          "id": "685ec2a3-e1e9-474e-af3f-54e1020be4de",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8f71a5b5-81e8-462a-a652-c5bc0d55146c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43586fb-618e-415e-b489-570bd9342717",
        "cursor": {
          "ref": "5e2203cc-449d-4bf6-9dbd-0343d48e630c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d673928c-7f95-403c-8826-38e9f0c68d34"
        },
        "item": {
          "id": "d43586fb-618e-415e-b489-570bd9342717",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d7b87ee5-7ca4-4da3-bbdb-6916ddf965a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b664072c-2ac0-4264-8df9-0f76b4a48383",
        "cursor": {
          "ref": "05e88b61-2449-4660-92ca-c71ba458861c",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "826affd5-ec55-43a0-8381-bd53bcde7ed8"
        },
        "item": {
          "id": "b664072c-2ac0-4264-8df9-0f76b4a48383",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8dde8d14-db46-4aab-bf57-1662e89e24a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a052a4-bc03-461f-8938-989860572939",
        "cursor": {
          "ref": "71e0d78d-214d-4a97-abf4-65ad27966322",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "813a9967-460d-42df-8efe-1ba36d19d975"
        },
        "item": {
          "id": "e8a052a4-bc03-461f-8938-989860572939",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d292b1d9-81b2-4371-8bbc-3b36ad8852b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc70412-0b42-4ee6-93f2-0344eeed3482",
        "cursor": {
          "ref": "0c573d8b-65b6-4362-b714-0b2a72f120c1",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7202de51-385f-489d-8e81-da1fa251a35d"
        },
        "item": {
          "id": "adc70412-0b42-4ee6-93f2-0344eeed3482",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "31245bdd-fcb3-4a74-af92-c16c444be6dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4136620b-2a73-4218-9eb1-a9ccc7f61c40",
        "cursor": {
          "ref": "b744e93c-e4fe-427f-9530-8fba90fb78ce",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7b56e0d2-c07f-4a41-bce2-8b2a58c4ea91"
        },
        "item": {
          "id": "4136620b-2a73-4218-9eb1-a9ccc7f61c40",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4b38396b-1807-481d-9e1d-4f974796520e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b62ee1-943d-49d5-8719-a249b13a4fcc",
        "cursor": {
          "ref": "811432b9-6a30-464b-a85a-0e4f8b40fe41",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "71900b3f-9724-4b81-b3b3-094d46330920"
        },
        "item": {
          "id": "f5b62ee1-943d-49d5-8719-a249b13a4fcc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "93943f43-25c8-481b-8e01-19840d34321b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4322048f-acd9-4984-b4f4-26807e28a95d",
        "cursor": {
          "ref": "406af4f5-75e3-41c3-af9f-92f5f5ce01c7",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c6602825-3d4a-4a62-a224-5c3d62c541c9"
        },
        "item": {
          "id": "4322048f-acd9-4984-b4f4-26807e28a95d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "878aebd7-4cb7-41b4-983f-2728acc33715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bbf5da4-daa9-4797-a1ca-15d364d1464d",
        "cursor": {
          "ref": "26659e0f-b5f6-4fbe-9470-cb4780d747e3",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5412e8e3-daef-4313-a488-a2eb0d022ec4"
        },
        "item": {
          "id": "0bbf5da4-daa9-4797-a1ca-15d364d1464d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0dcaaec5-8389-431b-a486-ee0a36f3bbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70abdbac-a210-4549-9659-7607045c579a",
        "cursor": {
          "ref": "a150bdfa-3272-46aa-bd83-f5d808a78474",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bbf66212-3634-44dc-827a-4037d9cab8d6"
        },
        "item": {
          "id": "70abdbac-a210-4549-9659-7607045c579a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2b03bc93-5763-4f45-a892-82d7655cde51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574e798f-0659-471e-b510-111cab76ea53",
        "cursor": {
          "ref": "a93837fd-4126-45f4-9947-915a6bf531f9",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "79ab91b7-59be-4808-b6fa-cd8d7406abf5"
        },
        "item": {
          "id": "574e798f-0659-471e-b510-111cab76ea53",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a507577c-2eb9-43fb-b637-6e772bbab5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906d1e5f-3350-4620-8a41-bb675254c83e",
        "cursor": {
          "ref": "28b1912d-0e0a-4c7e-a4a4-591dcf4299ec",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a96f92e8-9360-4aa3-a411-cf2a2baefd30"
        },
        "item": {
          "id": "906d1e5f-3350-4620-8a41-bb675254c83e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6f884080-1b43-48ef-9159-98f32e94c961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b69b2c0-25a4-4c3d-b08c-26727df84b4a",
        "cursor": {
          "ref": "11449f4f-da5c-4d83-82da-07f2921faead",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d2413f1b-e69a-476b-80a7-5222d04cf8d3"
        },
        "item": {
          "id": "8b69b2c0-25a4-4c3d-b08c-26727df84b4a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "70065b7b-370d-4b28-8c3f-e1a2f9915142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9f79e6-f005-423f-bb11-38ae402a2f97",
        "cursor": {
          "ref": "0801ac12-2298-4833-bc95-c33895308880",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "db7101bd-6d51-4fba-993a-9666a7d886c9"
        },
        "item": {
          "id": "2d9f79e6-f005-423f-bb11-38ae402a2f97",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "afc6aef2-9f33-43ef-9fb9-4252148c4415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cdc572-af15-4f38-a8ae-ca26bba23146",
        "cursor": {
          "ref": "17b0185a-1fae-4c9d-866a-7f150be1ed6b",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "64e8edca-18e8-49bb-84b7-3b8c322a0f8f"
        },
        "item": {
          "id": "05cdc572-af15-4f38-a8ae-ca26bba23146",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "122eb74a-7161-4250-91cb-f8bb8215913e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e4e5d3-e4ab-41b1-864a-dbbdecc9ff5d",
        "cursor": {
          "ref": "69b6baa1-c5e1-4ed8-92b4-ef5131f6cd5b",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "efdae837-20b3-4696-9b1c-84137492fd19"
        },
        "item": {
          "id": "05e4e5d3-e4ab-41b1-864a-dbbdecc9ff5d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f762a4f6-0e7c-474f-83c4-c88e4d2e98da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a16affb-6aa0-440d-aa16-f0dc442aff6e",
        "cursor": {
          "ref": "72714a31-f6b8-4f14-99c9-a65abd94e180",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ae3dded5-4cb2-4548-b130-b495153cedfe"
        },
        "item": {
          "id": "2a16affb-6aa0-440d-aa16-f0dc442aff6e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6d0a81cd-4441-4e63-a838-75135e900fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189b7e89-f33e-4233-8fb1-0a027974fb7b",
        "cursor": {
          "ref": "07c57a01-22b4-4ffb-97b0-5fb4b6b317e5",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b866ec65-fbe6-491e-aa04-64ce14fe835b"
        },
        "item": {
          "id": "189b7e89-f33e-4233-8fb1-0a027974fb7b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "496b8780-3133-4037-ad98-b44e12a5710e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1634d044-0ce8-4414-b0af-112ebc1c8b0e",
        "cursor": {
          "ref": "32137ee4-835b-4cad-bf0e-65c79eea0449",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0639986b-fc1c-4c1a-acee-184dfdfdd414"
        },
        "item": {
          "id": "1634d044-0ce8-4414-b0af-112ebc1c8b0e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4a0b0069-b38f-43a2-a2fc-776740b00093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1b0f1b-7fa9-4f21-b7f5-919cf91afcfd",
        "cursor": {
          "ref": "7762edeb-ad93-4bc9-a650-2ae7afa839a7",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "80fca983-5901-4e83-91a9-8775cc5845b5"
        },
        "item": {
          "id": "da1b0f1b-7fa9-4f21-b7f5-919cf91afcfd",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "36f3fc4b-5231-4e75-9b8d-8a62441c97c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023589bf-ac21-4ba6-a1ec-d9fd62456ea2",
        "cursor": {
          "ref": "e9d3c676-26a8-4e4e-ba68-27f7171b1e12",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5038cccb-788f-4db0-9bf2-530f8012ba7a"
        },
        "item": {
          "id": "023589bf-ac21-4ba6-a1ec-d9fd62456ea2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1e55d687-5131-497b-af39-b112eab33787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2f2b7c-e3d4-4243-8fff-e4ff35eec145",
        "cursor": {
          "ref": "30eeafe9-8a82-4ebf-aea8-01732949a3d8",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "95772011-72f2-4f85-86ee-4246bc770d4c"
        },
        "item": {
          "id": "0c2f2b7c-e3d4-4243-8fff-e4ff35eec145",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "96dcd9a2-9dcc-4ccd-8e99-033c3b5cd5f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1283cd2e-a7aa-4cf4-867a-669254f36b57",
        "cursor": {
          "ref": "fd0b8420-be61-457b-8565-6ad94b99c6b7",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e7f1f475-721b-4608-bdf2-d7ae5f360e80"
        },
        "item": {
          "id": "1283cd2e-a7aa-4cf4-867a-669254f36b57",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "99e3f510-15fb-4893-a224-cd8ba42d20c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5ff838-0ac0-4397-b66b-f216484cd2cc",
        "cursor": {
          "ref": "d21bcb91-0906-4f0e-88ea-07b84a1eff46",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8bbf1a86-298b-4997-b012-baad64852391"
        },
        "item": {
          "id": "fb5ff838-0ac0-4397-b66b-f216484cd2cc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "020b41bc-5da4-4dce-8fe8-61fe3b5d2177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6d67b2-0b6d-4b78-b1d5-9766aa3bf2e7",
        "cursor": {
          "ref": "5a13d826-6223-4acc-b8ce-69d3f3bd0414",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f4b56d02-dcd1-4328-a3b3-1bef765e1a90"
        },
        "item": {
          "id": "7b6d67b2-0b6d-4b78-b1d5-9766aa3bf2e7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "933a95c2-a242-4256-9690-fd4c3594ceff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bafe8a6e-5eea-4bb6-b711-9af159512844",
        "cursor": {
          "ref": "0dcd0c3d-e0dd-4a55-aaa3-77603b47a5f3",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "54d7bfea-7edb-411b-b367-2ca3d58b1e08"
        },
        "item": {
          "id": "bafe8a6e-5eea-4bb6-b711-9af159512844",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8935d9e6-8e1f-4b3a-be19-2b881dd28a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32271308-2fa6-45c5-849c-e651c118b75c",
        "cursor": {
          "ref": "5e128389-c6db-4559-8c4d-0837e7167906",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1668c9a5-7958-40a1-8deb-62c751cdbbc1"
        },
        "item": {
          "id": "32271308-2fa6-45c5-849c-e651c118b75c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "94eb3152-885b-4200-b9a7-058a3713faba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4879a94-cec5-42fd-aa46-4389b91f821a",
        "cursor": {
          "ref": "46e8a485-d9b3-417d-9c74-dee8df255035",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9c873678-3180-47bb-9599-ca89b3f34549"
        },
        "item": {
          "id": "f4879a94-cec5-42fd-aa46-4389b91f821a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9b6669c7-5344-4209-a191-e3d4f30597a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7985dbe6-952f-4caf-88ed-023ba1814ab9",
        "cursor": {
          "ref": "186bde16-79ae-48c0-b3e2-3468107ac4a1",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "56e4801c-1b25-4fec-adbe-e5fe400e989f"
        },
        "item": {
          "id": "7985dbe6-952f-4caf-88ed-023ba1814ab9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "427ad507-a98d-4ac9-a412-de6ad2c8d3f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0b15ca-cab6-4940-81fe-b561fe3b8e6a",
        "cursor": {
          "ref": "88b46744-d1dd-4df0-bbc1-700b5a098438",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f7ba310f-7920-4ab4-bb89-c87873d2bdb7"
        },
        "item": {
          "id": "9c0b15ca-cab6-4940-81fe-b561fe3b8e6a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b9da7079-82a0-4396-bf35-4b3f5ea874c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "040cb212-0357-43fc-8c5d-edaa708e69d4",
        "cursor": {
          "ref": "57b3d707-5ffd-4822-ac3e-863e251b682e",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ab2921fc-c50f-480d-808a-6d98d5099178"
        },
        "item": {
          "id": "040cb212-0357-43fc-8c5d-edaa708e69d4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b7fc1535-62ed-4f9f-88a9-448339550f22",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1951e27-306c-4a53-b57c-4eb74d82e2f1",
        "cursor": {
          "ref": "7502e6c7-aad4-4d57-b677-928a040fd9f1",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "219942e5-b792-4fe8-8d69-decc4396bbab"
        },
        "item": {
          "id": "a1951e27-306c-4a53-b57c-4eb74d82e2f1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "31033c4a-f9fc-43d4-8d92-54ac6042e318",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "66357585-e01f-4f34-baa6-eff2d1f014c7",
        "cursor": {
          "ref": "f3480cc0-aa48-4783-8ee3-3c40ceac9ff9",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7963190c-cd4a-448a-bc20-4f9c56da2ffa"
        },
        "item": {
          "id": "66357585-e01f-4f34-baa6-eff2d1f014c7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4d1ccdd4-97cc-49cc-983c-f0bc49d5b11f",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "93748e2c-cff2-4bab-9eff-b3c3c804ac18",
        "cursor": {
          "ref": "50ba3e46-7419-471b-bc1c-a529ff382f29",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c3789ce1-1e85-45b2-99af-bec1ba37c532"
        },
        "item": {
          "id": "93748e2c-cff2-4bab-9eff-b3c3c804ac18",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9bdbaabc-6ff6-47b9-868c-2a69df108326",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "79658690-e6b0-4e27-9f26-a6b03031f1e6",
        "cursor": {
          "ref": "90381b40-93b6-4be5-b686-b6ba37d4e8b7",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7ce27cbb-58cf-4a86-ba4c-28357cf44f49"
        },
        "item": {
          "id": "79658690-e6b0-4e27-9f26-a6b03031f1e6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fcef0c42-5059-456b-b305-a5dd0ce4f5e3",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-24T00:35:29.269Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-24T00:35:29.269Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "500f8e37-e44d-4d5c-b781-3161512f61ec",
        "cursor": {
          "ref": "fa241922-a8fd-494f-9008-dc470e103663",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0a598a1c-1f7f-4904-a589-807f896b6415"
        },
        "item": {
          "id": "500f8e37-e44d-4d5c-b781-3161512f61ec",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7b308687-f2f3-4746-8fc2-56d4b507906c",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbf5bcc-1361-4a46-87d8-66dcae5e30aa",
        "cursor": {
          "ref": "7a9740e2-0d74-4aa8-a072-3fb8b39d4be5",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9f592312-4dce-46ad-89e8-5dba36a1774a"
        },
        "item": {
          "id": "9bbf5bcc-1361-4a46-87d8-66dcae5e30aa",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f7e69fb5-08fd-4198-87f0-e63b4a881557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddfd91a-6465-42a8-9d92-745c1bc8bd91",
        "cursor": {
          "ref": "26dcc66b-db98-462c-8f64-c2e63f837e39",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1c086704-00c4-4909-8015-2022d07ad92b"
        },
        "item": {
          "id": "7ddfd91a-6465-42a8-9d92-745c1bc8bd91",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bd6f1544-07b7-4180-ae9c-32d85f4f9c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa55ef21-d97b-4f66-b336-a8fff4b601db",
        "cursor": {
          "ref": "2cedd82f-b84a-4784-941a-54078ec4e3a7",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2a3a8b1b-7f9f-406e-9cc7-9bfe0e9287cd"
        },
        "item": {
          "id": "aa55ef21-d97b-4f66-b336-a8fff4b601db",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "60a26a83-903a-4cd4-a2bc-ad68467cb9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac34bee4-9a45-4c75-a10f-aee0c1458d84",
        "cursor": {
          "ref": "527e0d95-dc0e-4622-9ff9-9fffb112cd39",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3e1f924e-2828-4699-a97a-638cb09973c3"
        },
        "item": {
          "id": "ac34bee4-9a45-4c75-a10f-aee0c1458d84",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0848957b-d234-4fee-bae8-5249e3108ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1899fa3-5f04-43a9-b037-bd60068b8768",
        "cursor": {
          "ref": "44ee8a68-73a5-4c2d-9a34-975120b8db8c",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1ac7bce9-ff78-490c-833e-42042033fc60"
        },
        "item": {
          "id": "f1899fa3-5f04-43a9-b037-bd60068b8768",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bee1f76a-94cf-4e7a-a325-5e68870dcc06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea86280-32af-43fd-b31c-2b857945cae3",
        "cursor": {
          "ref": "36276a8b-3519-4bb6-815d-b17e9dc3dc63",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2b287395-1e9a-482c-971e-d96406289eb0"
        },
        "item": {
          "id": "2ea86280-32af-43fd-b31c-2b857945cae3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "04953695-e76f-478b-bcd2-6fee06f4323e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8870bcf7-0f49-45ca-9bb4-d65651634e57",
        "cursor": {
          "ref": "925f5c41-5282-4143-80de-ca224244678c",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "433d3c94-1f5f-4d25-93cf-9d9ae694fdc6"
        },
        "item": {
          "id": "8870bcf7-0f49-45ca-9bb4-d65651634e57",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "156017d0-42b4-4623-bba3-0df4a87b6652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c9e5f6-b92d-4475-a93f-1026eda0f41a",
        "cursor": {
          "ref": "6819c279-b75e-4776-bea4-943d9004ddad",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7d3d69bf-d96b-4fc5-8c77-29cc30ce4fab"
        },
        "item": {
          "id": "a4c9e5f6-b92d-4475-a93f-1026eda0f41a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e2d9380b-fdc7-4f42-98c4-227c74b48fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108527af-05fc-403f-88fb-38660e52a242",
        "cursor": {
          "ref": "732ec46c-5016-4ee5-92a3-96d0f64ad998",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "da3123ba-1790-49fa-9388-a19543346419"
        },
        "item": {
          "id": "108527af-05fc-403f-88fb-38660e52a242",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9c068ed5-76f1-4ac0-9c95-43f58061014e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e661148-436c-47c9-ac0d-07229e8f7cc4",
        "cursor": {
          "ref": "34e9b30c-41b9-4887-aeea-398fb88eec00",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8d0067b6-b54a-4d4e-ad39-d5823e472d34"
        },
        "item": {
          "id": "5e661148-436c-47c9-ac0d-07229e8f7cc4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4ff4c93d-6ac7-4c0e-ad02-fc58713be9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e435127b-8d48-4725-bb65-751b955e531a",
        "cursor": {
          "ref": "90d42d4f-65ae-4c1c-9b54-5f5577492dd4",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ab626eff-9593-43d2-ba92-3307bd3118b4"
        },
        "item": {
          "id": "e435127b-8d48-4725-bb65-751b955e531a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dab52105-6aee-4175-b375-9d6feb475d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c444ed-bb38-4bd4-bbb2-e6ae8e1beaad",
        "cursor": {
          "ref": "29a1231e-761c-4225-9102-7268348a9ae5",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "42604711-5a78-4bf3-8068-d23236c59a48"
        },
        "item": {
          "id": "d1c444ed-bb38-4bd4-bbb2-e6ae8e1beaad",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "942e15eb-4209-4406-9354-45afacfa5fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452d471d-7daf-48d1-a11c-6b673d4e1a10",
        "cursor": {
          "ref": "26b4002a-7182-463b-8d90-3d1012a88a4d",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2627c12d-e1bd-40fb-9005-a0acb00167ac"
        },
        "item": {
          "id": "452d471d-7daf-48d1-a11c-6b673d4e1a10",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "549ad182-a939-40bb-bd8e-985a541bb19b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f039702e-5d7f-4736-a1a9-09e2fca99e2d",
        "cursor": {
          "ref": "fc31a3b7-b68c-4ca3-af11-8978d1d6cf1b",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8a1e5208-2c02-43b8-81fc-3d3b38aa9858"
        },
        "item": {
          "id": "f039702e-5d7f-4736-a1a9-09e2fca99e2d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dd3d3abf-bdd5-4c04-aa07-251f6bdec6d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ad090fc8-a51c-4bb9-8b6a-3e93239257d9",
        "cursor": {
          "ref": "ea3762e1-c0d0-46bc-ab31-73327f02c18a",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b55d7722-cab9-430e-b397-5f287ca7dce4"
        },
        "item": {
          "id": "ad090fc8-a51c-4bb9-8b6a-3e93239257d9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "951e66aa-45ca-4882-a76c-f7a13a11ccb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef08a43-961d-4791-a575-4e19e4357692",
        "cursor": {
          "ref": "65a47e8b-3496-4196-89b6-9219df0ca038",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "aae73737-e81a-455d-827c-abbb01940dfc"
        },
        "item": {
          "id": "eef08a43-961d-4791-a575-4e19e4357692",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7af642d7-e3c4-456a-b0d7-00160822c17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe59cd4-675f-4952-93df-11ed76807ad1",
        "cursor": {
          "ref": "56b26780-e39f-4a03-b7f6-bd189d5e1d96",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6b4ecf0a-135a-4ed4-8c0d-5a9ddb74b932"
        },
        "item": {
          "id": "0fe59cd4-675f-4952-93df-11ed76807ad1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a729f03d-6074-40c0-8515-897e5e3dacf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237bed9c-5f7f-4156-8416-a13437765388",
        "cursor": {
          "ref": "9da11a75-2ce3-4e59-869e-e9e8dec3c210",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1b766949-2bb7-493c-9645-c4e4019b22af"
        },
        "item": {
          "id": "237bed9c-5f7f-4156-8416-a13437765388",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ea10dd37-cd84-4138-afb2-54853998fd59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eedd622-f1e1-475d-8431-08f825ef213f",
        "cursor": {
          "ref": "b116a796-9e17-4411-abe1-e7556a3e1e7c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c5cf6966-8793-4415-83a3-79efae305320"
        },
        "item": {
          "id": "1eedd622-f1e1-475d-8431-08f825ef213f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "df786694-dd55-412e-84e9-3e24b374464c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663ed069-b7e7-471d-8515-7d50683dabe7",
        "cursor": {
          "ref": "0a20b6f3-270d-4c75-b53f-1019e5428b51",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9f7df48f-0963-476a-91cf-cc091282cffe"
        },
        "item": {
          "id": "663ed069-b7e7-471d-8515-7d50683dabe7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "67675003-1f06-47a3-a743-5d2f15da2501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d54a16-007e-4183-b0a4-770d26d6da97",
        "cursor": {
          "ref": "cab269e7-ee4e-4dbd-9c04-00828b5a73b3",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b1dee29f-79ad-4ae1-805d-6a52007d2937"
        },
        "item": {
          "id": "c5d54a16-007e-4183-b0a4-770d26d6da97",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9436d384-c920-4727-98d7-2e2fd15c561e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d35bb85-313d-42b9-ac91-588e72e6f11d",
        "cursor": {
          "ref": "2fefa8eb-da2a-469c-8d03-5696cf96843e",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7fa73340-4f1b-41eb-8195-1bfa51ad4e17"
        },
        "item": {
          "id": "2d35bb85-313d-42b9-ac91-588e72e6f11d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cfc06b7c-f8c6-4f0e-9547-86a0c8040744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de11fb23-f17f-4f57-b361-f97262c7fa41",
        "cursor": {
          "ref": "e2128721-a3e7-4813-9978-8efff2c9a82d",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "76f37726-5dce-41c2-861b-63d5b1a4fd83"
        },
        "item": {
          "id": "de11fb23-f17f-4f57-b361-f97262c7fa41",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "93bfa38f-1d47-4366-87c5-dcb87e6ad02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b07404d-d560-405a-a2a9-086cbbd2adda",
        "cursor": {
          "ref": "37698d90-141c-4e90-8fab-f04c3608e8ee",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "262162c6-720e-4bf5-bce6-7635914e1920"
        },
        "item": {
          "id": "6b07404d-d560-405a-a2a9-086cbbd2adda",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f9dea215-893f-49f7-ad24-f28970589c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9aaa3a0-339d-40c5-ac68-cc76d4c0abb0",
        "cursor": {
          "ref": "1ebcb567-be6d-4110-8a8b-1d511ec55d8f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0c78ba72-cc1d-4617-aba6-4ba73d59524c"
        },
        "item": {
          "id": "a9aaa3a0-339d-40c5-ac68-cc76d4c0abb0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3c3b1299-db88-4f4f-a646-c4fdfee9133b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b45e729-90b2-4e25-af3e-fd998237d8f8",
        "cursor": {
          "ref": "78fd19be-c777-4b78-88e8-8e222c12ee09",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0f596f56-ce4d-4ba0-90e7-c6591164911d"
        },
        "item": {
          "id": "1b45e729-90b2-4e25-af3e-fd998237d8f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2f88d0d3-482e-43de-8042-d09349417be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5744c176-eb02-43ac-b028-d55737ac9dc6",
        "cursor": {
          "ref": "91cb71ac-13e9-49f2-8439-d2d517734e9f",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2b9d6af8-573c-4515-8734-28ea07cdbff5"
        },
        "item": {
          "id": "5744c176-eb02-43ac-b028-d55737ac9dc6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4fc6a4da-92ea-4e2b-80f1-5fbe696c1ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5607fdd-072b-4fe3-a9e1-6f6fd7845f5e",
        "cursor": {
          "ref": "9496ae90-32b2-4283-a9ff-f330e3fe0813",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4307b3e9-9ce7-4113-8a3d-17c46c23031c"
        },
        "item": {
          "id": "b5607fdd-072b-4fe3-a9e1-6f6fd7845f5e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a1371baf-6cac-4724-a256-8a54b67947e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8bcbc4a-1cb6-41cb-a709-82b7b53527dc",
        "cursor": {
          "ref": "ca0744e8-da8c-43f0-9d86-a7ef09a74dda",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "bb4eeabd-67fd-4d22-b98f-5a2415aac59e"
        },
        "item": {
          "id": "c8bcbc4a-1cb6-41cb-a709-82b7b53527dc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7268cf8b-688e-4d98-bc27-74d7a209be8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fcc712c-b125-4652-980d-9a483b2ce1a5",
        "cursor": {
          "ref": "51030772-328c-4c67-a7a3-ab82269b423e",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9e7e0eb8-c67c-4bf6-85d5-dd3c151466fa"
        },
        "item": {
          "id": "8fcc712c-b125-4652-980d-9a483b2ce1a5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ca901edf-e51a-4924-8192-55f8fcedbb87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aadd82e-ded9-4a95-a150-6d9d078705af",
        "cursor": {
          "ref": "b47ec17f-68f7-4a26-8d22-ea50885ae482",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f33d5fcc-1948-434b-87b7-5c5a04d0e494"
        },
        "item": {
          "id": "5aadd82e-ded9-4a95-a150-6d9d078705af",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5bea0bef-cb37-4add-baa7-fe6440c11f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51e6a06-4b19-4466-a868-36d9e3867a72",
        "cursor": {
          "ref": "df5eb900-f5fa-4e71-8f17-9f6a39defa2a",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b3cb2454-3137-44c3-a51d-acef17213584"
        },
        "item": {
          "id": "a51e6a06-4b19-4466-a868-36d9e3867a72",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f3f609ef-d2a8-4e66-b920-be403dec17b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540d7150-11b3-4578-8ae4-abaea3d03e38",
        "cursor": {
          "ref": "a171186e-6c06-4ea8-87d7-3b3102810485",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a728aa19-2abe-4044-814c-b57142c3d003"
        },
        "item": {
          "id": "540d7150-11b3-4578-8ae4-abaea3d03e38",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "476445ab-9b09-49be-bd23-d4d07ed91028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16385017-eeaa-46f8-85f9-381bfd9f0880",
        "cursor": {
          "ref": "78479e15-c97a-4915-8a59-58f806f662fa",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1c317c08-2c57-400e-8fc6-b749cf550bcf"
        },
        "item": {
          "id": "16385017-eeaa-46f8-85f9-381bfd9f0880",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "07a85a1a-1e2d-4c37-8acf-42aac4fddf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad32636-18e9-4565-b1b9-28a5b67ea5c6",
        "cursor": {
          "ref": "e6c282f2-eae7-4f9d-a7c4-7f81f73ed269",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6aca5c47-1799-4213-bce6-55ea27f063d3"
        },
        "item": {
          "id": "fad32636-18e9-4565-b1b9-28a5b67ea5c6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "195bf7b7-1964-4833-b84b-d8502e9aa663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e9f546-f9d9-4127-949a-9983afe2c6fc",
        "cursor": {
          "ref": "6b826b9d-08c4-4e96-845c-db190f0790ad",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6607d514-f91b-42e2-aaa1-10228ad0f123"
        },
        "item": {
          "id": "d5e9f546-f9d9-4127-949a-9983afe2c6fc",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c4f10d95-827c-44c9-b897-b136ffeaaecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8d2c98-15e8-4003-9751-805c6ff0259e",
        "cursor": {
          "ref": "c708a34c-d155-44f0-9e0a-8d032f112464",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4bb878eb-af81-4327-aaad-e3f72ac5fe32"
        },
        "item": {
          "id": "1d8d2c98-15e8-4003-9751-805c6ff0259e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "58b36e11-e836-46a3-96b6-2e2799f245b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651afd55-9340-4e25-91f2-90cf314f3492",
        "cursor": {
          "ref": "e2d4641f-7b6f-4301-8149-e054683dfb6f",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0546444d-9154-4373-b9f1-3693a8646208"
        },
        "item": {
          "id": "651afd55-9340-4e25-91f2-90cf314f3492",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9a5ef463-33b2-4a30-8599-5a6c8bb5144a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83533b8a-41e8-449d-83d6-08226add902d",
        "cursor": {
          "ref": "f8f4770e-e80d-46ed-a37a-96bbb8ba0968",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7ba511b5-eded-429c-90f9-fd371d47d041"
        },
        "item": {
          "id": "83533b8a-41e8-449d-83d6-08226add902d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1d9d85e1-525d-49a4-a949-88cced39a43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bda6e7d-3262-4b39-8f9d-4a0d02eddc4c",
        "cursor": {
          "ref": "f00d739e-44b6-4dbf-8d8f-0d7db67f8216",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b09a6ddb-7a16-46e5-b087-b10327bebbb8"
        },
        "item": {
          "id": "1bda6e7d-3262-4b39-8f9d-4a0d02eddc4c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "40005dc4-97e2-468a-aba4-fc3764381077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d0fc4a-f78f-48c1-b308-4b2871922b32",
        "cursor": {
          "ref": "47f26603-ffda-4652-b74b-865ec832ed60",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d85d5d1d-4fbb-495c-824c-aaec8d7d7275"
        },
        "item": {
          "id": "67d0fc4a-f78f-48c1-b308-4b2871922b32",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0c7cb0b9-6eb4-4ec4-abd6-17bcc8189fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9938acba-c05a-405e-9344-9527d2f97def",
        "cursor": {
          "ref": "3360efa1-be57-4ec5-924d-818f642b95ab",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "58d0b484-6d67-408e-bde5-a63f220609c9"
        },
        "item": {
          "id": "9938acba-c05a-405e-9344-9527d2f97def",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "71fbac76-4514-46c0-88e0-e4d167fbc49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a49776f-ab99-4176-bccb-e3699433af42",
        "cursor": {
          "ref": "fa13ae63-c710-49cb-bbeb-10600190d7ba",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "eb43d1f2-f9da-444b-809b-1b86ea1fb983"
        },
        "item": {
          "id": "0a49776f-ab99-4176-bccb-e3699433af42",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e1283f7b-d6a9-4e77-8cf6-59561dec7964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b96c6b-1c60-4abc-9f33-69f077cdc8fa",
        "cursor": {
          "ref": "b7ef77c9-f2a7-4d59-a323-19c1e8490e4d",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5639c977-ccd0-445c-a0aa-ecfdf8e18799"
        },
        "item": {
          "id": "89b96c6b-1c60-4abc-9f33-69f077cdc8fa",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4c42d025-0220-488e-a10c-bcfb6a03a4d9",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d03458eb-39a0-4857-b975-d2b17c8353ac",
        "cursor": {
          "ref": "57747b54-eec1-4ef0-8306-7d9f51b621db",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2c7ca893-197d-4540-b05a-5432071d159c"
        },
        "item": {
          "id": "d03458eb-39a0-4857-b975-d2b17c8353ac",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a87a1a51-60e0-4d89-93d5-5858d20e60ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3704fb9a-8d96-4448-bb58-e5be93a3c547",
        "cursor": {
          "ref": "8560d3ec-8c70-4001-a9db-f5fd519bc7d2",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "75c9ecef-426a-46b0-a31a-b668aa255160"
        },
        "item": {
          "id": "3704fb9a-8d96-4448-bb58-e5be93a3c547",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c3fadb76-f28f-4051-9880-00f255796e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97fd28b-1d43-49a2-a915-365c7e64b439",
        "cursor": {
          "ref": "9390430b-4ef4-4719-93a3-15a2a3f82545",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "da6948dd-7b51-4073-bff6-55a4da4f229a"
        },
        "item": {
          "id": "a97fd28b-1d43-49a2-a915-365c7e64b439",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "99e8d277-d75e-4998-b5da-90fcd6de4e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3165dae-69b9-44a5-b844-f76729b6c0de",
        "cursor": {
          "ref": "4fb4dc83-619d-4449-bc3b-11347f5f7a6c",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1d2baac4-c7cb-477d-9959-c1abd4daa7eb"
        },
        "item": {
          "id": "c3165dae-69b9-44a5-b844-f76729b6c0de",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1f487e6d-f062-43be-84df-0e84d64b4acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2050b09d-e920-4478-9e43-fc6e87e21818",
        "cursor": {
          "ref": "7cab2799-ae6b-4b66-99c3-cd77edf409cf",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f4ef5405-f4a2-45a4-ba40-4f5890f86898"
        },
        "item": {
          "id": "2050b09d-e920-4478-9e43-fc6e87e21818",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7cd93f31-d9ea-4d7e-b0b7-18ebd0ea997e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdc2ef2-d2ec-4a1a-9ada-6eeaab830d41",
        "cursor": {
          "ref": "43441f62-5085-497f-a153-092e50546247",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "989c6f58-5c38-4e74-89c6-52e706951bfb"
        },
        "item": {
          "id": "3cdc2ef2-d2ec-4a1a-9ada-6eeaab830d41",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "45e2abdb-5021-4ab4-9433-87a90eb7db2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da06f9e0-221b-43d9-a6aa-d6d22b29f7af",
        "cursor": {
          "ref": "c137103e-b649-4d54-880b-1fa92222330d",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4769f154-844e-4d4d-bf47-719af2554c97"
        },
        "item": {
          "id": "da06f9e0-221b-43d9-a6aa-d6d22b29f7af",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6c457995-f6dd-4389-b325-3c4764051213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a445c042-4841-47d2-b501-78d4d3e7538a",
        "cursor": {
          "ref": "1e5703d6-efa5-43d5-be35-d1bb606e7a80",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e3eb15df-1eca-4e21-8eac-5a962c95ff31"
        },
        "item": {
          "id": "a445c042-4841-47d2-b501-78d4d3e7538a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f3b7d53b-a2c1-4620-a553-ee3608a559cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a6111e-9546-4d6b-8c53-abde64c7901c",
        "cursor": {
          "ref": "53f2b514-8de4-485b-8caa-bb348906a555",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5029ddae-8fe0-43d7-bf4b-f0d0d9dfd4d5"
        },
        "item": {
          "id": "04a6111e-9546-4d6b-8c53-abde64c7901c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3d0e79e8-3cc4-4a58-aa86-4ce87c7fac09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30aa60c5-8117-465c-a32d-641a66b19ddd",
        "cursor": {
          "ref": "41b623fd-3aa7-440f-baa2-900f7e070261",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ce36b956-6f06-45f5-ad2a-7a2ddbccf50c"
        },
        "item": {
          "id": "30aa60c5-8117-465c-a32d-641a66b19ddd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4a9ef215-fd6a-4491-a3d2-a49d3fcafbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f71cf52-c05c-4ba8-b902-2c781829b76c",
        "cursor": {
          "ref": "2ddeed2c-c9ff-4599-b7df-06c7fdf2be58",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d4fa910c-5235-4f78-98e0-d4bf725d1b94"
        },
        "item": {
          "id": "8f71cf52-c05c-4ba8-b902-2c781829b76c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0c43d1f2-b4c0-4add-9394-3118288d2401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16ddfff-3e31-4d33-b703-b4a308b09902",
        "cursor": {
          "ref": "16bedba9-7684-477e-bc64-6ecf2ca2536d",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6fd7d224-0f66-4dea-bff1-e5685c432d4e"
        },
        "item": {
          "id": "f16ddfff-3e31-4d33-b703-b4a308b09902",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bc459cdd-82ec-4763-b58a-e9e60265a1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c269c0e5-601c-4bd1-84f4-34b7f2ebc8b1",
        "cursor": {
          "ref": "de2afb10-9021-4767-ab46-d24fdb40bc9d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6340809d-8aff-4dc1-9746-d6b09ef1663c"
        },
        "item": {
          "id": "c269c0e5-601c-4bd1-84f4-34b7f2ebc8b1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b7db37fe-d0ff-429a-ae10-3f37d0efa57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bd5375-201a-49ab-88d4-d26df5d0f9a0",
        "cursor": {
          "ref": "a0b7e1db-8578-411a-b78a-eec0871ab1b6",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3d221898-408d-4c47-8089-c69f02531d3c"
        },
        "item": {
          "id": "14bd5375-201a-49ab-88d4-d26df5d0f9a0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6dee6113-e651-4101-95a1-e77cf4929be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b52367-aa06-4aef-8933-277f98e70c84",
        "cursor": {
          "ref": "9e5174d6-67b7-41ce-ba72-ba07bdbf9303",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "951266c6-1a9e-4e46-83a2-5b6bed542d02"
        },
        "item": {
          "id": "b5b52367-aa06-4aef-8933-277f98e70c84",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ac9fe110-9d8a-4e25-979f-8c90abf701ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18668971-63c6-47e9-8584-68883b4dd212",
        "cursor": {
          "ref": "227bf315-cbdd-4d30-bf4e-f73dacdf8882",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8e8b9175-300d-4ca9-bd1b-18227fb6bfe7"
        },
        "item": {
          "id": "18668971-63c6-47e9-8584-68883b4dd212",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3650c187-209c-426b-a46f-124bb4e461c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c224664-c68e-4a1e-8711-bf99374030b6",
        "cursor": {
          "ref": "75c567b9-5b09-4166-bf70-f63059912ffc",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4f2d9a31-7977-4391-93f1-fb71f4c2ae68"
        },
        "item": {
          "id": "0c224664-c68e-4a1e-8711-bf99374030b6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bafb3983-fb0e-4bf1-a2c6-6ff9b36b9571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab048435-aac2-4af0-bae1-154bc661aecc",
        "cursor": {
          "ref": "448c2900-242f-4e8c-ad4a-535161e7dca9",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c2e094e9-c9ae-4937-8465-d545b44dd52d"
        },
        "item": {
          "id": "ab048435-aac2-4af0-bae1-154bc661aecc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ce455695-6a7c-46a5-8847-9f1b151f2bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd187b0-b2ed-478a-834f-c83b9430209a",
        "cursor": {
          "ref": "f5f37573-e823-4c0b-a69f-418e269a58e5",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a463b843-7e6b-4174-847e-11455818e456"
        },
        "item": {
          "id": "4fd187b0-b2ed-478a-834f-c83b9430209a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bd3c1810-20d0-455b-9b8f-04dd26529aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8d9e5c-87e5-4283-8904-6bc251b6926b",
        "cursor": {
          "ref": "ffe32ebd-b631-4f40-b195-ebe6c29f2bb5",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9d2b8281-a34e-4505-bd14-89b526ecb2e8"
        },
        "item": {
          "id": "ec8d9e5c-87e5-4283-8904-6bc251b6926b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "aa2d154d-8387-44e6-87b7-aaeb485849d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfd44af-2cb8-47db-adbe-06757fe4dad6",
        "cursor": {
          "ref": "edc9a459-392e-483b-a7b9-b9b5a31919d0",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2a71bffb-d3b0-4282-b6fb-f4e1a47a1b4e"
        },
        "item": {
          "id": "4cfd44af-2cb8-47db-adbe-06757fe4dad6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bce3d4e9-258d-4b41-b11b-d70efdfdced0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a7fece-544f-4c5e-aa20-dfeb1098814e",
        "cursor": {
          "ref": "17744cef-cb32-40f4-8d58-3a9b1f1a8bdf",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "447d7898-c319-4190-b38a-b5ffa7daae89"
        },
        "item": {
          "id": "a7a7fece-544f-4c5e-aa20-dfeb1098814e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a4329cee-a257-4168-8461-f3c33adb8fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0411e234-b6e3-4e92-acb8-4e13329a3438",
        "cursor": {
          "ref": "53005074-d5f5-4946-a65d-03741af35921",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6d6854aa-d2f1-498e-99d0-677e030a7731"
        },
        "item": {
          "id": "0411e234-b6e3-4e92-acb8-4e13329a3438",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1f458305-aca5-45ce-9b5f-3c5c33b15ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b9d982-1eed-4428-8e44-2230e7510766",
        "cursor": {
          "ref": "a6d85708-fe56-4543-b20d-9ec7d66e6f25",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0130c419-187b-4d49-a039-e6b49c8d5302"
        },
        "item": {
          "id": "c3b9d982-1eed-4428-8e44-2230e7510766",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "edecb35e-5f45-4c1a-bddf-0b112e0e211f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d46f337-2360-4d3f-ad3e-c762122221a5",
        "cursor": {
          "ref": "a60e4400-f8f8-4f82-941c-9d97e96ee68a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4001fd10-2ed1-46a4-9c70-33401eb390af"
        },
        "item": {
          "id": "8d46f337-2360-4d3f-ad3e-c762122221a5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2b2bd150-3973-4fe2-953b-09336fcf3424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836f816f-f876-480d-abc7-c4a36ea583fa",
        "cursor": {
          "ref": "061c72f3-8f1a-463c-b09b-0d8bf4dff9d7",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ac51bd77-97d4-4ec5-8d8e-d095e161a0e5"
        },
        "item": {
          "id": "836f816f-f876-480d-abc7-c4a36ea583fa",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "965e4711-a475-45f3-a4fe-de822d5e4006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac9c703-2c5a-4ba0-b97e-e58d689ead99",
        "cursor": {
          "ref": "3c04fd3c-f50d-4a59-95f1-5891c70f3835",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0d59f512-b533-4be1-90b8-49ad689f2258"
        },
        "item": {
          "id": "0ac9c703-2c5a-4ba0-b97e-e58d689ead99",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "78ce7098-c104-467a-a9c4-a944c45f4a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c1c302-1946-46a2-b7e8-c6641be07a4b",
        "cursor": {
          "ref": "627c4f49-9716-4051-909b-9e58b40b6c0f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "03abf098-0aec-4ee1-90a0-ba596751ddc9"
        },
        "item": {
          "id": "52c1c302-1946-46a2-b7e8-c6641be07a4b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "aca481f2-c637-4343-bbf8-71b31e2b65db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e008eb9-7c6e-4d3a-8cd9-3fc7e44e2dd0",
        "cursor": {
          "ref": "7f0e33c8-1c2f-470e-8bcc-aa2511945e67",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6a316ea1-5007-4f77-8183-4685cd52d0af"
        },
        "item": {
          "id": "9e008eb9-7c6e-4d3a-8cd9-3fc7e44e2dd0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b4d64b7c-a7e1-4a16-af94-7a584cdb4c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0152a416-796a-40ba-8298-47b29eb4706f",
        "cursor": {
          "ref": "cca58459-b7cb-4e72-a9c9-2837cfd08cce",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "488e1159-23ee-4d50-bd47-c50006c4e82e"
        },
        "item": {
          "id": "0152a416-796a-40ba-8298-47b29eb4706f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b7652945-acd4-48f2-885e-d7fbba4023c2",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "2e106837-c12b-411c-970c-6baafd401883",
        "cursor": {
          "ref": "3c8d7c62-a941-4078-9518-abaaac124f56",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2fe0e156-f886-490a-ac77-a3805eab34bd"
        },
        "item": {
          "id": "2e106837-c12b-411c-970c-6baafd401883",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "94369ab5-1db8-49dd-9235-fc288a16076b",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "fa18ea0b-85b9-42df-9c30-6c0d1349c6e1",
        "cursor": {
          "ref": "8b6fb445-64ef-4959-8c60-6aee87b3f488",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c86aa7cf-f3fc-4c30-8720-4beeb5bded15"
        },
        "item": {
          "id": "fa18ea0b-85b9-42df-9c30-6c0d1349c6e1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2493dff8-87c6-4782-a5b0-611ec24f45bc",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0a8e891e-ef88-4705-b76b-ec74224f517d",
        "cursor": {
          "ref": "f1390f88-9f0c-448a-9016-1b8f6ce5b047",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "71afc429-f9de-4988-b7a2-1392a9865dd4"
        },
        "item": {
          "id": "0a8e891e-ef88-4705-b76b-ec74224f517d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "30f3b98d-cbc6-4683-82bc-243ecd281fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f879bb4-e178-41e0-bab3-82fd60467c99",
        "cursor": {
          "ref": "701b3543-f6ef-450a-9bc0-ed037ce4545c",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "78be95d6-b7d4-44bf-bf9e-99e3053133cd"
        },
        "item": {
          "id": "3f879bb4-e178-41e0-bab3-82fd60467c99",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7a972815-eb73-4179-a955-237cb050b2fb",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "09662da6-f32c-4064-9eff-78609890d867",
        "cursor": {
          "ref": "b1c228a7-fa0b-4e29-8fd4-81e35fdc9cfe",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "db97bbef-ceda-4e47-a271-30a9c5011621"
        },
        "item": {
          "id": "09662da6-f32c-4064-9eff-78609890d867",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "580cec41-a824-471c-8097-a9e609fc5742",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "2500eefb-07c5-45fe-89a7-42c21d812442",
        "cursor": {
          "ref": "f13d99b4-6753-4ceb-84ad-a217b80e9e74",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4d1edc1f-5b41-4715-9806-3babe69219bf"
        },
        "item": {
          "id": "2500eefb-07c5-45fe-89a7-42c21d812442",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d96d34ef-b4a9-4e44-b4bc-a069588187a0",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "06c5db47-7f3d-46df-adf2-4f99b10bdb40",
        "cursor": {
          "ref": "b71a7d03-1e26-443a-98a3-6932b6011333",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a49b2e5f-1522-43d8-aad5-08693ef977a3"
        },
        "item": {
          "id": "06c5db47-7f3d-46df-adf2-4f99b10bdb40",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "58e20d99-4de4-4645-91b9-43c6479b7274",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "633e9729-e52f-47f9-bcd8-74a9ff96f739",
        "cursor": {
          "ref": "dd4047fe-19f5-4938-b45c-b0b6cab3761a",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7aebbcf4-0410-4420-9888-ca38df2961a8"
        },
        "item": {
          "id": "633e9729-e52f-47f9-bcd8-74a9ff96f739",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "adba2b1f-936e-4942-b493-f0bc147a6005",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "8ad97925-5595-4774-b1b5-572a5d7a0de6",
        "cursor": {
          "ref": "666905fe-ccaf-4d22-afe6-dc38c0250d40",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ed1c996a-e32b-4729-80b0-933337b399bc"
        },
        "item": {
          "id": "8ad97925-5595-4774-b1b5-572a5d7a0de6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0e00bafa-3501-4498-bca4-4ff3db4ae003",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "a777e7bb-5ec7-4277-ad2f-958ef3b9567b",
        "cursor": {
          "ref": "17611284-8530-4c08-984b-848624ea1867",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ea0a34e8-d3a1-4fa1-885e-3e882f663414"
        },
        "item": {
          "id": "a777e7bb-5ec7-4277-ad2f-958ef3b9567b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1763f4af-fcee-473d-9397-9bca1ec41016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241b9db5-2dd6-4e1e-bc45-60f2b006eb09",
        "cursor": {
          "ref": "cdec53dc-0d3f-4e91-b8a4-1f12a63e4e08",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "35aeac4e-848a-4e95-a4b8-0ce2361f24ba"
        },
        "item": {
          "id": "241b9db5-2dd6-4e1e-bc45-60f2b006eb09",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d4b19a1c-b456-427f-8e8d-55723acdf3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69242b57-0fae-4429-9909-48703f5d6f2d",
        "cursor": {
          "ref": "4ac1385e-bc72-419f-b86d-14ed5c3d26d3",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c7ab545e-0016-4196-9c1a-166900c90df2"
        },
        "item": {
          "id": "69242b57-0fae-4429-9909-48703f5d6f2d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "efe13096-70d1-4e17-a598-bfb4e8e7cf65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99be219d-8e88-4c8c-b3b5-2011a6445bf2",
        "cursor": {
          "ref": "813eef58-245a-4ef7-b62b-47c957201239",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "50501f08-3021-4a94-be40-43bf1153cdfa"
        },
        "item": {
          "id": "99be219d-8e88-4c8c-b3b5-2011a6445bf2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b5d276b0-446d-49ac-abe8-c1b09487e444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5624980-7ee7-471a-bc95-092fcae52092",
        "cursor": {
          "ref": "6f51e7ea-95a0-4883-9ee5-5dfc8909e180",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "49d58c92-bd95-4a3d-b161-85cb980953cc"
        },
        "item": {
          "id": "a5624980-7ee7-471a-bc95-092fcae52092",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f43783d4-8f50-484d-b905-c13fd7878bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbd36f0-f80e-4f67-bd84-1aab5caa25c0",
        "cursor": {
          "ref": "fad5de13-1abd-4ed5-a3a7-e38ade26930e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "478f824a-19ea-4ed2-96e3-dd6d4c93eff0"
        },
        "item": {
          "id": "2bbd36f0-f80e-4f67-bd84-1aab5caa25c0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3a4214f3-6824-4821-8286-467742acb4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a25a8c4-76e8-46c0-a70d-f045db4b1de6",
        "cursor": {
          "ref": "85cc5a63-d0d1-406c-8bd2-4c2ba17bc1db",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8d5fd33b-3830-479f-9b09-84d12b38527c"
        },
        "item": {
          "id": "0a25a8c4-76e8-46c0-a70d-f045db4b1de6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7cd18078-677b-4ec4-a3b7-20dca18e6371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ad213c-37ac-41a9-ae09-387a48fcde65",
        "cursor": {
          "ref": "2eabf93a-bb19-4b60-a5a6-d12721cfa4aa",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6364328d-92bc-49bd-a76e-03d5e79f9b4e"
        },
        "item": {
          "id": "05ad213c-37ac-41a9-ae09-387a48fcde65",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "17bd6645-c4ec-412d-923b-ec7bff476f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba059864-802f-47df-a7aa-4809825c5df7",
        "cursor": {
          "ref": "8be1c9b9-65dc-46c0-ad55-4475f4d52cc4",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ef5ddd4f-1868-4f6e-80d4-8327c833ce6d"
        },
        "item": {
          "id": "ba059864-802f-47df-a7aa-4809825c5df7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3b396a3f-3154-439d-a979-68f0dbd0abcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3a86b7-d643-49c0-b30f-a70bcf3def59",
        "cursor": {
          "ref": "d481bc4a-9c01-48b9-ab9c-d91007cd9ece",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f1633154-b240-4ea4-bc14-fa11854355bb"
        },
        "item": {
          "id": "4e3a86b7-d643-49c0-b30f-a70bcf3def59",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d2661816-79c4-4718-86f8-d56e21f688e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de041b15-f3dd-4800-8c52-7170dee5caa0",
        "cursor": {
          "ref": "f7d7f443-c9d1-4999-a5c1-d520dd237d12",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a8c99e9f-a756-4594-b4e2-7af9bd4b060a"
        },
        "item": {
          "id": "de041b15-f3dd-4800-8c52-7170dee5caa0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8ee415f3-b023-4a84-b0e0-795a66b5c4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a53c305-f309-4a6e-a0c2-1c1628c1a8ed",
        "cursor": {
          "ref": "8b062310-1f00-4fa5-bd2f-cc1a16c44cdb",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "26070f5a-f59b-47bd-94a4-0dacada2eecc"
        },
        "item": {
          "id": "0a53c305-f309-4a6e-a0c2-1c1628c1a8ed",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cf638873-2441-4690-9ac3-4bd5684eccf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa02ba4c-8263-416e-ad52-32e7deaa6276",
        "cursor": {
          "ref": "0cb1f5ae-6a20-4d92-8643-a055b222c139",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7cf308a8-0aa8-418c-9ab8-da6813c203ce"
        },
        "item": {
          "id": "fa02ba4c-8263-416e-ad52-32e7deaa6276",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c6f167e9-8898-4ed3-a2e2-a0447650d3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b345ef-e52e-47e5-abd4-ee07bc6ab1a0",
        "cursor": {
          "ref": "e4458d02-66ba-47b5-a6a7-f6ec3d320453",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2db27328-cb5e-45ba-9377-4106caf1eb02"
        },
        "item": {
          "id": "d1b345ef-e52e-47e5-abd4-ee07bc6ab1a0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "43f4d773-7774-43e0-b72f-147ef9e67756",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "9d77c19e-bca1-48b4-8a14-1d14578465e0",
        "cursor": {
          "ref": "ddb9300c-9fb7-4f9a-a38d-caf818da7f79",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bcf1b3e4-2d6e-459a-b8c2-53d1aefa91c5"
        },
        "item": {
          "id": "9d77c19e-bca1-48b4-8a14-1d14578465e0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1e069c2e-c92c-4eb5-b895-f79ad156d7eb",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "2f69f817-f6a8-4628-ac3d-cb3183047b54",
        "cursor": {
          "ref": "08847280-42f4-46cf-ba39-5966e28dae67",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d779ae78-70bb-41a9-a32f-d73631acd20c"
        },
        "item": {
          "id": "2f69f817-f6a8-4628-ac3d-cb3183047b54",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "69a76154-8e89-4188-9b37-cde24450fff2",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "260ba9a2-67ed-47fc-beeb-7c6ec9d0d99c",
        "cursor": {
          "ref": "e2588325-3b7c-4bd5-a06d-90f47459a91f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4b7bec97-f9d8-4d51-a4b4-8e4f20905b8c"
        },
        "item": {
          "id": "260ba9a2-67ed-47fc-beeb-7c6ec9d0d99c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a2142182-cc6e-4ca6-af5c-6a847b8b2206",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "a7b165c4-5d5a-4027-8acc-9c2d5906ccdb",
        "cursor": {
          "ref": "fbedab4b-c54e-4edf-967c-9bc226e812ca",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9a3ad2ee-54d2-4883-ad87-4752500bed06"
        },
        "item": {
          "id": "a7b165c4-5d5a-4027-8acc-9c2d5906ccdb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6954800e-df2d-4358-9e08-e079cfb1dc11",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "13bfb7cc-a399-483c-98db-f73c068d9889",
        "cursor": {
          "ref": "1b37480b-d29f-4913-b4c3-8b53e36dde28",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "aca0f39b-8a06-4f42-9eda-a4a2ef9de36e"
        },
        "item": {
          "id": "13bfb7cc-a399-483c-98db-f73c068d9889",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "38034fd5-839b-43ad-9edb-2bb1f8b947e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d11ab49-43a9-4a16-9d65-94612dd7ed24",
        "cursor": {
          "ref": "f28e5745-5535-4568-b171-b5db4da5961f",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "19ec24fd-c1f8-4af1-b2ab-f5699602294c"
        },
        "item": {
          "id": "3d11ab49-43a9-4a16-9d65-94612dd7ed24",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8cd847f8-6987-428e-ac5e-9cc0ef9dccda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1fac7b-1d22-475a-8172-f0a220e3b8e3",
        "cursor": {
          "ref": "bceb3c82-f6fe-41e9-832e-972a0d9929c8",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "cce53335-91ee-4a18-9ca1-84f7b73e1ecb"
        },
        "item": {
          "id": "cb1fac7b-1d22-475a-8172-f0a220e3b8e3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8cb9ed97-9b94-4d3f-8c42-67f8f5c5c922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb1ade0-200b-4498-ad00-42b0c487a0d1",
        "cursor": {
          "ref": "89773d53-61f8-4ae5-b1d0-694d0f00d508",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ff126e43-4d61-4a09-affe-661e677e1491"
        },
        "item": {
          "id": "8cb1ade0-200b-4498-ad00-42b0c487a0d1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "23dd2d86-9636-4626-ac72-d4eced87dec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0742e25-d946-475c-b504-fcdc2eba4de3",
        "cursor": {
          "ref": "d000f551-ffe0-475f-a4c6-a3af448e8803",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ce87a838-8a63-40c1-ad3b-3a21aceca0a7"
        },
        "item": {
          "id": "d0742e25-d946-475c-b504-fcdc2eba4de3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "042a4787-2186-42d9-8af4-41e218e74253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cd0b56-a17b-4566-a7d9-f93eb3640e42",
        "cursor": {
          "ref": "12969ec9-49bc-44a7-b9f6-c1d4d2829231",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b45a6b28-fc66-4ed2-b581-55ee92a985bc"
        },
        "item": {
          "id": "51cd0b56-a17b-4566-a7d9-f93eb3640e42",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "eed487b5-a747-4750-9e91-070c068749b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d607979d-7346-4b2e-97be-d8d82204af98",
        "cursor": {
          "ref": "c586559a-bad2-4cca-9559-ba61ee712a4f",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c5889933-b583-40cb-bc68-d52c4c7a1d16"
        },
        "item": {
          "id": "d607979d-7346-4b2e-97be-d8d82204af98",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "eb762780-99eb-48b8-9ed6-a3b3cb8e29c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ae3f46-e83b-4772-9989-a47a48497048",
        "cursor": {
          "ref": "ad4ca200-5bc1-4c07-95e7-8f1ee207bbb8",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5a15e34f-7bce-487a-a291-d015236bf4bf"
        },
        "item": {
          "id": "d9ae3f46-e83b-4772-9989-a47a48497048",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "69e874dc-681c-48f8-8401-5af0c5ae8b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688f614c-4f68-4b2c-9f20-a73db6591e1b",
        "cursor": {
          "ref": "60e4c3bc-6b9c-40b1-bba0-dbaf0d2fabe7",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f7764440-f6c2-4d4d-b51f-3d635216d5f0"
        },
        "item": {
          "id": "688f614c-4f68-4b2c-9f20-a73db6591e1b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fb181daf-94f4-4c23-bff9-d8f4417f0c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14cab610-0493-4936-80fd-752fdd602801",
        "cursor": {
          "ref": "6e09a343-5f22-41e6-8e3d-53e2938b3820",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0254762c-7425-481e-a7ba-c43253fa29f3"
        },
        "item": {
          "id": "14cab610-0493-4936-80fd-752fdd602801",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5bc162f6-9711-4cae-96b8-b2efe7c5b7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33dfe673-e478-4bf8-938b-ab69dc4575c9",
        "cursor": {
          "ref": "88c82233-35c7-4339-b604-976ceffc092b",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1b7827e1-8a21-415f-8c06-dc73516e37cc"
        },
        "item": {
          "id": "33dfe673-e478-4bf8-938b-ab69dc4575c9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a21e1098-5a50-4c98-9581-0030b75f6a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9353c555-a735-4a04-a5aa-3cca1e9a5ddc",
        "cursor": {
          "ref": "0cc7b055-4125-4e82-92e4-3f110837b3f4",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5b7445e0-af50-408d-b9c2-7ba89b54372f"
        },
        "item": {
          "id": "9353c555-a735-4a04-a5aa-3cca1e9a5ddc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1226bbef-9f01-4030-ae10-26b295331af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200d2df2-6d47-41f4-bd4f-82efb8c2d7f5",
        "cursor": {
          "ref": "1eec456e-912e-47a9-8a96-e44795371593",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "618fff88-0f53-476d-a9a4-365c54c0e457"
        },
        "item": {
          "id": "200d2df2-6d47-41f4-bd4f-82efb8c2d7f5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a6924f2d-54da-447e-8a75-5eb5e8f05380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743cf3d3-ac35-4a4d-8520-03209c76f37a",
        "cursor": {
          "ref": "a893012b-8150-4a70-817d-c76e39b0aa8b",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3fd1dc36-162f-4031-8c4a-c52e8a3b0809"
        },
        "item": {
          "id": "743cf3d3-ac35-4a4d-8520-03209c76f37a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "21943ea8-0b79-48a6-87aa-074ee1835681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e15335b-d1d1-43ab-837b-b829ebf52803",
        "cursor": {
          "ref": "54ec347a-f337-4733-81f5-13e082166b92",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "009e5592-9073-4d4e-a4a1-728a81fa473e"
        },
        "item": {
          "id": "5e15335b-d1d1-43ab-837b-b829ebf52803",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fc66d5b4-ca72-431a-98d1-f8da70c64133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79268fd-c5b8-4d29-bf63-25724a59dc5d",
        "cursor": {
          "ref": "2b64d4d5-2108-4653-8532-0fb98d8abf9d",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "387fe9f7-0368-4231-8e37-130aff90cbcc"
        },
        "item": {
          "id": "f79268fd-c5b8-4d29-bf63-25724a59dc5d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cf578c6c-4bd0-4cca-8dfe-3266294ac797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b54061e-e3fb-4c12-bf41-1955f9ff2aaa",
        "cursor": {
          "ref": "73507b3d-93b6-44ec-a3b1-e10b7fa74033",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "270172a0-3dfe-49cf-bf6f-5b354190117d"
        },
        "item": {
          "id": "9b54061e-e3fb-4c12-bf41-1955f9ff2aaa",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "83a7b434-d71c-40eb-b729-627e202753f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e629a8-43a7-4475-a179-20bf71d196a3",
        "cursor": {
          "ref": "96360030-fa13-4187-8201-7473193121ce",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3577710b-0ca3-4338-a29e-b937c695d6ec"
        },
        "item": {
          "id": "73e629a8-43a7-4475-a179-20bf71d196a3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8e3d26c4-ae01-45cf-a588-e25aa71e33b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae37b636-586e-44d9-9edb-6b195f91d34e",
        "cursor": {
          "ref": "d226415c-3856-4ede-ace8-0df702fea5b0",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1247a752-ac7f-4b83-be5d-a507c6ba1eb1"
        },
        "item": {
          "id": "ae37b636-586e-44d9-9edb-6b195f91d34e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d7e9321c-a0c5-49e0-9f97-b98b7d079e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c359163e-ef44-4c2a-966e-550c74b010da",
        "cursor": {
          "ref": "41d3555f-3ce4-47cc-8117-73ab8404b4eb",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ee282894-9c4d-4ab3-9d0b-811c3e7c2cd9"
        },
        "item": {
          "id": "c359163e-ef44-4c2a-966e-550c74b010da",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "92d87ecb-53ad-470e-a783-d7736e5a397b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11dbd106-b496-4695-9b13-98bad41f93f8",
        "cursor": {
          "ref": "240378de-1f30-47b2-bdd0-78e484dc851f",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c60fc1c1-c814-4aea-9572-5d35292eb203"
        },
        "item": {
          "id": "11dbd106-b496-4695-9b13-98bad41f93f8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3c3a7b4e-55bd-4bde-a5b6-fe523136989e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb19f44f-0640-4e37-ac88-effe82b6271d",
        "cursor": {
          "ref": "a6f4e140-4dc8-4e74-8c9c-dadc4a48e933",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d73b43cd-a7b8-4a47-9dbb-0d8a7a131f9b"
        },
        "item": {
          "id": "eb19f44f-0640-4e37-ac88-effe82b6271d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bbfa6a19-e345-444e-8496-dfc6b7b68f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf977f71-ad23-4c03-98cd-3c2417da797c",
        "cursor": {
          "ref": "be6b8d1d-44b4-4b95-bb3f-752d1f59f846",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "81f9e099-b746-4792-9361-79b56f229abc"
        },
        "item": {
          "id": "cf977f71-ad23-4c03-98cd-3c2417da797c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3c89bae6-dc25-4c12-839b-07310088ee96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b30068c-9444-4dfb-80ec-aa5cdc2677a3",
        "cursor": {
          "ref": "39a59267-d7f2-47ee-806e-8d13b1ca6abe",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2051c1bb-910d-42a2-bf19-26b2394c6773"
        },
        "item": {
          "id": "8b30068c-9444-4dfb-80ec-aa5cdc2677a3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "552963bc-95e8-4ff3-8087-5bd464c4c1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f3a292-3375-4a97-89d0-2b4518b2feba",
        "cursor": {
          "ref": "8967647e-4237-4f41-9a18-17fa11d15a92",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dae37009-59fa-4990-b54a-cccd6ad35314"
        },
        "item": {
          "id": "a3f3a292-3375-4a97-89d0-2b4518b2feba",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "74b31207-2b69-439f-84e5-6bea3e7aba13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c15b134-b10e-4126-beda-b11d86cbe30d",
        "cursor": {
          "ref": "64442e45-b84e-40e1-88d8-f4338c868669",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fbfb9c29-852e-4efc-8ac4-f018f56d8168"
        },
        "item": {
          "id": "9c15b134-b10e-4126-beda-b11d86cbe30d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b04bf41f-e974-4afa-bae7-20cabbc58fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e792647-1c1f-4e12-a38b-d797edeae762",
        "cursor": {
          "ref": "09ff7fde-a14a-4417-9803-ba253c64a081",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fd143a9b-5c7d-42ef-99ad-03141105f3fa"
        },
        "item": {
          "id": "3e792647-1c1f-4e12-a38b-d797edeae762",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1c26e98c-596c-47a2-94bb-60e885478862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e512866-277b-45c9-9540-5534c2aa1f8f",
        "cursor": {
          "ref": "50d78615-1d7f-4053-a252-a310c2aae6fb",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "31ec3087-efbd-41b6-9a9a-c706d287f647"
        },
        "item": {
          "id": "4e512866-277b-45c9-9540-5534c2aa1f8f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4fca4a3b-a54c-4642-99fa-b74f07015f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67bd964c-3495-4fff-b6c6-c6679a40b757",
        "cursor": {
          "ref": "17a865f5-3c9e-49e3-a047-b81b0b7940b4",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7452c471-6d24-4bbe-b08c-d6526e74aa1b"
        },
        "item": {
          "id": "67bd964c-3495-4fff-b6c6-c6679a40b757",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5ada556e-17e9-4ee4-a2a6-ec08865c27ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a78b972-9502-496e-8b03-a8131f77455f",
        "cursor": {
          "ref": "4f87fadb-b24e-4cbe-ac57-9c6e805d2862",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "876b2137-6bf0-44a3-85d4-0f90434d53b1"
        },
        "item": {
          "id": "3a78b972-9502-496e-8b03-a8131f77455f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0a0d7a61-1053-4e1e-9b8e-13d34f74179a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d08fba8-620b-4320-9bdf-114400eaac36",
        "cursor": {
          "ref": "eb937e24-7e4b-4595-8a13-cd289595f760",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b4c5d785-b1ae-48a3-a3c0-438a6b1697c3"
        },
        "item": {
          "id": "9d08fba8-620b-4320-9bdf-114400eaac36",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "56aba107-13cf-44c2-84fb-21b177e9b636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc646a6-669d-4a66-9ed6-19f98171de11",
        "cursor": {
          "ref": "382864cb-a0fc-492e-b85d-f5f02cdb28ee",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ff9b19d7-2311-4fbe-904a-755299033f75"
        },
        "item": {
          "id": "3fc646a6-669d-4a66-9ed6-19f98171de11",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "576a53bf-fe6e-4dc8-9ed3-973b5f5415b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067f57e9-16ad-4ece-b978-8829b476aade",
        "cursor": {
          "ref": "97fc362e-edee-4c9b-a64b-32fa0e5f961c",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "24a4d9e1-032a-4d87-a423-8357cff9c8f2"
        },
        "item": {
          "id": "067f57e9-16ad-4ece-b978-8829b476aade",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b395ec18-467e-44a9-b67d-770b1b357c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8922f1a-ee3b-4033-b850-02cee718499e",
        "cursor": {
          "ref": "351173a2-2ee7-453d-b16f-278a1f691c53",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4f651776-af36-43e8-8516-5f33f03c084a"
        },
        "item": {
          "id": "f8922f1a-ee3b-4033-b850-02cee718499e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1d2d8460-21f1-4144-a571-905950a6f716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773dfd99-b068-4b3e-8cbd-3049c04826f7",
        "cursor": {
          "ref": "6312b17b-3d2e-48c7-aee6-da6b2746bed8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3945db2a-c2c2-476f-9a80-3f79e37ab7ef"
        },
        "item": {
          "id": "773dfd99-b068-4b3e-8cbd-3049c04826f7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8d6f79e5-adcb-4f9b-8df6-e9e4b1859970",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43978d05-d124-4a9c-bbc1-1879c08ff85b",
        "cursor": {
          "ref": "8c5ed18b-9bdd-46a2-964e-e39f57368f7e",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f138a6de-365b-4287-8b1f-86b51dcd8f24"
        },
        "item": {
          "id": "43978d05-d124-4a9c-bbc1-1879c08ff85b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "36ce4b91-ce7e-4fbe-b94b-ceb98d6b489f",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "f3d283d2-2495-4f57-9c54-40d1c1624cf6",
        "cursor": {
          "ref": "b47f4b4c-0813-404b-aea9-983fbf32f63c",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8acbe68f-ab10-4c2b-9046-95fcd818c56c"
        },
        "item": {
          "id": "f3d283d2-2495-4f57-9c54-40d1c1624cf6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "66199425-143c-4d7e-8143-3003f29bb44b",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9249058d-d076-4395-ae68-d20b1d288276",
        "cursor": {
          "ref": "247e2464-9c63-4f86-931c-e11925fa0e43",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e4bc001a-e582-40fb-bf90-ee30ca02f2b5"
        },
        "item": {
          "id": "9249058d-d076-4395-ae68-d20b1d288276",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ed0ae26a-e058-48d3-93d2-7df82399373b",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4695c91-bcd1-4de1-ab58-10a45aa640a7",
        "cursor": {
          "ref": "a8cd776e-e85f-4a57-a187-5531f32fba5c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f71d70ee-0026-4ff7-a788-25e0e10eb353"
        },
        "item": {
          "id": "b4695c91-bcd1-4de1-ab58-10a45aa640a7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "54e2c2e5-fdcb-436b-816f-277a75b9f4ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4695c91-bcd1-4de1-ab58-10a45aa640a7",
        "cursor": {
          "ref": "a8cd776e-e85f-4a57-a187-5531f32fba5c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f71d70ee-0026-4ff7-a788-25e0e10eb353"
        },
        "item": {
          "id": "b4695c91-bcd1-4de1-ab58-10a45aa640a7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "54e2c2e5-fdcb-436b-816f-277a75b9f4ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e92eac-1714-4473-8018-85ccfb734fa2",
        "cursor": {
          "ref": "f9ed4f45-c122-4420-8573-1f1024141b86",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "61dff3bc-f9de-4719-a721-b709a90e9872"
        },
        "item": {
          "id": "94e92eac-1714-4473-8018-85ccfb734fa2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a468047c-ab0f-41d4-8aac-47f21d7cc20c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f0a156-1d5f-4035-9ebf-c9354839e4ea",
        "cursor": {
          "ref": "25a3f686-9c2f-4773-b875-dbc2f1ba17f5",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e13058ca-7632-47e0-bc91-40577512bf2f"
        },
        "item": {
          "id": "06f0a156-1d5f-4035-9ebf-c9354839e4ea",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "cdb4e5f1-e58f-494d-b6cc-c68ceaa8cd31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}