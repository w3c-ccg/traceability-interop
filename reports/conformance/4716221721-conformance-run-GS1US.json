{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c33e1032-5e41-4a6d-8ca3-167ef718d457",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9b28004b-6985-48f1-8dd8-8cddaa9777e1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e83d1c59-634e-4f57-b7c3-5c7e554fbf9b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1247bebd-acdb-47db-bbc3-8b50408819cb"
                }
              }
            ]
          },
          {
            "id": "6f0e8af0-268d-4b2f-abca-1531fee90ea4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f39e5f53-2b52-4d98-9797-53d2f5fc5ee0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "194f4b22-bb1a-491c-9a50-e90683d4eea2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "16fdb8f0-1fba-4de1-9a3d-86f1c9c0ff59",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8f7f4513-291e-407e-912b-3785235dcf61",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a33510f8-42c2-47d3-83ea-5cdc15f678f1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01db4289-2b9e-4c84-b47b-5a80148a262b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2b7830f-8691-461d-8c53-488d3f6786ca"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "86e7af75-8e3b-4d99-ab9e-f3a250f0d581",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc8f87b5-613b-43d2-88e0-62965b0f5cd7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1bd0a39-03dd-41b1-982d-f58ee9494a4c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c8defb4-8429-4ea4-a504-195e5d00ec08"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a451da6-c5d0-44bc-b136-5d12c6f8b12d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e22304cf-5272-4392-af8c-1c92e0b7bc4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07642be5-5a98-4166-92d0-d4db54d358c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90c49fd4-c116-42c1-bb72-247cc47efa9b"
            }
          }
        ]
      },
      {
        "id": "1bcedc43-0341-44d8-bddc-6f8f331e5e10",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b485530a-508c-4389-9795-e53c09e98cca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "390c1e2d-a2de-4849-885c-bcb7aa64d5ae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "776327e3-bce4-424f-840f-7fc048852747",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae408516-3f54-49b6-8dcc-196c247ae7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77c1387c-cc66-4d84-973f-b890244d84ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307aa247-16c2-4359-a582-24a490b1a909",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06069a59-7cac-4c81-a46e-66b877135944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5654e683-3ee8-4785-8db4-5e5494ecfbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7f6909-e66d-45bf-a43d-dcc52eb72bb8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aca8663-13b1-4aca-badf-d971dffadeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b38221d-07a3-40ab-b3fb-9d9bda002977"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e438a4d3-c62b-462d-8329-34d913b7d67b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1eb9542-a044-46f8-ae44-cd2b762b8df7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bb6e0d-3058-4ca9-94d2-74adb40a9ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4a3e22e-fb70-49c4-80b0-e4c0ac272a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55893ba1-aeb8-46a7-b27c-6e5f457f6a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeaf7ac4-ef6b-498a-942b-83cb8fa99df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95c29e5-813d-4e7a-939b-04d8965780bd",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272ffed3-47fd-4464-a2b6-80efea4638c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c1ba035-ac84-4792-8750-06d4aba92616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e44d66c-0117-48dd-9f35-be1e66c82932",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ae17e554-6004-4652-97f4-3870a3b91e01"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f0d6af7e-7b5e-4ded-88ab-e433144cb7b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6ca51a2-2955-42f8-8eff-68420ea55971",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0bf32da-2b8c-4181-883b-328d6e58011c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "02fc9174-e4b9-4b52-94da-a4425a32514e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "baf81d93-1bee-4dcd-ba7e-d1eb8c7648b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7d4abd9c-f3b1-43b1-bbe0-294bbdf4f4c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9a55377-e5db-4e22-9417-d23bfbb3e04e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d1a82a3-aa58-4338-a304-35f9d175f0c8"
            }
          }
        ]
      },
      {
        "id": "a1a5ceea-4562-4927-ae36-3bbc76dade86",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a1e59ab1-9780-42ab-94c8-a3dada40764a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e135a23-f825-404d-8240-fa1515e8dce6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "46a6d084-af14-477e-bf26-45707ef44d92",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e50f6c7-ba60-4e19-80dd-813e7cf9c648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1048cfe-fcf5-462c-9e3c-50ece92b4e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01835178-cf27-4caa-9fce-9f42515d9936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90fc2d5f-781c-4814-b1a1-a95dc41792a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622b5a84-aeb0-452a-beb2-31de6db0c288",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c943f653-ec4a-4857-9753-6669e535c405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8124f68c-990e-4087-8c72-205f85f05a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679f070a-8f41-4e00-8cd5-369eb175cda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f69d28d2-05fd-4838-bd8c-453bda49d28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a766a5e4-ed38-417f-931a-d8f9faf8cea7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c87805-e741-4e3c-b2c0-090a330b4c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369b165a-bcf7-487c-b34e-22d14207fd52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a18913-3501-44a5-a770-2ddb04881ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2c04cbf-1b27-4d71-b707-a32d99934ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157efc5e-de17-404c-a6c6-6b5607b2eee1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048d672e-c290-49af-ab55-2daeabf8993d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c4fc1a-a4eb-4c52-8673-d8dea21d01a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb28639-9cb9-487e-9b54-e78a5a7c1f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "923e903a-6df9-47f0-8ada-da52f6a33522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5448fec3-4c26-4315-a270-a89cbbf0fdd5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "132c74a1-fd07-4fd1-890e-064803a8d397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a22f19-d02b-4c7b-b4eb-eb5e1fc9c276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b610702-a57f-4ffe-8934-2c27b3cc44a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31f64731-ed5a-4986-b7e6-cd96739f188b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5780f90-b4cd-4fef-bd3f-03d68e6f0f99",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8f5df6-5406-4453-8afa-f16f6c46e55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25940185-cca0-4836-a098-a835bfe37a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba975d0-e383-41dd-8558-9b6b8fead55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48e4a945-5db3-4742-ac93-644213ddc1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2386a03-c47c-4e47-8fb1-11ad83df658f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b578b508-e3be-4c1d-b58e-8583504961f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900b6833-de5e-4007-8d07-bc4d1d19e3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11af8eef-0ca0-4f4b-9f2b-d782c4912f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "843716ae-b0b6-4309-b658-71180ef573f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1413a1-60f3-40cc-bc32-2be23865cba2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7486b90-c382-4306-90c5-9457316e719f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7427fa52-6785-4692-9a2c-450b2f4eea51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a934143-650f-4648-9cd4-5f828ad6e714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5270abf9-e043-48bd-8671-19fcd24668b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34078f31-717b-4386-b464-e8281faeb7e6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff31baab-4d54-4ee0-be8b-eb6e3322987f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1efa29a8-8831-47a5-add4-ea1b1eb65887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e88b7c-ec9b-40ff-96b3-525edf62d96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d08f081-a2bd-495c-a676-63369d4e0ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7227394a-0528-493c-8d80-a2aa4ccd4944",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9bb089-6b16-472f-977d-cdcd3f16c683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee01638-2784-4378-8d51-5cdc0eccec8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716c3daf-4a11-42ad-81d1-a19868e9cabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54c1cb4e-e232-4299-9df0-3809da95e195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c345020c-b504-48bb-a9e2-0f1ed938a87c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a73610-ae4e-4c4c-a8ae-3c8c1d8fa119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c2c0b28-f66b-4b1c-b7ee-e8cfa19e062e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db250e1-9fec-4a85-9739-ee25c561b026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c1b459e-9adb-439d-8f7b-16c1454aa020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d94c26e-b6b6-4385-ab7b-0cce44dfa236",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48fc8b3-9bf2-4eda-b2c2-cbaa1d5d7f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a078f1a9-c48f-477e-9dbc-e534c6828f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d413b440-719b-41ed-b921-7695bd45a9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcaa5049-3ef1-45ea-bf34-c739190a005f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0d82c5-8963-4335-a41e-956020231d4d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d3a6aa-aec6-412c-b857-3d7c84104192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f5c65f-d89f-4848-adf8-f19c4a2f4960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641fdcc3-c330-4a8c-8d48-c4081b34bf9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00326922-1914-4677-947c-7be10ca004db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a3cfcf-4a1b-4842-946c-661d886e61e6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f40ff04-c636-40ec-b8cc-ccf7ad07a4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47191826-4f76-47ab-83ce-c3a0a5c0c2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae04c741-6bc9-421a-a7aa-5182f9fa833f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09c632b8-23f5-4ccc-88e9-98e56857f03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9107244-aab0-4051-9bba-8bad8fd410c7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668bd958-b074-48af-88c5-e3a8ac14e10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a76977a-4c3c-4480-a542-0a917fff5d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06dc6a3-fae0-4b34-8221-0df01e2a841d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f765ca50-0797-419c-a26a-22109055b0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbb0adc-57e4-45ca-b93b-a8696869e646",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bf8c7a-68f4-4216-907f-f7338eef62fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b1042f-4c2a-4e8e-beaa-23b12952fbd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c192d4-9dd1-4920-8ae6-ab57cce56d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "826759d2-fc96-4a03-a483-e4143df2bad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3261fbd6-89f7-49c3-a6d9-1f29cef3e2de",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3509785b-ca39-41e2-a4a9-f523c102117b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e097c49b-4bff-42aa-836f-b0006ca22b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33744c0e-27d3-40c0-88fd-c50f991f1f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75f28cf1-386f-4746-b0ea-c12c8cfdea6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c233a79d-325f-4864-9f2f-f2ddd36b03a9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b7dcee-c6c0-4fef-a1ca-d43ca22d9e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74683387-f868-4d2e-b98d-2049c52a84a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e7289b-b3a9-40f8-93b3-0003eecfde6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f64ce80-ee60-4bff-8ff6-9351e56f0eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d71b1ef-83dc-4d30-9a9f-a81586d71c4c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407a3abd-9d63-4059-9c4c-c599faa25d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a588459-ce69-46b8-b943-0bd4c46d051a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119ad583-5e5a-4b43-bef5-45875da95f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d52953c-7479-4792-b8a8-cdd3c0f48b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1357574c-54b1-4044-bb7d-76cf57013c3a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a74bda-34de-4fdb-9867-8d0595e78f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ad5080-af70-4172-aa3c-c0ff140503b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b6a618-7c5d-400d-8801-491481efa50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6863d2-367e-4eb0-ba75-6b3319899711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957dd1c7-83d7-4693-92d2-59bf856d419c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aca65bc-13db-436f-bc9d-7ca87e061936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727d92cd-0215-4590-b2ec-8b0f79f2f225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9ae095-abb2-4f4f-8f09-5f94615cfd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12ceeb65-3e77-4586-8a31-738da7d5ce23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65e2d01-5423-42e3-ba2d-7563a6e4dcf8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc580e9-5bcf-48d6-9a0c-ceb50e37a25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea8858d-1147-47c7-9662-0125190b241a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c942ddb-81aa-4480-8af9-52db8805856c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "953d84ba-d63a-40f8-a1fa-03c8ed35a3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c09de9-9910-4052-9ee9-72bee29f2aa4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0643430d-51e8-4771-8bd6-3b6e6165deca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd2686e-128c-4666-bc09-0b34db5c9f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8ce39c-6939-410c-8cef-757a79852ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b5d4501-3719-4044-a4f1-1f9f5017d824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1a86cf-5df8-4583-a1c7-1704bd43e031",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95ef25c-f94d-435b-98d3-ccdb7d9e5cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eedb75e2-2898-4185-a6ed-17c6fb2eda5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4405699b-e9c4-4dbb-8d64-0f4936f4b487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3004482-4d7d-447e-8422-71467481ae0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc99db6-fb65-4f8b-aed3-af33739e78eb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e232b9-7b48-4d5a-81eb-8bb699ede1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c227c65-a50d-44c6-a0f6-73261b5335e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76dfe2b0-049f-4282-a84a-931561bed881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b005adb3-0813-4876-8e53-ac49b1f67ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fa4a48-863d-4998-89a2-d32222024912",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01d7379-af29-45fb-8a77-34ae27c7b4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5406b3b-135f-437d-8e4c-d0a2bb738cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb4927c-668b-4c1f-bbf6-b774f1a01608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f513312-092b-418b-8a3b-83e85cfec7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bfc2669-d434-42d0-ad84-fe87079d095e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1a2c9f-8979-4a98-9538-351676514896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a5e27e-d221-497c-8694-9623ea560860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e160f74f-a91d-456d-ade7-2bc20b618a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae10dab-e640-4b83-b661-b07691c45b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b18285f-30bb-438f-8e5c-4b9d254e2f99",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f938ada-06db-4400-a091-56a8bf4d9450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48a7b24-f69f-483f-b13b-1e4daa56c413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c856154-10bc-4919-b2b0-2c140f380777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d3d4da-db60-4b67-b867-2477a7e8844e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c446f40f-5999-40b6-8bef-71a1d03ebc65",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bf1ab2-d049-45e0-ab45-8475005d9e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7ff385-8c9a-40cd-8d3d-19b842f4f6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77cf509-6276-46b8-aab4-84c6a5b801a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17b06f55-38b4-49c2-981b-98f43d3f0fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd98aaf-b5e6-4a25-80a9-e13dbb15869c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e8045e-3aa6-4e6b-8b8e-7fc47a8fb6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3599d50-2dc9-40ba-9c5e-303d593c12fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01cc008d-cd4b-49a2-bd7e-d94bff0696d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "de0d92bf-6ed8-484f-a394-61698b3e7608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c093db65-0439-41de-ba1b-594292d67228",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cdc5fa-e087-464f-8909-75929c8da39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c207d3-38ac-44b2-8eb5-807272a88ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e804b019-450b-49e4-adcf-af01be88243d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "959fefd3-d454-4664-83cf-305477206ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffe18b7-1e9c-4b50-81e9-bf1b66caa6ec",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10318bef-2f7d-46e3-adc5-55242620874d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297fccdc-7620-4ed6-a760-3f234c892f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48336688-4833-4ded-824b-5996bbdfb634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "610be25d-e0a7-4fe3-b47f-dae0bda04a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00ef4b8-5815-4e31-9ee7-ad6c2e484ef0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac71828-dd54-449c-a166-65d42f26ac4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ebd5142-0802-48cf-b50a-aa424da21983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b91670d-3781-48d2-809b-d43a74b1c784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d774419e-5e49-4749-85a8-4b8031bb5b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b89112-4177-42ad-9641-86a089f81b8f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe54680-4932-4013-a7d9-dfbe432ba2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e228aa-47df-472e-96d0-43bad77bfcc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3d5334-2a04-4f28-a8a5-b069a6b5f4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67ad62da-e8e9-40c4-a4b2-49eba5727b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574fc956-f5c1-4006-aa85-3f62eaf400f6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "057c0c35-0c5a-47d7-87b6-e3a95c1f5f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2729f736-47b3-4221-a725-ea102f10c919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a27b90-765a-4121-9a45-12431bc78b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e67d8e44-39f2-4e7b-8398-84dca7690689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1c3b73-ba8a-45d6-85ba-16e0a744f431",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5ba8e5-2474-48e5-927d-22833526a837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b63f2e32-eae9-4c24-bba0-bb196b8b1fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c3983a-e0ad-42a8-99a3-47c77149ca1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13b8eaef-7435-4d2b-9ce6-ec12f7989aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60976cd5-c157-4b6d-8ce6-964900eb743a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f48cdd-0056-4d9a-b7e3-16ca6667b46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "324f18e2-bbbf-4f3d-873c-bf8b9641e697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de1d39a-019b-49de-9c3c-97bce62f3e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e02466-c507-4616-b44d-847932d8837c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a41fb8-423d-4c3b-b48f-534ffa5db149",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbeed5d-3d02-4548-bc32-4af15ab386ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ebeba2-d4f4-4069-9fe6-feffd82614c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6d5913-665b-4d0b-af95-2f7871a62403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "38b7f791-fe8f-41b7-869e-602440d9f19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a18406-5fd0-4842-832c-196ee1c613d8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d045be06-63c0-4f76-8590-b81284d911cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375c5efc-441e-40ec-ae50-872155a9f2d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c80b00b-5771-48b8-9913-e0bbe3925a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3bb62e-319c-41d4-be35-0853f3b317ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b332220d-1640-40d3-8d23-5c94e5caabb4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a305fe3-0c99-45cb-b043-121450d8c40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3204dd0d-f074-435f-acf4-7662fc8f6b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916722d1-aa4f-49b2-b95f-0270f3b7b22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "94058e2f-45b8-42bf-b327-8659023c9834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3251ecd5-1c1e-474f-a22a-71ed915dfd33",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b038c3-a842-4b6b-969c-a97d321eee41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48f9da7c-9348-4687-a17a-62f8ec8630e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1184ead9-af7f-4146-81e1-6246b23751e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cdb61c3-26f0-4851-8971-9c9d025faa8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5029ff58-428c-43dc-bfb2-d303e0d96d57",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef73ea5-8ff6-47d6-ad23-e88644e20638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe04d6d-e87b-49b2-8e43-4561bfb18147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5190f1ee-6533-4cae-bb20-a9b7e080486d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7d40b5-ca18-41c0-a5e1-96476a9a3f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc6a305-562c-4f03-8d0f-96c829e4d718",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152debf4-7917-492b-9022-52d1e89f0396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1a8f74-286b-4b8b-b923-f70d8a61ef02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f924ce-53ff-4080-8cfc-0c141fe3136b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "db8064f9-1958-48b9-ba84-fe82ed430727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e0bd7e-f536-4479-8767-cb917da6cacf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052c30df-ccbe-49c7-b913-f2c05cceacfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147c1668-a9df-4238-b3b3-d61951900f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9155372-b83f-4232-a2b4-bcf609f0af19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b436212c-9362-42c8-b0d7-0bebfa5d865d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9461214-a3b9-4281-a1af-3462a412051e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8fcc0c-9fdc-4823-aa7f-f3ddfe96c7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec3d9b8-9fc4-4d0e-a229-1f571c04e091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9089166f-967c-4d51-a216-bbcd5c26eb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9da96492-f105-4d2d-960f-f893aeb63f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b64e8c6-ba1a-4c76-a556-39d182bd696a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7284767-b128-49a1-a272-0580d415b974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394fbfeb-fd8d-4fe2-b440-2c530947e24c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b8579f-1adf-433e-9cba-53e398af51d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa605c2-ba4d-4984-9dc3-3acec0e8fd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd7650a-78c9-492d-8c5d-035f64b36bff",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2a678c-23f3-41d6-a4f6-434613f9e213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fc8262-2b0a-480c-ab6b-99675f50f1bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1354b600-979a-4474-a46d-e5f4b7c45729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d61c53c-285f-4623-83e2-b0b4c772812d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71d0778-b17e-4962-9ba7-486c012cdeac",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c22095-7b58-4867-8eff-010abd06d97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8f0f2d-d302-4b8d-a3ab-03e4515094c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63613c11-44e0-4a91-92bd-3d8c8b30f762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96ff3291-402d-4c6f-8acc-4b2bf0a23b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5ba155-7f20-4f2c-9bd1-3f69b070cef2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c83f92-0c62-40ae-9d71-341b7d2f9685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4dbdf1-ee1a-48c8-8829-7d47491689b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c94759c-da81-492e-bc96-3c6f44576d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "afee223f-87e8-42cc-affe-3fe6a6b63c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ab33ba-053f-439e-b6d2-9cc899cb6848",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fa9673-8973-4f45-bd4c-14d0dfec46c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d661406-c584-4f26-bd0a-552889b7eada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6669cf2e-8fd0-42a3-88b3-dfec99415bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "432a8a3f-ad8f-4afa-bef7-a5cfd8e5cc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cacf79-408c-4c7c-8d4d-3ac012faa388",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c080252b-457d-48a7-8b77-bc6215128376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd66a59-a0e7-4460-b0cb-0e8a39575d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c06ad66-7ebb-4839-bd29-1d8b646b2a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "091010bb-39ee-4cdb-85a8-bff6ff876275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beca9f0c-73af-46c9-b0d0-4012894deed9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f024fe-6d86-48fb-8b65-e5fddd20fa6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3b250e-a615-4f40-b39b-68828c96004a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8b2fa6-858a-4255-97cd-c410f98da76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "812e9033-c448-4b07-a00b-1306cec48b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1cdfdf-7e76-4c03-8ab6-dbcc8594c4ee",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5885959d-3992-4b0d-8857-ca73406ae6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f57d2a-fad1-4a94-b4c8-f915d17110ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c435a495-33c2-4b1c-a687-7e453ab7a21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "844a3f88-9f12-468f-8003-f9a9f695e1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16ef99a-67ed-4ab0-a596-ddde7c238c75",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab37e8e-3c96-4323-8e18-68d9396f88e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546bca1a-1329-490b-a495-39a850da7b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3015d9-7ec1-4f5b-9671-f587683901d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3eeb13-8b4f-449a-abf5-c21dba7fac10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecdd255-e70c-466c-97dc-f2f33c00aee4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20d411b-5635-471d-a531-d5c5d6f51c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5c4e6a-4d28-4c53-ac7d-2eb73e516497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818e65c4-ed78-4605-8366-624ee5f0fa7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e7aa987-d736-4b72-9903-f83d95f0921c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2febf1b0-c2df-42ef-b186-d70d727af569",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51906c8-d311-4805-82e5-aa219d963bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47ecdaf-dec5-4448-96a4-38de2698f80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17131eac-92fe-486e-b0d4-f67b43f6b754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c91a17e3-06ca-4edb-aa1c-541b5da2e642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb14a29-74c9-476e-b3af-d4c3fa75c2de",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8927ec-95ae-4f65-a58e-df72c02fa9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246f751a-51f6-491d-b92f-6a318dd83e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1c71b4-0c8e-4be5-a4a2-e0d51e839b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee96d299-6333-4de4-b32c-53c09f2975a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f9aba3-c7c1-4974-bca4-650929bd907c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50515876-594e-4ed6-b307-849e159a2ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b93125-f396-4b32-906d-2ece98743c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b818ce32-99c5-4e33-acb1-a2d3606ed95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c97a3c08-0f11-43cc-9333-05d402a6640e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fda25b-78f3-4e78-94b1-87f988bd419c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3259fa-35ad-40a2-b8e3-86b3ba4458c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f147b2-3a19-4576-b8ad-d20b9f9923ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b9ff86-f512-43ce-9f87-1b167f40d63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "abe74544-dc5c-4aa4-bb18-96e429f7bb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14325d4b-71c3-4ebc-8f91-707cd20207c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ee989d-b29c-4348-b693-b07e1a5cf240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3630e5e3-404e-4026-91a2-0320cc81cec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacb2d88-e5de-46aa-8d6b-59dc2c13c104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "15d08b5c-1d09-4867-96fe-a8582dd301e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f59ab4b-1d21-4aff-b7ce-c60870585d7a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d72c7f3-9e0e-4668-be9f-02e3b639835a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60a1c6d-2671-457e-bf26-abc5cdb6295d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0451250b-9153-4f36-9c19-e9f6dbe2bc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "527e25c5-1295-4b97-837b-361c4cb4d0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e821acb-86fe-4029-bf1d-bd8bd065b245",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e903a72-01f1-4df1-aed2-8e43207e7dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a535ca79-2187-4f62-947d-297af82b8b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1fb818-7ef8-4e77-9052-84e55cfc27d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b88aba6c-8e5d-45b7-bd0f-3bef4313593e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c17830b-5be7-4452-b78d-31dba44b0041",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12606f7b-9a4a-451c-b09a-25cddd5bf7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2706aba2-fb50-46dd-a411-d9042cc20775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58736bb-bffc-446e-a4e3-55b2a7b1efff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd5eb5ae-50da-4825-bca7-f286a1216bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61367b0-5e6e-4fb2-8c3f-dd6a61c24691",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a353e0e0-5130-4d05-baff-626f4a54d82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a7bad0-dc22-485f-84b5-2c824e95e801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b71db5-4520-4fff-b177-bd8a1d4fb359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ae8e4b-cab4-41c0-9e20-3ce4caca1ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd078a1-9c3f-40e6-ad82-da9489438dc0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99334dbb-c995-40c8-b770-68a2084cb67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a75fba-6a59-4b1c-9d8b-c31ebdb1ed91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23223db8-3b54-474c-ba71-023d0fa84511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "179a0284-a457-4a74-b475-942028acc24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ec0867-f6c7-49a3-983f-a19611c61eba",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd270315-76b9-48e0-93ee-263f71328034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76cce49-12a4-41aa-85a0-ecb85ac81972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d49b911-d2f0-4812-9a84-581da2ea6a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc1e044-3110-4165-ad24-af2f41a6f7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e27940-0e5c-4b78-a429-e2175169247a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b51e750-3ba7-47a3-bb72-27a7e89fefc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb0377f-f6e5-46ec-a059-5f5d217f52b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad93b556-3b40-45ea-906b-e9525d197e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f68f1a65-bd2f-48d0-aa9f-5616f20a4aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06272cc-3524-4540-b0b3-560911d1edae",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b6786d-23e3-48e8-9ce4-768c49ce62a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f138b470-d95d-4ce8-a004-5fda028c3171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb50427-0b9d-40f7-ad33-735dc0cf4687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4418ea83-0f32-40e7-a37a-d04a54cbd813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84d2bde-8688-43b3-820e-454d2eaa4a6e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a4d6ae-310d-4c99-a4f1-8731f85ef6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f492e9-d98f-4069-bf09-2c6ea3e72600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810dd2e9-7022-4bcc-8ff6-c45895274105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8312ccec-c9b4-473a-a3ea-240b56521d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ba75e3-6338-4b11-883f-5739b668b91b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c210d8c1-1971-4c8e-b82f-8cd947b8743d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc4ef9e-1ca0-4c42-a91e-96af2dfe9cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf94edbd-239b-4866-bdbf-f4c00f9956f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1339ed-507d-44d9-b60d-d210a1a54bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1863e8-df28-4198-b324-d202601c0d71",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74161269-1674-4219-a6bc-e2daba5cd29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a724607d-c6a4-4379-9b70-c618d7f7bb85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101874e3-1a7e-4553-a8c1-3f33eae50e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d3d3f1-01de-4aed-a6c6-4c863a8ac81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d764bbc-1689-4a14-befb-e803bd812c22",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9ecdf3-fc58-4588-9986-0555d2c8e621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec07271-c2db-44ba-9b2d-79e1e6237281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2481754-7d56-4aaf-ab9f-8ba86f1c3db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7da65845-7c58-43de-a304-455c98aa8cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9cda2b-761c-4bdf-915f-39d2807784d5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0068b5-9ba5-4795-bd75-cc895b5c2497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc44430a-c5ff-481b-b888-7ca6113f74f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91154340-198c-411e-a215-06c1539439e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "39ca5f93-50c2-45ff-a80f-31510b38fb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608d9eb7-49da-48a0-b6f2-34cffaa1c669",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb16382e-fc78-4a3d-ab54-ffced683ac8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a414a04-fa9a-4216-8ace-2e1eec27d413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47a9fed-6232-4a8e-91a9-cbca67694cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66b0e303-be8f-480d-86ca-2796efdccb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafed3ef-8e65-4371-b389-a18375ff2495",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899bebe4-8a4a-49d9-b875-49e2b11ad70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf9da34-924e-4ce3-864e-bce0405b136a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6748d3a3-fed0-4283-949b-51f4b3956438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6298f8b8-6f03-4966-97b2-206188660342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be111bcf-8067-44ef-82f3-62817f2c13a3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527003a1-0da4-46c9-8a2a-a52caadb61ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c558e33-6d8a-4236-b622-d1574f5ebec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9b95a4-7f76-4cb1-ba0d-55e6134a302d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b492074-59ab-4b2c-9e71-c4d430edd6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba9b502-0c90-438a-8565-1fbb5e03d30e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2601780-f0de-488a-b6c9-b1188e24b69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bff3cd-d953-4a6f-accf-cf9d6af16445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c991932-c2b4-48c2-8890-90536f85f5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce139b3-475a-41c5-a722-4d1261ee6986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f01ecb1-e7bf-46c8-afca-ac0e70fdb2f6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd56fa01-e3a9-4042-abbb-4a7ad21887b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08779c3-80fc-49eb-8bb0-628ced20244b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821bdb3a-0df8-4686-b23f-b8c4c27db471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9e186b-7cca-4d35-9850-19011fa4624b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9178aa87-4aa0-4eb1-83d2-297943449c3f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de24c7ba-bd24-41b8-85d8-0a08b7bc0c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87dc34f-9de9-4764-bc1f-ee61093f06db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d2b34b-dda1-4525-9069-edbdcce9354a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb555af-e157-4ccf-831a-a26bac611d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3511437b-bfa6-4099-ac28-12e1b48e0a5c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365cb769-8a91-48d4-99b9-488cbe564490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97808523-5134-47b6-84ad-715e2e05e7f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b1503c-85fe-453d-9cf7-2faee2078e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55e8e476-5877-45ae-b445-1f889819e099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444e741f-64e4-494d-81e4-e67abd79827b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f32e09-ac06-40e7-a87c-ae63f87a73ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95f5b22-9c4c-4fa9-8543-d7d5ec11fe66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446388e7-5a28-4087-b87c-deda7a9fe961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d0e1af-7a64-42db-a037-f4e59f78ff0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69ac7a2-00cb-47af-953b-1d222fc45cf0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a071ada-9264-4670-836f-92ed11a4a75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1fffdfe-daba-4c00-8c75-a60636ce32ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e8df8a-ba19-444a-938d-4f36479a2f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52a33eee-03c5-4761-9f41-8092d22f3030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398b7a04-2875-4046-a495-34ab7779510a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2307d8-0dc6-455a-acb7-fe0449ed2473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb697c4f-54c7-4c0d-adb7-a5ff2c42ad59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c23914-0bd1-446f-8564-5552c1c77601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57176a24-f4f7-4571-9e1b-a9f848eacbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6819ba-93dd-42d2-b3da-caf8a1dc8139",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d766c2-fffd-49ea-aceb-98c6e46ef91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc84d5ce-b386-4c6d-884f-0262d78453d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfc934e-bc60-496b-9306-0d029d9ddd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a6d1c7-b979-4124-967b-f6fe0b575bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be4cecf-3b2a-4b7a-8eb7-cf61be530e62",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef643b5-3972-4b3d-8a43-57b431e94cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5292b6-0557-4854-81d3-4ea0bf4fadfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfb74fe-cbae-49f0-bde3-96f95786e1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e21e8f0-3c63-4331-a624-f041684052a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd9e5f7-1bcf-4597-a23b-a89395033df6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4282181c-5fbb-476f-84cb-539ef17e6521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f2def4-234c-44b3-b6cf-28f2b2806ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bb9ef6-86c0-4ae0-b318-b00c017a5e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d949def-6af8-49bb-b7e4-8e8723baee6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeba3020-40d3-4981-9fd1-981dc75a97cc",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94736f0d-7a00-4252-9488-3790e5aea724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe115aa-ef01-4509-8bc3-9a88bbce808b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6570a1-b4be-4aa4-b39c-79f8aae87ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0795421d-491a-4d91-80af-cb9be520aed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e960128d-9871-4c62-a541-b4cce3895d89",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f21c93-72c0-4c2b-8b5b-deaa2a51d637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5e15ba-a744-4f27-9694-5dca951c324d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5a2aba-599b-4111-bd19-a2fa766c2a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "38542539-c00d-4e6a-9040-658e0f40b52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ea578f-ddf6-47d5-bb3c-dbc4942645a2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548f5448-0949-41a8-9620-97ca1dca23d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed5716e-e15b-4243-acc2-0b3d6b82f63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf61794-abe7-4615-a44d-acce6c35938e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "314fcca3-8fe7-4e70-9a85-d6984216fab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a335248f-6ea1-422e-8fbe-6e7102349178",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbce317f-c054-43f9-9ab0-eeb3143bdf0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053f7de1-567d-4612-b52b-4f654fbdb677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ea9f75-d3b4-4433-8303-2fbe159277f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b36ad93e-5354-4f4e-95c4-0e56ccf84cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0d7087-8009-4cf2-97c5-7d956b30f066",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cdab98-c768-4cd8-9748-146bed60da98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c35205-929b-44c2-a6e8-de8de862966a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523ba95b-83fb-40c4-80f0-5b0ca14ebaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cab7b98-44f2-4f59-a95b-b054912f7ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba74cb78-0b58-4738-9662-9a38682cf018",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1beaa65a-3812-4ae7-b5de-e017169e762c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ecb2d955-7ae5-48f8-b5b3-4fcec48fa5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b479c3d8-aa8e-4b1f-9516-543cf48a3ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc878ac-9724-4d96-b01b-9e6f1f8fe2d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d40448d2-babb-4bdc-8815-fc0104cd01ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d2a5ecd-e777-4ad3-9eee-60fee983fc2b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad527686-9e07-447e-aa35-9d8d66f0e8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0672024-670c-4c74-9e4d-8e41c1b719b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33dd9e3-8084-4caf-a697-4175f68f4684",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efca6575-9db8-4171-b695-60d19b8e0e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2c81ec-2183-4275-a692-f44d04aee9f7",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02badb87-2637-40c5-bec8-14548eb24be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e4678cd-7242-4699-a633-75e04b91875d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337acd76-9601-40b0-a1eb-f03caf273139",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ec827f2-5b41-4cab-909d-2f242a8e41c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a570911-7067-4b31-adca-345750ba9539",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6008d390-4d78-424d-99c0-8e6f1ad2d664"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e64684a-bd4e-4990-b2c1-6ae1adee1868",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b344c7fe-3098-4146-8c3b-03ea5a2387f0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3753b08e-4c95-4214-bb96-34137c3520c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95c20c50-b70a-4d95-82c6-3cfff54bbd0a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f12c65b7-24fa-4d97-95a6-fcefc39c598e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "70aab435-103d-4491-bd55-98a1617e5c87"
                }
              }
            ]
          },
          {
            "id": "81e30654-6c66-41d6-b89c-275ec017d3dd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "74dace96-def9-4a2e-8f7e-0679a4eff29e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e863aa0-6b48-4793-a8af-11a963bf922a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f7308e7-3935-410b-9181-efb7627c9b32"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fdde4e9-287f-4225-802b-1208dbfae89e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c3113d12-76c0-4930-ba0d-2c142c1bad7a"
                    }
                  }
                ]
              },
              {
                "id": "d458567e-5b10-4ff2-bae3-c28c715de4cf",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19abeb68-4a69-4acf-9067-be4e0579c30e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cff7256f-e772-45be-bd39-55f417b754ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efcf2dee-0327-4bb2-9717-cf9f7cae8d3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64c21609-5f81-48a2-8b46-4f55a4b9fcc7"
                    }
                  }
                ]
              },
              {
                "id": "c66272a6-01f0-42f8-a2b6-8e24a03e47ec",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55dd875f-f9cf-4bc8-8e21-92ed1e7b4a4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05682871-0d03-4115-b828-93a23bf360fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26f7c104-ab75-48f5-8785-343b724e6e14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a2ff1879-60ee-487c-963f-d0d8250f5093"
                    }
                  }
                ]
              },
              {
                "id": "95e53d91-8e61-4266-8344-24bc894ba452",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ddd3b24-78bc-4d73-a722-e73da1f4c690",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc93c9b2-1682-4fef-a685-6e3a259d7262"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8caa327-b5e5-4604-bdc9-f04272d5c716",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d213d4a8-0879-444e-98e1-b1b2cd2f3402"
                    }
                  }
                ]
              },
              {
                "id": "3a5f1e31-7bba-44c9-9c2e-c2e02ba75f87",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bf187b6-de68-4f3f-b780-de1bf7681d4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34cd2536-e748-4f74-b58d-d793e486da05"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55530f53-8a3f-43fc-b5df-f72b07b3c0bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1d07ad80-2925-48fa-8fb0-0c0c6670b192"
                    }
                  }
                ]
              },
              {
                "id": "3b86505f-718a-4f1e-b875-ad25ba4326a6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5bab96f-123e-4a6f-a3d5-ceaad303c359",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e802bb6e-de61-467e-8e36-16f01e0edd78"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "674673f5-ab69-4b14-ab40-a896daf4e4e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "000f6f04-1242-4a93-b387-23b1a8e142fa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f946f15f-ee8f-4580-9453-2d94c56935c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a50d279-0903-4f4a-bf49-ea5751bdadb1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "477eb8dd-105d-4a35-bbec-f18381175bd7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3b23688c-d043-4c66-b405-a799b4c203a3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2182aaee-ee90-41ea-b0cd-bd248b63a44d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "efbe991c-0bd8-40ee-b063-2d7f95a1ff5c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8a62b81-15ce-489f-b728-4ed708b80935",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5863bb32-f0f6-4161-879c-b852637485fa"
            }
          }
        ]
      },
      {
        "id": "21f5db41-4a79-45e3-badc-c02a1aa92b6d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fb4aa2b0-056e-4a28-821a-7fa09488c591",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f9c0834-bb74-449b-98d6-6baac3c8332e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "14b3c37f-9ca4-4f58-9a39-0de4d164e77f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43181a7-0b27-4d38-a484-a5f45434a8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e54ca6-3f71-4c46-bc56-373113979ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd6508a-c37a-4230-8dc1-46fde34659a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "74d2b0bf-8825-486d-b7f9-2b33c30417d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af9c30d-c4dc-4016-b56c-d75153bb24fd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff5ce13-f0d0-4077-9861-bd40a8b1ea64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2511304a-4b2f-4c09-8c6b-702fba6da36f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73866785-903e-4492-b4ae-7a3de3a7dcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7bf769e-45bc-49d8-93e3-6fed4cd69d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cbf01c-b15d-4bbd-a010-82c2894f84a0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15096d36-324e-476d-986c-04782fb4fb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0853e77-3722-4821-9756-72c3c60f7231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057944e3-a4d0-485d-8a9c-10d3d17c2a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4266e12-cedd-43f7-9a38-20b1339c016a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910c61cc-bf68-41ab-829e-7f4db629d480",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad4a1d7-3564-4cbf-bc4e-64c29eca3294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd79835-61fc-4e80-9349-4c23e30a91c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb16281-0c14-4d4f-a107-008a035dad34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b638604e-f72f-40e7-b817-7af7f7ec6b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e91e3d6-cdd9-4a45-a7b0-bf56bdeee771",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb18e6aa-9906-4a44-a2e4-72407679d40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfa84a4-c2f4-46c5-b5d1-8546c7fb562a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3076ef0-9bbf-4ba1-8227-0dee659a8a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "482ec9c7-dd7e-4f2e-8a21-f7315ea162f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ddd5f5-292b-45a1-8034-93e012ff2df2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30d4fd0-1961-411d-b2bc-6a0130f3db8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20419986-fb32-4626-b0cd-a952d1b35f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ae0eb2-f962-4af0-90c1-77a8bc6c4f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75cf4a73-c0c8-4ec8-bfdb-cb22da866854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7ed601-5711-4b69-b66d-886d85e1b820",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faaf512f-cf2e-4fad-a0b6-25f7e396118a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c9fa2a-70c0-43f4-96ea-f02069dc48a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e31827f-8244-48eb-be06-03dc333b8964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d239f6-f3e5-4bca-8a19-5cecf7e809c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d5360b-f91c-455c-baa9-0a856ff13bca",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdffb23f-6ad4-4366-95c0-125807a56c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee8fa07-a511-403a-9bf4-dc930dc549f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57dd91d-79e7-4c13-9c89-490bce838226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f780922-cfbf-4634-b852-ae0856508c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd80d591-f789-42f5-a176-8c48efec2f87",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5caaeccd-b325-4de6-8503-0636459fce6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1186b43-80df-45d1-a4c8-b2cd716d8f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0036bd9c-0e09-447e-b047-c6d24b45ad07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6782c5f-f497-4ea7-b5bc-7c260c52be82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c17de8-118c-49c3-b182-7931d067acc9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04336f1b-ccfa-4865-81d6-3f2159196b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306942fa-f824-4437-8b13-b685b9f74eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20111595-9330-4f71-8fb1-b181f33ba42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c9423d-3a48-424e-83ba-a9a8506d81c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7f33db-3fca-4d90-9432-bbf5435533dc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7023e90-b96d-4716-97c9-ef3f7dab3cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360e8f7a-cba1-41aa-a9b2-12765afe94f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c46c347-219c-4051-ba7e-a15adcb9884e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1ff384-29bc-418f-b038-292dac76f429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b964897-d52d-4ece-bc89-5a80a2385dab",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2525befb-ad44-4abc-bb09-a149e826ca17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb489310-69de-4613-926a-6076c56041e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924cbe36-a040-4953-8f57-cd6aa09ac527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4387b8fd-3760-4fa1-8a3e-14c6762f4adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81787f19-0fe5-48c9-85c0-5b416a8d629a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d88bf0-0937-480b-baa9-e5c94661fd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3f2c49-d257-4195-9782-0eed0c3762b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719a5d20-8e62-44b9-98b1-e7ac8080005d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97057b87-dc1d-4dd0-903b-2c88dac5a103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8483b8-5f78-40e6-bced-edd784ab3fe0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f575cc-a711-4898-bf03-d2483317c097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f44fb7-5874-4660-89e3-4601ee2dc6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862d6118-ba51-46fa-808d-980bc041a4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b36773-f9ee-4e14-8069-cd015c1f60ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd2fd3f-d4b0-44d2-8eb0-1609a5cc73d7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9764ef09-fb7f-4924-84af-f9dedd15abea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914f859f-d5db-4200-b0a6-a6813ae22dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6730b0f8-beaf-404a-b73f-9d3b54206ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "03e18384-947b-47f7-aba3-0297db5af5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2700508-adc8-4b3a-837b-eb0beb500838",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27ddf39-4f89-4843-aab1-1a69a5a1abbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "692f30f6-908b-4ab3-b47c-a28b0362e4fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5937ada-a116-48c4-9402-d17199e47e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd45c009-c1f8-4ee8-b3d8-d9c3aea3a1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b30ed8-e747-4765-9522-941169053d39",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e11d74-41f2-4d02-a452-9874fbd5c9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac431cc-27a0-4fb4-8e2a-778d6b4eddf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9b03e8-4b8a-423a-867e-6bdb14af0cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f2eeb7-cc47-4b7c-83cb-e836c173e127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2379db6-4b88-43c9-980b-7875aa78c69e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6c2236-1269-43f6-9540-7c6cd32e47b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9099f2-b766-4bb6-bbb2-383b7e98fca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b148ed-3dd9-46c6-8efe-4014d1380b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c57b76b-4f08-48fd-97f0-8c1d9e3305b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73f0b15-37f0-466f-a7d6-5e4912c6b474",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ce3bfe-3ba5-43f7-99d0-a6ce342da1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756a1f01-86c9-4bb8-8a70-04ba8749e3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b34d41a-1319-4fe4-9481-fc6b20862f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e021abf-4c9d-45b0-b69d-ad2ccda258e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2325f47e-5907-4f31-ade0-43fc8404de99",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff57327-9776-4d70-af50-64f7ad122df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd881db-d0f5-451d-a03d-66a939f660f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4310f06-4295-4eb6-8eff-9566a0a65fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1bc3570-e1b0-4482-9aae-cca2af2e2b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94b9348-cae9-4f0d-8d89-e82e8698557d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6619cdf1-76b2-4941-be41-9f3d8cba3f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0208ccdc-2938-4988-8eb4-4813e8a1d712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfb1f92-6ce8-455c-a4b9-58ba9b476512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca32920-d560-44e6-a77f-89e12bd84b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7853613-e65c-4993-9f24-5f870db968bf",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddd9de6-daa0-4864-b20c-886d8a30f526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a93cde-9930-4b38-909a-4e06d779c6cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886c6e37-88d6-4dea-9fb9-80e8f0581f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "495d57da-0a0c-4dd0-b31d-39cf4531d6fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dfec4f-3950-4c51-a1ba-a323640c3146",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b27afb-a351-42a6-a59a-99b6725d846a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc375fc4-a1b7-44a4-8a7c-54dd8d31b31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a0cbbe-d4a6-43ab-abb0-83c71ee66c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42a59f7c-3b3f-43d6-a040-ef314ee1edda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e516fbe0-a4e7-4dc2-94f9-1d587ca656ba",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7960a427-e4a5-456a-b495-d20e2ab985f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cfedb83-4184-49e6-8bd9-3ffd81e42f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9f240a-b608-498a-b003-67b239829d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf79836-1a7c-4e10-b6ed-f826e86cfb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fb99c9-d0d3-4ca8-bd51-ee8c698e3429",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be07a2ec-c4e8-4519-a978-0add5396ee05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e59054-5103-470a-bb7e-41be5ebfba45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7059ba4d-3ffc-4364-a089-43b4300c58c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f66d2eb-8995-4e1e-b781-1c3f2e49fbb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98cc5b75-0711-4e6f-a07f-7cde69f46efd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c803a4-a520-44f0-ae4f-008ffb6f8ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f439f78d-557c-40ab-ab77-f2bebe719e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3902ae-f21f-490e-b0a8-dc01c93c37b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeafeda3-8c88-4a9c-a267-aff12fe6eede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c6df33-ab1c-42b9-b2fa-edcc9882e4a9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3866746-1482-4d86-a1ac-fa5577a08638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d2f2e86-2acb-4c6a-a2d0-56e01ea87c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d4d3f4-bc0b-44d6-8d75-56c126ad24bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0aa8f82-cbd2-47e8-93ec-82005ec394b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d2301e-e300-46f5-b77d-f8e1398470dc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b413f186-35ff-4150-bd23-3f17e2572971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57136045-e81a-40ab-af9d-7f52e3226f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903bd464-103c-4680-a5f1-a0ed1fd72047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "724ee085-1fda-4ff9-9b99-fda33487a180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d5dfb4-17ee-4835-8546-21a29490dafd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a2de91-f0a4-4313-9981-4c4ca62e1e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bb8c17-88b6-400a-954a-f708f8abf482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09877585-c9ad-401d-990e-fca5e46dc9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d80cfe44-4eb7-4fc2-ac9b-bc7691035b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a80e7b-9cb6-4a16-b1c8-fe5e1bc69508",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9768f60-b82a-42a0-84f4-c116903e6c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0171c0aa-c08e-4391-90ae-b08c9ec94e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f735045-05c1-4180-b233-f510e0283e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25add31c-c5aa-4eed-a767-8d36d85dd2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bf98be-e4f4-4202-9434-5a0fd8fd67a7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfb74c3-bcdb-4ce3-9b77-6c32dca4f942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c0bb43-1dcd-42b8-adb2-4643fde84238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5901a0-498c-4f66-af76-cc66453cf8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae71abb8-938c-4cc2-ae91-4bd3e94c18e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bf573a-bb0f-41ba-a814-330bf12dab6c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d392e79b-178c-4966-ab23-c5b62ebfc632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30074557-9f57-46af-90c6-01878b41c708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8399d03e-a78b-48e3-837b-4c424a6b4bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9af18a-402b-4c75-8ee7-f15de08877d5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "169fa5d9-384e-4286-9fb8-6de9cc2971a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81213b39-2397-4b02-845d-fdaf1848c11b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b438530b-521a-4892-809a-9684b553df59",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc59ac0-7b30-4660-98de-15ff4e7d74dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf91a0f6-bebd-452e-b838-dc26e0aca912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0e4352c-9617-48ea-8cb6-c680075a5ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0933c88-2bb6-4266-947f-3580d5efb85e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2201632-52dc-43c4-a825-abb1ede0e780",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fc941b97-e1ea-4a9b-b649-9bc0c2ea5d07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcec31c-324b-45d6-94e9-818a8930f59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6b7751b-08f3-4c11-9189-0eeb3b817e18"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adee8795-394d-4b64-b9ab-d2fa4b519bff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5e1489a-25d6-4210-a51f-a9a1028cb6f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3974dcc7-9862-4c81-bcc8-d3ee300017c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f54aa22-a236-4364-94f6-229ebff067df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "728d73db-4770-41ab-afc0-d8e60238770e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e0ccb596-aa9e-40cd-a200-d165b2c10e47"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cac4eb4-ea97-4c54-800e-8e169b95b7fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ac5a1cf-17a4-4b5a-8c74-721432cefd85"
            }
          }
        ]
      },
      {
        "id": "e000a61a-17ab-488d-9afe-f774a3c5514a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b703df42-71bb-4bba-81ca-467d2a2e263f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0aa5ab92-32a6-4e27-a914-a35b5b1c3cdc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cf36058a-7d44-4c72-ae30-c870c0a56828",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a86266-c39d-4f83-83c1-eba03aeb71c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d23fd2-8066-41a7-ace8-7382aa66711a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83e26cd-f977-485a-a2d2-6adb2e0941e7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6eb130-4598-4eba-8eaa-a32790143fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4463e9a2-5ede-4f00-85e7-8d728704488f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0cfd02-8bf8-4567-8d4f-2798283e50ca",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d33529-4e1d-4002-bab6-e5c2dc6fa758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b7fac5-d98d-464d-9043-f9bc8fed06ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16524fa-dd3a-47d0-9798-78976edd774a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa27afad-c0c2-449f-9c1b-78141867abd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6bf0a2f-fcbe-4256-8928-7f9990dbb0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a235be-114e-4c68-81bf-2510b6c116d7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e6a2cd-503e-42a1-84da-4ea3cb85a312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e8fb33d-6e74-4133-bc09-9886900456c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ff9cd1-c252-4c8e-9427-d6de6f5c617b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e9f576-8153-4dd5-bcec-37d47bd96309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c767dc8-6ec4-4fa2-b3da-b1892605c2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1ddc16-d865-4dac-9614-a366bb92b808",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422de40b-3e49-4634-a654-d451913a053e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f901b926-f1de-4e5c-a98e-e0ca051d2cdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3190f71-3c6b-44e0-a4d5-857cea895f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e2045e-556e-466f-b01a-3d06bc138210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0838078-b9bb-46d4-a02c-83c3439e1f45",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0292aff-95b1-48ac-9506-780882ba63c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a56e0eab-09b6-4876-9914-fe30f9fb317f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9642768-a171-46cd-96a3-09df45395fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d851e00-508c-4ff5-a3e9-9af19e987f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7543e7b4-00db-4dbc-bc74-8e6c7d0d2006",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a5b575-e47f-4664-afb9-457b10e54ff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab0d9364-1a4d-4a34-9e35-66aeba150bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e20b2f-d175-41b7-9c29-51372e5041d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b97ed93-a62b-48ef-bf55-33d29fc4849e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee50ba1-0a7b-493b-a6bb-3520f1633ef1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc39e8b8-ebc5-4286-954d-260d915b2a46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f93297c3-d8e6-4d31-ab5a-4a71df6f9562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de0a4eb-3987-4deb-8527-1c26a4c83908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40dd2a1a-456f-4dd7-bd12-8073b605907a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2953780-11ce-4ecb-b3f2-9c0dd3fd55e1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188e1106-99a4-4f36-9fcd-5a52941de6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80852fd8-3596-4068-a7b8-563125f7741b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3e9b26-dd7b-45ab-8acd-b603c29682fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0763183-6055-48c9-97a1-e4603cd7a5c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326b504e-445a-4e3c-bc11-0c526ad68e77",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0d3060-47ac-430b-983a-363d9b906fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0890229a-0112-464c-9ac8-a79943c12d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd8c8e2-5577-4631-a18a-bbf1f31e4643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659c2ba5-931d-4f78-b491-c0eb72fbf16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e6a2fc-c26b-46c3-8481-db5e3759fe59",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0a3b3d-c971-4b7a-911b-8953ec2650aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "280092fe-9745-488a-803d-2775fa6d005d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cd174a-9584-4c70-8537-00559496c517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afda34e-cefb-438b-80fd-00934808f38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c1c45b-77b5-4152-951a-c9445811c20c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876b97fc-a6a2-4495-a0ab-089bdde3f27a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70d43844-835e-4bc1-8688-bd13529dc383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f96838-db36-4b5f-aebc-b20cd6b7bd4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39d6c7c-778e-4fe9-8ba4-f5f1c8148c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416205ae-9ad7-4d7d-99eb-7ef81b58ae8a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd04e38-d5b0-4ce4-81df-861b1b2d65dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc841185-8f2f-413c-ad86-ea8524b420b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493fde79-0e7b-4b4d-a72d-55c912b5bbf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56b89c4-8d79-449f-a2fe-01439131a514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24bf4dd-3561-433a-9792-3849a50742c3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ad8410-804c-4c12-ae00-1453d514478f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dc09485-4525-42d9-a5bd-0895861c4ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbfff65-db11-4a01-971e-ae2636c4316c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c41ce7-3edf-47ed-ac3b-a14588babfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519fcdd8-a60b-497d-8148-334ebed03dff",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db24d2e-8dc9-4c21-9c0a-84149a0c2357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b091b7-868c-4d4d-bd32-a933fbbcdda7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c609f218-be13-4fd8-9618-455d63f657f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143b5ed3-062e-4f5b-bf16-ef4cf6a2e272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9035d7-24a1-459b-85bb-1c332c94462d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05cad96-9616-4f1e-9090-26283f925b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3242e6-28ce-422f-9977-ad3840628653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db99180-072f-46dc-856b-9fed107eab85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba55baab-d38f-4ad4-95bf-70fe436a3b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03528552-a0a1-4ca1-8628-a26cca54bb33",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d69c64-40dc-4aa9-8c35-3ef15e9f07d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a1f21c4-13e6-4f0a-af90-187c7bfd8abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccf89a9-9fe9-463b-93b7-d9d2368a2cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064ad737-e942-4028-b6d6-99c8eae14679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93dc7d6-7b1d-4232-8d29-146b012ba41c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4af3dcc-1069-4ef2-9d3e-fedfa83ca51b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76871840-210c-47a8-a84f-007a30dc8f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1cbdbe-6ac9-47fd-b026-01e559b1776c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b101fb80-e918-4bbd-892c-4b1f68ef886d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc26f5c-c6df-41d7-aaaa-be28ecc6c946",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84b834f-aed1-4534-b2a8-3586a46c8c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14d2667-a49a-4b88-9510-a7269308aa60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "910a6408-8461-4c9e-8ff4-d7c259dacc8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7184297e-2c5b-4325-a949-8101c4ebc25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2e74f4-8475-4962-8373-34b69f2966be",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e98a8e-a244-47c7-9685-008bbc17c9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a439c3-f710-4374-a163-f99b55c83e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64861e22-728f-43ba-a77a-07da0cedab76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85414f08-60c3-45b9-adfe-2f856ac7dedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab914b0-5cf7-4c0b-9aea-442169f37ed6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34dc72c-7e6f-467a-9400-0a3cd6e7f7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c75371-743f-4972-a546-42f5a4ada4e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5cd499-7b88-4c65-96ba-7840946ee644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7283017-213b-4086-81b9-5ca09795712b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898ff6f0-197d-4d44-bfb2-12e2933dde71",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb256fe6-9e81-4e50-804a-7f51c81ccac7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72da235c-68bf-48e6-a67f-714b101f9d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24a8a02-72f2-4cab-a173-21687219405e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3cfde8-24a7-4beb-a303-b30ae329df55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f111e4-b106-44b5-84d6-fbee4e1ec465",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd7570b-d2ae-43a5-9c6c-a9398df9c6b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dbb946d-f980-4fa1-9330-538474f516e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60ce751-6a20-4cc7-a206-13741e55ce45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d389a33-6597-45f2-90ec-45e99b6798fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637d8bf5-f85c-4e84-b39e-da20f0c44f9a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d338108-2596-4de2-9671-0a1288d88c40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69914a89-f676-47c1-b7e3-771f095a4d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4203b645-01cb-49c4-9bec-b091839264f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6df31fb-7d6a-4372-8961-ebf04056e296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c865c95a-736b-4160-bcfa-3a5270b209dd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6e0d01-4380-43fa-b9ed-0cf7833ac149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a758c96-4b51-427a-b14c-46325022f94f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746b96ec-e5a5-4170-b6f6-3ae91ba62322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8924e7-c79e-48f3-911a-61bfddc6d743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e9aa8c-2c7c-4f02-82ab-872ef8ace63e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e3d48d-5fa1-49b5-949a-950d060d6474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaed8799-c699-4701-912d-544bea815fa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c8a34f-e328-4963-a3cc-8cab1b149e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2465cfce-1a98-4996-b9f0-3d9bacce74c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95adbbf0-2cf1-4fd7-8188-7318b5321003",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8821da0-b522-4fae-aa36-36e1f93b6036",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc8fe7d9-47fb-4280-81c6-87578001dac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccdf148-39ad-44eb-9aa3-9e6a43613a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b94d43-a6c1-4e54-8172-79f0800781b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ffb690-8521-48ed-bbc5-b64472976971",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01029b8-2431-4336-a803-5a3cb671bc43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42383a83-74aa-436a-81db-75802676b7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9e66b8-6127-42cd-bcb4-1ee3293f506f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "619bfcf8-ddf3-46fc-9964-465ee686953a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8ae916-bb02-419a-93a9-02e591e7ae8f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf167de-321c-4708-a159-7ab1aecf3adb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd57b754-320c-4205-aa07-9f97af513bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "476335b9-4619-481f-9003-9492b8e0ca24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "087c2065-6eec-4e9d-9983-8baa37c0d716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c011d2e-4c27-499f-a468-eb8f5df82c6a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b206e165-ee4b-4d38-b658-478bf5ef072d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa3ab0d-9401-4c94-9cf6-072505723b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c7b6f0-09b4-4b83-b374-9870d7a37abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da262d1-c70d-4968-8fa4-8a3e5722f12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de04c3c7-743c-41d5-b540-26283f276cb6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa0ea9f-31c8-49a4-bb86-1315a598e08b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8962b2b-caf8-460b-831c-8e439dbdf4e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b80b3c8-67c9-452d-93b8-a75d0dbebd08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb25d4c-19e9-4a0c-a894-f02a12001390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dfe4bf-5e5d-4840-bd03-7f53834cb5e6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324b82e0-0fb6-4137-be42-79f94cff1898",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dee3d18f-7ca1-4df4-bb2d-f3eef6e92f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e7b19f-cb91-4fcc-8d9c-31940d4f155f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1166736c-ba87-48d5-b130-fc06f8df866a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1898e3-08d5-4b6d-ba74-def281466a9d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23def97f-1197-4ffe-8cf8-eb8502f1c215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c0e6d00-1b78-4755-9df4-ba84594b25db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8951f1a5-7fc6-4574-bcef-ec44a9a69c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d209d6-25ce-4bd2-845e-96fc7330b9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb738ddf-a070-4782-a13a-138685621f0a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842b7c81-46d6-4ab8-ac08-bf7e09f7b3cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a52714-69b5-4428-8243-d510c63805ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eee577d-b271-4575-b381-596bc4aa46e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d3eb81-7203-4c03-bf6e-63e8debcb702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200c8174-1f73-495c-9f15-ec2221e042e7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1474bf7-c7c5-4c22-9272-48c3cd93ae9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823aafe6-3413-451b-a7d1-9f225565eed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccc9aad-0791-4c09-a6e3-b6b82f67865c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f99b898-9cdb-46fa-902e-a5e19ea4d489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1439c898-cc60-4d92-8c6b-b2346cdf3c97",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04dd8e60-886b-4731-9474-ec48eaa74fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f613e4-a447-4ca3-936d-b0d7a8167ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a13473f-affb-4895-b469-7f8968c96be0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "310e4990-8c8c-4d21-8d07-9b4d4e1439d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc090c2-c9db-431a-8f82-1f0eab8e53ed",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2796e7-b55c-4c99-910a-14414af9989f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13beb31-b4a0-43d4-b92a-911ffe3c4b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ef9169-c8ef-425e-9d1f-380d6bb57277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324aa37e-56b5-4b9e-97df-80e290bfb779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85367235-7e27-4316-bdb4-64ddc523678d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697ecbb8-dc6c-417a-8caf-2298df71dbbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdbccb7d-e22f-4617-9f75-327784886ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b328106a-2b43-4b16-88b0-c1d2f7a06309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05c6f73-e5d7-4acb-b3a4-7e1e900aaf3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1249ee-3229-4fac-ac38-75de22154ace",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e67537-83d5-4b25-b3bf-b4922c71f164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8d78eb-7bae-429f-b180-b26e851c7150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e18130c-99e6-4359-a535-39759fc9d10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "773fa7c2-789a-4510-b912-4930fc04b891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92cb1ed2-4b47-41dc-9331-1009954693c8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ae4d88-21ee-45fb-a0c4-04d45a5ab435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96902c49-14ff-4b55-a6f3-b943cf11655a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8333a9-9cbd-4b93-a1af-b061aab6ac9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9766779f-cab2-4603-9126-fc226a39fba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a3bab2-a0ed-4be2-8a2e-75b582390a8c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644555bb-ec5d-4299-b73c-cf65fcf01d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e125e8f-c30b-46f7-8baa-bd3b80fec1e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8abe8b-0d62-4e1f-b9fb-8757958c57af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5a5e04-2318-42ae-8b08-3d7939eb3515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d80f9c5-0d0a-427e-b109-e441a1939fdf",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295526b7-589d-4221-a419-c0aff9f9eb6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a60d3c-fc5c-4369-930d-b8aab150688e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1df45c8-1ff2-4814-b9ee-c7dbcf04aa29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a99197-b964-42c7-b669-a8e5fd4b7478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c637896-928c-4f84-907a-1ec761fb5346",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af8bb35-9f22-4045-9cc4-ff9735b66a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7441705c-9d49-44a0-a95f-ab88b6749475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9704f5c-c817-4371-81ee-db1fd238454d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ccdf21-eb2b-4d83-84ff-e12a8383f433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf06b0d5-a548-4d31-8ba0-c20f5b3b0eb8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd3a42d-1741-4dc0-ace8-7df50c0cd72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace3e0f7-708f-4270-8da6-e100fa9f35b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b390844-a304-4c89-9d8b-30a59036bb15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d64f0b-b6fa-4f2b-a130-8b3ef6b0c176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c41505-fd14-436e-a534-96ff62372ef2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c678baa0-3443-4943-bdbe-8452c6ad88cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c740e8a-81a9-4590-96a3-20a662099a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2dc57f-14c1-489a-a8fd-35998fac57ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b885754f-2065-47a4-b518-bd8d8e5d36af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0556299-4a40-4a18-864d-19f74c44794d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f323a3-1e4a-4949-9109-da25735c2729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274d8f8f-f073-4fe2-b823-01f92ec92140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d957d1-a8e3-45aa-9e7c-dd6e3489fe52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19cc0ad4-7928-4df9-b52e-b07b4e2a3ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d75985c-0cc2-444d-a77e-2c4aa28587df",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9da53c7-6d99-46c2-aea8-5689434a0abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b1c2e8-787c-42d4-8e63-497a1c8a54c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4214ab-5492-4339-bac2-7c2c3cdda32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453c5a9e-b203-478b-9466-85265364957a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bf9260-8f12-485f-a63a-71b5c319ab24",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183c1ad1-c037-4d17-b17e-f0ee39f62653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e5624b-3919-451d-8555-c170c10b9e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be94009-befa-45b6-9582-f00de562347d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a79def-6ed8-471f-81a8-9a02b2cba068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcc8708-c1a6-4a88-ba91-772954a6b510",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad1d206-b6b1-4ff8-89bf-1b7d99223746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd946e5-caeb-4e9f-b5a7-bce6beb8d2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "011e7429-97d3-4df8-adf1-6964fcbf07c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "561db957-a760-4caf-b349-964b0911a3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f16051-e126-48d1-8b21-4fa51a452b4a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f943bbbc-3587-4be2-aff7-ebbf93f9231b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39af21df-ce82-4c66-8b4a-b7c253a8c2e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87dc3f1-5ad5-44fc-87e2-4db8d118d9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537a0ed8-f101-4f33-a607-0590e391bfef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbba9138-94a7-4cc8-b25c-0dc17796c616",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b79fc81-e98b-48eb-b540-3fbeb167147b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6decb19a-68ad-406e-b7aa-0a07ce89c067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f562acb1-b8f0-47e9-8a9c-feca6bb848af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bfb8783-f025-47f1-9428-ccde7dee1ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71365de-f428-4c96-a7f1-ad89d2eef43e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721b696d-89d2-4ac2-83de-d5f159decd35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9345853-b84e-4b55-905c-4abe5a856b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d86a20-d3da-47d9-addb-fa81dd6e0177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7456f38-94af-41e5-8fce-ac0f9ed952bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9822870b-1682-4105-be4c-8ecca076b9a5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c16db58-958c-43c4-9373-4f9438bb7b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30386021-1ebe-4d24-9169-d511302c234e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae47240-1fb4-4b47-9311-78ebd3d71b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5982017-dfc4-4be8-85cc-539bb10f711d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d634cf10-68a1-49a1-a509-967966e4ca66",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c4b5a4-767e-4e99-8be0-33f7b8b777d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d825232f-c420-402d-926a-dcadb96bdf6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ce023e-e2ac-4ae0-8d89-53bf31156801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da753827-83d0-4c68-b033-f7edb0fbc4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b541ef39-2a08-431b-a0e7-79796baabe46",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3540853-1a66-497b-ab0c-ea495c8c172e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cebbbdb-140d-4fe2-8099-45f0086a88b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13342fa6-bfbd-43e4-809f-b41634ffb7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62f62a8-371f-450b-9a1e-9977c253a8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7404f81-4aa6-4e30-8eba-b132bd99b911",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0663242f-f181-4c2c-ab83-eec2a4d19b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fccfa7f-608a-4379-ad86-011c19619c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1e2046-9afa-4479-9ffc-961085b34ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3778275-fc53-4947-80f9-98cdcffa8c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335be739-fbcc-4490-ae89-997ba704362c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282bfde9-5df6-4698-9a8a-ff308becee70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268716c9-2ed2-4026-b4d8-4215beba0fed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74885c2-095e-4121-b92f-2eef47e42fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45e24aa-62ee-4011-a999-57728ab8f859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ab19ca-aee2-4926-9e87-c8c285ab27dd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e867963-0776-454d-b6c7-7c94a2c01e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8296dd55-9557-4356-aa7f-66aa63b94815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43677455-f2b5-44b3-bbcd-40dbb8f2b238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bedc1a7-7c71-4633-876a-055b9ce93ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b7357b-fda9-45f3-badf-bdf3c21f3a00",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c94f4f0-969d-4765-8380-613416cd01eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d641c6e7-48fe-425a-b3a6-e470eef497fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e620126a-3851-4003-9646-8e142357fd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d611e28-8ad0-4f35-8471-5c3c064070d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fb0f41-0936-4342-bdc4-52f7754741de",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682fb066-ce69-433d-8f2c-dc7e630eef8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98a21fe-e0f1-492a-8fa9-676be9e54a25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5657271-28ab-4816-9585-092887c89edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8902640-22ad-4b8c-bd41-19abaea5d3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f324cc-d6e0-4398-a5f8-20baebb10825",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38990a57-ddb0-4383-8be2-5ea288438aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3fb339-a7e1-41bc-96e7-b6347225537a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "470a0a19-8974-400a-9814-77c9d6afd0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67d7d17-047c-49ce-834a-d2c947fee662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b1c844-5f77-4883-91a0-e315dfc0c2ee",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4218757-6995-4caf-bf48-a0ba4b38f814",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60c9b103-4b72-478d-8aee-577b8a582ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f0d54d-1a09-4951-8dfd-6c56bc00661b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be375fb-50f7-47a0-a1bd-d5d1fccc19f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8674ad6-e714-474c-bb4b-60dc65f54388",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0c6e0b-0f50-43cb-9b63-5a7d33435126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85798230-cd66-4fcd-8054-2490bf1037c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3327ea7b-ad3e-4d3b-a920-4ff2c7abe8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b00d2eda-6565-4e59-bf00-bbf40bf5115f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2be83e-e9f8-4f8a-ba31-4f3b99504f10",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe13b6e-3474-46db-8b77-7f6e9702157c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d052a28-3c96-4790-9c73-2c5264358443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2f9895-7d75-410f-a0dd-70672654ddc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d1c3a4-dd0c-4d10-ba78-9c6655a197a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3ced1e-42c6-474c-8b14-2175042f29cc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87dc6550-b6ef-4306-844d-4a721ab219ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "273471a2-6101-47c2-8c95-825eb410ec9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f80074-1887-4cda-830b-4a67773c6db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65616fb-36ac-4fe0-a244-b9dc7b7bacf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949a4525-6251-4bbb-84f9-a186d1479bff",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c360abe-3991-4121-9434-022a7c32b519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab25832a-27a8-43eb-9b7e-03e210426026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "966202cc-a619-4ad0-babd-751c4fc26005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca0b9b7-92b0-4e3e-8811-540c5330f4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e498a1-e293-42c7-ac69-01f7d9dd8b51",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a726dd4b-e171-4317-b672-54952c5bd965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1589f5ce-e1e5-488d-adb9-2d0e5967939c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3d51f7-0f41-4548-8235-d769a7f394d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a533f882-64a7-4525-a42c-820cbbd7a753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126b1e36-751f-446e-854f-7af41deb9313",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c75c8a8-1e28-4c29-9ea1-7c24a2b80861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67214272-3526-43f3-804f-c11bf8dc0aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "496ea671-a042-4442-bb7d-833400579a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e3d6e27-e90d-4226-9e96-850b7d6bf333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c29685-a1c3-4fc0-91f9-28a424277340",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b8ea2a-eff3-4b72-825a-14e943ac5dd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db75b0bc-01fd-4903-b1e6-be67f3dcbf18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9ad158-03ab-4854-98be-76f1e62d51d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f588ba-3c53-42b0-af41-150f57902a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f50909-4bf2-431b-8e3c-18aac667e56c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33196f0-6bd6-4907-af6e-97267d50ffa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c1a1b29-0a93-487a-ac09-63497001f40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13030c7-2401-4793-b67f-d04332abe5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af525df-4751-4554-a6ce-9cb3d6cf9d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9070d7bf-af01-453b-a330-08d4e1145a90",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1205aa-6132-47e9-8a9d-4413038d280f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08cce2ab-fab0-44dd-a847-64c2f8621ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b7d94d-8f8f-4fd9-add4-3ff3ae493334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7259e0-7a8d-4970-be5b-bef3264e7d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a65f41-f05d-459f-84bb-09aebdeb5d05",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4313831-a339-4241-8b7e-48986324306c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d1e9951-f0d8-4740-91c8-955baa65e1c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7516a7-527e-48a5-8029-7e6eed508b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6a162f-155d-4258-b62d-d83088ce3c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0669cd04-ce5f-4947-902c-054ca265e659",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c1978f-bb75-4b1b-b819-ce18457b2b90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afce7483-62bc-4a58-a5e3-987495023e30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c251bd-0fdf-4ae2-9aa0-365341c4ec33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a640f0a0-3862-4270-a614-1d4911c4691d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48c8fdf-814a-437a-9d74-f73e6a43928f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f148ecfa-1c21-4d70-b696-7d73b1a063f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b1d8401-b100-4502-9083-8153ee4c5066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64badb73-fb75-45c3-9baa-a5cb7c88a453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080c8288-e213-41d7-a501-94df30bd8991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d91819-4a5a-4e00-a5f3-cbfa00b78e84",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f326774-fab1-44e4-94d6-4c62e08e0d8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "228f864b-86cd-49bb-9fb9-3649f85d8eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a6aba9-1260-4535-acc3-424544c88073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe7b6c91-482b-485f-a992-540e8051cf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9915f818-d8fd-414d-bec3-dbd19cf03703",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2d8aaa-2c0e-4780-a522-5383ce3dacec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c7728f4-2bbb-45c9-be10-bccbd9482938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef37065-59c0-4a2a-83d3-14d52c042c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbd3b87-0315-4370-a9b9-3410081b3a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2862c3a2-58b3-469c-a1c7-1049d8036ffa",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60f7581-9c64-4972-b8d8-12ec94ebfb10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e430b4f1-af51-40b9-88c4-4846f47c676b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd96795e-33a6-4eb7-80d8-661b15bf898d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee7413c-c352-4186-91db-ca6a9d6ec5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba56be33-0b34-4f5c-8cdd-dd0e92a7635e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb29da9-ea1c-4bbe-ba39-aedc968ab4b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0019ac5f-7ee6-4ed2-ac3e-307d7d383a74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b64cbd-b284-4b81-8abf-65ffac2ba55f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e3a95a-839f-4d0b-bd84-be258865b51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f307a3a9-3b6f-44e8-b645-23dc3d1197e4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f486b6-c3da-4b83-9b4a-4cd33776dfb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b584d13c-6cc7-42e1-886e-6474d67e8e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c00176b-ed92-40ee-bb65-c1587c4112b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2feee27-b928-4bd2-9fc9-1b899a56adda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a3fc5f-8a30-4725-b88c-e500f675484a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5a7686-9dbe-41f5-9b5e-f933d0006743",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff448423-f1de-4e81-b3a2-854dcd51ea04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a86626-3654-423b-ad19-5c53a9275303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f056af-8f42-4d4d-852e-1bf8e48c4bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8111d068-806e-457b-b053-abdb8a2a104d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e577cd2-4d4b-4ef4-a804-058db1fab6d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98440141-f206-4ff4-9ea2-0d4037a8cf1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd085ee7-3eb0-49c6-a876-0947e41f47d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5948d1-29b6-4b32-9aee-32e751997a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be0088c-8278-4c71-8a54-c87bb06a9868",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab24a275-de34-48fc-a93d-635894a7fbeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b224cc75-5045-4fe7-a12e-5aa632bc7467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058ce5d1-1962-4480-91bf-50b22b1f29d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414e4638-a880-4706-be62-d1b125b23b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ae6302-8293-444e-a3f5-972c75214127",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cd1ec3-d187-4410-b09b-a49d9cb0f148",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cc2a67b-e7e4-4587-b845-8cd074b9bea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7379501-dc77-4bdc-bc7d-a9b1ed8f7911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d874d664-b20d-4737-ba2b-ff839edca38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7606c1d3-464b-487a-93d2-4a1bbfb1c7b3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10db5d8c-4259-4ded-9221-21cbd214f981",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2be75e1-9763-4809-976f-28982a63e601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea744a3c-d843-46fa-814d-3c1556a6c464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd65ae3e-9c65-4969-98ac-1f5308859494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f332e7-436d-416b-a6ca-8f7d96060451",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be171013-e92d-45d5-af6f-433ec647d1d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "025d6de6-032a-4cb9-bf70-9c2076259651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85721fc7-67d6-4a7d-b495-723ccf7b731e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9beafb40-6c16-44b9-8d02-57c3ecc1453b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092c31dd-82f5-4683-a001-cb369e9db609",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2e0464-58de-4be7-8403-eef868254e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6b2083d-8516-414c-b872-b29edace32cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ff0015-40a6-4605-81e2-ce0e29dc9cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5843f681-3f4a-49b2-9749-d7465957aaba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0044667f-0682-42fe-9a0c-2fa0d9c61624",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2552597-e91f-49a0-8153-28dca4d47f49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f6c2298-1764-43aa-99bf-ab21cd7a73bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53d3039-f5b9-4d82-9c0f-74130dadad48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f5cd1f-a119-4b6a-87b2-1b64ce0ecbed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e82516e-8ee5-403d-bb9a-b606a0a0a663",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff95005b-0076-43ed-bfb0-7cc199ea10a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7561c37-0f1f-4e31-a964-dd0fae009807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71fdb34-d243-4d09-b4e9-e414baf44427",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a5ea39-65fe-4967-816d-139e1ff2845d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db84239b-81c3-4427-bb5e-a6252ebf7580",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cfc837-cb84-488f-badd-8195ff9f9db7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cf8a41a-a561-4fc1-8519-7878e6c009d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4822c0-e03d-434c-a685-e4dc9361d3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2817cc63-f240-4e2b-af43-57ed947f30e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51253187-790a-4f86-9927-f3b20f1fdd4c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13eb2c5e-772a-45a3-b717-6b1d45d90ccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5614ea42-9677-4365-a8f4-34d421b3cdea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "308459c7-2bda-4134-8519-951f9dc0bdab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639d8cbc-4636-4961-8340-a5ab78866d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e6fdb3-2577-4645-a894-afa08b8a4b49",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c5631c-f644-4686-8d4a-7138ad56b1d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc9d158b-ef28-4e2e-ae72-91a3d6e0bc78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a3989a-945b-442c-b4ea-465c0f9da4df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16e2f55-bb53-470e-9d80-cd40f5fdec02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54121a30-ed93-4226-b829-8cce0d12ce7a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccb0b07-6a04-485f-be27-bc6ece60c7c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2ca3ca0-cd3f-4587-b4bb-33ef36927f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78296418-0ab0-4378-8a38-929bcd800275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c0443fc-7431-4ab2-bf3f-4b4d072097da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c47293-acfb-40c1-9eb6-62105af4904f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945c28ed-3c6b-4a15-8ce4-4b0cbc673633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a325bd71-fe47-4e7e-93da-e92419a38ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9425325c-7a6e-48ad-8ec7-8116c9bf1448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc9fa01-ea78-44c3-a2d0-1852e96dfe55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479e66ec-828b-42fc-ac33-67b2588e6ad6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed4b2bf-aa57-411d-b11f-68049da7aed4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb0c8008-5d7e-4e05-99a9-2763f3d6749f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa8ca63-d096-4bfb-affd-63272fa43856",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab424b2-89f2-438f-8d72-7e39104fbcca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1534e75d-9cd0-47cb-8737-a9c2df49a7e1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc7b672-9edc-4af1-a735-3d78e8e9b053",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74ff74a1-980b-4bbe-a869-b77f8363acf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b6c27a-4d76-4197-8d3e-cc310d4a7b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ada35f-f1a8-4db5-a884-20442bd2b04b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c920920-5b4a-4984-894c-c3b04d369bc5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e1adba0-a984-4a87-88d6-07bd7d000773"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25a57d13-ea42-4fac-9b4e-b3fecf7388fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b12462cc-2e85-40af-8bab-89bd44770002"
                    }
                  }
                ]
              },
              {
                "id": "a498892b-05ae-4c79-873a-0ae3852ca457",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e0f7849-8dbe-4429-98af-c9b600c5b77d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a266663-ebe8-4791-a0f4-5b3ddd170def",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6384e343-b0e6-4092-b7c8-d11ac8c79ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ffffbf-9691-42ab-86ee-b7ec8a986a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1898dfce-21cb-47b3-a6ac-10818ef87ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9760a595-ceb3-4c54-8bd2-9f589dc86348",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ff82d0-315e-45ef-89f8-0bdb0ca55bd0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5dd1ba26-161e-41c8-a5a6-d08c4bed91fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c1587d-1846-47ed-82c8-895b87f15b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bac17e1-c875-4620-b8a5-2700b4d4aa52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b05fa224-7740-4139-bf63-5ba1739122a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c671426-e36a-4c53-85c9-1476809b4e08"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "741e127d-0b5a-43c6-a39f-481cdf0397e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92e39e9a-11ba-49ab-8122-409eea576dd1"
                    }
                  }
                ]
              },
              {
                "id": "e2cb7557-d5fc-4c7c-9690-3d785c9cd65c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0814d6d4-7f68-4756-8b18-1a9844bf4d33",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836cb183-b003-4368-8c1b-a388bfd3ee65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7d54fb25-702a-4db2-b406-c62004241e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f02ecdf-69d6-41ed-93e6-208d6f46ff5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b6c470-cd96-4b0b-a2d5-642c8e7f5b6e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "40c7fc49-917e-4372-80ab-140e89e0ba7d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d78437f5-d88d-45c7-8184-dffa933892ef",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "628bb707-4af4-4066-96f7-8f19b0c80423",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "50af4873-0574-48e3-bc19-5bac7b57a1e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26653079-a634-4fb6-8e0e-78c8923684a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43a87813-2131-4af6-9481-a9ef4fc6b30f"
                    }
                  }
                ]
              },
              {
                "id": "d99ac0f2-68c7-48ea-8ad2-f20bda149a43",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07e96406-62ba-4406-b19a-15df9846c365",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f8b3e27c-8e76-42fc-ad10-e523e7dc59c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1475602f-1e20-4056-a88d-0af4bda54325",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1d5d9b7-2580-4ff5-a8c9-1b4ad9fd13a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f21190e-0e23-4e4b-b6b5-131e1a8269f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f4572668-5085-4839-bfe0-8a4cb0ef910a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b828f78d-df1f-4e52-a31c-8687553ae024",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5f8c13f1-9308-4129-923a-6a8506ffa9c6"
            }
          }
        ]
      },
      {
        "id": "628c0dee-ed2f-4e09-8d7e-bbdbdc27f48a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3e696c74-41ba-48c5-b733-a181cea4ad72",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0733842d-225e-434a-82c0-a46423be26e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d33f66fc-4a0b-4d2b-bb9c-8d37ca108d3f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf7d1dc-c718-434a-a58e-da8305e96a26",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e91348e0-34c9-43db-a471-27b5299122ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2d1708-4160-4a06-b51a-bb35ca880873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6099d765-1a7b-4808-8b21-7436b1aba1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ade96ff-cf8d-4acf-ab47-e1dc09d3324d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66267302-08b4-4bcc-afa5-4686fcfda16c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "27a74566-8116-4521-81ba-0e2ac6dc1e73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf363dc-2bd0-4b31-bba2-8354365fc26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "745307f2-2d5e-470d-a40d-1e8b1376d5a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b02e7249-dfbf-4b61-9c71-1250a4d6c0e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dfc7833-99e3-4f9b-8350-b6a42bfc56c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "73adcbb6-12d5-4b8b-9b12-96bff5282b0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa9077c8-9982-4a0a-8e0d-4185e1205a28"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bbf31f82-a56e-4611-905d-bc2b1e92bbcf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d1e7d555-357e-485c-9b79-b9c4d9538a47"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3d3d2af-cccb-4b7c-a94d-ff6f10347a23",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db38017c-68d7-478b-acce-84ec23ae3a34"
            }
          }
        ]
      },
      {
        "id": "8f295fdf-25cf-4778-ae7f-48b900ad244b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bd79167e-4edb-438e-ac48-1dc24fa83d6b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c3c12e5-324a-4a4f-8b7b-f8ee9167e07e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b2a4c01-5a9b-42dc-ae1f-da77109f775f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d1c78b-f506-4f44-88d5-0f9d3bc2b6bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d954814-36e5-426e-b539-89074199dd51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0134dc4c-218e-4630-8812-82e660d82d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5c66d17-afa6-42a4-b75e-eb13f8bfce37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff033f75-266b-4a5d-9442-26b8b241e5a0",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e60bd57-fa7d-4b2c-9cd9-c5493b46411c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c2934ace-897a-444c-befa-9bcf5ba2e348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc93022-75f4-43ae-bb50-8c34461a6ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0c24242-cfe0-48a4-9e86-1f2592cb5078"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b81c59c9-4bc9-4b35-aed4-f66292772e40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0507c34-2a79-421e-bf7a-a70117411693"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce6e19bc-3be1-4827-a318-cb3af2c850e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0329ab4e-f34a-4aca-bc09-aa812c0a47cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8803a6bf-12a2-4cc4-99a7-4be7bdd9017a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db034235-6ec4-4a0f-94d8-368f7c87dc8e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd4cce97-1500-4ffd-8808-e087343f6d34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b21e689-9e0d-4ff2-ad37-ebd1d0ddd726"
            }
          }
        ]
      },
      {
        "id": "0116bd98-51fa-448c-8e69-4a948728ec52",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fa1e5860-8e7b-45cd-834d-42a41a31892f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98cc4be8-98ce-4b4a-a149-7f0531e1089e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b57d293d-a527-4f2d-91a6-1023a0a9f254",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b9d322-1d80-45be-8757-fd334fb41167",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0deae85a-6c8c-4879-bc09-a14fd0137d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc432c0-eca0-48c7-92f5-780554578765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7116776-3b26-4b86-b773-440f21f32183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d301934a-a137-4edb-b437-5b17ef36f323",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4a348c-3e6a-48ef-a784-6986bf734ac2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a21284-40d4-49ea-9b3f-872ffc5e3fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3867e2-f762-4455-983b-53726a2475b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec6a31c1-9c61-4231-bf02-83785f9c95f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64517e64-e4e7-434a-b93b-b97805e98b40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6fd5de0-fb8d-4322-bfbe-e8e2c3dcb74d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc126c4d-aaf1-4e0c-aef6-01fa5b5c5404",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27e20676-f646-4ab0-8c98-c9022c91e4cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1bbfe10-4d15-4b77-9ee1-b8c3df086568",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "88630492-e9fb-4ab0-a934-32035f1fd9d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "153fc85e-502d-45a6-9348-c96ffce71f2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fde52ef-e080-402f-b3dd-fc5a59dbb7c8"
            }
          }
        ]
      },
      {
        "id": "64b235af-cf54-4252-b679-a2e3bd4da7ac",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb00a47d-75ca-4ca2-af86-5846790b4917",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd943cd3-2e94-43f9-a8ca-d5e9bf97986c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d15ef5cf-210e-4ca3-871f-ce44f6c6a931",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7dff3216-3c5f-4b73-aa93-68a035c1d15d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b759b82-028e-4c28-9359-b82b01d78c26",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 297.173076923077,
      "responseMin": 7,
      "responseMax": 6821,
      "responseSd": 830.5806430803482,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681691878904,
      "completed": 1681691969039
    },
    "executions": [
      {
        "id": "9b28004b-6985-48f1-8dd8-8cddaa9777e1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ee3c39b7-9158-4335-a953-cf480b864780",
          "httpRequestId": "a4485c9a-5e51-402f-9545-afb25fa7949c"
        },
        "item": {
          "id": "9b28004b-6985-48f1-8dd8-8cddaa9777e1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9956c911-e25b-4cf7-93a4-4b619eb5ff64",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 0
        }
      },
      {
        "id": "6f0e8af0-268d-4b2f-abca-1531fee90ea4",
        "cursor": {
          "ref": "fec39f72-d314-498b-99a6-30a36c9892ed",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "db360ad0-182a-4534-9c5b-d3f912b77651"
        },
        "item": {
          "id": "6f0e8af0-268d-4b2f-abca-1531fee90ea4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7e2d285e-c56e-4f46-890b-dfbecc9bd8c8",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "a33510f8-42c2-47d3-83ea-5cdc15f678f1",
        "cursor": {
          "ref": "92dcecfd-4e2a-4c09-b574-abde34684e03",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3d0f0a89-a1e2-4608-afe9-784c22a84484"
        },
        "item": {
          "id": "a33510f8-42c2-47d3-83ea-5cdc15f678f1",
          "name": "did_json"
        },
        "response": {
          "id": "9e33643e-8d2b-49ff-9e2c-57123bc00468",
          "status": "OK",
          "code": 200,
          "responseTime": 638,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776327e3-bce4-424f-840f-7fc048852747",
        "cursor": {
          "ref": "09ae28b2-b661-4606-bf02-c2ef92a1fa05",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "90c6e1db-584b-475d-977c-123987ca7772"
        },
        "item": {
          "id": "776327e3-bce4-424f-840f-7fc048852747",
          "name": "did:invalid"
        },
        "response": {
          "id": "a16ecf67-cae0-41ed-8e0b-f2df2e617697",
          "status": "Not Found",
          "code": 404,
          "responseTime": 410,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "776327e3-bce4-424f-840f-7fc048852747",
        "cursor": {
          "ref": "09ae28b2-b661-4606-bf02-c2ef92a1fa05",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "90c6e1db-584b-475d-977c-123987ca7772"
        },
        "item": {
          "id": "776327e3-bce4-424f-840f-7fc048852747",
          "name": "did:invalid"
        },
        "response": {
          "id": "a16ecf67-cae0-41ed-8e0b-f2df2e617697",
          "status": "Not Found",
          "code": 404,
          "responseTime": 410,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "307aa247-16c2-4359-a582-24a490b1a909",
        "cursor": {
          "ref": "d6bb2386-39b8-47f4-9efe-96d0074bc895",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "feb69e0f-580b-4670-82b8-7fdb11e148f9"
        },
        "item": {
          "id": "307aa247-16c2-4359-a582-24a490b1a909",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "64bf8549-2f86-4f3c-ab42-3ff87322aa8c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7f6909-e66d-45bf-a43d-dcc52eb72bb8",
        "cursor": {
          "ref": "15eba2a2-ed32-4948-a57e-7b0be2bb1f76",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "57d7a71d-b855-4918-8c83-13481e23628f"
        },
        "item": {
          "id": "ff7f6909-e66d-45bf-a43d-dcc52eb72bb8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "977cd1f8-5f52-4f34-aee7-095f86442a37",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1eb9542-a044-46f8-ae44-cd2b762b8df7",
        "cursor": {
          "ref": "41ba1069-0066-4b07-b0c0-f64640f0de09",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2de3f3e7-2a5a-4770-a684-c9a50b0c6439"
        },
        "item": {
          "id": "b1eb9542-a044-46f8-ae44-cd2b762b8df7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "eb0b6168-ddd9-4d30-a8e8-c8aaf114235c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 98,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "f95c29e5-813d-4e7a-939b-04d8965780bd",
        "cursor": {
          "ref": "fb45671f-3654-4b52-8741-8d44859183f1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "457dddde-006d-40d3-bed8-021e513424f9"
        },
        "item": {
          "id": "f95c29e5-813d-4e7a-939b-04d8965780bd",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f82ac1e7-5d78-40c2-a2ed-ae1c75f32590",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f95c29e5-813d-4e7a-939b-04d8965780bd",
        "cursor": {
          "ref": "fb45671f-3654-4b52-8741-8d44859183f1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "457dddde-006d-40d3-bed8-021e513424f9"
        },
        "item": {
          "id": "f95c29e5-813d-4e7a-939b-04d8965780bd",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f82ac1e7-5d78-40c2-a2ed-ae1c75f32590",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f6ca51a2-2955-42f8-8eff-68420ea55971",
        "cursor": {
          "ref": "1b00afcf-8f15-466c-b9eb-e1435e987622",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7936ede7-6edf-4f6b-b2cc-102de56547b8"
        },
        "item": {
          "id": "f6ca51a2-2955-42f8-8eff-68420ea55971",
          "name": "identifiers"
        },
        "response": {
          "id": "250e770f-d4d2-4425-9927-ef8fdded32f9",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a6d084-af14-477e-bf26-45707ef44d92",
        "cursor": {
          "ref": "6132f052-2757-47c8-bfc0-036c08daec3b",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "11c55999-13c3-4631-a43c-cadd6044f831"
        },
        "item": {
          "id": "46a6d084-af14-477e-bf26-45707ef44d92",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a4d4ab38-1029-44bc-9773-998f0a493e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a6d084-af14-477e-bf26-45707ef44d92",
        "cursor": {
          "ref": "6132f052-2757-47c8-bfc0-036c08daec3b",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "11c55999-13c3-4631-a43c-cadd6044f831"
        },
        "item": {
          "id": "46a6d084-af14-477e-bf26-45707ef44d92",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a4d4ab38-1029-44bc-9773-998f0a493e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622b5a84-aeb0-452a-beb2-31de6db0c288",
        "cursor": {
          "ref": "4c27aef8-aeff-4322-a2b2-ef084f99ff9f",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2763bc93-7747-4764-9bdc-afa90667f233"
        },
        "item": {
          "id": "622b5a84-aeb0-452a-beb2-31de6db0c288",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d10a2c15-576c-4707-98a6-57f8c6b7cb2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a766a5e4-ed38-417f-931a-d8f9faf8cea7",
        "cursor": {
          "ref": "b9d6bdf8-9509-411a-8a4d-4efc058a3c40",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4a6d1aaa-8701-4982-828d-073df8ab3e40"
        },
        "item": {
          "id": "a766a5e4-ed38-417f-931a-d8f9faf8cea7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1e1cca40-6eca-46f6-bb4c-46bb7e190b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157efc5e-de17-404c-a6c6-6b5607b2eee1",
        "cursor": {
          "ref": "5ba741db-78cf-46e5-841f-4c1ec201dac2",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7aa43d69-0745-4dc0-aa2c-125d9431a182"
        },
        "item": {
          "id": "157efc5e-de17-404c-a6c6-6b5607b2eee1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d790af0a-1059-4397-b454-69ff26b18e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5448fec3-4c26-4315-a270-a89cbbf0fdd5",
        "cursor": {
          "ref": "005f15c4-c93b-4825-99f6-6ed6dda47716",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7c7e8afe-7545-4025-ae96-fdcaf07e388e"
        },
        "item": {
          "id": "5448fec3-4c26-4315-a270-a89cbbf0fdd5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6f15c924-5d71-44e8-9106-c1857e02a362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5780f90-b4cd-4fef-bd3f-03d68e6f0f99",
        "cursor": {
          "ref": "75548b1a-d7cf-4daf-86e3-6b0f9b4f9441",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fe5bec73-6cd3-42dc-afdf-00f676d4d546"
        },
        "item": {
          "id": "d5780f90-b4cd-4fef-bd3f-03d68e6f0f99",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "744fe4e4-3459-44e4-816d-2ae7b2b87dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2386a03-c47c-4e47-8fb1-11ad83df658f",
        "cursor": {
          "ref": "79ca2412-ac54-4aec-b036-d39cbd765ed7",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6206d55d-ff4c-4a34-9265-6aeecafdb560"
        },
        "item": {
          "id": "c2386a03-c47c-4e47-8fb1-11ad83df658f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3e687905-6acd-4441-87f1-daddf89dc292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1413a1-60f3-40cc-bc32-2be23865cba2",
        "cursor": {
          "ref": "39ffd84a-c6ac-4c70-926d-120c4a2d3837",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e5a87066-f612-43f3-887b-9eac06294b29"
        },
        "item": {
          "id": "2f1413a1-60f3-40cc-bc32-2be23865cba2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "602c6cd1-760e-4ae0-bc22-2e9aeaef6a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34078f31-717b-4386-b464-e8281faeb7e6",
        "cursor": {
          "ref": "52a41686-2037-434c-85e8-38a668f98c13",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e4dea445-e304-4cc7-ac46-d5ecd908cb73"
        },
        "item": {
          "id": "34078f31-717b-4386-b464-e8281faeb7e6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "665ea816-b2c2-4b81-97cb-4210b45bca2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7227394a-0528-493c-8d80-a2aa4ccd4944",
        "cursor": {
          "ref": "b378e16d-5d2a-4ee8-8ae7-c3bb1dc86a43",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f9b250a6-31f7-4e5d-a292-3f2f76fce250"
        },
        "item": {
          "id": "7227394a-0528-493c-8d80-a2aa4ccd4944",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7bc0a91b-e863-4328-b890-52193dc63479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c345020c-b504-48bb-a9e2-0f1ed938a87c",
        "cursor": {
          "ref": "bdb5d55e-1e68-49d0-ad81-1570497c1abb",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "377673fa-a43b-46f5-be5d-e44d2386328b"
        },
        "item": {
          "id": "c345020c-b504-48bb-a9e2-0f1ed938a87c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8b2f6df5-043b-40e0-a8cc-53358af7a844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d94c26e-b6b6-4385-ab7b-0cce44dfa236",
        "cursor": {
          "ref": "38677393-8eea-43b4-9c3d-02d5f1f0590e",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "20b6f6f2-8a3f-4f78-9f2c-16b1ad39e258"
        },
        "item": {
          "id": "3d94c26e-b6b6-4385-ab7b-0cce44dfa236",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "33564c29-144d-41d6-909d-55a08fad0cc5",
          "status": "Created",
          "code": 201,
          "responseTime": 1152,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "4b0d82c5-8963-4335-a41e-956020231d4d",
        "cursor": {
          "ref": "aca79731-5371-4662-91b4-c1c0e8ee9b70",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "df86dbdd-6bcd-48c7-b2b3-841fb10b91ad"
        },
        "item": {
          "id": "4b0d82c5-8963-4335-a41e-956020231d4d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f0399823-5aa2-4ce9-b93e-f59dd1b1ed6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a3cfcf-4a1b-4842-946c-661d886e61e6",
        "cursor": {
          "ref": "893bd701-6a1e-468a-8886-9b5e8a32c969",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b57b2ce4-94ff-4bd2-b9a4-f09d7f8805ba"
        },
        "item": {
          "id": "42a3cfcf-4a1b-4842-946c-661d886e61e6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "93d3ccde-bb4c-406d-91fa-d95405148fdf",
          "status": "Created",
          "code": 201,
          "responseTime": 5620,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a9107244-aab0-4051-9bba-8bad8fd410c7",
        "cursor": {
          "ref": "b18c451f-2f7e-4898-a87a-bf8e122f281a",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ecca8db9-b2bb-44cc-8342-9521252de61e"
        },
        "item": {
          "id": "a9107244-aab0-4051-9bba-8bad8fd410c7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d4045dcc-ab90-482c-a22a-9910474ac905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbb0adc-57e4-45ca-b93b-a8696869e646",
        "cursor": {
          "ref": "70890a5f-80a5-4e41-b7f3-398c1fbfa2c9",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "be916050-fd36-428b-9de3-978930d56989"
        },
        "item": {
          "id": "5bbb0adc-57e4-45ca-b93b-a8696869e646",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f7e49f5b-8827-4936-93b7-cfc64fdbec1d",
          "status": "Created",
          "code": 201,
          "responseTime": 6821,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "3261fbd6-89f7-49c3-a6d9-1f29cef3e2de",
        "cursor": {
          "ref": "d5b95051-3148-4b38-a220-fe38e56ea2f1",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5b78a0bd-e286-4043-90c2-7bf342262166"
        },
        "item": {
          "id": "3261fbd6-89f7-49c3-a6d9-1f29cef3e2de",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f24f6c20-da18-4c28-874c-67447882853e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c233a79d-325f-4864-9f2f-f2ddd36b03a9",
        "cursor": {
          "ref": "36209f99-ebdb-4060-abb7-c219871f1f4a",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d7f4d656-8c0e-4030-9b1e-c1badb5496ff"
        },
        "item": {
          "id": "c233a79d-325f-4864-9f2f-f2ddd36b03a9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bff297d7-77e6-43a3-b489-470727265935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d71b1ef-83dc-4d30-9a9f-a81586d71c4c",
        "cursor": {
          "ref": "11b0cc7b-7382-4bc1-b096-9779c2f44631",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1cc60919-952b-42b1-b0ac-6d6a595051da"
        },
        "item": {
          "id": "9d71b1ef-83dc-4d30-9a9f-a81586d71c4c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "33ccfb9c-b081-425e-9347-7824d1daedf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 389,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1357574c-54b1-4044-bb7d-76cf57013c3a",
        "cursor": {
          "ref": "0143a962-975f-41b0-bf12-f143851870d4",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1365d58e-f09c-4c44-bd80-c94644ecf67c"
        },
        "item": {
          "id": "1357574c-54b1-4044-bb7d-76cf57013c3a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "601c1fd4-78a1-4a25-8e24-8184794dd1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957dd1c7-83d7-4693-92d2-59bf856d419c",
        "cursor": {
          "ref": "8244e3ec-f1ad-4b6d-a6d6-9a47104186fc",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4dc16359-b1ba-4a58-bf4e-0be07b9a4fa0"
        },
        "item": {
          "id": "957dd1c7-83d7-4693-92d2-59bf856d419c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c3b6863e-6e50-4987-8271-ed54a2fd2b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65e2d01-5423-42e3-ba2d-7563a6e4dcf8",
        "cursor": {
          "ref": "8c8f14b1-8154-40e9-bafb-0c739bf454c7",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "17acb282-c9e9-4215-8992-4820a414b967"
        },
        "item": {
          "id": "d65e2d01-5423-42e3-ba2d-7563a6e4dcf8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d90f57bb-150a-49df-9bc9-699f6eb91ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c09de9-9910-4052-9ee9-72bee29f2aa4",
        "cursor": {
          "ref": "2990b649-4246-4db1-aead-df6e1b54582c",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ee9fede3-0bce-4e3e-b69e-12b3e4198ce6"
        },
        "item": {
          "id": "55c09de9-9910-4052-9ee9-72bee29f2aa4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c528ab98-5196-4327-82d3-271d2d455e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1a86cf-5df8-4583-a1c7-1704bd43e031",
        "cursor": {
          "ref": "6182db14-fc4e-4783-9965-a3ffd788abd2",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "57bc6707-1d27-461b-b7c4-de13c430b1b2"
        },
        "item": {
          "id": "8c1a86cf-5df8-4583-a1c7-1704bd43e031",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0d502057-db85-48ee-86a7-87e5c5ac49cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc99db6-fb65-4f8b-aed3-af33739e78eb",
        "cursor": {
          "ref": "29c04150-580c-4d89-ac96-c4e355f690a1",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0440c440-b3aa-45fa-8df2-d34d45155577"
        },
        "item": {
          "id": "fcc99db6-fb65-4f8b-aed3-af33739e78eb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "96762942-e697-4cf8-97d3-cf6720b8b24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fa4a48-863d-4998-89a2-d32222024912",
        "cursor": {
          "ref": "41b03072-1ef6-4453-ab8c-6a1d603154bd",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cc7373bb-ac65-4ddb-acb5-d77d7da8bd92"
        },
        "item": {
          "id": "e8fa4a48-863d-4998-89a2-d32222024912",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "feb33de1-b651-4007-98a6-2c17f31d9299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bfc2669-d434-42d0-ad84-fe87079d095e",
        "cursor": {
          "ref": "ea343eba-3617-420d-bd75-aba41a073ce0",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "69dccd0f-fb2d-4122-964c-31d96f1383aa"
        },
        "item": {
          "id": "9bfc2669-d434-42d0-ad84-fe87079d095e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e1485b95-493a-40af-95ff-051f3480b718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b18285f-30bb-438f-8e5c-4b9d254e2f99",
        "cursor": {
          "ref": "68cd5fa6-0de0-4a75-9c20-7fa507d42f76",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "51fc6b49-099b-4e47-a110-d55e019ba81e"
        },
        "item": {
          "id": "1b18285f-30bb-438f-8e5c-4b9d254e2f99",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a0aad5ed-0ef5-4ca9-815d-a0bbdd47bfc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 450,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c446f40f-5999-40b6-8bef-71a1d03ebc65",
        "cursor": {
          "ref": "34b08aaf-a167-4a4b-b065-cd07e8df544b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6eae2d5a-de28-475a-9636-003792c8925c"
        },
        "item": {
          "id": "c446f40f-5999-40b6-8bef-71a1d03ebc65",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3ce6b42d-a013-4ab5-a5bc-4b88918e8a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd98aaf-b5e6-4a25-80a9-e13dbb15869c",
        "cursor": {
          "ref": "99292b84-e6e6-46ff-8178-ce41320d0a56",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c37e245f-6fae-4629-a419-b4e69cd6a389"
        },
        "item": {
          "id": "bcd98aaf-b5e6-4a25-80a9-e13dbb15869c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0e1e929f-679f-48cd-9fcd-39502a9241e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c093db65-0439-41de-ba1b-594292d67228",
        "cursor": {
          "ref": "ff950025-39e7-4e6f-8244-1e246d500287",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c48f895b-52fc-44d3-94a3-d462eb77de93"
        },
        "item": {
          "id": "c093db65-0439-41de-ba1b-594292d67228",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "14792ee9-e49b-4219-8457-da86f83b29a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffe18b7-1e9c-4b50-81e9-bf1b66caa6ec",
        "cursor": {
          "ref": "7b776e84-1a1c-4a52-9f34-7dbea3f3c33a",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e52a5b23-717b-4e1c-bec0-854da4f0ecbf"
        },
        "item": {
          "id": "4ffe18b7-1e9c-4b50-81e9-bf1b66caa6ec",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c70152a6-9d14-437c-b34e-4f31059d44e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00ef4b8-5815-4e31-9ee7-ad6c2e484ef0",
        "cursor": {
          "ref": "b2dbc5f1-293d-40d9-a404-0bc2fd680b47",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a03ec7af-182d-474f-9dfd-75fd34b8bfd0"
        },
        "item": {
          "id": "c00ef4b8-5815-4e31-9ee7-ad6c2e484ef0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ef62d6f6-cbd0-4538-8361-56a0070e187e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b89112-4177-42ad-9641-86a089f81b8f",
        "cursor": {
          "ref": "0791026b-0c43-44ae-9c25-e125bc3d0c68",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "768ab16f-be7e-472c-8e58-fe37cbfc42bf"
        },
        "item": {
          "id": "00b89112-4177-42ad-9641-86a089f81b8f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "448f6fe4-433b-45b3-a190-31c6289d18f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574fc956-f5c1-4006-aa85-3f62eaf400f6",
        "cursor": {
          "ref": "9314d111-63dd-4341-b270-02a866a49aa2",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "501eab53-c004-442a-a5cd-8c281e3e5e34"
        },
        "item": {
          "id": "574fc956-f5c1-4006-aa85-3f62eaf400f6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c61d0f69-ae48-4ee5-b088-7f13348b4065",
          "status": "Created",
          "code": 201,
          "responseTime": 4895,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "cf1c3b73-ba8a-45d6-85ba-16e0a744f431",
        "cursor": {
          "ref": "1037dd80-cb12-4408-946b-e3bfa7cf9c3f",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "190f10fe-1a2d-4d19-b178-6ac95483423a"
        },
        "item": {
          "id": "cf1c3b73-ba8a-45d6-85ba-16e0a744f431",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3505ceaa-3a14-4211-b362-7e65974d1053",
          "status": "Created",
          "code": 201,
          "responseTime": 2724,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "60976cd5-c157-4b6d-8ce6-964900eb743a",
        "cursor": {
          "ref": "b9fe694f-d6fc-4f00-9c0b-0f54f7d807fe",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "48e5b797-0ea8-4a8c-b2cd-6f9e17f5df38"
        },
        "item": {
          "id": "60976cd5-c157-4b6d-8ce6-964900eb743a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c858e091-4874-4a59-8d97-2005f4ca5604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a41fb8-423d-4c3b-b48f-534ffa5db149",
        "cursor": {
          "ref": "9259d6ff-eab0-474a-a9cb-de86ad24e13e",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3bea0c76-843e-445b-a0c2-23c10ee4f697"
        },
        "item": {
          "id": "86a41fb8-423d-4c3b-b48f-534ffa5db149",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6b6fc051-1cc2-403a-869c-8a6cfe08c7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a18406-5fd0-4842-832c-196ee1c613d8",
        "cursor": {
          "ref": "25e028d8-d5ef-4f90-8694-943b24dd0e2e",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "57bfbf5a-0bdd-41ae-9ef9-04f08236e92f"
        },
        "item": {
          "id": "b6a18406-5fd0-4842-832c-196ee1c613d8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e81d7788-22d7-4356-aa0e-50d0b89dc5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b332220d-1640-40d3-8d23-5c94e5caabb4",
        "cursor": {
          "ref": "8830a7ed-34fe-411f-83f9-0b46dd45f574",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ee642d86-cdca-4f7a-bf6d-765016499d7c"
        },
        "item": {
          "id": "b332220d-1640-40d3-8d23-5c94e5caabb4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "be42d5d6-82fc-4a5b-961d-b2f04e47620b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3251ecd5-1c1e-474f-a22a-71ed915dfd33",
        "cursor": {
          "ref": "5078b935-29b5-4478-8773-139d161f1188",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b9792f35-0073-4e53-81ce-cb2f65e3e917"
        },
        "item": {
          "id": "3251ecd5-1c1e-474f-a22a-71ed915dfd33",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8669cbd4-6fbc-4598-9490-f489672bcc70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5029ff58-428c-43dc-bfb2-d303e0d96d57",
        "cursor": {
          "ref": "f15bb409-926a-42e1-8d4f-161677a8e9dc",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ad8562d7-be21-4f14-8793-0a0f7f1ce36f"
        },
        "item": {
          "id": "5029ff58-428c-43dc-bfb2-d303e0d96d57",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3481fc8a-92a4-4627-a651-8fbfe4076c4f",
          "status": "Created",
          "code": 201,
          "responseTime": 2124,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "edc6a305-562c-4f03-8d0f-96c829e4d718",
        "cursor": {
          "ref": "fae0a291-281a-4261-804b-222c76b5fef6",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f13f80b6-c320-4a20-a505-686f02d2e588"
        },
        "item": {
          "id": "edc6a305-562c-4f03-8d0f-96c829e4d718",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "04ecc2dc-09e7-43e6-8bc9-1d2c03d33d6f",
          "status": "Created",
          "code": 201,
          "responseTime": 2966,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c0e0bd7e-f536-4479-8767-cb917da6cacf",
        "cursor": {
          "ref": "4da1a4c4-972e-4f3b-b0fb-dbe7687b9cda",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7e45f702-0ed5-463b-8f83-957901dd1cec"
        },
        "item": {
          "id": "c0e0bd7e-f536-4479-8767-cb917da6cacf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2ac20ccb-0455-45f7-9187-8d98d42a5da9",
          "status": "Created",
          "code": 201,
          "responseTime": 2465,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "a9461214-a3b9-4281-a1af-3462a412051e",
        "cursor": {
          "ref": "23a67d8a-b996-49c7-8821-136e3a7f7b50",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a0611a70-a173-4f02-ad6f-1c83f7693b03"
        },
        "item": {
          "id": "a9461214-a3b9-4281-a1af-3462a412051e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f47725e1-27da-4ea6-88d4-9d7d578ce0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b64e8c6-ba1a-4c76-a556-39d182bd696a",
        "cursor": {
          "ref": "42abd29f-a7df-4141-865f-ca4b7f831e86",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "04cda90e-1bde-45a4-a583-493d2fef8d3e"
        },
        "item": {
          "id": "5b64e8c6-ba1a-4c76-a556-39d182bd696a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5d34f6e2-7641-440d-8b12-08dc97b57641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd7650a-78c9-492d-8c5d-035f64b36bff",
        "cursor": {
          "ref": "9c09e5c0-f0a2-4309-b12b-346738ef82f9",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b798be57-931d-4af3-8806-8e1c7e5fb77d"
        },
        "item": {
          "id": "0cd7650a-78c9-492d-8c5d-035f64b36bff",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f98b8796-6474-4ee1-b9bc-5f6b1b07ba74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71d0778-b17e-4962-9ba7-486c012cdeac",
        "cursor": {
          "ref": "aa6f91c8-42d2-43a0-a44a-3f0e387505d0",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9930a993-3b35-478e-b667-5bdd7a636746"
        },
        "item": {
          "id": "f71d0778-b17e-4962-9ba7-486c012cdeac",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "531815f3-402f-470c-8a25-1746472bbea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5ba155-7f20-4f2c-9bd1-3f69b070cef2",
        "cursor": {
          "ref": "895d50fb-e42f-4546-83b8-e92689028e74",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2c687653-8960-40d2-b7ec-59d77201e0aa"
        },
        "item": {
          "id": "ab5ba155-7f20-4f2c-9bd1-3f69b070cef2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c199d13d-7858-432e-a0ae-9f7407c9b1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ab33ba-053f-439e-b6d2-9cc899cb6848",
        "cursor": {
          "ref": "0241815c-5614-4c6c-a644-3492ba04b479",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "21e16ca5-0597-4eef-87a9-37988282b006"
        },
        "item": {
          "id": "f2ab33ba-053f-439e-b6d2-9cc899cb6848",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "86235bb8-16fc-4724-9dfb-df0afb956ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cacf79-408c-4c7c-8d4d-3ac012faa388",
        "cursor": {
          "ref": "fd3494dd-971e-4b1d-a100-fc06c873e5d0",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "08f824b2-8967-403b-bc36-653678b4fa89"
        },
        "item": {
          "id": "c6cacf79-408c-4c7c-8d4d-3ac012faa388",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ac56afc4-335d-4dd6-bfac-441cf5544391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beca9f0c-73af-46c9-b0d0-4012894deed9",
        "cursor": {
          "ref": "5e13cba9-71ff-4726-af69-636b19a1e3d2",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d4a9c89d-7c90-4b93-8b76-9d9dc6077b8d"
        },
        "item": {
          "id": "beca9f0c-73af-46c9-b0d0-4012894deed9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ae98f3e6-05c8-44c4-ab36-4849822cd7c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1cdfdf-7e76-4c03-8ab6-dbcc8594c4ee",
        "cursor": {
          "ref": "395ed196-96c2-4fc7-8248-2484891fa85d",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c32a5e78-3f1d-4d4e-991f-1c4a11d8e634"
        },
        "item": {
          "id": "1a1cdfdf-7e76-4c03-8ab6-dbcc8594c4ee",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dbbafed6-8e64-4f16-a44d-3f76c07931e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16ef99a-67ed-4ab0-a596-ddde7c238c75",
        "cursor": {
          "ref": "5fee400f-db12-4dfc-add8-c5e083f7892f",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "29ba08fa-3cb0-474b-a526-9f146593a863"
        },
        "item": {
          "id": "f16ef99a-67ed-4ab0-a596-ddde7c238c75",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d24d167c-8ebd-46bf-9448-c64d0185514c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ecdd255-e70c-466c-97dc-f2f33c00aee4",
        "cursor": {
          "ref": "425f8eaf-f146-421c-9a33-abd702cd46ff",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "332f0f3c-8dcb-4e29-924b-106cee80e695"
        },
        "item": {
          "id": "9ecdd255-e70c-466c-97dc-f2f33c00aee4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a768617d-8e24-4be6-8f13-28eda1156458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2febf1b0-c2df-42ef-b186-d70d727af569",
        "cursor": {
          "ref": "62173917-38c6-4c0e-bffb-0e319eed3984",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cb2e355f-0617-4c1a-8149-100051be0539"
        },
        "item": {
          "id": "2febf1b0-c2df-42ef-b186-d70d727af569",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "67fd3501-8c45-45db-9996-39fdad4a0c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb14a29-74c9-476e-b3af-d4c3fa75c2de",
        "cursor": {
          "ref": "7c90c45e-d382-4aec-ac43-6d585d1eeeae",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6d4cd95b-dfe3-4778-a272-e226b54470fd"
        },
        "item": {
          "id": "8eb14a29-74c9-476e-b3af-d4c3fa75c2de",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "59a81cd3-ed65-45e7-bb71-edc6a8f76617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f9aba3-c7c1-4974-bca4-650929bd907c",
        "cursor": {
          "ref": "30251796-bdad-401f-90dc-d6d28bf0484e",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "61069e0a-9b8b-4283-9190-97e885ffd546"
        },
        "item": {
          "id": "a6f9aba3-c7c1-4974-bca4-650929bd907c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ae563976-9ef1-45ab-9679-c96b0b66c0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fda25b-78f3-4e78-94b1-87f988bd419c",
        "cursor": {
          "ref": "77d3dcf5-0fe4-47dc-969d-ad53fd3b7078",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "87a9c825-02ae-4dad-8122-786f5fbcfd47"
        },
        "item": {
          "id": "60fda25b-78f3-4e78-94b1-87f988bd419c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "98bb64c4-5dfb-4276-9998-b9366f8502b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14325d4b-71c3-4ebc-8f91-707cd20207c3",
        "cursor": {
          "ref": "8ec1fecf-80fb-4a8d-b433-d97ae64eb957",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d7b719c7-9c0e-41b2-8db0-9005ed2f24eb"
        },
        "item": {
          "id": "14325d4b-71c3-4ebc-8f91-707cd20207c3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "510759fa-f7fe-4e79-82e9-45d63c3318ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f59ab4b-1d21-4aff-b7ce-c60870585d7a",
        "cursor": {
          "ref": "e2c444f7-f54f-4f3c-9258-593478cded34",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "782480ec-917b-4fab-bf49-bdb8a2b4bdc0"
        },
        "item": {
          "id": "1f59ab4b-1d21-4aff-b7ce-c60870585d7a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "61af85e1-dabd-4db8-b4ef-3ff5c1cf57d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e821acb-86fe-4029-bf1d-bd8bd065b245",
        "cursor": {
          "ref": "3e7a7dc0-065b-4408-a363-3fce064b6d75",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5af293f9-74f2-4b01-9db5-cf7504fa8886"
        },
        "item": {
          "id": "6e821acb-86fe-4029-bf1d-bd8bd065b245",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9d4c5597-1724-41c3-91a2-7bc8dd585622",
          "status": "Created",
          "code": 201,
          "responseTime": 2622,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "1c17830b-5be7-4452-b78d-31dba44b0041",
        "cursor": {
          "ref": "61399ebb-6b2c-470f-bd93-823614d89dfd",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8d3c4ce6-ef70-453c-814c-4d4ffcdb034d"
        },
        "item": {
          "id": "1c17830b-5be7-4452-b78d-31dba44b0041",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9f8c8fe1-e600-484b-8437-e7fcc8390935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61367b0-5e6e-4fb2-8c3f-dd6a61c24691",
        "cursor": {
          "ref": "bcdf06f0-57aa-470c-b56b-4c61ddde1256",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d2057b8b-f0c7-4b6d-a3e1-335c6d21a393"
        },
        "item": {
          "id": "d61367b0-5e6e-4fb2-8c3f-dd6a61c24691",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b0d9dec9-ec86-4f6d-8b73-2be62590faee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd078a1-9c3f-40e6-ad82-da9489438dc0",
        "cursor": {
          "ref": "bc4db19a-eab4-4738-a307-d2a88b794bd5",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5367e023-e8e5-4315-9199-5e13c66464b1"
        },
        "item": {
          "id": "cdd078a1-9c3f-40e6-ad82-da9489438dc0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5861bf89-7692-4bc0-8e4e-6e37235f6898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ec0867-f6c7-49a3-983f-a19611c61eba",
        "cursor": {
          "ref": "d6b43a6d-7e4b-4e87-ae6f-e3d7b21cdf1b",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8165d812-4b51-44b2-a772-12a87e329df8"
        },
        "item": {
          "id": "e3ec0867-f6c7-49a3-983f-a19611c61eba",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0afae653-da61-407a-a62e-4a9d42bcb9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e27940-0e5c-4b78-a429-e2175169247a",
        "cursor": {
          "ref": "ed39f51e-079c-4aa5-b922-272f5b56f47f",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "272c6e1d-934a-410b-9edb-3638991cb4d9"
        },
        "item": {
          "id": "d3e27940-0e5c-4b78-a429-e2175169247a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2dd20372-cacc-49c9-a897-ebc13580cbab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06272cc-3524-4540-b0b3-560911d1edae",
        "cursor": {
          "ref": "cae36fd1-3b1d-40c4-b412-cfb662b689c3",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9d92d281-6f41-4e01-9eea-1fb07fc5807a"
        },
        "item": {
          "id": "f06272cc-3524-4540-b0b3-560911d1edae",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "99193652-7f22-42a2-bbf0-0fda268d3dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84d2bde-8688-43b3-820e-454d2eaa4a6e",
        "cursor": {
          "ref": "fcbe2d7f-60d1-4c2e-bc26-420e9e7b4251",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1bc94bac-cd84-44fc-9381-e3fecf8b45e0"
        },
        "item": {
          "id": "f84d2bde-8688-43b3-820e-454d2eaa4a6e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f6c59402-4671-44e6-9e54-eca26f5b0b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ba75e3-6338-4b11-883f-5739b668b91b",
        "cursor": {
          "ref": "29abc31d-4c5d-43d9-8e23-92052a29c054",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "993eb6bf-75a8-4d8d-b965-07c1a096ea42"
        },
        "item": {
          "id": "70ba75e3-6338-4b11-883f-5739b668b91b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2961333f-40e2-473c-b46f-a04e9ab6225a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1863e8-df28-4198-b324-d202601c0d71",
        "cursor": {
          "ref": "68b1ec59-6e7e-4634-9e9c-eb77bc55ce98",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a737c5a4-0ef0-413d-baef-58e5ccef0448"
        },
        "item": {
          "id": "3f1863e8-df28-4198-b324-d202601c0d71",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "675e1bb0-1c2b-4c73-ae99-8bf4d6cb7f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d764bbc-1689-4a14-befb-e803bd812c22",
        "cursor": {
          "ref": "41b58111-07ee-4465-a24c-ddfb61c0b2ad",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5f36397b-fc3f-455b-af82-31da7dfa88a5"
        },
        "item": {
          "id": "1d764bbc-1689-4a14-befb-e803bd812c22",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "44d07964-d479-4ed1-b47d-7a17d1a7f9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9cda2b-761c-4bdf-915f-39d2807784d5",
        "cursor": {
          "ref": "3671738f-9922-4b08-85f1-6425b64454b5",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1dca2db0-cc52-4296-907a-5a963b38e70a"
        },
        "item": {
          "id": "1f9cda2b-761c-4bdf-915f-39d2807784d5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c9384e5c-15ec-42f7-8b63-304a493948b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608d9eb7-49da-48a0-b6f2-34cffaa1c669",
        "cursor": {
          "ref": "c2ee110f-a7ef-46a6-aab1-53103626a868",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "51a4d89c-9545-47f9-b4ee-acb351d55f79"
        },
        "item": {
          "id": "608d9eb7-49da-48a0-b6f2-34cffaa1c669",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ccb9912f-501e-428a-9870-78cb4486659f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafed3ef-8e65-4371-b389-a18375ff2495",
        "cursor": {
          "ref": "b49d830b-2880-44eb-af4e-255e72b49cb0",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8fef5de7-b3b3-4a94-8b01-13e94d3d7e0f"
        },
        "item": {
          "id": "aafed3ef-8e65-4371-b389-a18375ff2495",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2ed18104-1722-4d7b-ad7f-e6cd6af4bc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be111bcf-8067-44ef-82f3-62817f2c13a3",
        "cursor": {
          "ref": "296c95bc-7040-4e7c-be16-d485d51667d7",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bdab4556-54ea-4446-bc05-7215f0c0fe09"
        },
        "item": {
          "id": "be111bcf-8067-44ef-82f3-62817f2c13a3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c0a00911-c404-47c3-9807-1e422d2c2801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba9b502-0c90-438a-8565-1fbb5e03d30e",
        "cursor": {
          "ref": "cd62ae22-6bfa-418b-ac12-bc6cd792a0c0",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fc857680-7684-49e9-80c9-0bcdcc7c5f00"
        },
        "item": {
          "id": "0ba9b502-0c90-438a-8565-1fbb5e03d30e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "653b650d-67d8-4a6e-b9c5-9a0e25e29be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f01ecb1-e7bf-46c8-afca-ac0e70fdb2f6",
        "cursor": {
          "ref": "812041e0-0e93-4a52-acdd-292df481e0b4",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8510a548-1805-4455-9fb1-1e599f0450ce"
        },
        "item": {
          "id": "2f01ecb1-e7bf-46c8-afca-ac0e70fdb2f6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9edaa698-7083-4741-b82f-4caae20efd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9178aa87-4aa0-4eb1-83d2-297943449c3f",
        "cursor": {
          "ref": "ab379e59-914c-4f30-b711-3758f517558e",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5a7f6517-246e-4417-a3d3-108391970a2a"
        },
        "item": {
          "id": "9178aa87-4aa0-4eb1-83d2-297943449c3f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9da055cc-5bda-4af4-8735-6d3b64dd2a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3511437b-bfa6-4099-ac28-12e1b48e0a5c",
        "cursor": {
          "ref": "9f88af1e-484e-4ba9-be3d-8a806b1729da",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "195b738c-6b9a-4866-992d-73f2aaad01db"
        },
        "item": {
          "id": "3511437b-bfa6-4099-ac28-12e1b48e0a5c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6c0ee6b4-1f7c-436c-a060-38ea416a9d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444e741f-64e4-494d-81e4-e67abd79827b",
        "cursor": {
          "ref": "b7f27b51-6315-4bc1-ba1b-fe514bcc4ff3",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "52c98bbc-989d-4393-953c-f1ce51e2a185"
        },
        "item": {
          "id": "444e741f-64e4-494d-81e4-e67abd79827b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2ffc1ff6-61f6-4bf7-b526-74ec58abbbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69ac7a2-00cb-47af-953b-1d222fc45cf0",
        "cursor": {
          "ref": "32d8aea2-82d0-4cb9-b4e2-37021e7d4c1b",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "44ec47ea-f92e-499a-8fc8-3d088c8bd85a"
        },
        "item": {
          "id": "f69ac7a2-00cb-47af-953b-1d222fc45cf0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e2adca1d-177c-4d4c-ac06-5b14f764cc92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398b7a04-2875-4046-a495-34ab7779510a",
        "cursor": {
          "ref": "0eb0f213-80bb-49d3-9a6d-dc5027848c89",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7dd9a197-43d0-4ea6-8bcc-1817687567bf"
        },
        "item": {
          "id": "398b7a04-2875-4046-a495-34ab7779510a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a31bed2d-6ae3-43f6-aa97-1ed7f82c61f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6819ba-93dd-42d2-b3da-caf8a1dc8139",
        "cursor": {
          "ref": "f42ca957-bc2f-4c0b-ac1b-9d7be330c806",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9f374fb9-a356-4428-9501-4f595ed0af38"
        },
        "item": {
          "id": "0c6819ba-93dd-42d2-b3da-caf8a1dc8139",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3ffe9878-70d2-4524-b194-513165a122e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be4cecf-3b2a-4b7a-8eb7-cf61be530e62",
        "cursor": {
          "ref": "17a3838d-48c1-4cc0-9a01-35d248107b44",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "266c4c31-0740-4d01-9712-66f177f00ae6"
        },
        "item": {
          "id": "7be4cecf-3b2a-4b7a-8eb7-cf61be530e62",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3366f067-f620-4303-ae49-a4597653614a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd9e5f7-1bcf-4597-a23b-a89395033df6",
        "cursor": {
          "ref": "cf83a3e5-a7db-4821-af9b-dccc165f8ca8",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c0d505c4-69e5-4810-83d6-0ba1dabfe46b"
        },
        "item": {
          "id": "fcd9e5f7-1bcf-4597-a23b-a89395033df6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6c7f2220-bd3a-4e10-bb65-46ad20ac93bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeba3020-40d3-4981-9fd1-981dc75a97cc",
        "cursor": {
          "ref": "d09bcee6-1f3b-4d56-a253-57faab70aedc",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b280309f-2866-4791-9f73-b2ece99a4eee"
        },
        "item": {
          "id": "aeba3020-40d3-4981-9fd1-981dc75a97cc",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "58883cc1-2bf6-480f-b879-619adc070d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e960128d-9871-4c62-a541-b4cce3895d89",
        "cursor": {
          "ref": "0469aae3-49a7-413e-b9da-1584728e5aba",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "07e3bbbf-97ee-49fa-849d-9f197b571827"
        },
        "item": {
          "id": "e960128d-9871-4c62-a541-b4cce3895d89",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4eca7f7f-02de-4e6f-b6d7-f9f9df73bdee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ea578f-ddf6-47d5-bb3c-dbc4942645a2",
        "cursor": {
          "ref": "57ec2b48-5385-4385-9e8e-35f4e87f939a",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "da7107a7-3b73-46f8-8384-ed6e3d99bc5a"
        },
        "item": {
          "id": "e7ea578f-ddf6-47d5-bb3c-dbc4942645a2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "25de504b-e7a4-45e2-a9ef-64fbe1c5a664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a335248f-6ea1-422e-8fbe-6e7102349178",
        "cursor": {
          "ref": "389a6b6e-9299-445a-b06e-3da785b57659",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4a24cae0-d2da-4f97-8046-6bd06270d573"
        },
        "item": {
          "id": "a335248f-6ea1-422e-8fbe-6e7102349178",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6cfbfe06-e7aa-4ec5-bf7b-c9dfbc7de737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0d7087-8009-4cf2-97c5-7d956b30f066",
        "cursor": {
          "ref": "70635baa-86a2-46bf-b688-9c74b0e88f72",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "adab1271-7f35-4081-8f57-faed677a47f5"
        },
        "item": {
          "id": "8c0d7087-8009-4cf2-97c5-7d956b30f066",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b2dc10a3-fe39-4ada-ae16-4d6079112dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba74cb78-0b58-4738-9662-9a38682cf018",
        "cursor": {
          "ref": "5c6c6a4b-54b8-4eff-966a-12ac9a3eaf07",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "71bdb777-bb46-4b71-a9d9-f4f6e6e02b64"
        },
        "item": {
          "id": "ba74cb78-0b58-4738-9662-9a38682cf018",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3085db9d-2edb-45af-ac60-74781025fc08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2a5ecd-e777-4ad3-9eee-60fee983fc2b",
        "cursor": {
          "ref": "6a2b2bf5-a39a-4057-bb17-182fd3cca1e8",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4c19cfda-1a2a-4f4d-84ae-63021a1b5835"
        },
        "item": {
          "id": "7d2a5ecd-e777-4ad3-9eee-60fee983fc2b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d81925a2-5eba-4e45-9969-ec35c16878ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "1f2c81ec-2183-4275-a692-f44d04aee9f7",
        "cursor": {
          "ref": "987fbf88-ec63-43ea-8fef-83843ea8e5d6",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d7bbf7bf-a3e8-48d1-8e2b-a17b3933937b"
        },
        "item": {
          "id": "1f2c81ec-2183-4275-a692-f44d04aee9f7",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e4a43c23-1543-42f1-8224-b47e1ef0342f",
          "status": "Created",
          "code": 201,
          "responseTime": 2452,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "74dace96-def9-4a2e-8f7e-0679a4eff29e",
        "cursor": {
          "ref": "852b0789-71f7-47da-80b5-b8abbfdc6a55",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ff6e53bd-a3d0-44dd-8930-04200a7ee5ad"
        },
        "item": {
          "id": "74dace96-def9-4a2e-8f7e-0679a4eff29e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "406b1492-fc57-404d-a04e-b5cc3b88d1df",
          "status": "Created",
          "code": 201,
          "responseTime": 2601,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d458567e-5b10-4ff2-bae3-c28c715de4cf",
        "cursor": {
          "ref": "6a5ad0bb-dd49-4f45-b811-52abe55c9841",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "cf0ae716-a04f-42cf-a401-9de87b05485e"
        },
        "item": {
          "id": "d458567e-5b10-4ff2-bae3-c28c715de4cf",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3419c7e3-8988-470e-9775-cdc062efad32",
          "status": "Created",
          "code": 201,
          "responseTime": 2159,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66272a6-01f0-42f8-a2b6-8e24a03e47ec",
        "cursor": {
          "ref": "26fc4e49-45df-4ee4-a2df-9075993cfb91",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d6a0617d-d4fa-4ef2-acea-1b9dbc8ad948"
        },
        "item": {
          "id": "c66272a6-01f0-42f8-a2b6-8e24a03e47ec",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ca32bcf6-6ed1-4664-85e8-56588c5f0965",
          "status": "Created",
          "code": 201,
          "responseTime": 2504,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e53d91-8e61-4266-8344-24bc894ba452",
        "cursor": {
          "ref": "f69f5b29-0905-4cd8-aa8b-63d4ebbcc289",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e7fe7942-394d-46e6-baf7-9783507c71ab"
        },
        "item": {
          "id": "95e53d91-8e61-4266-8344-24bc894ba452",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0a49eaab-ef16-47c6-b151-51454bed8967",
          "status": "Created",
          "code": 201,
          "responseTime": 2322,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5f1e31-7bba-44c9-9c2e-c2e02ba75f87",
        "cursor": {
          "ref": "b9ac56dd-e7c7-4e54-bc8b-a681b223aa37",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4da9ac7e-534e-47e5-b77c-f2d6de9c4a87"
        },
        "item": {
          "id": "3a5f1e31-7bba-44c9-9c2e-c2e02ba75f87",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b75dcd0a-e858-40cf-a412-777d7bfb06da",
          "status": "Created",
          "code": 201,
          "responseTime": 2324,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-17T00:38:59Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-17T00:38:59Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "3b86505f-718a-4f1e-b875-ad25ba4326a6",
        "cursor": {
          "ref": "8504c3ba-ca7f-4b37-a849-298d34405647",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "be3fd2cc-7b72-47ca-9817-26830807963a"
        },
        "item": {
          "id": "3b86505f-718a-4f1e-b875-ad25ba4326a6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1345538c-d9e5-48f3-915b-284b697768a8",
          "status": "Created",
          "code": 201,
          "responseTime": 3590,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b3c37f-9ca4-4f58-9a39-0de4d164e77f",
        "cursor": {
          "ref": "39d4cb0b-10da-4153-8200-901161a4d0ee",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a1d84018-4e9e-47b9-ad9d-9a8da60712f0"
        },
        "item": {
          "id": "14b3c37f-9ca4-4f58-9a39-0de4d164e77f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1ba76e54-9cbd-4391-8dac-a422d6d3eabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b3c37f-9ca4-4f58-9a39-0de4d164e77f",
        "cursor": {
          "ref": "39d4cb0b-10da-4153-8200-901161a4d0ee",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a1d84018-4e9e-47b9-ad9d-9a8da60712f0"
        },
        "item": {
          "id": "14b3c37f-9ca4-4f58-9a39-0de4d164e77f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1ba76e54-9cbd-4391-8dac-a422d6d3eabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af9c30d-c4dc-4016-b56c-d75153bb24fd",
        "cursor": {
          "ref": "97bbcc28-0c42-435d-924f-e4439440dfcd",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4dc0e79e-bb4a-4c9e-b74f-9884afc9618f"
        },
        "item": {
          "id": "8af9c30d-c4dc-4016-b56c-d75153bb24fd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7e46250b-b7c2-4660-81c3-59d3f8f68c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cbf01c-b15d-4bbd-a010-82c2894f84a0",
        "cursor": {
          "ref": "d5da7574-0e23-4cf4-85ab-de3413114046",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "76a76f4f-ceaf-4cb7-99f2-e0537980ddaa"
        },
        "item": {
          "id": "99cbf01c-b15d-4bbd-a010-82c2894f84a0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a54b3d9f-6d56-4438-a6ba-f8bede2e6718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910c61cc-bf68-41ab-829e-7f4db629d480",
        "cursor": {
          "ref": "935bc20f-82c0-478c-8b43-08e35fd50d81",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f89e334a-9423-4d8d-878a-e51ea09861bf"
        },
        "item": {
          "id": "910c61cc-bf68-41ab-829e-7f4db629d480",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8d38da2b-bf73-4d39-a9a4-011c636ea609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e91e3d6-cdd9-4a45-a7b0-bf56bdeee771",
        "cursor": {
          "ref": "4fbab2dd-e7d8-479b-ae09-5483f84ff1df",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c91dfeb7-4517-4bbc-b9cd-b407208fd43c"
        },
        "item": {
          "id": "4e91e3d6-cdd9-4a45-a7b0-bf56bdeee771",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a0e39f33-5066-44f3-9fe4-f5416068fbca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ddd5f5-292b-45a1-8034-93e012ff2df2",
        "cursor": {
          "ref": "49798a1a-0628-42e1-a373-2fc8bf83028d",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c3e0c75c-8ba9-4bf4-ad36-cc31b9479c29"
        },
        "item": {
          "id": "b5ddd5f5-292b-45a1-8034-93e012ff2df2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c8bc390b-c549-4c99-864f-4e64e3e901c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7ed601-5711-4b69-b66d-886d85e1b820",
        "cursor": {
          "ref": "9e5964a4-8277-4534-95f2-3f37283f8082",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1ee75a2e-13f0-40f5-987b-fd850e7d2291"
        },
        "item": {
          "id": "4f7ed601-5711-4b69-b66d-886d85e1b820",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e87093c5-8ea1-4f02-98ea-0d4100603e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d5360b-f91c-455c-baa9-0a856ff13bca",
        "cursor": {
          "ref": "cf49ef9f-04f7-4352-afe6-88f29e831eba",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0f21477f-c604-4141-b74a-94bd5f74735d"
        },
        "item": {
          "id": "f4d5360b-f91c-455c-baa9-0a856ff13bca",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bee400f0-9e2f-422b-ba25-85886e69d7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd80d591-f789-42f5-a176-8c48efec2f87",
        "cursor": {
          "ref": "917e68a7-4d6a-4107-98ec-29dc071be34a",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1c157a71-223c-4679-b377-8a084cfeba4b"
        },
        "item": {
          "id": "dd80d591-f789-42f5-a176-8c48efec2f87",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "64a4e6f3-646b-4999-a22d-14371edcb9ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c17de8-118c-49c3-b182-7931d067acc9",
        "cursor": {
          "ref": "6c7b6212-1776-4cde-9230-77aca37aa31c",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a88efeb3-c9eb-40a9-80f6-1c07d3888fda"
        },
        "item": {
          "id": "18c17de8-118c-49c3-b182-7931d067acc9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6581d059-643a-452c-81a3-7f04cf1e9df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7f33db-3fca-4d90-9432-bbf5435533dc",
        "cursor": {
          "ref": "af71adbc-e7e8-4c86-8585-d7d365aa9b41",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "951b5bb3-bc2e-42a8-be90-3bffedfca948"
        },
        "item": {
          "id": "ae7f33db-3fca-4d90-9432-bbf5435533dc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e900cb9b-e257-42a9-a2da-912b871aa215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b964897-d52d-4ece-bc89-5a80a2385dab",
        "cursor": {
          "ref": "4252f86d-1f65-494b-afd7-68225ee0d44e",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "65934c5b-b00a-4e58-b0d9-d1a10f213cae"
        },
        "item": {
          "id": "8b964897-d52d-4ece-bc89-5a80a2385dab",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "828edc41-305c-4f60-be9a-26483da856fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81787f19-0fe5-48c9-85c0-5b416a8d629a",
        "cursor": {
          "ref": "0593dd0e-e060-4a05-ba3b-9b9ff110a167",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "240553ba-13f9-4839-a3e9-d3319fe5ad80"
        },
        "item": {
          "id": "81787f19-0fe5-48c9-85c0-5b416a8d629a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f516b3b2-a5d9-41d1-bb23-8a225f35c7b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8483b8-5f78-40e6-bced-edd784ab3fe0",
        "cursor": {
          "ref": "5c55c600-6442-4494-be7c-29ba5ecfd2ac",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f8c3d47f-c87d-4c57-b901-9f3a2a52e8a8"
        },
        "item": {
          "id": "2d8483b8-5f78-40e6-bced-edd784ab3fe0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a9f615bb-37b3-48d1-8190-ecb38faf8d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd2fd3f-d4b0-44d2-8eb0-1609a5cc73d7",
        "cursor": {
          "ref": "1aa18a9b-7ba8-43ee-b363-488190369295",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c14a3212-6364-4a1f-a9e2-afc10ead4b78"
        },
        "item": {
          "id": "4fd2fd3f-d4b0-44d2-8eb0-1609a5cc73d7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3642368f-e244-4f1d-8fd6-72620b165556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2700508-adc8-4b3a-837b-eb0beb500838",
        "cursor": {
          "ref": "1e091cdc-0e5d-43b4-a3a7-9b0c1d00eae8",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7fc3cc76-c65d-44f5-a330-8b26213eefd6"
        },
        "item": {
          "id": "d2700508-adc8-4b3a-837b-eb0beb500838",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b7692b5b-f6ba-48bd-b8d9-649c8755a4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b30ed8-e747-4765-9522-941169053d39",
        "cursor": {
          "ref": "667aa33d-c00b-4c9b-8992-7ea685659c3e",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "47ca4cf9-8f86-4ea7-b32c-f26a5f30ff5f"
        },
        "item": {
          "id": "a3b30ed8-e747-4765-9522-941169053d39",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "28e8f821-2a49-4a71-9f75-ce728cce72ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2379db6-4b88-43c9-980b-7875aa78c69e",
        "cursor": {
          "ref": "ff7b671e-ffcd-44a1-869e-92d42f902d66",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d77c36f9-0ca9-437c-b10c-c457c7d882ed"
        },
        "item": {
          "id": "b2379db6-4b88-43c9-980b-7875aa78c69e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fe64fbec-afcb-46b9-9705-181cae548555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73f0b15-37f0-466f-a7d6-5e4912c6b474",
        "cursor": {
          "ref": "7137ad1c-b4eb-4724-a3e8-c4eba13ab2cb",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f7ea50b0-a7f1-440e-89c4-fd860c5e0ac3"
        },
        "item": {
          "id": "f73f0b15-37f0-466f-a7d6-5e4912c6b474",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1d9f1a56-6093-466b-b901-56d83cb2c9b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2325f47e-5907-4f31-ade0-43fc8404de99",
        "cursor": {
          "ref": "ed9596f9-6e68-4da5-81ce-af4992351187",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8565e156-4578-45d7-850b-bd99250425b4"
        },
        "item": {
          "id": "2325f47e-5907-4f31-ade0-43fc8404de99",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fc167240-f934-4839-a775-eb86a9832f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94b9348-cae9-4f0d-8d89-e82e8698557d",
        "cursor": {
          "ref": "d7bcf0d4-1612-4aed-8741-2d1ff5ccc521",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8d6c6279-be1e-49ee-8fa9-67c9c13f0eb2"
        },
        "item": {
          "id": "f94b9348-cae9-4f0d-8d89-e82e8698557d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "882729bc-4b63-4054-b339-f07f542aaa0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7853613-e65c-4993-9f24-5f870db968bf",
        "cursor": {
          "ref": "d00e6799-2eab-451f-a86b-15c666f02335",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b752f27b-3f5e-47d3-a502-3a810d522204"
        },
        "item": {
          "id": "e7853613-e65c-4993-9f24-5f870db968bf",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d804dbb5-a19a-4b59-aac7-7acd6e9dd6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dfec4f-3950-4c51-a1ba-a323640c3146",
        "cursor": {
          "ref": "8f866ec1-bde3-44dc-bf74-1b5afc0f5f61",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ad1541fc-f144-466b-9657-9c329b992f0e"
        },
        "item": {
          "id": "e4dfec4f-3950-4c51-a1ba-a323640c3146",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3a437c2c-f521-493d-bebe-fc937f28a3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e516fbe0-a4e7-4dc2-94f9-1d587ca656ba",
        "cursor": {
          "ref": "d60b076a-a077-4db5-b227-70d0142b95a8",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "620ece0f-ac2c-44bf-8c09-02772f2df2e8"
        },
        "item": {
          "id": "e516fbe0-a4e7-4dc2-94f9-1d587ca656ba",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d81e71fb-2b34-44c7-900e-a5d5dedab30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fb99c9-d0d3-4ca8-bd51-ee8c698e3429",
        "cursor": {
          "ref": "f3018f28-f5c4-494a-9b7d-a518b1384cda",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "38926882-0b51-4ac0-9f34-b2f44a98f177"
        },
        "item": {
          "id": "40fb99c9-d0d3-4ca8-bd51-ee8c698e3429",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "aa765ed5-bc5b-4a40-81fd-b67365d1ef6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cc5b75-0711-4e6f-a07f-7cde69f46efd",
        "cursor": {
          "ref": "33562196-703d-4f7d-8d9b-9995bb6d4148",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "068526e1-928e-4725-91d8-481dbd1ce06b"
        },
        "item": {
          "id": "98cc5b75-0711-4e6f-a07f-7cde69f46efd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "53a6ec1f-0d71-4406-b1aa-f73882912bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c6df33-ab1c-42b9-b2fa-edcc9882e4a9",
        "cursor": {
          "ref": "75e54119-b534-4bb6-8fa9-02e599f481de",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "dce79682-9b74-4b17-8635-e0cfa5174f7c"
        },
        "item": {
          "id": "51c6df33-ab1c-42b9-b2fa-edcc9882e4a9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fb0bea2f-1cb4-4611-98a1-ec794e04149d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d2301e-e300-46f5-b77d-f8e1398470dc",
        "cursor": {
          "ref": "9dd20840-52d8-49a9-967c-08698b76f280",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ce39a4e0-cd79-46fb-b228-6842c4a348ec"
        },
        "item": {
          "id": "e6d2301e-e300-46f5-b77d-f8e1398470dc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "962d57d2-3740-49e5-b6c8-85014bef041f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d5dfb4-17ee-4835-8546-21a29490dafd",
        "cursor": {
          "ref": "8464e7c3-a16e-41f4-a350-9cc41a2f90e7",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4775aefa-8ae1-4a80-b866-def43225ef40"
        },
        "item": {
          "id": "10d5dfb4-17ee-4835-8546-21a29490dafd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f1135142-7f27-429a-899c-ee696c3c21e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a80e7b-9cb6-4a16-b1c8-fe5e1bc69508",
        "cursor": {
          "ref": "2bb63da8-5f33-4dd2-903c-0e5788f14206",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cea43bf7-e925-472e-868d-5225543d18ed"
        },
        "item": {
          "id": "66a80e7b-9cb6-4a16-b1c8-fe5e1bc69508",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9b6f0469-06ff-4e0b-ad0b-36f108cf0d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bf98be-e4f4-4202-9434-5a0fd8fd67a7",
        "cursor": {
          "ref": "f7d2d675-8b75-4172-aa8e-396e5d7d8e1c",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2bce59e0-470e-414c-8b5c-6e196baf2c50"
        },
        "item": {
          "id": "18bf98be-e4f4-4202-9434-5a0fd8fd67a7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8ac8232a-e086-48b6-81df-13a598f3dfdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26bf573a-bb0f-41ba-a814-330bf12dab6c",
        "cursor": {
          "ref": "d04190ab-d9ad-4f44-93c1-345ab6b449e3",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e5cda2ea-6e4c-4d0b-ad7c-33a52d2c450f"
        },
        "item": {
          "id": "26bf573a-bb0f-41ba-a814-330bf12dab6c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "be512c75-54df-478d-ac68-f218bf1d01db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81213b39-2397-4b02-845d-fdaf1848c11b",
        "cursor": {
          "ref": "41b1b16e-fa28-4c36-82c4-43bad9ff80fb",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2474c3f5-a67e-4394-be45-1e9aa44de3de"
        },
        "item": {
          "id": "81213b39-2397-4b02-845d-fdaf1848c11b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "40b51bb2-902b-441b-8a85-a49ae58c91b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c0933c88-2bb6-4266-947f-3580d5efb85e",
        "cursor": {
          "ref": "f26df80b-b5ae-449a-bb47-3e73e97e8e89",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5c9c3c96-e999-4ff3-91c6-956394ccd618"
        },
        "item": {
          "id": "c0933c88-2bb6-4266-947f-3580d5efb85e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "8762d045-5fd6-4756-82f8-4cb0a950e4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "cf36058a-7d44-4c72-ae30-c870c0a56828",
        "cursor": {
          "ref": "d1c5d133-5f2c-4439-8f19-ebaa4bab1a8c",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86b8d093-9577-4d61-9a89-5d4c2edbcd7a"
        },
        "item": {
          "id": "cf36058a-7d44-4c72-ae30-c870c0a56828",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "67f74cae-224c-44ed-93de-09b29deaa3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf36058a-7d44-4c72-ae30-c870c0a56828",
        "cursor": {
          "ref": "d1c5d133-5f2c-4439-8f19-ebaa4bab1a8c",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86b8d093-9577-4d61-9a89-5d4c2edbcd7a"
        },
        "item": {
          "id": "cf36058a-7d44-4c72-ae30-c870c0a56828",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "67f74cae-224c-44ed-93de-09b29deaa3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83e26cd-f977-485a-a2d2-6adb2e0941e7",
        "cursor": {
          "ref": "726f37ea-110b-4d32-be16-ba849b1a6ba3",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "480300bd-2fcb-48b8-baf6-1b10b319b775"
        },
        "item": {
          "id": "f83e26cd-f977-485a-a2d2-6adb2e0941e7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "599e2250-0934-4918-9aad-c7552aa183c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0cfd02-8bf8-4567-8d4f-2798283e50ca",
        "cursor": {
          "ref": "5ba1aa44-5396-4df2-9cb5-30b64d683ebf",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "aee3e57f-ff8a-42a0-bd87-e89ba2dd8a16"
        },
        "item": {
          "id": "dd0cfd02-8bf8-4567-8d4f-2798283e50ca",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "57d56f9f-cdc8-4305-a7e3-96c658ce02ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16524fa-dd3a-47d0-9798-78976edd774a",
        "cursor": {
          "ref": "418604a0-0b25-4577-810b-7b798be0d694",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "78b69660-7ba6-47a3-b095-8285583649c4"
        },
        "item": {
          "id": "a16524fa-dd3a-47d0-9798-78976edd774a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b762b8db-74b9-482f-8cc2-8bf9a6345b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a235be-114e-4c68-81bf-2510b6c116d7",
        "cursor": {
          "ref": "ad38f3d0-7259-4941-ac7a-5eb096021edc",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "58d61fc4-f7d5-4cac-91ed-a3d3909a388f"
        },
        "item": {
          "id": "22a235be-114e-4c68-81bf-2510b6c116d7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ce85b416-35e0-47d9-b9df-fb52be30b679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ff9cd1-c252-4c8e-9427-d6de6f5c617b",
        "cursor": {
          "ref": "284b225a-06a6-406d-9263-e86c69181214",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c2d7c129-3434-4cfd-bd2e-11f33c082502"
        },
        "item": {
          "id": "32ff9cd1-c252-4c8e-9427-d6de6f5c617b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ac125ba6-c6d7-4abf-8e2e-90e06b4c3d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1ddc16-d865-4dac-9614-a366bb92b808",
        "cursor": {
          "ref": "c4685eaa-1804-42f4-8ba7-dfce4e64004c",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "92cd2826-8205-4f5c-8a1c-54f2821d4d05"
        },
        "item": {
          "id": "af1ddc16-d865-4dac-9614-a366bb92b808",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "30f714c6-6f40-4ddf-bc51-5bbafcf4e522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0838078-b9bb-46d4-a02c-83c3439e1f45",
        "cursor": {
          "ref": "1b747f10-d069-458c-aecd-8d8ba40ee8c4",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4f6c54b6-1f80-47b6-9cd8-4748800246c0"
        },
        "item": {
          "id": "c0838078-b9bb-46d4-a02c-83c3439e1f45",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4f3dbb0d-7500-4f69-a7fc-e815602f8ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7543e7b4-00db-4dbc-bc74-8e6c7d0d2006",
        "cursor": {
          "ref": "db69829c-85a4-4a3b-b1e9-65983731331e",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bff3d858-f6c3-4803-95da-1fefd39828dc"
        },
        "item": {
          "id": "7543e7b4-00db-4dbc-bc74-8e6c7d0d2006",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1b5d8cfc-80c8-48d1-ac87-0444850b122e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee50ba1-0a7b-493b-a6bb-3520f1633ef1",
        "cursor": {
          "ref": "6138ffa4-5093-42d3-9610-7c3150cd1354",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "411984ce-6b03-48b7-ac95-f7a33b55d604"
        },
        "item": {
          "id": "fee50ba1-0a7b-493b-a6bb-3520f1633ef1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a07b3275-0b2d-477b-80ad-fd537a24374f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2953780-11ce-4ecb-b3f2-9c0dd3fd55e1",
        "cursor": {
          "ref": "199b80cb-20a1-40fe-b18f-9e7f221b91cd",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "845a8abe-6b76-411b-8455-2eafb762f62e"
        },
        "item": {
          "id": "e2953780-11ce-4ecb-b3f2-9c0dd3fd55e1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ab722a6d-b52a-412e-bc03-98c0771836cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326b504e-445a-4e3c-bc11-0c526ad68e77",
        "cursor": {
          "ref": "0bae193c-e51a-4403-835d-1e591f467c79",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "521241bf-96fb-46a7-a65b-087a53e3499b"
        },
        "item": {
          "id": "326b504e-445a-4e3c-bc11-0c526ad68e77",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9824c438-c822-482c-ad70-971b65bba76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e6a2fc-c26b-46c3-8481-db5e3759fe59",
        "cursor": {
          "ref": "3a3a7d31-3d34-4109-9d52-dbcd9a4fde89",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "84016d15-0af2-4a2e-822c-9e7eb45f62b1"
        },
        "item": {
          "id": "48e6a2fc-c26b-46c3-8481-db5e3759fe59",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "01e7199e-a634-47c8-84c1-c85ac0567c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c1c45b-77b5-4152-951a-c9445811c20c",
        "cursor": {
          "ref": "d204532e-8a6c-474b-9891-804aeee8b588",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "52120f5e-c4a1-4fc1-a821-6cfd78f1b18f"
        },
        "item": {
          "id": "47c1c45b-77b5-4152-951a-c9445811c20c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2d230e61-5738-432d-80d6-c53c78169df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416205ae-9ad7-4d7d-99eb-7ef81b58ae8a",
        "cursor": {
          "ref": "4fe23c31-e683-4753-9ec3-633bead5efb7",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bc3c32ff-2b3d-4041-b5b4-5860854e2321"
        },
        "item": {
          "id": "416205ae-9ad7-4d7d-99eb-7ef81b58ae8a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e6ce281a-cd35-4d3b-9741-b3307a295256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24bf4dd-3561-433a-9792-3849a50742c3",
        "cursor": {
          "ref": "094ddd2c-eadf-4196-850a-47dab1a0ee82",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "aea9d0ce-2acb-4188-9f9c-473efc0012e4"
        },
        "item": {
          "id": "c24bf4dd-3561-433a-9792-3849a50742c3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a6b3868e-f350-4c43-8d54-bebaa7f872d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519fcdd8-a60b-497d-8148-334ebed03dff",
        "cursor": {
          "ref": "e4a03f54-5656-45af-9b44-18be777f6216",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "79347a7e-81ef-44f9-a300-d977c90f0652"
        },
        "item": {
          "id": "519fcdd8-a60b-497d-8148-334ebed03dff",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "fc75e849-16ea-4e49-9b51-e4ed14727269",
          "status": "OK",
          "code": 200,
          "responseTime": 265,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "bd9035d7-24a1-459b-85bb-1c332c94462d",
        "cursor": {
          "ref": "f707c308-df89-4109-95c1-7641159859b9",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f3ce2f89-cc31-4a66-a0f0-5b1eb74d834b"
        },
        "item": {
          "id": "bd9035d7-24a1-459b-85bb-1c332c94462d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a0581e47-5323-4fe6-ab0f-7da9bd5127d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03528552-a0a1-4ca1-8628-a26cca54bb33",
        "cursor": {
          "ref": "780acae7-5334-40cc-8c1a-7ee5760f86c7",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d3b02057-8e31-4489-98eb-3680b2268d9f"
        },
        "item": {
          "id": "03528552-a0a1-4ca1-8628-a26cca54bb33",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "14e80827-865a-4262-b112-6395f8f9b404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e93dc7d6-7b1d-4232-8d29-146b012ba41c",
        "cursor": {
          "ref": "7e2c4177-2bab-4d28-a9e7-52701ca3cce0",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "600ea8b5-5877-488e-b92d-caeb1fe77df1"
        },
        "item": {
          "id": "e93dc7d6-7b1d-4232-8d29-146b012ba41c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1b614183-7b9c-4914-8efd-3e08b48612f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc26f5c-c6df-41d7-aaaa-be28ecc6c946",
        "cursor": {
          "ref": "a7c4a48e-9a61-4f09-adad-da2a1f26a9ff",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e959ba59-1230-47d5-b356-75fa6a55ad7f"
        },
        "item": {
          "id": "9dc26f5c-c6df-41d7-aaaa-be28ecc6c946",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8e379a27-f13d-4091-82d5-678c291f1219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2e74f4-8475-4962-8373-34b69f2966be",
        "cursor": {
          "ref": "27ae8073-6653-4568-bdc1-72f35868184b",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9b3d54b0-9e9e-4bed-a853-2cad070b8b91"
        },
        "item": {
          "id": "3a2e74f4-8475-4962-8373-34b69f2966be",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "49c78517-a118-49b5-9154-57abba98ce23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab914b0-5cf7-4c0b-9aea-442169f37ed6",
        "cursor": {
          "ref": "c61ffbac-cfcc-4c55-8586-8393ca958da2",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ffe56044-f328-439d-b34d-2665412e253b"
        },
        "item": {
          "id": "7ab914b0-5cf7-4c0b-9aea-442169f37ed6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "721958a2-074f-48a0-8546-a2ab50a73d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898ff6f0-197d-4d44-bfb2-12e2933dde71",
        "cursor": {
          "ref": "270f3e5a-7f31-4f51-a656-9449228b01d4",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0171c43f-37ba-4f98-ab9a-ad4526975cf0"
        },
        "item": {
          "id": "898ff6f0-197d-4d44-bfb2-12e2933dde71",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3b9aedc9-a49a-4f5e-bb76-093bec9d054d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f111e4-b106-44b5-84d6-fbee4e1ec465",
        "cursor": {
          "ref": "53dee4e3-ffd0-4deb-9880-14fdf7027560",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5d5dcdf4-fbbb-4747-9105-7decfcd98b93"
        },
        "item": {
          "id": "20f111e4-b106-44b5-84d6-fbee4e1ec465",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a568f4c4-0ba1-4b21-a01a-94cf7e8d32af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637d8bf5-f85c-4e84-b39e-da20f0c44f9a",
        "cursor": {
          "ref": "9459f394-8bb4-4e0e-9b3f-0ea352838652",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "713d11dd-274b-4cc2-8146-4526e48ecb77"
        },
        "item": {
          "id": "637d8bf5-f85c-4e84-b39e-da20f0c44f9a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5ddefda7-49d3-453c-a1e3-6d0d59aa6535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c865c95a-736b-4160-bcfa-3a5270b209dd",
        "cursor": {
          "ref": "5c0b91db-411f-4ec5-a9ad-6bd1da6488a7",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d32febea-f205-48fd-95b6-be4b175a0e83"
        },
        "item": {
          "id": "c865c95a-736b-4160-bcfa-3a5270b209dd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2058843b-aeb3-48a6-8241-69565b62825f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e9aa8c-2c7c-4f02-82ab-872ef8ace63e",
        "cursor": {
          "ref": "ff061160-d5d1-447c-a773-a72fa8b708f3",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2920d9a8-7ac7-4ed8-8cf0-70416e6b777f"
        },
        "item": {
          "id": "81e9aa8c-2c7c-4f02-82ab-872ef8ace63e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "48bd13f0-0eac-435a-8c1c-fe2ff5e70e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95adbbf0-2cf1-4fd7-8188-7318b5321003",
        "cursor": {
          "ref": "6ec8fa69-a8c4-42f3-82c4-91849003555d",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1aecd20f-561e-4997-becd-5a30d0eeb2c9"
        },
        "item": {
          "id": "95adbbf0-2cf1-4fd7-8188-7318b5321003",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ddbbdb66-3b56-41be-b384-7c9104d0ea42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ffb690-8521-48ed-bbc5-b64472976971",
        "cursor": {
          "ref": "c0cb63b8-bb8f-4822-800c-3d22db1479b6",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "32307589-dfab-492c-83ca-fbaf87e6e637"
        },
        "item": {
          "id": "c1ffb690-8521-48ed-bbc5-b64472976971",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4919b5b4-45d8-4741-a971-161d2055599e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8ae916-bb02-419a-93a9-02e591e7ae8f",
        "cursor": {
          "ref": "c7dd2f1c-5f90-4321-b5c6-338dacb1d98d",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f4df0a1e-19a8-45d1-8b43-ba1b2f6e63f2"
        },
        "item": {
          "id": "4d8ae916-bb02-419a-93a9-02e591e7ae8f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8b9ffcc5-50a9-4635-b999-e047438c2d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c011d2e-4c27-499f-a468-eb8f5df82c6a",
        "cursor": {
          "ref": "ef9940f6-56a8-426f-bad5-78df03915e6f",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "46673b5f-83b9-4da7-aefb-01658fe69fff"
        },
        "item": {
          "id": "0c011d2e-4c27-499f-a468-eb8f5df82c6a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "86e6aa24-75a9-471d-ae74-eea7b4a68add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de04c3c7-743c-41d5-b540-26283f276cb6",
        "cursor": {
          "ref": "5b5ac9e7-2df2-4e48-aee6-5575c1e7e181",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8c430ae2-aa8a-40f7-9eac-5ea887fa6578"
        },
        "item": {
          "id": "de04c3c7-743c-41d5-b540-26283f276cb6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d1704d85-501f-4626-901c-3e9899088d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dfe4bf-5e5d-4840-bd03-7f53834cb5e6",
        "cursor": {
          "ref": "d76f939c-3cd9-4e7a-b534-90b13d9bb084",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "92196c34-16d0-4b8e-ab8f-8461ab063674"
        },
        "item": {
          "id": "48dfe4bf-5e5d-4840-bd03-7f53834cb5e6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b890779f-28ee-4c72-8049-53ca9cad2e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1898e3-08d5-4b6d-ba74-def281466a9d",
        "cursor": {
          "ref": "7dd65c4a-c872-4239-b1e6-258589b63292",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ff3392e4-2e44-4341-96f2-42835ac78a3e"
        },
        "item": {
          "id": "5c1898e3-08d5-4b6d-ba74-def281466a9d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fd226a51-448e-4c44-8aa8-b782fdee9608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb738ddf-a070-4782-a13a-138685621f0a",
        "cursor": {
          "ref": "e88c2fff-3d63-423c-abab-5fe922b62f5e",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "03aaabdf-c709-492f-9988-dc9b3ba1c43a"
        },
        "item": {
          "id": "bb738ddf-a070-4782-a13a-138685621f0a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "39ed53e9-c6b9-4d7e-a3fb-8b80a3ca6cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 387,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200c8174-1f73-495c-9f15-ec2221e042e7",
        "cursor": {
          "ref": "1671f553-c58b-4895-a8fe-2149e1b13549",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0806d0fa-f774-4335-9a2a-4f1f2351b2e0"
        },
        "item": {
          "id": "200c8174-1f73-495c-9f15-ec2221e042e7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3d1490bf-f580-430b-83a9-2eb1e0bccdbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1439c898-cc60-4d92-8c6b-b2346cdf3c97",
        "cursor": {
          "ref": "7b2106ef-4930-40b3-9b43-0b8ff888a512",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3ba2fccd-85cb-4fbe-b53f-caf3525f3402"
        },
        "item": {
          "id": "1439c898-cc60-4d92-8c6b-b2346cdf3c97",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "481c1cfa-091c-4e82-abca-3084b444bd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc090c2-c9db-431a-8f82-1f0eab8e53ed",
        "cursor": {
          "ref": "d73795c5-e3b3-4071-9226-25adae689f1f",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "75244d25-a42e-411b-a321-8b562530d931"
        },
        "item": {
          "id": "bbc090c2-c9db-431a-8f82-1f0eab8e53ed",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a1bcef15-e705-476d-90af-848be5a4ec3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85367235-7e27-4316-bdb4-64ddc523678d",
        "cursor": {
          "ref": "ff62d07b-fbee-478a-bab9-ece3f946f8e5",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9aa0ac6a-4b47-4bbd-bf3f-5fa0c04b5338"
        },
        "item": {
          "id": "85367235-7e27-4316-bdb4-64ddc523678d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "666c135e-25b0-494b-9d90-c7090a2f04c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1249ee-3229-4fac-ac38-75de22154ace",
        "cursor": {
          "ref": "55a64779-4248-4277-84a1-88b44d256c89",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fe509c17-1d39-485e-99c9-dd15aff08f3c"
        },
        "item": {
          "id": "8d1249ee-3229-4fac-ac38-75de22154ace",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "537bf745-2926-4781-8e25-a5c166b9d3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92cb1ed2-4b47-41dc-9331-1009954693c8",
        "cursor": {
          "ref": "91bf89a3-f72b-43c4-b2c9-004a6388e5fc",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e109256f-53a4-4c5d-9dfe-4e985a575c18"
        },
        "item": {
          "id": "92cb1ed2-4b47-41dc-9331-1009954693c8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "109efb0d-5900-4004-9e68-84aafabe9aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a3bab2-a0ed-4be2-8a2e-75b582390a8c",
        "cursor": {
          "ref": "2f550451-6ed3-4d45-95db-0e124f7b1bd6",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "12ce6e51-5596-4f20-ad88-0db8f3f7c89e"
        },
        "item": {
          "id": "96a3bab2-a0ed-4be2-8a2e-75b582390a8c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "551b1b8c-3f6a-409f-9583-ae9b000d35bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d80f9c5-0d0a-427e-b109-e441a1939fdf",
        "cursor": {
          "ref": "d7af99ca-e337-4f83-a3b1-efb3a7a3106b",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "de8404da-e331-4d26-a55a-4af1865746ba"
        },
        "item": {
          "id": "5d80f9c5-0d0a-427e-b109-e441a1939fdf",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "54c12633-8d66-4078-8b15-2f3a5db63f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c637896-928c-4f84-907a-1ec761fb5346",
        "cursor": {
          "ref": "9cd3d6c8-edfb-4ba8-a12d-0e435b94a3e0",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b9a9462f-c02b-4ce0-b891-d20e0ed62230"
        },
        "item": {
          "id": "1c637896-928c-4f84-907a-1ec761fb5346",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "504230c6-0f1e-4695-b09f-f1c8d6c7d3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 894,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf06b0d5-a548-4d31-8ba0-c20f5b3b0eb8",
        "cursor": {
          "ref": "36fb78dd-0286-4fd8-bac9-fd038f6dc056",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "708d89b0-7c10-42cf-a61a-bcf0cb4a3a59"
        },
        "item": {
          "id": "cf06b0d5-a548-4d31-8ba0-c20f5b3b0eb8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "663885d0-72fa-469a-a2d6-be9e5c5e3992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c41505-fd14-436e-a534-96ff62372ef2",
        "cursor": {
          "ref": "08973104-fd21-4d91-ab13-eb5eac5f5511",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "500e9308-a683-482b-978c-900f97bdd6c0"
        },
        "item": {
          "id": "82c41505-fd14-436e-a534-96ff62372ef2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "69536351-16da-446b-87b4-46499d7235fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0556299-4a40-4a18-864d-19f74c44794d",
        "cursor": {
          "ref": "384fea60-a2a6-4e2d-b0ca-e139384300c7",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "eb7aa61a-9c17-426c-9a3b-b5bcae63845c"
        },
        "item": {
          "id": "b0556299-4a40-4a18-864d-19f74c44794d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b933b260-cbec-494c-ac6a-df4ba7ebf429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d75985c-0cc2-444d-a77e-2c4aa28587df",
        "cursor": {
          "ref": "eaa14599-8b4a-4029-a887-09db39954dd7",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d0f660b5-7ec2-4aad-a927-2ee154b97c67"
        },
        "item": {
          "id": "5d75985c-0cc2-444d-a77e-2c4aa28587df",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "085a0b34-1e55-483d-9f93-68fffbe3064f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bf9260-8f12-485f-a63a-71b5c319ab24",
        "cursor": {
          "ref": "752140c3-a80b-4d35-8ae5-25148643069f",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1f409fd2-16a3-4581-a334-a29c98cd7d15"
        },
        "item": {
          "id": "89bf9260-8f12-485f-a63a-71b5c319ab24",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3c092f47-115d-441b-ac27-6290786c5934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcc8708-c1a6-4a88-ba91-772954a6b510",
        "cursor": {
          "ref": "a398c4ce-52d5-41b5-9a3e-11519a1ae60a",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "55eccece-4bdb-46e2-9222-47aca514c2ce"
        },
        "item": {
          "id": "9dcc8708-c1a6-4a88-ba91-772954a6b510",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b01810f3-6f37-4b1a-97bf-15ee96ccab67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f16051-e126-48d1-8b21-4fa51a452b4a",
        "cursor": {
          "ref": "ad13794e-60ef-42fa-b924-f123ea39ff58",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "901381c1-b26a-45d2-a0ab-badcd5aa9b95"
        },
        "item": {
          "id": "a9f16051-e126-48d1-8b21-4fa51a452b4a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cbf0b472-f2ee-43ad-848b-6bff9e859645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbba9138-94a7-4cc8-b25c-0dc17796c616",
        "cursor": {
          "ref": "23d1857a-628f-4042-b8cf-32a19cc21c73",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "969a3b8d-db6e-4258-90b3-906ffe8ba083"
        },
        "item": {
          "id": "dbba9138-94a7-4cc8-b25c-0dc17796c616",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9554b09c-3066-4609-8c94-f3719cd86a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71365de-f428-4c96-a7f1-ad89d2eef43e",
        "cursor": {
          "ref": "969ccda0-b242-4bf1-b613-5f6485e7c19c",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cfc6a039-92a7-48b0-a11d-e28035952cd0"
        },
        "item": {
          "id": "e71365de-f428-4c96-a7f1-ad89d2eef43e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d8746946-b4c0-4ba0-a1c5-c1d576071028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9822870b-1682-4105-be4c-8ecca076b9a5",
        "cursor": {
          "ref": "d0a4fc3c-bedc-4eb5-b6dc-64d57e373053",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4245783e-b34e-4f92-9d3a-52ea91b2feeb"
        },
        "item": {
          "id": "9822870b-1682-4105-be4c-8ecca076b9a5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8aa8de96-0ae1-4992-9875-fa7180538b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d634cf10-68a1-49a1-a509-967966e4ca66",
        "cursor": {
          "ref": "45079561-6017-49cf-b61d-0622be49ea2a",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "897e2273-39b5-4102-a7d1-f339be0a3cc4"
        },
        "item": {
          "id": "d634cf10-68a1-49a1-a509-967966e4ca66",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "50dd11c3-344c-483b-bb10-0ae1523dffe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b541ef39-2a08-431b-a0e7-79796baabe46",
        "cursor": {
          "ref": "cb1dcf0f-6985-4877-b97a-280096a5c025",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a2eed9e1-2f41-4ab2-b521-57356ee3e801"
        },
        "item": {
          "id": "b541ef39-2a08-431b-a0e7-79796baabe46",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "259f467f-c58d-473f-8982-f7ba5a447bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7404f81-4aa6-4e30-8eba-b132bd99b911",
        "cursor": {
          "ref": "6ad0b0fc-f73c-4fe4-b78d-126e027c3f8f",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "acfefe21-20d8-4d81-953f-899fde19569a"
        },
        "item": {
          "id": "c7404f81-4aa6-4e30-8eba-b132bd99b911",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "88ebb7ba-bc78-4c69-a04e-7fc8ea51ae33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335be739-fbcc-4490-ae89-997ba704362c",
        "cursor": {
          "ref": "ea4a677d-a1c1-4f0e-9ff6-43c195490e89",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "72894e4d-d45e-483e-b96a-89412beaa14e"
        },
        "item": {
          "id": "335be739-fbcc-4490-ae89-997ba704362c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "40e865aa-ffeb-4a3f-a321-4624b004dac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ab19ca-aee2-4926-9e87-c8c285ab27dd",
        "cursor": {
          "ref": "81038724-430a-4f18-bb13-b92308f99eb2",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "62f6bfe0-88c4-4ded-80ce-ebc9242b9ab6"
        },
        "item": {
          "id": "65ab19ca-aee2-4926-9e87-c8c285ab27dd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "19089eb4-5c9f-4396-8afa-16a36bc19fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b7357b-fda9-45f3-badf-bdf3c21f3a00",
        "cursor": {
          "ref": "e92d8cbf-9c83-4e19-8f11-9c2a58425b21",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b8f76739-c288-40cb-9beb-0b863d24be66"
        },
        "item": {
          "id": "35b7357b-fda9-45f3-badf-bdf3c21f3a00",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "19a2b650-e2a9-403b-98a3-692adbcc073f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fb0f41-0936-4342-bdc4-52f7754741de",
        "cursor": {
          "ref": "c82372f5-fcaa-4350-8759-002d5b7262a5",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2c005547-936a-48fb-b027-795880281550"
        },
        "item": {
          "id": "e6fb0f41-0936-4342-bdc4-52f7754741de",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5abe0845-6b63-41a0-a4c8-161df8f3fc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f324cc-d6e0-4398-a5f8-20baebb10825",
        "cursor": {
          "ref": "64f218cc-a4e4-4dce-b996-3c1ac5a3a1c2",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3d5d0754-ac1c-48d4-ace7-f8eaee836ab3"
        },
        "item": {
          "id": "92f324cc-d6e0-4398-a5f8-20baebb10825",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "34ed0234-1470-40ab-9549-9439ac262a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b1c844-5f77-4883-91a0-e315dfc0c2ee",
        "cursor": {
          "ref": "556a4e00-070d-4bbf-bcd3-937fdeb4e44d",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "73263a34-1a96-4de1-bff0-221c79a0e464"
        },
        "item": {
          "id": "12b1c844-5f77-4883-91a0-e315dfc0c2ee",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "52503fd0-876e-4d1f-8474-ea0f615939f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8674ad6-e714-474c-bb4b-60dc65f54388",
        "cursor": {
          "ref": "05f45685-4c99-4ff2-84cc-fe6a2510a591",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "55db88ca-d582-4ccc-8ff5-0be9843d9189"
        },
        "item": {
          "id": "f8674ad6-e714-474c-bb4b-60dc65f54388",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e24e66c9-16e4-4df4-8761-8da0a80b306d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2be83e-e9f8-4f8a-ba31-4f3b99504f10",
        "cursor": {
          "ref": "75e463d1-fc59-4073-a3e4-c01b36c2ef44",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d62ca7e8-3635-495d-8886-fef7ee4feec4"
        },
        "item": {
          "id": "9f2be83e-e9f8-4f8a-ba31-4f3b99504f10",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0e639def-d819-4579-bb66-8f05d3e7c5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3ced1e-42c6-474c-8b14-2175042f29cc",
        "cursor": {
          "ref": "90c9e7ab-00f6-49f3-83f8-f6f4b51ce501",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ac152fc5-f668-40fe-97dd-33648ef6a791"
        },
        "item": {
          "id": "7b3ced1e-42c6-474c-8b14-2175042f29cc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cf7c257b-7282-48b2-a30b-b393a1c6a7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949a4525-6251-4bbb-84f9-a186d1479bff",
        "cursor": {
          "ref": "cddf74a4-04b3-4725-8d6c-5c07c4016333",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "eccf3818-678e-488e-a5c8-53b839123a3c"
        },
        "item": {
          "id": "949a4525-6251-4bbb-84f9-a186d1479bff",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "04e03034-c6ab-40bf-9f79-2a1cc445612d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e498a1-e293-42c7-ac69-01f7d9dd8b51",
        "cursor": {
          "ref": "47c6c63d-a62c-4cfc-954f-30cf0315bb2e",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "15c595cd-26f6-44ab-aa59-01ec3a20e91f"
        },
        "item": {
          "id": "15e498a1-e293-42c7-ac69-01f7d9dd8b51",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8baf67c8-f47e-4d45-a88c-272afbf6b647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126b1e36-751f-446e-854f-7af41deb9313",
        "cursor": {
          "ref": "5480ca09-ebeb-46f9-86ee-edbe4cbf6df2",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bbe5d1d7-0671-4219-9f4f-456a3ee33702"
        },
        "item": {
          "id": "126b1e36-751f-446e-854f-7af41deb9313",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1a3acb48-3f37-4339-8e3b-c1caea9f6498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c29685-a1c3-4fc0-91f9-28a424277340",
        "cursor": {
          "ref": "daaeb152-df2a-4273-b408-e1cf2ba8bbb9",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "61725288-9adb-4811-b3a9-55a16939e471"
        },
        "item": {
          "id": "f9c29685-a1c3-4fc0-91f9-28a424277340",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8a0cd29c-beff-4414-831c-f4fd708308bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f50909-4bf2-431b-8e3c-18aac667e56c",
        "cursor": {
          "ref": "2f8ee000-7dd1-4d65-90de-62a75d4099bd",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e9de91de-1f5b-4634-b5e6-417d91e74a08"
        },
        "item": {
          "id": "35f50909-4bf2-431b-8e3c-18aac667e56c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e79821a2-e6a4-4691-95eb-99103d1bbdf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9070d7bf-af01-453b-a330-08d4e1145a90",
        "cursor": {
          "ref": "8c7c719e-6f37-4fbb-b95b-729cdbecae53",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3c718ed8-8f91-4bdb-9694-25e0e1d102ea"
        },
        "item": {
          "id": "9070d7bf-af01-453b-a330-08d4e1145a90",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "904d6fcc-0c39-42b2-b1ab-790ea767dbce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a65f41-f05d-459f-84bb-09aebdeb5d05",
        "cursor": {
          "ref": "90aa1de6-75fa-4bd1-8b3b-fb1fb2125939",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b157bc8a-d7f1-4de8-b660-96ec04ef6d2b"
        },
        "item": {
          "id": "49a65f41-f05d-459f-84bb-09aebdeb5d05",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e6034469-8960-4bb7-9197-a3688709da8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0669cd04-ce5f-4947-902c-054ca265e659",
        "cursor": {
          "ref": "cbfb88b3-985a-4afd-92af-0291f19b4bd3",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c3e5ca8d-2864-4c05-aa7e-b1721154db8f"
        },
        "item": {
          "id": "0669cd04-ce5f-4947-902c-054ca265e659",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1e0386b5-8259-4fd8-8258-8a2466ad0b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48c8fdf-814a-437a-9d74-f73e6a43928f",
        "cursor": {
          "ref": "21057a01-a584-4025-8d66-ab6c65717820",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8afe3f07-604a-4c74-b645-4ec9ce8d0523"
        },
        "item": {
          "id": "d48c8fdf-814a-437a-9d74-f73e6a43928f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "806ee000-b7f0-47a0-9219-4a4678453932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d91819-4a5a-4e00-a5f3-cbfa00b78e84",
        "cursor": {
          "ref": "10d0d39c-7ecb-40de-a657-56fda371ac56",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c18f6b50-31d6-44ae-84c3-eb877428e76d"
        },
        "item": {
          "id": "28d91819-4a5a-4e00-a5f3-cbfa00b78e84",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ed9a2d23-d723-4302-b1c7-c583023271ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9915f818-d8fd-414d-bec3-dbd19cf03703",
        "cursor": {
          "ref": "3936551c-14de-465b-9098-51c186061c97",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "86cb3411-f1b0-4c2a-9cec-4fff014b9678"
        },
        "item": {
          "id": "9915f818-d8fd-414d-bec3-dbd19cf03703",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "55da61ec-b5f3-447c-9af6-ca3835d18b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2862c3a2-58b3-469c-a1c7-1049d8036ffa",
        "cursor": {
          "ref": "239c1cef-8913-4287-9cf6-fda9747c5925",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8d9274a1-3dca-4ef4-98fc-380cbb64c7f5"
        },
        "item": {
          "id": "2862c3a2-58b3-469c-a1c7-1049d8036ffa",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2798aa3e-66cf-4e7e-b01d-bcc9781e21cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba56be33-0b34-4f5c-8cdd-dd0e92a7635e",
        "cursor": {
          "ref": "8ea0b910-c863-4695-9b82-a57fd92e5658",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "829cd126-bfa4-47c1-b705-6b28d17fb16a"
        },
        "item": {
          "id": "ba56be33-0b34-4f5c-8cdd-dd0e92a7635e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7724ed2d-931a-4fa3-b183-74350cbb8341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f307a3a9-3b6f-44e8-b645-23dc3d1197e4",
        "cursor": {
          "ref": "8d62e1e2-87f1-43ec-9dd1-e1e000169ac3",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "46335269-9375-40e9-9742-d85024ca5d76"
        },
        "item": {
          "id": "f307a3a9-3b6f-44e8-b645-23dc3d1197e4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cb36ab32-143c-4ec5-be8e-1a30f63b0154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a3fc5f-8a30-4725-b88c-e500f675484a",
        "cursor": {
          "ref": "12203ef8-765c-4f26-a710-cc654701d61a",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5cedd2b2-e4dc-49a7-a521-39bd92b56aec"
        },
        "item": {
          "id": "55a3fc5f-8a30-4725-b88c-e500f675484a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "def05f74-429d-4ae6-a9dc-3692a36f02a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8111d068-806e-457b-b053-abdb8a2a104d",
        "cursor": {
          "ref": "da62eb6f-616b-4c64-86cd-d8fac5ead12e",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e05230fc-acb5-43d9-9898-9a852feacda2"
        },
        "item": {
          "id": "8111d068-806e-457b-b053-abdb8a2a104d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b5609c79-999d-4ba8-b6e7-572c72fb4106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be0088c-8278-4c71-8a54-c87bb06a9868",
        "cursor": {
          "ref": "52cc7d0b-9311-426e-997b-17b9a7ace423",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e7b1f9df-ceb5-4517-a2af-abb3fe45c7da"
        },
        "item": {
          "id": "2be0088c-8278-4c71-8a54-c87bb06a9868",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c9de30c8-e3a3-42e7-a10c-93a98ac68a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ae6302-8293-444e-a3f5-972c75214127",
        "cursor": {
          "ref": "62bf60d1-540f-4022-befb-8a2304ff41db",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "75795227-921d-40c4-8711-618e1a25f4f2"
        },
        "item": {
          "id": "18ae6302-8293-444e-a3f5-972c75214127",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5bf55e51-99f1-4fc4-a556-8fa4cf63426b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7606c1d3-464b-487a-93d2-4a1bbfb1c7b3",
        "cursor": {
          "ref": "f60311ad-661a-4395-8212-5024c4e461bc",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "712ba194-9dac-4e9f-b298-3f98399a8238"
        },
        "item": {
          "id": "7606c1d3-464b-487a-93d2-4a1bbfb1c7b3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c5000853-f79a-4e89-a204-c4f6f90fc0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f332e7-436d-416b-a6ca-8f7d96060451",
        "cursor": {
          "ref": "4b444737-2d39-4792-a3a1-2ba490c7a5ab",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "77ba77dc-4571-4950-b95c-ca1bc9e396ce"
        },
        "item": {
          "id": "e7f332e7-436d-416b-a6ca-8f7d96060451",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6ad0418a-6a02-4543-9841-c3f64485812b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092c31dd-82f5-4683-a001-cb369e9db609",
        "cursor": {
          "ref": "eca96216-f5a1-44f5-b9c3-99dff0584fdd",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4d72f264-5287-4cef-8e23-e1b5bfbe796b"
        },
        "item": {
          "id": "092c31dd-82f5-4683-a001-cb369e9db609",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a066cbea-3cd6-4ef5-b378-995e8fec4b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0044667f-0682-42fe-9a0c-2fa0d9c61624",
        "cursor": {
          "ref": "6d2f12b7-9912-4a22-b83c-15fa1edc6a55",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ad83cf9e-a568-4c81-aeb8-ead6294740d9"
        },
        "item": {
          "id": "0044667f-0682-42fe-9a0c-2fa0d9c61624",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "99597d84-4fda-4ef9-8063-386fe75c7157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e82516e-8ee5-403d-bb9a-b606a0a0a663",
        "cursor": {
          "ref": "edf26613-f170-4216-8d1b-40f9c672f77c",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "59d128cf-8f8a-4af9-878f-da1b01c03ce7"
        },
        "item": {
          "id": "5e82516e-8ee5-403d-bb9a-b606a0a0a663",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "29897b7c-a4f2-4ee8-8a53-3c88fbde6968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db84239b-81c3-4427-bb5e-a6252ebf7580",
        "cursor": {
          "ref": "1f03c272-e239-45f2-9876-e086afa885ec",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1658f525-4180-43f7-9d51-0ce9caeaa13c"
        },
        "item": {
          "id": "db84239b-81c3-4427-bb5e-a6252ebf7580",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2ad35836-db32-4467-9f38-c80eb48aaa55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51253187-790a-4f86-9927-f3b20f1fdd4c",
        "cursor": {
          "ref": "fca0ba63-4992-41c7-9247-4954b54eef88",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "955a9ab6-b3ff-4693-a07e-68f16b83bbc0"
        },
        "item": {
          "id": "51253187-790a-4f86-9927-f3b20f1fdd4c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e437f0a5-548d-463d-b489-168ad7df47a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e6fdb3-2577-4645-a894-afa08b8a4b49",
        "cursor": {
          "ref": "2b85c3a1-8eea-432f-bc4b-28b87586aa40",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7bea443c-16b8-49e1-843c-b393f3ddf542"
        },
        "item": {
          "id": "28e6fdb3-2577-4645-a894-afa08b8a4b49",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "19fe5580-c04a-41f9-80b0-83842cf2a6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54121a30-ed93-4226-b829-8cce0d12ce7a",
        "cursor": {
          "ref": "c1525cfb-2e9d-4447-9137-938fbd17ab68",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a4c4a6fb-7272-4cf9-a795-d9781f0cede3"
        },
        "item": {
          "id": "54121a30-ed93-4226-b829-8cce0d12ce7a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f2f5c5ca-8450-4dcf-9cbe-ae0db6a790c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c47293-acfb-40c1-9eb6-62105af4904f",
        "cursor": {
          "ref": "58ab24cc-c719-4cdc-aaaf-c51630a87931",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b6e22c93-1c4c-40bd-b771-64c0fdb75bdc"
        },
        "item": {
          "id": "99c47293-acfb-40c1-9eb6-62105af4904f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "da4b8ae7-eecf-4ef1-8eee-115fdbf66443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479e66ec-828b-42fc-ac33-67b2588e6ad6",
        "cursor": {
          "ref": "9e3e92e6-89d5-49d6-97da-b8f58dd9a74d",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6ea40012-03a8-42f9-94b2-5efb5cdd8708"
        },
        "item": {
          "id": "479e66ec-828b-42fc-ac33-67b2588e6ad6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "231e8f1d-6991-4b27-8fe0-11f9d6c895be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1534e75d-9cd0-47cb-8737-a9c2df49a7e1",
        "cursor": {
          "ref": "40972d1e-a6cb-4570-b640-2df39557a5dc",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5754e50b-99a7-4191-8f05-e4e663375217"
        },
        "item": {
          "id": "1534e75d-9cd0-47cb-8737-a9c2df49a7e1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "69725a71-9abf-4266-b2ad-99edb8195c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0f7849-8dbe-4429-98af-c9b600c5b77d",
        "cursor": {
          "ref": "bdd433e1-a225-4502-9d2b-6316734b40c4",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "52a8a68b-3713-442b-8a09-9e5cdcf87ef0"
        },
        "item": {
          "id": "8e0f7849-8dbe-4429-98af-c9b600c5b77d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9db316a5-f060-4c4e-b027-9354b423d191",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9760a595-ceb3-4c54-8bd2-9f589dc86348",
        "cursor": {
          "ref": "bbd5616c-dd40-4f41-aa25-3e6289638caf",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5b9e3b33-a1ea-4bed-b928-ea14c02fb088"
        },
        "item": {
          "id": "9760a595-ceb3-4c54-8bd2-9f589dc86348",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "879128ea-9382-44b0-b723-c146be651c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "0814d6d4-7f68-4756-8b18-1a9844bf4d33",
        "cursor": {
          "ref": "a01c5631-e480-48bf-904f-ea8798bee068",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fa67fd1f-d2d4-4670-8876-111dbb66c57e"
        },
        "item": {
          "id": "0814d6d4-7f68-4756-8b18-1a9844bf4d33",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "528bd43c-ebcd-42dd-a470-a964ddb167f4",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78437f5-d88d-45c7-8184-dffa933892ef",
        "cursor": {
          "ref": "2306beb9-07a1-4b19-b9a6-b6a6c4e73ea1",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4d0985ef-8c43-4008-a511-e3094f4f9dd0"
        },
        "item": {
          "id": "d78437f5-d88d-45c7-8184-dffa933892ef",
          "name": "credentials_verify"
        },
        "response": {
          "id": "556e909b-424c-4071-b9a2-12ac039fcf84",
          "status": "OK",
          "code": 200,
          "responseTime": 2401,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99ac0f2-68c7-48ea-8ad2-f20bda149a43",
        "cursor": {
          "ref": "d19acba1-ae30-4005-b6cb-175be6216612",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "57764b5c-06f9-45a5-ad50-e53212e57cfc"
        },
        "item": {
          "id": "d99ac0f2-68c7-48ea-8ad2-f20bda149a43",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "933f02ac-503a-4048-a0c5-fbc94e5f1b6e",
          "status": "OK",
          "code": 200,
          "responseTime": 2390,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33f66fc-4a0b-4d2b-bb9c-8d37ca108d3f",
        "cursor": {
          "ref": "cc0f7b1f-0600-47eb-9701-73d6a4c938dd",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "278d5383-e933-4bce-8712-1656b9db1c61"
        },
        "item": {
          "id": "d33f66fc-4a0b-4d2b-bb9c-8d37ca108d3f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "242db9c7-a8a6-4436-8049-9ed38a19e55c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d33f66fc-4a0b-4d2b-bb9c-8d37ca108d3f",
        "cursor": {
          "ref": "cc0f7b1f-0600-47eb-9701-73d6a4c938dd",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "278d5383-e933-4bce-8712-1656b9db1c61"
        },
        "item": {
          "id": "d33f66fc-4a0b-4d2b-bb9c-8d37ca108d3f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "242db9c7-a8a6-4436-8049-9ed38a19e55c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d33f66fc-4a0b-4d2b-bb9c-8d37ca108d3f",
        "cursor": {
          "ref": "cc0f7b1f-0600-47eb-9701-73d6a4c938dd",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "278d5383-e933-4bce-8712-1656b9db1c61"
        },
        "item": {
          "id": "d33f66fc-4a0b-4d2b-bb9c-8d37ca108d3f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "242db9c7-a8a6-4436-8049-9ed38a19e55c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0ade96ff-cf8d-4acf-ab47-e1dc09d3324d",
        "cursor": {
          "ref": "cee1bb12-3dcb-4972-bf63-440bca919707",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e710d48b-4ef5-421c-ad1c-710abeedb7d3"
        },
        "item": {
          "id": "0ade96ff-cf8d-4acf-ab47-e1dc09d3324d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "24d0c5ba-eab6-4850-a6c4-98c2390672d6",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "1b2a4c01-5a9b-42dc-ae1f-da77109f775f",
        "cursor": {
          "ref": "47766726-baa3-4a7c-b079-31cdb14a5b8f",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b1909d8c-0284-4d3f-8401-f60b5d01e5a6"
        },
        "item": {
          "id": "1b2a4c01-5a9b-42dc-ae1f-da77109f775f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7510353a-d7b1-4855-b90d-409e0162b650",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1b2a4c01-5a9b-42dc-ae1f-da77109f775f",
        "cursor": {
          "ref": "47766726-baa3-4a7c-b079-31cdb14a5b8f",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b1909d8c-0284-4d3f-8401-f60b5d01e5a6"
        },
        "item": {
          "id": "1b2a4c01-5a9b-42dc-ae1f-da77109f775f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7510353a-d7b1-4855-b90d-409e0162b650",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ff033f75-266b-4a5d-9442-26b8b241e5a0",
        "cursor": {
          "ref": "471c0c89-6fbf-4546-80df-e54462df01fc",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f5f3e40b-c3b4-444f-8d6e-28b233323303"
        },
        "item": {
          "id": "ff033f75-266b-4a5d-9442-26b8b241e5a0",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b87e1f07-eac2-4926-9275-6e608b7fb9bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 165,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b57d293d-a527-4f2d-91a6-1023a0a9f254",
        "cursor": {
          "ref": "476c615e-09b8-4afa-84d9-53d36704134d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "faa54e1d-f624-4dd7-a2e4-13aa0ba1f0a5"
        },
        "item": {
          "id": "b57d293d-a527-4f2d-91a6-1023a0a9f254",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1b673f08-ada2-4b15-b32a-f0e7b9a72d8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b57d293d-a527-4f2d-91a6-1023a0a9f254",
        "cursor": {
          "ref": "476c615e-09b8-4afa-84d9-53d36704134d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "faa54e1d-f624-4dd7-a2e4-13aa0ba1f0a5"
        },
        "item": {
          "id": "b57d293d-a527-4f2d-91a6-1023a0a9f254",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1b673f08-ada2-4b15-b32a-f0e7b9a72d8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d301934a-a137-4edb-b437-5b17ef36f323",
        "cursor": {
          "ref": "3a5f9737-b82f-450d-bf5a-bb2061574593",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "877a925b-fe5f-4124-a6b8-8b70b685230b"
        },
        "item": {
          "id": "d301934a-a137-4edb-b437-5b17ef36f323",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "667fd254-d9b1-4935-99f5-c1c53d20fa20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 106,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}