{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "47623eeb-f799-487e-abc0-bd53ba798b8e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f3fedb66-fdda-486a-912b-d59055f5eff4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d0508c4e-9312-4f97-9baa-5e2395c5604e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d72123da-bfa4-461a-8ca2-46657219c1bd"
                }
              }
            ]
          },
          {
            "id": "090aa674-e564-446a-9da2-d7b9a0387f35",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f202edf8-a61d-4291-87e9-1d623a4a2752",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "79a684df-f7bb-40cf-a84e-c204ece73619"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d08abc82-2f85-414f-ad1a-87c72bdf93aa",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1072f72c-0958-4a7f-a79a-b1aba970e7c2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6251c97c-6e73-4a52-acda-0d668bdd771c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df9b6fde-7487-4183-872a-783fc9050082",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d1328c02-f9e1-45a4-ba88-1949cc304121"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21b778f4-373d-44f7-82b2-64326c5233d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "924d7229-7c3e-4a55-949f-1a4e85c71b95"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8a1c16f9-1049-4553-82a0-fdf5b0a589cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "699bee08-18e5-4cc3-b24d-a1d79beaa7a0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0189e56e-94f2-4020-9b1f-c383ea865575",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "eb45d9ff-b8be-4fd7-80bb-5312f30e3e2a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6570c16f-82aa-43c9-aa61-9c9f2c51bbb1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9caa8f0b-b917-48b9-a5f3-ffdcd7bfa5ab"
            }
          }
        ]
      },
      {
        "id": "fcd31146-1b99-4685-bd7f-ec084eb7ce73",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f6c64b3d-f4a3-4174-9765-445325d67340",
            "name": "Negative Testing",
            "item": [
              {
                "id": "feca07f4-4443-4d67-a951-f3e4808359ff",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "75dba3c9-a2e7-4677-b717-6fc1ed4f8fe1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9d0165-69f9-40c3-a7d1-4f6e2b37528b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0544c363-d274-4adb-ac07-8219042ccd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c2ba3a-75f6-44c4-ae43-343a459c8eb4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b540c313-0aa9-4301-8dad-39b7718dc133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8798036e-c0ca-4867-823b-91290da8f280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724d4783-9157-480d-bc90-6c63537e8af6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11037e4b-86e1-4817-9d7a-1e820e9b70f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66e73d1f-f07a-4249-8094-23fde62c27b1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "08826b72-732d-480b-85e3-a8927239d11f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b229bf23-f452-4765-baf6-c8d54ff2fb8b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b55c424-9a06-447d-bc74-2e672cd28a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b17bd5d-4bdc-469c-93ee-a4520dfd0c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59d2b80-b23b-42d6-a470-263bbe2fb2ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea9bbb42-6588-45a2-9e11-de11e58f8a80"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "140a360e-36fd-4f85-a067-d92024900618",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b5a00fe3-a2be-4c61-bf32-d3ae08900345",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "939088ea-aaaf-4d01-a669-6be265349d43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6df64e3a-f8a9-49d4-90f7-40e1bdb0e510"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b75ec05-01c2-46d5-857a-f2556292108c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5a87f022-fcc9-4409-8580-b5ebecaa1898"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65137903-981b-4fc0-bf2b-ed92bed63390",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc22ee9b-9172-4680-9cda-87828aca08ea"
            }
          }
        ]
      },
      {
        "id": "bd99a91d-50f6-4df8-bb9f-cc8ab3ee9acb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1a1a9c36-8f6d-407e-96eb-9e799bdf1af3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "660c798e-46f0-4511-8770-c154d38085bf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "49048152-7bda-457f-bc5a-c173948de454",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fea0c1-d0ec-4973-94df-be7e566ec8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f75f880-0f8d-4f8b-ab4e-008fad1fc35f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23022a2-e495-4a57-bf5d-90bae53e0ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1c581e6-5b41-4788-9a07-c4d039fbec20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e17edc-3548-4597-a93e-740615873fae",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b355911f-82b5-4cdd-81cb-6b8a20f54789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b270dd-f168-4256-abe7-cc6611fae1c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3f77d7-ef49-4761-ab67-7791f0b409c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43f9b06a-f86f-4e19-bad6-80cae205833c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc9b385-a4bf-465a-aed2-dbb3050581ad",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b7c372-4c97-4e14-8552-1932e64bb169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a3cdf1-4478-478f-b738-f55e868982f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b323763-5654-41ba-899e-45d52ec54dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "461a3800-b192-4ccc-b6a8-313e8c92fcf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f84b534-2876-45a1-8d19-b4990c1313bc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbad150-9769-4c42-a301-44ea1c377629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00096468-c965-4f15-86fa-f5b4a7b1b16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7813a9bb-14b7-4580-89c9-ab845f2a2372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23152a52-a38a-4e34-9f3e-1ad741967747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d08423f-6ef1-457d-8746-f00dab1f5b1c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f13bc3e-c9f2-4ac3-b567-da47e505dc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fec3c99-ed7b-4e9c-b686-fca4c168cdb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0316635f-6c82-4a06-9712-b08d52ad9a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30c94eee-a5a2-412f-bdf2-d4c5b720af05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c429c4b6-97b8-4f1b-8636-90f12abefeee",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfe4379-b2bb-40e7-a925-0b5b007de420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "765094eb-cf69-4199-80f8-3aad13cbb9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa15f6f1-3feb-40e5-8c23-b99b5c1e625d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c005347-b145-476f-9f1f-7efff530d23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64b7fd8-98f5-4262-b0e4-86d90c61b71f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263b9555-4a69-4ac7-83dd-21b70127cdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c21d2aa-d425-4f12-a477-a956bf33498d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94a7583-2b3b-45a5-ae3c-55a61a4f9d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cf91032-abff-4006-b42b-94ebd6065703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1901df8f-53a0-41dc-9869-94e2204eaeb0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2aab951-4939-4296-a455-ac11d8a06d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0ef03f-fbba-4a4d-8a66-6cc0b35548e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64f3dd7-4d72-4858-982d-b4c8b70a4630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a02a12a-4d63-4628-9285-4dcc3440d3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5104da50-490a-47f7-98fa-182942ca1ed8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d534fdb6-c3ed-4aa7-88db-b93a94b6a5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53dfadea-ed98-4f60-ad1f-22e2c68e1818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcafe4e-2192-4e09-a8b3-3575d1cd32c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36d620d6-f5b4-4a54-b9cd-654c0e480a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e609412-e923-4565-a3fe-e18494eb330b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d21d917-728b-42b1-83b9-f92c9773b636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bf0f1d-9845-498f-81b5-87f6fce1dc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1451558d-e082-4a1d-965b-188452886c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89a096e9-ab7a-4283-a194-5bfd683277e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a371d04-065b-4d79-8d38-384bfc419e74",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbb43f8-a840-4ac2-80c7-2f6c92dcfc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7818a38-9c2d-476d-913d-43723563b3ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f68d2a-ba75-4005-9c64-d8af4647c8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4072851e-9ba8-4167-bb60-6b1a3a8ceed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be50e6cf-898a-4f32-8815-dbf79aa87800",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f15b17-be88-44ff-9d10-5a966855cf22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef380991-7005-49ad-832f-2aa092960487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd474f0-7724-4d91-94dd-7686742109b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0db659b0-dcd9-4bb5-9f59-0e7c78418880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab83d4e3-1693-4e71-b442-8b9b9ed7e761",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0652af-357d-4e64-8985-b8a50a910026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b32686c-5a43-4009-91cb-bcaf394f8352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dec5d6-73cc-4120-9030-fad9b1dea8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c635f0f2-1b55-4878-ab73-8d9dbd66e90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f3b4e2-4661-4067-846e-88b41689395b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e5efe3-f28f-43b8-bfec-ca2e35b63599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c348acb7-e14e-4924-89ab-79078609f802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2771389-300b-4ab5-a7e8-8ed6969a08f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "659acc82-6a39-412c-be85-e5c01ba4f07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fbc6418-27ab-4431-a8c3-bbb15992bf3e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09012542-fe43-4894-9242-3fc3dcd2e8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba23898b-493e-4d41-988d-ce02fe4385c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2960bb-370f-4117-adf9-5048006e8673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43589382-d69b-4bb9-ac81-5c4a82fd29ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb261f5c-9634-49fa-a7f5-4f88c6c9d8d8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcb6805-3ceb-4092-a438-c9329ed04965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8edf5441-a433-4889-adb2-48b54bb856aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e32776-bbd0-43f6-9f9f-f633781f44f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32f93767-a0cc-42e5-aceb-a6fd810829d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac87d8a9-92e0-468c-800d-5c3d3444385e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "934a3a77-6839-4c64-b3e7-95c4c611acbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d2cca4-a623-4d86-94ce-05cf1f47f2e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b94a7a-81d1-4f33-8c71-b60c48f6f39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7da86687-33d3-408b-bf8f-a7615be0a051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e881e0ca-e529-472b-bb2b-1883c0a29ca1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7fab78-4ce1-46e6-a547-f627f777c4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1ae0c0-a288-49d8-895e-549e03078f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b2a936-68c4-484a-8133-b2322003a7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9116ed6a-953d-4291-be6a-9a7fbb139465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d067c0ac-11ef-45d3-b79f-9c7f5798e75c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aab76d4-2951-4a0e-922b-55f4699c91ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55988f41-7461-4c0b-9880-997a73dcd448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d0bbe3-2f55-4931-920d-d6cc2f676499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec2a055-27b5-463f-9d9a-2b89d8ce988c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81da480-26f2-4ebc-a4df-f8dd597c33f9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9cd0f88-5583-4c24-859a-3d84b306c863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a54c3343-b4f5-4c46-b971-53d8e0d69b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf95747-1a72-4a6b-9460-61f66fedf8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e35fd8d-3436-4bde-b5f6-cd8cd59aee3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8157ec-9afb-4e72-84ff-55d378ad4c95",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160932a5-ee13-4ded-947c-39629a52ce31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b62224-8547-4025-905d-2b7bb14e9894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99517c0d-6344-4316-8ef1-56d0e737a888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f0bab0-3154-4519-82c2-e1a0f4b50b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6352c3f6-42a8-407d-b49c-a4d2e329e6dc",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea3a5d2-3170-4203-9039-9ed6b4307622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d29b1ee-8859-4154-9a38-37d55b08f1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d51b49-baca-474e-955a-9c762c89cd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2582467f-ea84-4bc4-aff2-36f67ab3f31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a21e7b3-2e86-4a5c-87fa-cdd7a45e3e11",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca20a9d4-20af-4cfc-8c48-f1980ff168ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93626e72-6383-46e0-b3e0-0d2adb2c6338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2d446b-cd5a-4e9a-8e07-7f2997c3cc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "015ad528-2f47-4693-8dd0-3062015f58fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f3d2cf-945a-4e00-b27e-f33225ce7c5e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "093ee21b-cb9d-4883-a399-1146ebfa0dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cceb1c6-a12a-4d62-b9fa-a2caa36b3a98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccdf17e6-bcec-4de1-a739-e335195271bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "97ca81db-f0b6-4412-8341-ee6ce695925a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8a7815-51ab-4663-953d-f79b345a0513",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b117f8-ba8a-4824-8170-ebc83fed798e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517e2c6c-05a5-483a-bcac-1ad1291a4f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7bdc5d-c7b6-4461-ac85-63dd86c82720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "89cdaaf4-57d5-4dfe-91d7-e508bba865a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ff8819-aae9-425a-a28c-f914df7e69d3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335c99a2-3484-4492-8b50-d0991a5cb3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8da708-7e45-4cec-b733-32f8670ebbe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda3ab88-36e0-47f5-b878-9d5405e6299e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c038c1f2-d65e-4c9a-a76f-bce4d42ab8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a737aacc-5cce-42f7-bdb0-1f8df09e3f67",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecc9f1b-e90b-4200-abcc-b6d6393d4294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd358b0-268e-418d-bc22-91e06377dceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0bf17e-42a3-43f5-8059-3197dbdd475b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc3dc88-b88b-4486-9f35-c93200fcaf62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e250ffc-9c69-4797-9875-cac72a59d9ef",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1064ea1c-40fb-43db-b3cb-9865de7443a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "899478a0-71ed-4caa-895d-22b00b0776e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e1ab42-c270-47a5-8d46-f5817265bc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cafa31b9-3029-4505-9f83-c44db1d13d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3413fc16-ba19-404a-b6e5-c82fce1652c3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f56a433-9a25-4127-879e-cb29ccf60338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752ae13e-7f6c-4627-95fa-790d5a660a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317672dc-d7d0-4e07-a014-551972c020b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "590aa87d-62f9-49d5-b9e5-d33bdbc9ae2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5786dce9-b919-4d0a-847b-8201cf6e875b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a1b13c-b291-4490-873f-097f749a4689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f85c7d-1ce3-4522-bacc-87ba2d03fe34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fed2352-66ca-4a39-bd4c-5a1676ccab74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e361354-176f-4b71-9caf-9c0b31cb1688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c714c513-e9c8-45da-932c-58969e982710",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23717e3c-27e9-4ce4-964d-3d84162c6453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c228ba16-ada3-462d-b9d7-2a0e3d05db79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71f89b0-0542-4531-831e-030ca19b5b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74f5ab22-5c69-4aa0-997b-c57064729faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ee45b8-c626-4ca9-a758-28205bf6af5a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7fa057-4b82-4825-afd5-06d113d7f8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6102e6e-0317-4731-b6fe-9fc7c2427208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f8f394-d692-4d33-811a-0f78a979eb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "948165e9-3828-4342-9b0c-27d0c328c86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe374b7-f20d-4ba9-94c0-9557f3fc595e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c0f8b3-31ca-409f-a35f-2e6b168a2661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46246fd-d855-4ac0-86eb-4cc772216bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f95807-4fc5-4027-96ef-9484026cde83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "059013f2-e0ce-439b-badc-27014262f781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c4a1b4-bd81-4e58-9860-c40cdc888c92",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3debf2aa-4c8d-4f48-933a-cf736b99d727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5f3415-3080-4d76-950c-7415ea4dd8ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0e9470-f25c-4f09-b86e-e13ff081a3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3baf6d3b-49b6-47c5-b19d-117b8118929c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0c2db0-f80e-492d-848c-fe3b44c470b6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb6f846-6a8c-450c-a458-a6b15868bf37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3174d1-b8ae-498e-b338-68bd648c8e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d1fe5b-45f2-43a4-9f52-a62eb2814735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d51e71ef-ee87-474b-b5ff-ec309247b096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf27e9c-8723-44a0-b4c4-566aae8df452",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33d8552-7989-4119-89f5-1ae92ea5e78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e64b720c-84d6-4dfb-bc71-d008ce5bdd97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd0edaa-4d96-4ed3-b56e-2b44cfc445d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c7a0e0-a155-45f3-b58b-fff7c9aa6334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd75639-01ec-4ec4-8e19-97998dea7528",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d1064e-3e33-4057-81e5-59f5b31fa578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dacd5a5-5c53-441d-8826-cc190a4c5629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af38c16b-b3ff-4fa8-82c3-7137e0eaef06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a0ac7e7-671e-4850-981b-f60d4b40c961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af1f0aa-b2f5-49a9-ae1e-592bd5ac634e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cfa42c7-6140-4eb5-9bb0-0ee50bc13c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb98cfc-3b57-4c85-88c6-0b0ee03a732e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67171bda-ca85-44ca-84c7-122a458ff3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "051cbcc1-cb4b-4732-9cda-565ac0e60384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f49ae90-ba2d-413a-8309-d18afc59cd2a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83151487-5113-4ade-b8ce-dd4ff7a9c4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc230df6-4389-493e-bce2-0ab54567cdf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249b7d5f-cb6e-4a75-9e00-65cd7ce904d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "634230f7-5182-456b-917d-31ff145d7738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc7a2a2-e4c8-4c2a-ab1b-b5d769d93798",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9d066d-5456-476a-acbb-4b6f1e7f9b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec65809-bbd7-480e-bb51-dc00a6bd6a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6113f0a-3b01-472b-9b63-84393865bd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10394b1c-1b74-4534-9b44-f1ff36ca8c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbe6f61-4177-43be-ba32-0ad02968cf04",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8483000-933c-45e8-8339-f7365b61ef2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39321f51-5edf-43c1-903f-7a3702c4cbaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0543a3d8-a7bb-4b53-8dd5-27037808d3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "279cb491-597b-4414-bd82-77a3543b4a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ca0aed-c278-4851-9551-d88559097035",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9b2db0-afac-4b44-b09d-2fb302970fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08934f3a-1af0-43c1-9fb2-5601f4a992c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caaa6ca-1049-4efe-8c22-6f90986d62fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3282fe37-ebcf-4cc5-be6c-bb07befeb6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd3b2dd-cd5d-4bdd-9e53-cd0fcbda4b06",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a98741-4fd5-4bb1-8444-b177cf61ea20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16dcbb77-a83f-434d-8f75-e262c23dc72c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83baa5d-732d-4ea2-8168-a91ee3d5ca1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8649ef40-eb28-4324-b1f7-5f4a9eb8dddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccc161f-7c1a-462a-abcb-8d6eba47d74a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbe4f34-b6a9-4efd-ad57-9e68183fef58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5bf96b-f8dc-4603-a928-e0b8c066defb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c258d7-91f2-4005-beeb-6fc6a393512a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0a5617-48bb-4916-b9ad-8d93abdc95cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7757ff62-5ce8-4158-97a9-c1116da11e3c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3da50f-f5aa-48c1-9154-654ac5139239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2780c2be-892e-4af4-a38c-d4e2372a572f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb76062-5c33-4fe0-89f0-98cc20a68a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45cbfd5-08ee-45bb-b329-dd392dc2e1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5bd8bf-0df8-4228-b89f-0f2414fc28dd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d83483-f02e-401d-b225-715f88f28138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e23a462-8773-401e-9540-c497699e0b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a37fc8-c22d-44d4-bc63-02cc5b9cf320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bda1146-9349-4a5f-9bd1-2f538830773d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed72b319-8b4c-4372-950e-c464d4076eb5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf4cc5a-127c-4355-8072-fbdd7630ac61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99b2183-e590-405f-a611-54bbdbf1a656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a30c36a-ee12-4654-b2e4-5e05ec47b405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba8c717-da18-494a-9457-d417cd48872b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b7bc43-cd79-49c6-adde-78bc9a581bd2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff877a75-08ec-438b-9f74-a81cc6fa0896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb015b9-a114-43c4-bdae-817ba3471e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926588cd-b519-4d62-bad9-48eae452e8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c877b88-4cec-435a-b965-dbaa44685db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cb85ad-80b6-4829-8160-0d26f071a4a5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9f71e1-41b0-4eaf-98cd-992032be9336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c467b16f-b6a8-432c-9bd7-951c968ac3f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad29075-6fb7-4e31-ada4-49d3437d78a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce8147b-479b-4864-8463-01782e6f6778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce209440-442b-4e23-8974-1ef987b05c05",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7119cd-b684-4353-919b-dd4ad1345bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a167dc9-4fdf-4d1f-be5b-8b7d310e6f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecfd227-596a-49af-8b45-055c0de6cac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e522eeee-8eaf-4db3-afc7-ac258dd75109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1deb9a-bc5e-4737-8a0a-ae26a4b5251f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e628f73-c62e-48af-99e2-78abb5aa9929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a5f0302-350a-4561-a6f7-fb22374eb299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9265285-4eb9-463a-9036-eec279407e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "69126696-6141-4431-b3ff-315903c06240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de2a128-04da-4688-80dd-3f92564f5868",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4163f10-34ef-4115-b571-1c71efc07a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee7ba1b-b358-4b0c-aedb-af35bf802137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74230000-71ce-4c16-bbd8-6a29ba878040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "96b76163-c64b-489e-b488-cb5907aac911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ed98fd-0685-48e8-ac6c-07eec88f92c3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53cb2a1-82df-4ad4-8062-296f4bee1f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684368af-a1e7-4f8d-9dd4-0a97489147de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7590c114-f1f4-434f-94b6-8b8f2419918d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95f7abd1-aa83-4b0f-9e4d-1f60e7040e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02093d3e-f4f2-481d-8df3-d70540e8b318",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17943f90-17b6-4cdc-b87c-af160d2636bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf072aa2-8522-41a9-ad49-973b08e019bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ce4ec8-7d88-4e4c-a6b4-88e0be0a1a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8bf2cc-c3e7-4aa6-90b6-ae9003f9292c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c68302-a05c-403f-8935-539e746b0c33",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf9690f-b07e-47c9-9fa5-fe23c89e0e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317ef3e7-e24a-4ac8-b2e6-64555de3426d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d87a437-5485-4504-acb5-290a165ea8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d4bec26-62fa-4ee0-8bac-e37796c740f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ead053e-2767-4719-bcc1-a872e5c841dc",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76065ca-2a6b-43bb-95c0-e76648d293e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed8b882-d3f8-4cbd-81f9-aa023abf4a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2def0d16-d465-413f-b868-56051f66a8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6771c730-85f6-4983-a7b4-133c6508c0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c552be-f0ff-4a6e-96a5-c201086bfaa2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7de1dd-cf4b-4a15-bfac-9bbc91859831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74562b71-d6b1-4aa9-a7a3-a32269dad9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bd36f0-3418-49ed-9c62-e5dc4d2ed110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd81a98-4a31-4cf3-a330-4880b6066bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9565c7cc-c401-40e2-b13d-07d261693c88",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2321137c-33c7-4bd9-b008-41e779cf8dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b53945-77cb-4220-82bf-e1a349fccc03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90046a9-6fb9-45ce-93c3-cdc2fe426ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce70914-c4ee-42bc-a057-90a199ab749b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fcc2c3-d0c7-49ec-adf3-044a7cbacb18",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88183e4-5991-436f-b53e-3c1c4046537f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a7e028-6f58-45c0-9207-95cb9322de12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2e6ae0-0ab7-4d79-9281-2def36afea62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "945dc25e-155c-4a90-8b4a-84c83c26648c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d831e5-cd02-40df-8826-0b8eb84fe3a3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68caef66-f5e2-4a90-8c28-f8ef5df92fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306ddfad-fc8f-47a4-9848-c0e8a4cd4154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb8aa7b-0d9b-4e7e-8dd5-22f6cf1253b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cbca575-ed71-40a7-99af-c36fbda31118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefb2614-38cf-4b26-93e7-d663f3159ed0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612f6bdf-aa7c-4f32-9954-bace6c6bef58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753c73d4-662b-4f92-b5dd-318780e19186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85eb2f0-0c56-4180-b2d1-2d7a92a81e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4edfe8e5-c708-49fc-9876-28a7a539326c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076ec79b-51f3-4501-b89e-da521957ec5d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70144ce6-d0cb-4b4c-a833-e6b21d018e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a6cb9f-4dfc-443b-b999-d3e34731b4fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff2cb24-ce89-460f-a696-258c78ca0fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad489e5-1216-41b2-a84f-70acc2940531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d067cacf-b050-4e1e-bd51-478b24425875",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a550e0c5-2288-4cc6-9e4b-a41b4eb681a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42fe00f5-10c1-4046-bfb8-06315acb3fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f57468-a61c-4c17-8f0b-5e4ffc9d8d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d68a7f0-2970-43e2-8dba-8fb2df4613b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ca8058-9209-427c-8875-00e93c7f36a6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c12a882-61f3-4884-801a-10186c76097b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6310df0f-9e65-43e9-a229-cccaba922b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1367d4f2-3dec-46a2-931b-3744692e69a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5423d869-8102-4dcd-b7e7-3bb4ce1e6471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fde2377-bddc-4ec0-983d-957658bcf04f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faca14d7-d441-4ad8-9e04-6008fa67b19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cd0656-b0b9-44c1-9fe3-601c7f09399a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e482ed80-a7b5-4325-b7ad-a8caebeb8db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96f2bae1-0a03-4aef-b5c4-dc415182a832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0449c7-fc78-4b44-a029-91945cc632ad",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28338813-af47-4e34-b995-f58aac5981a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb9825d-40f7-4484-867b-35c4df1f5f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2c958d-d7eb-477f-8fef-84d51b2975a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45f50ef4-a20f-4165-b1cf-a28b621242e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5eca08-9a94-4a34-8e89-76e46045babe",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d5681b-4103-40af-86cc-4fe4b1d4a509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0be559b-cda4-4573-980a-89873760a527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e02ba7b-a1ea-4f59-9910-23234da52532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9785c4fc-2a4c-482c-aee1-d172127d9f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b093b8ee-1852-47d2-beb4-2c173ed5c455",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3e5021-e388-49fd-bb54-9b0a2b4db881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6b679b-aa09-4b09-bc2c-e182798e614f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9fc1f7-725c-4c75-84b3-259048ea48b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e7ce205-4e48-446a-aa7e-ba9d30d74c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf392f6e-d691-41ba-850c-7e7d52054f42",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8beb8b2e-178d-45fc-a2be-22fb5f7c5e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc0201c-3e70-4990-9f34-3f0ea5970893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7620be-3876-406f-8640-fd155d71fb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "436b6696-0a80-49db-a94b-6b132c618996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0861211-2891-4bdb-8d52-9f989ad38433",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ec237d-0316-4b26-8de8-f7c7b18a968c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd44544-227b-43b3-a0a5-4295a87d88f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b38e64-9093-41d1-80f9-d78906234eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "738d71be-30eb-473a-98a5-3a1b42b155a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06393527-6e65-4470-a3bc-28e0627be447",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5c5551-7252-48b0-b104-0ece796a7ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8afc86b2-0f91-457a-8484-fa5caaf73fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734bd403-4502-4277-a35e-2ce816191e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eddcbad8-d5d3-4a18-bea3-1ccaf9b8a168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf561270-c7ab-4a2f-ba3d-f1d097b18eff",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0900b91c-561b-4ec6-80e1-0e9ef6b208cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a12ed6-2c9a-4f9a-a909-7c2c32850a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348021cf-4f56-4aff-9f95-fe9828492f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd60e207-91d3-4e91-a144-c07bdd5e5e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefc5fba-99ac-4fca-86ff-9c9ee52c5e55",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47226c6-4648-4c00-82c6-8070dc7b5874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6728976-655a-4c7f-8907-5e628d0c92b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74ba276-d5de-4a14-9a37-9dbb1a703a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8680e4-da8b-4a5a-8d14-d482eb3bf8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0a7c22-ef57-4eb7-b51f-fb3cb34923a3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8db4d4-f358-4e37-92d0-9c685b51199f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28112798-2220-4b74-8561-95508c2d3f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a69763-7fd9-4e45-937d-226ee99667f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49a6342e-2269-4b8d-b16b-4c7310924bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc1da77-8385-461e-bb05-8a9e31dc4e52",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f39ded3-097d-48c9-b085-c342d19f265b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9468ff94-82dd-4954-addd-da69367dbfbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64e6b06-992b-468e-b52c-dec2af9c8ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4089e2d5-8270-4fa8-9755-d4081b79a62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65c2aa0-1f6c-452a-9f43-bdc08bd065c1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8146093-91f5-4763-b47e-d74e339edafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a7ab95-ab69-44e6-846f-7c12f8e4cd75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005ce2ae-4608-4955-8877-b08f963b5d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26dfc201-cd66-4567-bf39-061f02063a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba43539-ad1a-413a-8bdb-24b29b57a53c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b86baf6-c285-4ff4-849e-93154e85a714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c41ac7-a979-4569-b2dc-339b0223d6b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03da9012-d084-4fd8-8f5c-b18dfcb52085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45560b46-e8e6-4c35-bd09-5f7ad5b6736c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc92f4f6-14b2-4213-be7a-4760e9148af6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75278e05-41a3-4291-945f-9c1e916b7756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866fd209-f2a8-469e-921e-5f9bfc3a7882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fdbfcc-d650-4005-9a0e-6f3d82dc830c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b609fcf-6b55-4cbc-8771-17d70e1e81f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d16e18-fcec-4b5a-b24e-7ab9978e2c0d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b754f1-4bcb-4b51-aead-86cf763419a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273e729d-2333-4f0f-9f1c-cddad58a0730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b39ff9c-d45a-41ec-b03d-7db3fc3940f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92b97c84-155c-45d6-8a0f-a2da55bcf8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08757c41-0e6d-4646-b6ce-fd6d72fa9fb1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5399348-2308-454c-8b4d-b1b9efa0dde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00dbf7e4-a328-4857-bab8-7afa95fad2aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00b24bf-2386-42d6-aebc-062123905d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6fa5f8-76ea-4a99-9cbd-fb8ec751748c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c4c5a0-f0e2-401b-b5e4-c0f6ce4b47e2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b71bc2-9d17-4f7e-b943-b9b7bfa5cc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd9af59-9028-43da-a30e-e7299d987801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f732ca61-8622-40c7-b182-afd33a5da7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cad1b24d-c6b9-40d6-a0dc-459eddc986b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7828a19-fa57-4236-ab7a-21702c98d65b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fc108a-e5b2-47ac-8c15-bfd7377ca7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b63b7c-a39f-4466-b044-9c4460186be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a848c86c-03b2-4c52-bb95-305b046240f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "005bdfa7-ce0a-4d60-9bb5-6b99aae7c6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42bc07c-dd90-4ef6-837a-47b53f2b4d26",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f1bc65-61fc-4d0f-9bd0-6eb8b7a721de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c753a587-e8fb-41d0-be40-be0742ca174b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5e8391-cdf9-4fbf-b650-d6505fb6488d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20bbaf64-ec8a-45b3-a7ae-2cdc87ac0147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c246980e-f92a-49cb-86b2-21d47377d30f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1cc8675-88a3-4ab7-b965-19120d10eea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c00860a-a4ee-4501-b1b9-32b1204055ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6b65cc-0a17-4617-aa59-d9c5fd582d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5d4d57-0a24-4729-8e53-9c39e3fdd5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3a251a-cbbf-4557-b9a6-a7dcf987c1f7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce4215f-bfc4-462f-8aa4-782375dbc3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb3b635-bff5-4c0e-8f2a-4cb251d799c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacaa932-2712-4e94-9419-b45efeb7f4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "086ec3f2-8a04-4685-bb95-725aca4ae11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e3abbe-79f2-46ee-bf9d-0e0a0109473e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76667133-eaa9-4b2f-b8eb-9094e14ada96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2196da9-86c5-4231-a005-c8f79f019b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b6a48e-ab34-4e3b-b28e-a1fda4c51a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12bc1f08-ccb8-4bd2-9174-57e5b6548534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd173f2-126a-44ea-b780-648627750724",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb9efdf-8308-4d34-9565-03950e090de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc08651f-dcb5-496c-bdf3-e1ec8e810a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de31aff0-165f-4219-8296-793e03a42dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a22d92-4491-45ef-83b8-b51800f39c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e92120a-ad2d-4e65-9ce4-1a5fd577d977",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a21a60-599a-4c20-91b1-fae0ea5f1aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb53ee0-1f51-4def-b153-bae5d1509123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac85d049-2abf-445b-82a8-84489d4abdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ab9dd5-0a2f-4fc7-bc63-638706eb9ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7860c1-b1c9-49bb-b027-171dda08ab86",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e787475-aa80-4c4d-830e-9f88b7350074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e098af14-edae-4409-8278-db6a2fce7e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b3b7b9-fd2d-48a1-9ef6-2dae2b321fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "14587e32-5657-40f4-92b2-c99bf267e69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358da345-050f-4de5-bae3-0bbcab862930",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6c46cd-a7fa-4a8b-8e41-79cd97d05e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854a6a10-7f1a-48f0-b6e2-ac44830a49e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f733f43-e117-4356-b738-72ab8eb5b0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "33bb2d7c-31b7-4715-bc9b-96453f6b74b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d394004f-bbbe-4530-909c-75405d59065a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa12edb-8dff-43a0-875c-8aba93e90c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9352c16-4cb0-423b-b6a4-50aa87d7d287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a092e9-86cc-42cd-8633-0e4eb5184c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c290f170-74f2-4990-a901-767f26ae76fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af642ca-5292-4666-9ffb-5ede5a73093d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62671dbd-2a18-4920-a3f2-bb25f1d810de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cac398fa-9756-450a-9b74-237b13bd9488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc275fe4-f747-485d-b9ab-93365a7ca698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "258805a2-3a64-476a-a367-001a6f6289bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b438785-199e-4a51-9b5a-9f0a608cbe9a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90bd1f0c-d74d-4ace-924d-01efa8d2fe55",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bbbe35-f0bc-44c3-96d7-59ad27e01ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83bf3fb7-f422-47ac-8ffe-707651922dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350effb0-21c2-4a33-9f21-6ddfb332168a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af1b26e7-5e72-4167-bbdc-2f16933ddf1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcd2ae03-a70a-4016-bc4b-34cb745dd035",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a618bb70-cce2-431b-8779-c666020d5c0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc21aecf-6c3e-45bb-8b52-29e953a8bea9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83fa6998-f429-4519-9186-aecd92636aba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e520f7d8-9ef6-4dda-a5d8-99c5330b95e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78810113-b239-41ff-afb4-e100054ab927"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "17716ddb-2220-463a-b61f-0caf0cec34ff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4ec7882a-de93-4dab-a7d3-1c0362777c79"
                }
              }
            ]
          },
          {
            "id": "03c1b599-fbd2-4801-8ff0-31bf27bb47e0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "173da979-2a0b-4f68-b376-a1c74f9524b1",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "424c4d96-132e-4c3f-b5ac-80ec5a661946",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796ef6d0-88a1-431b-ada3-a2e17e56a56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1fa2b8d7-5fa5-4bb8-8396-00ad91dd4df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b85f60d-36aa-42c4-a276-cbfae4bf4ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d00e1e5-e541-44a4-8de2-46afe43c3abc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dc6abaa8-b59a-4145-acae-0bd9bc216817",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5790b40f-d089-47c7-b3c8-b4617b4b8df9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71f5938b-c4f4-4fd4-8fc7-f320b5536d34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4f59696-67b9-4f5e-a457-559f323a8aef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c28ffe46-d483-4ffa-930a-fd11f8e3b362"
                    }
                  }
                ]
              },
              {
                "id": "6b93f50b-ec5a-4b1f-a803-e8b3c5d30e01",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3badae8b-4e80-433f-8c1d-f8ac9f2e65be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39644add-0752-434b-bf15-73e814e327fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3db1f569-08d8-416f-9971-1061bd1286d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b475de11-642a-48b7-b0c8-ad72f9c494cf"
                    }
                  }
                ]
              },
              {
                "id": "37de446c-2bf1-4b13-a087-90025b361c9e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b052982-d4f4-4fad-b88d-be8e8116516e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c763184d-6efb-41d0-8c89-2c05caf9195e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af87137f-6165-4b23-80e6-41c5f474daa3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "200e50f1-6fa5-4fe1-a22b-02ed2d01124a"
                    }
                  }
                ]
              },
              {
                "id": "a9995b3d-a019-4462-9a00-702d034a7898",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47985be8-925a-4929-826e-e839fd401263",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb729eca-9e62-475c-afbf-33021caa3e06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b19a2599-4488-4c11-9e4f-87f91df9714d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0476edc5-8dbe-44ed-86c0-5172a6948884"
                    }
                  }
                ]
              },
              {
                "id": "0dc963d8-7556-4e52-a9fe-cef6c7fae88d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b88e5a7-7d6d-428f-97e7-71844447ab7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ba6635b-aee4-4bbb-ae3c-d94eb2128521"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "467ac8da-d922-40fe-9359-c7aa7ee0601f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0beb7837-f33b-439a-aa58-98641ed176c3"
                    }
                  }
                ]
              },
              {
                "id": "b0c07ab9-5709-4026-9c96-29f01f05d88d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cf14570-1e21-4c59-8311-439acba4bc01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d91fa85c-fa5a-4196-92d3-df1a74f50e3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41bc9953-d48d-4dbc-b4dc-d5bd12ce0faf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0cb8f03b-7c6e-42a8-a009-879c4505133c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b10696ab-e307-4a29-aa43-dee39694dd08",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3e5d797c-48a5-497f-8769-82b0b119e444"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f956316e-5fce-4979-a803-b2e203c12354",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "221d6b37-9e14-4384-924b-7cea5e7d73c7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "442db919-8eed-479c-b7a7-e550560c4769",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2e8a5e41-1477-496a-b377-e47e6dce64db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7750d928-ffa8-4e52-9589-b90baabc62b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55330342-5991-4d12-9a4d-a4c0ff5ded67"
            }
          }
        ]
      },
      {
        "id": "63310bc6-b31f-40d0-8d58-16ede0113ac8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c9d44ab3-94da-4ba8-aba2-b3fc859e0241",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a74b6098-ed31-4a32-865b-c1fb7f07c79f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "09a3ca90-623d-4a2e-9f11-d0fb7e9073bc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef38bdef-e9bc-4615-bfe7-521ebe4b1a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae15fd1-c1b3-4a35-a0ea-342396806283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b03995-6a22-4379-b843-85d535caf5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b57b89-899a-45c0-ae0d-a99abe3a8927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af04ed79-9f0b-4c5c-b9b5-37c1e9974545",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b896ee1a-8c5f-4a9d-b6ef-f4a77b09c822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003c35b6-e417-42db-8c6f-7af9444a98a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c038f07-1676-4d3d-9641-e97bd1dc3031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b651eba-540d-4bf2-9118-21119dc26806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d520c06c-4db2-4a2e-b7d7-6330c9826fec",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12e551f-2696-49e4-942a-7d68fc0c0257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9e4651-5ad5-498c-b635-2d32e7ab6707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b533e1-46a7-49ac-8275-5183b19b01d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeaa2ece-fc4d-42a9-8b22-af8123e6ac04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ba7212-1735-40bb-b0bd-6db9c741d6a4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc088df9-a6b0-4ff1-a13b-184b788ce4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472470d0-62f9-4617-9aa5-eae8b3ac0ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297cef22-09c5-4d15-8421-27196bec0f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdf1487-eb14-4943-a88d-f18f87109adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baccfafb-78a6-4da8-86a8-5314169e7499",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744cfcfb-527b-411e-a3a0-2b2f2b8d5f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83cd1ee1-a097-4b14-b42e-ecb12401719a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c8871a-e79b-4baf-8bb6-98f3f7aa0cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36431c6c-909f-4fb9-90ad-213e48d3a4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56246609-a194-4bb6-ac73-6bf90cd89830",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d708914-4d99-4a78-a5e0-fa3f2df2f6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5abc2a6d-cf23-4cff-9354-f538af5aeed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff32a567-103d-4c26-904f-9573b20f72b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea063407-cda2-41f7-93ef-4d62966b4387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7cbb202-1884-4983-b39c-c49d0c66fb3f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8a44f9-9c32-4d3b-8980-2f719288d574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed2a36e0-b5e5-4d84-a13d-200f8d513e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feea1914-1f41-48b9-afa5-67c2e713b4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9b126a-eb22-47e5-83be-5bfb6203a668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef12147-0d70-422d-9ce9-50e797121542",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fc0730-32f7-49c3-b06d-0336fea731f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3809724c-e372-4a00-b750-598253446734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91773363-bdd2-4a7c-8ba0-af7aa8da5940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0df3d08d-1c3a-43ca-a688-1522267ba523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07414bdd-203f-4f64-bf8d-23410c8ed2c8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630838e9-665f-41e8-8c2d-3a62d3960123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f9cf8d-b1e8-48e7-b279-a16153c3e6d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64ec3c8-5d14-4d0c-bddc-aefc1b67c822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaaa35c8-04d7-41e0-b786-8258e24551f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef211c5d-baae-40da-8686-d43d0b6d5497",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192b8b21-6260-46b0-bfc0-0e957747cf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3010763b-1495-4705-a3d0-72bb6ce38bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6b2b9e-636f-4ae9-a2d0-4627312ca4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "255d773d-c9b9-48d0-a1ae-4f4dbf0057e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d409993f-9912-4b61-9cab-cd6a8b6c09dd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60596694-aff7-4368-8abb-61d8a7e87d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93da9ec-b8b6-4a47-9bc7-6e5c26016758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98572c68-134d-4ad8-bb65-38b0ae20c222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "42f8519c-d7b9-414e-92b1-62df49d41c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d81cd7-7557-4d5d-9f74-772ef18d2999",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739a045d-10b9-4470-b1ad-b0d8330f075b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb7fdb3-3981-418a-a80a-24e0a9ebac9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0f7294-153c-4575-8d5a-e0c325d9b213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b4212713-0aaf-4962-88e0-bba0b2d1602e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ea5378-aa02-4418-98e0-065e36959502",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60665a9a-095a-4865-b413-29173713d05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794d2501-9356-43ea-b62e-c2e39a5442c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a89d75-f3e8-45bc-9bb5-7c6ebcde2add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "15d186c9-d90e-4e3e-9826-bc46cb402e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0eb8bf-0ab8-4e7b-916f-605aa64c38a6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44efb8e6-96da-419b-91e9-44fdf82db8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c6e0ca0-3a99-453b-a9a5-a03dd8440634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f3ee6a-df9f-4e02-bc6a-7a1b16e45da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "39130b6b-e7e9-4bb1-8b48-da7b32055d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17686cf-2d18-41fe-8843-314d0784b0f6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6848564b-6961-4739-bc9e-e56171f8ea8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3962c757-6189-4115-817a-e31dff2dc5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9a7521-52ee-42ce-aef8-b59990380d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec0a849-febf-4097-ac0a-0d68931bbeea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bacc6f-fb71-4fcb-98ff-05d49f577f2a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c8472f-b457-4cec-9c76-f4b2229599a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80873b1-0d75-4707-8ec2-2c663d86e90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d59fb7-5a5d-4696-a2a5-474f206d64b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f86fb26-86e8-45e8-8e1d-d7f8d8a387d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b42508-3733-430d-8639-40e1c67741f1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4e704c-4543-4759-87cd-f4ce5b7aba5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086770e9-5942-4ff3-9b29-40ffe624dedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8321320-6761-4f2a-aee5-2e198bced4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "42f4471f-2caf-4199-bea6-2b2baec893e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b15e6c-63de-4da3-ad1a-8974c5b7029c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c259b6f-ddcb-474b-b58d-20bc202538a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d568b3-1c14-464b-9e52-6be657325b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a084d6d8-4093-43f1-b8ef-a84cea94569c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "94c5cf01-e42a-47fe-badf-3fc5f9eed9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a06b7c1-fd6c-428d-a03e-b8e3b12c730f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fe94bf-4b65-4252-a352-d43bb2526d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1364e4b6-e965-466d-a356-9fb8f1000904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd93554-4a43-4adf-ba4a-8c3916b42113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "006fa96f-8d97-488c-a9a3-2f5ccd6e9f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ef37d8-6b4a-483a-9277-2e694438ea60",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17a09de-524d-4d64-b4bd-4a4c122716ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36cc8182-2673-4838-81cd-0f66266fc86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a0ecfb-238b-4fef-9e1e-5fb79c98b02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b15161fb-f1a8-4877-aff8-382c9835fe42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16955f9-84f5-40dd-853a-04e3a4912048",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a21f78-07a0-4215-9a91-cd516f06d41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca9b228-83a9-471a-89c1-e9744cf31f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39884c60-4c81-4cd5-9c95-64dace62ef2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75320737-9d96-4cb5-8bab-5a8ca215bcc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac23a3e8-0d3e-43c2-85ae-7db808a31dac",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd895402-3de2-4cb1-91d8-a9d7d21c3d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402c7007-c9cd-4e6f-a749-829b8f000125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ef995d-b913-4aa7-b1ea-20c1d58c5a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c57d231-6feb-4ba9-9705-5070fa4ecd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5baed4d-da54-42b0-942b-2f8d2fa9557b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc712fdf-ef5e-42ed-89cc-7124e45d81ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "363b7e18-60b2-4eed-b3ef-8f0f7a8c9908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6321aae6-716b-4f4e-abde-b4e0331f942c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bccf8efc-c611-489f-9b74-6fc9f7635679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ffc290-90fb-4473-a77d-806e9aec8b8c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cfbe28-f1b9-4edf-994f-b02cb3b2d614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a33306fc-edcf-496a-b00a-6b5bc0391f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901da6d9-f7f7-4e6b-ae5c-5430c2872cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbc88e5-31a4-4c3f-8c62-f066e9328355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27b1634-12b0-4a0e-b410-9705adee9e89",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7e47eb-2439-49c0-b817-79ee2981dd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1334e91-a8c5-4cee-b115-d9d56e16b645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f927018b-ff96-49c7-a983-caf6224ec6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a75163-6539-4c2d-91e0-95b6528bcf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360e5ae6-78c5-4b8b-b4da-0cdb3ef20aba",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7cfa03-9c30-4e58-826e-c904000665ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d200f8-46d4-4fc5-8e7d-3fccad28fe82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd9bff1-5d1d-4224-b027-a927c18e3cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b900038-9d11-4c7a-b112-db33c3fa4083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c11542-d62d-408d-ac8a-244cfb777291",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c1c1ad-ecc8-4acf-b9df-dbe6cbc080f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bb0654-ce04-492c-af49-e82dcfcd2c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8dcc9e-8bac-44d9-af47-a37367eb9274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7ef3e7-f1b0-4b63-b97e-53cb45997828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d991b29e-16d9-4467-be28-1b0f7eeaf518",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0fb053-5456-43f2-bdf6-12b2c2b1154c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c75a55f-868b-4dd5-8e8a-953866a65bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42c0d4a-5486-41a5-8e15-3cfcc7c020e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2903de49-72c6-41ae-88d4-cb476b5c7f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4cd1af7-afb4-4667-932d-21ad16f216b7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1858b74c-73fa-4651-a726-8af1fc1e2bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4486c4e-639f-49ec-8a5b-4b1225e81623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8e5eb6-0121-4bbf-8458-3da275f00fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e16a5bcd-fe7a-45bd-94b2-4c1bae0b294c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e53934b-0653-4b36-86f2-25478f012b5c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b64151-cf97-450e-93ee-13dda4c7b2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6375e502-ceaa-4450-841a-d48e629d8cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca375cb1-a97f-4957-8148-c12d4d92113c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4bb061b-3807-41ff-b245-1b10286f4349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9263ef1-a0cf-4da4-8a44-e4ab9084516d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e77876b-46eb-4e85-8122-bd5ff79b9fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99473c6-f6f4-4df4-9428-26289213a43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d096988a-fd17-4b63-9491-6a54cdb374da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fcd343f-e7f1-4c8b-9ea6-c09389687a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f05434-d5f8-44b9-b56c-2356d1f00b95",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4e4cfd-b863-46cf-a5f3-d098891966d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c176e3b-e796-48db-9c5a-c22e0386e262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552bab35-c5de-4f0b-93c4-c11c4ba5d4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50f61139-0e43-4ca3-ae7c-5ba7ae2f16ea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7ded11bf-3773-480c-9a34-7b7c61fcd5e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b96a40b-ec07-4f4e-b90e-08ae284ff932",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa4f775-27e5-4ec6-9fb7-ae06c4cb5bde",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "51ee774a-49e0-44f7-993f-da1bcddd5c08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828043a4-a522-458a-ab3e-418f385e72b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1516f4a8-4f7e-4673-b849-9f41ecd6c16f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1578a1a-2e04-4062-934c-3aef54402218",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ed086f4-12a3-4f6e-a936-31441f3a3599"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09ab978e-026a-4011-9798-c2fd0590d930",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71cac4f6-acbb-4e49-8c5f-5ae1c57e2e8a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba592e39-37e0-4831-acc6-632331ce5fe7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e1a5f2b4-f5b5-4df7-9d9b-90b98981131e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37b0f20e-fe74-42b7-9acc-7e36659d5074",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54f83dc9-8e39-447b-9d34-d583cc8662d0"
            }
          }
        ]
      },
      {
        "id": "ee672aa5-8dea-42d6-9dd6-3892d6a3e918",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "85388815-335f-4fb2-aa09-14a0ddceb44c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb7217dc-dcf6-473e-abfa-16eb152d8dc6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9021dbe4-5826-4e9e-82ff-7d244a48b4a8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48de7506-5c92-4bc1-87a6-3cf0c4ed9c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a28873-dba7-40c5-b814-b8cc910b5a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b4aa42-6cad-4e7e-bda5-0e5f0b0919c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "50823521-7b6e-4177-baae-5e52ee9107cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a93450a-ca1b-4a93-b9c0-8e058bb78cbc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a95de8-824a-4ebe-9431-3de777976d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08af03a9-221c-480c-ab31-f6f1aa29b61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da313a5f-3c6c-47db-a653-0ed97787eb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d48862d5-ced2-4dd9-adc9-f61c82969eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbed79e-2d88-4a39-894f-b226a6990186",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6b5909-958d-4455-b585-5cc99c271b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d89b25f-9ae3-4864-b9e2-8fc68f6cbbbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a13b2f0-4308-4d42-a640-deb317e06dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "204e3a3e-d88a-484d-a78b-daeea38d34d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df5cfb8-bdc4-4e33-8b23-f87ee3ba6ab6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f703bec-3d80-4629-be8a-738ab8387d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5edd9d-f0be-4437-a6e2-b30375f56f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a44dc3-263f-4904-add6-b9a57f60c48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eff6c3f-b5f7-491e-8e84-22326fbf2480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4568f24d-d481-4eae-bbdc-c9a80c373514",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a9480b-df44-4927-b8c1-d5ce526e4198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "effbbbcd-ab31-4d6e-9859-5f6c4407e563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66c4257-5031-48ee-a45c-bd4f66828ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9621c7-f4f5-4f3d-aee2-b5ce89a57441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2755e833-513b-41e9-b1c9-edc9689f049a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef9dbbf-4a64-4d23-9a3f-aabf40c8f9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4ba3fb-6ca2-4c30-8612-912ce3be5694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b27a569c-7379-4b85-a981-63319914d60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97b5ea8b-5d98-47f9-9793-a1bea014549b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7f6de2-c2b9-492b-a450-dcdda8f137ea",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd8f35e-e6a3-45b5-bfb9-dce3d22c563b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03fbca95-d28e-4e2a-917f-df4669961a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd6a343-fb61-4d0e-9d7f-9eb20197f773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "707eacd8-8c8c-4102-92db-dbbe45df651b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc41414-caef-4b7c-9f34-2ee1daab9581",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d69abad-fb8d-4507-ba76-8871f1969b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ff6f54-961c-4d9c-83f8-a036244409b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfcb0a8-743a-4060-9d4e-17e8d0e8de37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce020a7-54b2-4ed4-b82f-603caeb1d049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad106b8-a0ea-405d-bd50-7620d2a5da79",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24bc7b42-a30f-44dc-8995-62f5c41021dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e41278-50da-4109-81ed-6c02ab110869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb501f62-1f74-4b49-8bc0-70be6c9b8c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf181c1-9ffd-46c4-82dd-272881b8d636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f867b72-ffcb-4bef-9d4c-1d26366a7a9f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957b05b0-744f-4857-9060-befe72a772a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53ac06d-9e64-4770-a02e-8a39434dc6b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3466a74-af16-44f6-a6fd-e48a40f45aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "705b8cad-885e-4412-9cd5-0e358fb8f0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8bf7f9-dfba-4731-bb58-2f4da5b01b16",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15982cbe-564d-4e10-baef-6a444ec3574e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b5c5e3a-fc4b-4f81-bb65-9901659e2df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ab68b8-f210-4e9d-9288-a7d80e2d9d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea6da5d-fd56-4d49-9740-0aa50808d8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6045f470-3ce3-4ee8-a79e-37c57ca81612",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3e8d5d-8379-4f71-b5e1-9353fcf91164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b54257-135b-44fb-bdc1-de3ba03e71ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04923dd7-86fe-4103-a8be-78b2bbe13780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cff29c30-7796-4c60-b8fc-05677eca94d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6084bff2-b0f6-4b03-ab44-a0747a9b8d69",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ef0805-3b00-4029-ab79-abbcd8416592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb24bfdc-e010-46fa-8141-5e18b7fc2fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986d7039-32a9-466a-922d-9b40118cbc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2acae6f-b1c7-47ef-bd37-88598aee69ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d91f67-de10-46a6-b895-0c5388136582",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adeecda-b414-44ec-9a60-886c0df6988b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123400f4-efa1-4d95-80d4-02aedd5311f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed785c2-c275-4c0f-9157-b9a3b4a25563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "56711f61-ca6c-43f2-a003-7c0359484289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6953c59a-b12f-4b4e-a8fb-d041e6209ce1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c8f415-684a-41f2-9bfe-40a9242849fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263eb63c-17d5-4d74-b33e-e2fdfbbb3ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9bcf499-5cc7-4e4f-9ecc-a8fc3eeb687a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3b6cac-0cbf-426c-aad2-7044994b1187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c833aefc-cb69-4375-8875-7b2034b722e7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5568efa-1873-444a-a3ab-ffb169818388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9754f7-3f57-4001-bcfd-4ab7710bc701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b8518e-aae8-49fb-9d43-ffdc7d1f68aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb0b30d-f900-4fd3-8a46-88945c5b1273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bf6f0a-d650-4638-a720-d41ca36383d8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e69e07-93b4-4971-bcd0-1f9a169c0566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abac653e-5586-449c-881b-138c0ab05a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88c4faf-56bc-4df2-a688-add6bba170fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c094470d-fb8a-44a4-a32e-be1ff92e7467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea51935-72dc-498b-a8c9-ed12772c38a4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126cb03b-08fc-4130-b01c-106930ab686a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381e71e0-6d05-41b7-b184-20fe43575d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc07dae-07be-4ea7-8759-2b953d95d5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cda0a37-b6f0-4494-b64f-d8e9a96d2f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f5ee3e-abcc-40c0-9162-3ebdee5778ef",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cacb0ae-f339-48c1-82d1-737c1478a030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c969388c-5aae-4a8b-b03d-c9c19ed8aebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5025ad-00e5-465a-a507-f40e6859140a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "339a220a-24dc-477b-bb02-e679d04be180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd12209-5564-4452-ae7c-4dbf752660ff",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74740f2c-9540-4eaf-b799-b9ede6682e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bbf643-c070-4cfa-8da6-fb6c4c4ab483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b676fe43-c994-4212-89ce-03b77dc0b18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a3ef4b-db4e-4952-85b0-67acdeeba537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27cf7f4-e174-4838-8f28-89736cabca63",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5d8b50-469f-41e2-b966-e107e16b54b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3033719e-944e-4bb8-ba19-ef86999ec9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66cd46d6-4fbe-43f4-985f-e7a45a262531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f97c9c10-16bc-48fd-9aba-93556aab98d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb1fdd0-7d90-45fb-8426-31efc60d7d36",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6474217a-1703-479d-b1ac-b5c788bf8f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b721e37b-4487-4491-97b0-f6d337942f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6212a5bd-b921-4ea6-a8c6-bd7810013423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "523e2ade-0008-4116-8639-4c444076dac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da090f63-e00f-49cd-b17f-a73feb378f05",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0c15b2-6adc-424c-b43d-a31b45af2302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a92583-bb6e-4f16-8d6f-6edece2f690f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab6b700-09c2-4150-8725-340a81e24398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32b7178f-9274-48c2-9cc3-eb2f4a715c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b670672f-f592-4d1b-b1cb-205825d8529b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7198e06-3d4a-46b0-a7e7-427ac65cb7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9544712-be56-4deb-a6ff-52107b9724db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbed25d-7f49-4fa7-b425-bec49c66ef7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1a763f-0dca-4e4f-9542-d0054c36fcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d76619-b9dd-479d-86eb-c8b5fd9e3be6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e025570-1603-409e-8dbc-2bb28e1d7bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3593e25-67f2-49d0-9d7d-75e6cf3fa8c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bee6f5-c923-4ada-8f25-02ddde2999b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b88f95fb-970c-421a-9748-9add47e71fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227caa4e-e862-41f0-93b2-f2b269455744",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673946e7-094a-42ca-9a4a-03ba57549e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209c9cab-d4ac-47fb-8a3f-ada1fb9b0fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb01a2f-49bc-445d-a03b-05de0f8b81fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a33cc31-017c-426d-b583-6e761bd6b80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551d6bfb-519e-4870-bacf-54acf2a9e0ad",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d740b3-f004-48f6-9dc6-881861ee3fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a31ae8-689d-43bd-b71b-75d30f245cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09787862-fa70-4bb8-87ed-275a00ff5bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2feaed1f-454a-4e57-8e47-33aa4f2c5e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a831434-f216-4791-ab11-3fc8dbda8505",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084bc695-a6db-47fd-891d-b502147f2317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f631e7af-66ca-436f-825c-1a0fa09db10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28951b1-73cb-401c-a509-4194303ecd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1cccd5f-bf1f-438e-8ce4-4ca9001931e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de02319-e59a-4a1a-971c-cad03a2d9bb0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57dfb5c9-13fe-4b37-9715-ac63748ef6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aace259f-4222-40c4-bde3-d8d5dedeab29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a920ae94-70cd-4419-a77c-4220ed79cf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86cef651-4a62-4c0e-9d45-fb6a0d4690ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362a6622-17d7-4794-8606-a787ee434526",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77f14f7-2b95-42c6-a0ff-399e6149854d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7472abb6-17bf-4784-b305-8defc24a25b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ec81cd-7d90-4e33-a216-fb2afcd10178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "852f64e1-e86a-4509-b8ba-6a75f866e91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f21d60d-40cd-4504-8d80-82b91763a31d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc84ffe-542b-4681-a5fd-c250f9235bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1076fd33-8752-48ab-8d6a-11fe18bd854e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7411053-84b3-451e-a612-21ef02697cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d99e564-416e-4d0f-8975-f9c554ead8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cc9035-ec21-4f59-9b44-4a2fc6a31cda",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09dfcee-7a9f-4094-b46e-3cffc97ba7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6914574c-4a30-40ec-9c28-e9d8d9b8f260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c65a675-3312-464e-b026-21106eebd478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d11cced2-64ec-4b8a-a79a-150e61b40327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b159ffb-d048-4a0a-9a02-7ba20619a6d0",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697da548-c117-47e7-95dc-49fc370a7d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32886a2e-8f66-4b18-9eaa-60017e28dc14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2d8f7c-2d2a-438a-a043-2e47c178f949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "482e0cdb-9590-40ac-a40f-69d02a817631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f4bdfd-cae8-4d5d-bd5a-f9d0e28c9862",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17002e23-cfe7-4c2e-9d81-4d0c7d0088e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1469e106-abfa-4943-b498-f19de88fe920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674d03d8-a829-47fd-ab02-7fc7a971c1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f15d01-4f12-492f-9672-00e3e4de9763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95579cc3-bf46-4548-8dc2-9372104fab0a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0711ec-1cdc-45ed-b557-9b01558a5218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc882989-0217-418a-b603-21422837472b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2c8a9f-4d17-48cf-aed5-2f144aa86eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b65636-b9e3-4df8-8df1-76d68f2642ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034f1a40-4029-402e-82a8-a49a5c2a186c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8ce21e-fe07-469e-9c10-7069590d0d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f86833d4-c828-4474-8f0f-9c59f1c6c964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35dfc24-6930-4cbe-937c-8f5221d81459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f704083-184e-459f-8a83-050d452fd54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebd0eae-791b-4f5a-ab8c-a6f13f0f3b75",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6c9d3d-b38c-4297-b089-f829b96e8c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c59b8a-25bf-4add-be2a-00c09c9bbf9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa450af7-42bc-4a4d-901f-f086a5917e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cab76457-cf60-4cdc-895e-6d098a85838e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a722b26a-d066-44c0-95ca-4c3f470e9c79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96d2b5fe-a4ce-4248-9ecc-0201a9eeefeb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63404340-8bb5-4e30-8631-c0f15d234f0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1e4e96-81e4-4dc3-bb46-62c1947ec14a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be6c26c-0ecb-4a1b-b411-91857c2ef555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "213d91cf-5e7a-49d6-a34e-3893552a6701"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebed99fc-d72c-4a8b-9f81-f1af2ed19d51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f648b22-c37d-4f89-bf35-d7d03d9a962d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfd7ca9a-7a4a-4fa8-9902-04af4c6c6563",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b740d2e-729a-4a5f-80f5-4cf4fb226a52"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3841b9ca-65d4-40ea-8bc5-c32cc9711e04",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a2aa57db-f6c8-418d-9183-6004907d988e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "780804b7-6259-4cab-9b44-515c995d01ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "921833d7-ea38-48fd-aa38-fc84e83b51a5"
            }
          }
        ]
      },
      {
        "id": "d8370ad6-d674-451c-a1cf-8f3fc7cc9639",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d051d3ce-4534-4a28-8fa7-9b33046d73fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3e096ad-32d2-4bd4-9169-824da454370b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "35486c3b-e027-470d-81ab-41d8aea21737",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bddfd7-979f-4aa7-8b7b-0c16ad226acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11844176-8282-40e6-8cda-e743e00f0bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16040983-363d-4013-81a5-dd5763a21c97",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3681ccdd-cf87-4795-972e-256a36312333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13dade16-f260-4e0e-a27d-555af6916e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214e528b-8054-424f-893f-994038a4205d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58f66cc-ba0e-4b05-8a59-d4770d4fa31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a5a102-adab-4d5b-8948-8a941f98b1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b08142-8374-4f13-af14-776cf3328a0a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbdad88-6ae8-46d6-86a4-25c6a78684fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e285b715-9f58-4c61-898a-ae016af1e65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3452201b-1633-47c5-bc5c-8c5666412ba0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99699218-fbac-4203-baa2-1d401803a439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15db9e4e-b9ed-43a5-963a-d8581db48e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c995ce43-f18f-4f44-a4aa-28d25c0414e6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea77159-3e24-4b62-8d4e-bde078f1b71d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab0d3ff9-5991-40db-ba50-7272e46613a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393df292-4cd1-4406-9130-491bf2399c66",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d191a7-2df6-4b9b-b1c4-4209cecf0ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8975f91b-b5ec-4917-b255-4e7d8dcd042c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb687f9d-9dac-4fda-9b2e-d70531154d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742fd8b1-6d46-407f-bdec-70b376b55e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85a8c35-4978-47c6-8c9d-93635ff8e33f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5a38a8-8c69-4a30-a3cf-7870287fa09a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab934cf2-3f60-4059-8bae-1b0f2a3a14db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "597a3d8b-0013-4747-8aea-ee9745c479cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626d48b9-89ca-433a-b433-5f60276ea404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110fdbed-d6be-4a25-80d7-a300d19fe8ce",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70191911-7fad-47a4-83f1-6f91d546136a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6833f8c7-1db3-4e84-bf99-a3b54cbafc29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2346b787-29af-4d8f-ab23-2f58add92b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ff8be1-0ff1-4245-964d-47374636fe77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521410e1-7ab7-4f61-9b30-cb76173b7867",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713b4d84-cfbc-47a0-a95f-f2c72b832c82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "283c5615-6912-45f0-b58f-93b5e61fd59b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c803f879-9772-4f9d-9f15-a694acd1d436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88518b1-4cbb-48d6-a83e-4f62c39df6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dddaf69-d238-4708-bf11-becd88e141d6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7622d2-e9c8-4c7d-8dfe-8b6be26c504f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e546ef-74c7-433c-8c68-69c635fde116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225cdca5-5e46-4c0b-ac15-cf129cb51dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32c29b5-f370-4925-8d74-9773ea4884ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1e00ab-8e55-4a61-b81b-6683b61f7b04",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda226f0-2837-4337-9c8f-ff73c752e5ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53303b0f-9373-4afc-8ae8-dfa773101b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f1f5e8-f127-4480-b634-54d9b93fe77e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab859d4-de79-4680-9838-dd6d7529f337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b0dc55-726a-4c57-8ddd-9c4e26c67154",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fd6f05-b4cc-4306-b0a8-3c763a6cc034",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c47e277c-dcdd-4671-a7f0-0059786e87a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6ccbc4-021a-4a48-bbe7-8f76f04ea2cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2fb0b9-5cb4-4df1-8256-830549402342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940df88f-c1de-4ce2-9608-a2fdb9e2a6be",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b3e297-bfc0-4e9c-a179-085c741fbdc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f93705fb-e656-410b-8cad-170f05d2ab23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49872fa6-f026-4a07-942a-d8dd89317d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fb0d4b-b7f2-4120-a4b9-d61eff8f25e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f584a97-40a2-4b55-935b-2e64580d79b9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449371b2-7c87-40c7-b138-107dda654136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15b3e8fb-7ff0-4d3c-94d1-6a95db54fe22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d9f6ab-4904-4106-b6b1-7b5fef22eda9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb59ed9-5708-4f59-8094-7c65a66d8cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d74df5-a0fe-4e95-9bb9-958aab03ea56",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9620b1-a951-487c-88f0-3e740166e659",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68935124-5cad-4dd3-b891-c786337f0d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "108a4e34-a5e2-4bd5-9d2c-1ae3fcef3bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0624fcd-ce09-4ad3-bb4f-e5c63b1903ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedc63d9-4493-4940-a5b4-c83b47076cd1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c38641-74ea-41c5-bdee-9617c0059e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "694909cf-730a-41b8-b4ab-e9b0508d0cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3849fd4c-d4f8-4e62-9cd7-7344a2d84f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9bac08-fa29-4914-bb28-13c0c7075321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f64642-bb8a-4c22-a883-714eaa00c9aa",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df26542e-2fcc-49ea-940c-875f65bcdeb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ec6bc4-92c0-4906-8c0d-5442c433bdf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6054a389-ecbf-4bf2-a8c3-b04e84982513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9430079b-abf8-4000-a81c-6b16f6536b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5615b632-ca7d-4aa8-a614-97c62038320f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd32ae6-434b-4455-af55-582996159a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc672b9a-d6cc-494d-99e6-76a2aecab906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0de770-38c4-40fc-bde2-3b419b455a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b16251ec-369c-485a-8883-831c7b68b319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf1681b-99f4-4abc-a771-af52889c9d6d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae917ed-24be-4cf9-bbe9-6673613debd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91564b48-4586-4ed9-b491-18799a4bd70e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c042e1-63ff-4554-a7fd-22e3a30ea711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69d0d9a-0197-4417-9703-fe5b17afaed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176ec036-1fbc-48a8-a0e7-4a470c965180",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9438b19a-10b9-4513-bf68-274f253dfa5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7428346a-8656-4e23-9a4a-e82d37bd7a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209c08b4-3b54-483f-8738-24bcb7ac1336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77853bdb-e49b-42d4-ae27-67b7236573f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3249c51-82fa-42a0-914c-92b1aeabbf54",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144b44d5-5442-427e-b371-4435b2a84992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b4795c-1f5f-40f1-a3be-a347b61a320c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ac8766-e890-408f-bdcc-b2658037aa62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c27ee50-ecc8-4407-b5ec-741f146447a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf826c2-5210-4801-8e55-4966402b62b7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e15c1b-7b0e-4802-aedb-c8e0df3b791f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c8c134-69fa-4e20-bf38-13b46424149a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8050a3f2-8cf8-4d29-bf5c-5ee53d4c80e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59f3f5d-58c0-4abd-a863-3cbc4ecafc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0fb07a-f56c-4fea-b242-acac47a4a502",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e162eca4-5cc4-4396-944d-5cf7b1409eae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bd8fb84-99ff-42c8-b8fd-9c9017275eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2543d5cb-ce59-472c-89b0-e041034936e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3bb583f-dec0-4ee7-a352-68a879a20eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14100bd7-f403-45d3-945e-c730fcb49de5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4af050-628f-4e03-a497-d29311ed2c3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca686aa7-21c1-4edc-b5e9-1bf27cd41d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5c3612-608d-4114-8763-34b928b27ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7e7d7a-a871-4b99-a1a5-5400a5664b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c380c95c-af92-42ab-ac81-0248d1804361",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e407c58-1013-4c32-b5d5-e245c8435ccc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e38ceeb-71fd-44b1-9502-5eed7afba24f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362a6a75-c244-4006-aa55-ce246ddfcb9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c38b0a0-da60-4ecf-8ca2-a3a27ad999f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2703c509-ef5d-4359-a6b4-362867a0e704",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16ffcb0-f0a2-4feb-81ca-d64478bac283",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ccd4ed-feb0-4ffd-a728-82b60e4ded33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54369578-284b-435c-b084-1a96256eb098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865133b3-4a47-4ac8-ab89-60d62f5eb1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39e6816-4aea-4c95-951b-6b1104d1bdb6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a21e37c-c57a-4b6d-8423-7436019e0235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdab64c-3364-4caa-84ed-1043a491b279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3eee73-98b0-4331-998f-6d2835dc897c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d78ab71-3dc0-4a53-ab5d-5d5a49348f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d99da9-1505-43f4-88c2-33ea0894f15b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b20157-92af-419d-b292-1df101133627",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c217ac44-211b-4432-8475-a1c2f6bf00d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393fd0fd-deb0-49c5-ac3d-866fbeb3c438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce1378f-e5cc-46ab-84b8-31a464edc6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4954f8b9-2388-483e-b3f9-0dee0b28c08a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70da0e73-7ed1-432c-a982-a7591914f1a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ab92730-8fb8-49e6-a12c-d20dc28d2cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76ec4c7-d8d0-489c-bae5-211f47cd16c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8828f2f9-be61-4cab-84a8-16ceaf02c2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7f3227-9b0e-4413-8b6c-5604a4633d7c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f2a01b-4996-45b0-80fc-8e88aaf371be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2a8b272-68cb-4c0d-bb48-7ce4560ca1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78c3e5c-d7be-4d91-8c0b-b580cdec8203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c866c5-befe-461e-930d-28b70d8dd91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7703e9-3429-497e-b3f6-1ce5dfac62ab",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ab3daf-4038-4fc4-a166-e223f617b779",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb63375-9131-4e11-b147-fe831479e27e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d6a11b-b49d-4ade-b288-d0ed820297d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0cc48b3-cd10-4ba1-a08e-e8d2ce420fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9672d5a3-840b-40bb-9b09-d93fbed65994",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c421848-b537-45e1-9185-ae828ba88df4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a936e868-efef-4691-b771-60120461e34f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9249f302-245f-42c8-8373-0c9a6f3f9880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7bd473-c18b-48a6-99bf-01999acf1012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8bb624-f92f-4d84-8c97-69b6bb0fa24d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f33256-581a-48fc-a9ad-fa8f11c2b015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48359970-de2a-4e5a-804a-e3db7e09bb96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b46fe14-bf23-453e-b2d6-e4ba4bf93cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f4bdd3-35eb-4359-b0c2-bafe4aa9a4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79013af4-c8a3-47bd-bfab-d947a843c538",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9eb79cb-b1d9-400a-871e-e0a1cde1f7c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6730d71-ab2f-4d26-822e-1687310080ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd356a36-1883-4f2e-b2ea-6ffacf68d61e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040ce5e3-a26e-4149-98b7-a2412184efb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d3ec5d-3875-43e2-8f04-df349914649a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bca247-5623-4958-8867-40ab22723fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e930c2b0-e46c-48ac-b0e1-b737bc12c4f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd9ceb9-7ec7-4d51-9364-b7d36a60adc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d9d0663-4778-4511-b361-ad92ee30c29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19911a54-e467-4eca-9971-dd5ee5065463",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40dd232-5ced-46fa-8a96-e131c04a5d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c1f8ee-5d84-41a9-bef0-3706d32dde9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09d57e6-8364-4e79-af90-611e834e32d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc722d2-15a4-4179-9e94-4147d087213d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc6f823-232e-4e00-8025-28484157ac6a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481e269a-576a-40e2-b82d-ea134f00bf07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "762c7de9-2fa2-4579-8975-2e21d7ccb251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7deeb8fb-33e8-47c2-8fbb-115f2be98e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da8e317-2783-46ac-90c4-4dc289b3c803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0487d5-9e16-4db5-904e-b8110c39f263",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae15459-62e4-42f0-bb6d-51d041f2a3dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65f41ebf-54fa-4a48-9390-047f770fc3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f172ab-f26f-4226-9ded-d42c587c43e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bdf41a-7634-4a16-bf0a-594d80329ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b8fd11-d6aa-4ce0-b966-a2925457348a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b20aa6e-9021-49f4-8ba0-6dbc5522bfae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d5882b-be66-408e-8dec-075cd3629ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9178d46a-9dcc-4f76-9efa-2759a9e671d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea701604-c941-46b8-93a9-a55ede22fff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60be3df-dfb8-4c0b-9a9e-53d434df40fc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0599d46f-0f30-4dde-9076-0ef616e63925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "becf983e-dd15-445a-8878-f17019db437f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8624323-0242-4d18-8c38-63394d08bd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d95c205-c373-47e1-9f55-2a49d1008b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec71b893-3677-4c3a-b3e5-570452d89ccf",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f3cc9f-fe53-4059-a5d1-1d7149c569ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c3e04ce-c380-44f0-afba-0a4c87d206bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda5c968-574e-4118-a979-52009dcd343e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee80648b-d2e7-4abd-92ce-554e2ac77758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0cf767-69ae-429b-9204-c1fd778e3cb6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b648002-fb33-46b6-b75c-514d2164b2fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34da6208-89ca-4581-a2c1-b0b68e2de0f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a72357-7cd3-4e76-abf6-332985669407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04d4392-9b35-4f5a-ba2c-13fb86f937ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0852815-d6e6-4afc-a4df-5b36d634e2f5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe06d4c-2add-44b0-a37a-3bd8d1d72577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9e076b-e5e4-46d9-a69c-7a4b1eca73fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b366de-e514-4efc-83ce-6fc8574932ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b17d8ef-b3bf-4ab4-b084-649d4c617d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a99fcc7-35fb-44b1-a256-56512e83930b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c4fa9e-e6f8-41ca-92c0-75de1e3c8d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d9fcfd-1232-4262-9a58-7a8c688bffad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a123d7c3-3734-452a-9588-2f1e364c5a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443e7780-1c55-482e-9a19-2094d1a930f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e758ae-b77a-4f46-9b05-e9884b05e958",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f613eab-9bb6-464a-839b-e69d96ca32ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ea050c1-e683-4d25-8c67-257477aea683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0271c662-6b16-413a-a51f-07e9d371bdb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95896287-5f3e-4222-99f2-da584dc24f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31347098-a0bc-4e37-b574-9cea25052d38",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ccdb53-7662-472f-8099-5feab13b481d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a0159c-5778-4610-b8bd-2db7de570908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112ab496-1b22-416d-bdea-455cc8799509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b0070b9-ca17-4eb9-a596-ae46245c3cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b411fea-7045-4932-b1b6-18baa996965b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1ab86b-8f03-4c2d-b518-379a45ecb01a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04bdd070-5922-41b7-ad7f-8c37ab5e8dd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1c3268-4f1a-40f7-8b2f-076036df5708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ab794c-9298-4d7b-afce-af25bc6e3173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c35482c-bb2b-4159-88aa-b0d8663551f1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd938626-4901-49e9-98e3-f24fcca609d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "841c781c-28aa-42e5-a5bd-4ec0a2d3460a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8152d6-d9a3-4f6f-9ac4-4ec95e01cb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0327c77e-e405-4b1b-8ce7-60672791b474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acee8e73-b877-4ee9-bfb1-f2b2ca29a87c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1fab75-04d8-4491-90ab-315c3f7a6e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be9637a-77a6-423b-b26f-ebc5575cb799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e4d50b-6678-4095-90da-9fe56adb3420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffacbbb2-3479-417a-9cb0-d95617b9a0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a1ce4d-bcb9-4d35-8066-fa33e2a99d22",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c711e9-06f3-4511-81ac-9472c2e02d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8912c7f-1388-4949-9897-d0b843123be1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df333cea-8db4-4622-b10e-7d64c7a7e85e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19f3cf8-c56d-4ef5-bbd2-f195999310c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c22b429-77a2-4238-bf59-b6719989af9c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57903e78-ecca-421d-a5ca-ed7902e334b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77512deb-39c0-4329-ab7c-1be7cb3a7107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21758fe4-8480-4ad4-b1d7-75953dc9d132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316cd60f-2ee0-4898-95a3-de4e14e9994e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7ee8e5-0e5f-420a-9886-dcf9d263ee86",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b91701b-8d19-4fc9-a161-bff5a851244a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae85ee7-b431-46dd-a82e-1674d8b02839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b16604-a4b9-4f3f-bc4f-ed23ce48a7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b979d8c-fcc3-4746-830d-dc582e588ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1dc99a3-d07b-4cd3-9546-b3e2125d04cd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5468e9d9-76d8-4ca7-ad05-ea0b3242ff10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a916ac2b-c99f-4b58-8f39-0f614fc63793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe0270c-99f4-408f-a4e5-4edd68594261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b77b65d-7056-4824-b36f-5d387c585207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5eeaaff-a688-4a82-a3fc-77dc56b32a08",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b52cdb4-33e2-4b7b-bd6d-14db957a1d07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2e50ae-a6c9-46c7-a08a-c02744bbe553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d221a89-4967-4ffc-8aab-db029c92eb06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3973ec-1740-41e6-aa49-7d42d5177c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a523c52f-46b6-4270-bb34-cc923d0c68e1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f433d7e8-41a2-4ab2-a2df-8c33a6da6019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7150d563-b0f0-4651-bfd3-6345d90c04c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41799753-a7f8-4a8d-a7cf-c6aad0897ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc3f8db-bd1d-4123-a580-b4f4b613ce39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1c17a7-5076-4fbb-88d4-373373831413",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a2544e-6ce0-4295-a60b-8c2b74010fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c1664d-f8dc-4d66-a75e-342036685099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc9b344-4781-4995-ad85-4466355c758c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa85c1c-6194-4e93-9de0-f24135765769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428259d1-a10d-4929-8a77-e6929a1d25b1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9e8331-64c1-459c-9411-72ba67b25492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229c7de0-5ead-4aea-9224-5ee220c5ac3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7179156a-b005-46f4-897c-d856865946e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402a9f74-cc10-4e5a-9e72-3a7545a8843e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4f4fb4-7e90-4a63-a5bf-e20dc5a92dfe",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e8eceb-d91a-4ea7-81d3-fa64ae5fbaf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be90da6a-3e72-4ec7-93fb-f467d8a64ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e159a2-f916-4724-84d2-5f95572395fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f508e4ff-a261-4686-8df2-e59d1069b5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3fc3bfd-3a23-4a81-86c1-4d2e532d607b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b8aeeb-03af-4afc-8449-035d9a82d1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "773a708e-b8fa-4e8e-8aac-1514094cbf1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ea569a-eb0f-4fba-b566-538e14f892be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa79de4c-c174-4ce6-92f3-c90bf3bef627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9903a6cd-1b31-46f9-8de5-07475585e275",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa90378a-cb7a-43b0-96fa-4249a09472e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4097285-d8c3-4303-8f63-1bb4df19c93f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0084c8a0-ae4e-487c-8287-4cd6d35a6a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86913b49-c334-44bb-98af-967f0733727d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc887a0-7aae-4d28-a799-0f344aa5d8cf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0948d149-6502-4a3b-9cf3-97d570e62840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac3575ef-07fe-433f-9eab-d73d641a705f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "159e9dd7-a225-4a5d-a543-64be1a37a78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c749bf4e-240f-406b-ba7e-60fd76c991f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311f162d-e4e5-474a-8c75-a674488f5310",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea85f6d-96b1-40f7-846e-f5e34df3e207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c8ded8-0d7b-43a0-b53a-27adeb6c7c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a55ef6c-35dc-4c2b-ab2b-bb67c6178e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692ffcd5-8aae-45ce-9060-b4d1bf3f9555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2e9aff-f5e8-422e-8c2c-6d6f1367ad54",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd22082-5d9a-4b0d-be8f-46fb4c457846",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a9e00ba-ec38-497a-93f1-52d3da01b53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b9a522-dccb-450d-b1a5-30bf8b1f1878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45b7964-a6e6-45f9-87d4-0a3c347ccdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ffbf37-2949-4888-8f9d-35b754a80bc4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4020a8-ce72-418c-9888-90c19538a1a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c055f709-d64a-44df-918b-f0699674dcaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3810dc76-0d29-45fb-890d-f8209afc3b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9221936-87fb-45a2-8ddd-d680b50c281e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332a726b-4876-407b-bc5b-de3b098cdd7f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcd91fc-85ca-4c3e-b336-a778d2e1d684",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c14b0d19-ae1a-49ba-8375-9f5902ced75f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854f115e-4847-469b-ab72-2777cfffb153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "993c2a9f-5309-4994-8194-371656988527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51228c5-43d4-45ab-be1f-4e2b7dff3a57",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9538f7cc-913e-46dd-8664-5023f7fe46d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbc251f7-ce2f-49a3-88e3-76dcb3ad5f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a41b42-2f5d-48f0-9296-319ab3ab0d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5bc1ec9-0d4c-4fcc-848e-26db7fe016bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13cc496a-db08-4824-9fbe-bfe3b4fa4e34",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e552b9-9601-40e2-8ceb-4dfe9e79ca16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d276548a-05cf-4224-9392-2c58799ef8c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a6ca9d-07e8-42de-a41d-20cec9ac647b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ebca51-10bd-47af-8b94-66fd4261699a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4a3832-1617-4aac-ab06-3293e4c8930c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a5729f-9fe2-43ab-9603-ca1a8faaf7ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27b2ce39-bf69-48d8-8b4b-fcbd5c63f952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6391db8b-00d5-4c24-88c1-7ce86008ac1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d2a957-7900-460b-8c31-608b035ff10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7684dd00-8f2f-44aa-b11f-f1aaa9604a2c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518c976e-1598-4791-a13d-e25bfeeefaa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82a3912b-4a7f-4f89-a4b6-db9d58bc4620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a2c95b-25a8-4943-93e4-e68ed36437c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0020e4cd-6e78-4bdf-9d20-2a1ee9afb100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36436008-074f-4075-ba07-1b069fe37b70",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05d3819-a70e-472f-a31b-421f85635987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "463182d4-7fbb-455e-99c1-e34c0f8c4918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ab4a17-1ff8-4eb2-9ff7-216d1274863b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd49a39-9ff4-4ad6-ad6a-786031855dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ba0da8-7d1e-4e25-bf87-7d6d1495d49e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f27b83-58b6-484d-883c-fc872d516602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c8acaf4-0290-4249-bea7-316aa7850db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5711eaac-77af-4eb4-a0b5-5b0150faf980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615d37c5-f1e0-4f84-9557-3fad63f2eb9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aac54c6-feef-495b-8c17-59f5fe652c09",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ef143d-8ac1-45d8-95fc-f711b2b0f40b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c2e5c5-1a90-4ac3-b92a-f75bf64fbb76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddb768b-e650-4568-9d7f-e19b06329790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa4688d-1279-4443-bc6d-e5089df7fa6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5dae9b8-3033-4841-909a-244ef9518bb3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaa293c-a533-4c0f-82b4-ef06c2797a79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7079af5f-c6dc-491f-8b36-7951ec2f5848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f01666b-b372-40b7-8db6-a94e78ad56f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2fbde85-44e1-4884-a761-e8ae13e07155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c95f3f-937a-40c4-a556-bb171bfae267",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452f3f38-90f4-4ea8-8dc7-0e2c58d7138d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97ab878e-ae6d-4937-905d-d2adb0f79d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c12b65f-cf86-418b-8ebd-bee433bc3bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c7a387-21cc-4387-87d1-ebcae08f4bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ea3d39-de9e-40df-8438-cb233abe38c0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa13214-47b6-41fd-b693-a54179656834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fa356b3-e186-4dde-963e-e93797a3eb3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70766f3e-89a0-4b65-95f9-5843d379f2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc73609c-caae-4c83-8b20-c782dbf1886c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f041e4d2-f544-44f4-8203-4da68dc85104",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a96b128-f307-4d89-8e36-6b402c062911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a08e2200-6f90-4927-b626-9be9bbe2f945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9eb44d-cb29-43d9-8aee-fa94fcac2780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc12121-5925-44d0-be92-0a90132c90af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931cbc2f-062e-418c-84c0-39bad0b59e54",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6788abc1-7ae5-4fb7-92ca-029f95470014",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20fa4b1e-7073-487b-8450-9340b61049c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3539f7f-9236-4c88-a571-266729f2be73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbd0113-0aa2-4690-b3fe-485409a5f78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9529fb2-6cb0-488a-89db-b8a27115ef65",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66a0cec-a358-48ba-8210-7b011da50871",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbaead93-b728-41dc-a4bc-8031db961c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61367e88-7dbc-4084-9585-35684a123add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3cd6bbc-d754-4067-9818-3f7ea4d8b479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929decc1-33a2-4f7a-92e8-3502f71ff6d1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f7d872-a1eb-4aa6-890d-1c20a84139c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fbeb60b-bb41-42f3-8871-768d48d96d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c60159d-328f-47ba-ac71-ac571620a90d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13af121-c9bc-48dc-b0cd-fb0d58c0f6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e37833-9a2f-4d3a-aa88-3053522c8149",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9141340-f15c-4f64-8779-5b29dc11c0be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa82693d-de71-4d3d-ba07-0cc98db494e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8ecc12-a880-4354-b352-e11e7ec6f456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c05177f-e239-4b49-87e4-9939485392a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd7f6c2-01c7-472a-b8ee-e453a4103b41",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c634edd8-1539-4c10-b92a-f54e137cc49e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91e73d75-f396-429d-be7a-9bb3b16127a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "476d5c37-c716-425c-af93-f4623a8ca3bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6109c15f-98d1-4876-bb08-00b6161f93ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e819f17f-52e5-42bf-978f-351b8a1293f8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136da47e-16cd-4acf-8870-5868a7a012a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f576fd9-2eb8-405b-93fb-809d232f9de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ae30c3-b87e-46fb-b2ea-2999d0fe5a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8c5d83-c269-40c8-8fce-fca0aca0c362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e399e74-ace1-45ae-abe2-63985ab957d0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aef7f05-2e88-4e12-867a-6ca93703eacb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85cc7400-ab68-48c6-b083-9d3ef2aa80fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436cb53e-db4a-49ae-8e00-e84f92f41f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9888881-7656-40d3-9fbb-134f4b5884a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6012b0d-cba9-43d8-a334-437a1a6d5879",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd8910a-59ad-488e-8b81-9abcc51409e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59bc77b8-e1b1-40e4-a2c4-eb1dbf683903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d05118-15ee-4d90-88c2-65df33785374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac18a01-a4a3-45dd-8d40-a19714e9db59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57aa25b3-b4db-4d36-a667-24089c6b498f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da25327-7a68-4219-8d74-0e2a66ecfecb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc5344cc-e74a-4012-80cb-1f88e9fc009c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7687ffe-6663-4f89-a43e-64cb0f7efc39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed896430-3127-4536-a378-bbb3f2675e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4861b81a-0b16-4f7a-98d9-becfa6f91f70",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff79c29-e948-402c-83da-a678bff71f2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29589290-e7b0-45ac-9059-37e627620438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd71d51-9fc5-4bf9-9143-cc87a36a912f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a867d404-da22-4bf0-b7fc-f162bae43752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60667728-ac31-4bce-af95-08f0e074375c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97de6348-3bd6-47b7-ad4b-33003f8b1a4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb989d5c-aadb-4b16-8e25-47a9d13d1f62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2021819-bc1a-40c0-85c9-3d49c7015374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640f179a-1dd6-439b-9171-5c1496b4706c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71fed9d-cebc-43c2-b02d-ed040f3fa354",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bfe3f7-3a88-4173-9c19-3621b0df2171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c516afb2-fd53-48db-8e97-232a6838aa97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86feaa1a-75d6-4aab-a165-3c75a64890fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb65a525-4305-4fcf-b0db-cb58f6eccd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d347d748-b9e6-4723-ade4-6a35f01c8657",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa7b699-2216-4b85-a2b2-69e08c1e0622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22ddc539-3f70-45b6-89c5-0ddf7512331e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7356c4ea-5eea-4611-98b8-0176c2ac13c5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1454df-1dcb-4e3e-b68e-3f3e0d2becfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ab4352-3563-47cb-b2d1-9af291fa0bf5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b925da-e3b0-4bc3-828b-b65926c45a7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ac9efcc-2ae0-4d6a-af1c-7fefbd5d10e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f92bd8-6274-4f1a-8ecf-bc2979b22143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19043186-bf97-44d1-b63f-13bf28bfd193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434ddf25-19fe-43fe-86e7-73aa914fe9f0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab04f716-8ae8-4acf-a250-4b08a25b05ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbc1840e-3483-4729-a767-8926cf2b4cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ebec02-a693-43a4-9e39-196106a8ef48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70778c7f-2bb5-48d5-88de-6c4c0e1da1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb20e1d2-3d61-4509-a747-8cfb52a33164",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ccdd13-5524-4542-93d1-6bd8ad8e5eb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59b0fef4-cd13-4ba0-8d93-dc249a5de846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a7a7c1-5f56-4b6f-bfc6-5458f83d315f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff045837-098e-4c33-8fc1-2dee66d28e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d90468d-0ebb-4ef0-a897-2f4446fbdb96",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c22f91-d4fd-4234-82f6-b743ffbc42fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b6eba9-1103-449f-8f34-a965c3ab7d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1da4a0-ba95-4818-914a-cf7507389835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d7baff-e394-409b-8015-dd18cf9e4d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b121351-75d8-46e4-a2fa-72095e07b074",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a16454-e135-4e68-ad1a-b61b7e7402a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "014eb4d1-4d02-43c4-b948-814874c657c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e269a9b2-8bb5-45aa-844e-990bd6502932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c98828d-5327-4695-85f1-f62d8652ef5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f1d2df-921a-4326-8d35-70b01c9f5852",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71857350-e23a-481b-9396-7652f3307977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b899ea90-fc47-4963-9db4-c7b0a1064e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b796b9-8413-4883-8f8c-c8c4f18e0a48",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febe050a-5549-4cb5-9bea-64dccddb9347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9cf9a0-ea4c-4d31-8300-d092e26c8b51",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bec0df5-bcc2-4ce8-b6b9-bfcbd7c0c477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca3d636c-8c03-480a-8a22-48742425a997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8217cb2-0cec-42dd-a8ea-4be3930d3475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7d72c3-6722-4c29-9fb1-7256720f15f1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e32e23bf-7f83-493c-910e-5698f4426414",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eebbaa89-249a-4e26-9946-21d6f117e06e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6faa70e-a530-4865-9c06-a1694d0cb246",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f1e0a498-9ba8-4fd5-920d-86d26161ffa2"
                    }
                  }
                ]
              },
              {
                "id": "7c77820f-9efe-453e-91e9-e6d08c9b08f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6698715-d738-4495-90af-5397fdc1575d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a285203-ba48-4b9b-9fd7-036968314947",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "200f56a8-841b-4a8b-b55a-37d950225d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c15fb5-7b23-4328-9232-1bedf7d2c86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e0c596c-31d9-4bc8-90e9-155271acbf96"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c5765f2-64ef-429d-905d-d5c86bd03394",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efed66a9-8e58-4acd-bbdc-f07335017436"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f58d8cb7-6690-4ce6-a9ca-e56f3309ffbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c99c9b7b-f8ae-4ea0-8f25-68dde8e3ef28"
                    }
                  }
                ]
              },
              {
                "id": "e668aabb-c166-4161-ba3c-412b2cb0b52e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "aabff1ce-b49f-4e3c-8b8b-39ba9e75890d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39077c31-f48a-4140-8ea5-8faee3a54a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b260d364-9ebc-4629-8dde-e1c57a6e6ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1d5902-6739-4da4-a50d-6dfc7ba51393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bd1744-637e-482d-8cac-d60baee64334"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "52d4dd9f-6238-455b-aaff-c4386b9a2d78",
            "name": "Positive Testing",
            "item": [
              {
                "id": "53124234-1522-40fa-a4fa-66db53be588b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73c5d26c-3dbe-4407-bb1d-9224c8f4ef26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3f10706e-ff16-4296-afc1-45c181deff37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "084908c8-afb3-4677-864f-180350838e86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d15a9533-8939-4e82-b0e4-995dfb5abce9"
                    }
                  }
                ]
              },
              {
                "id": "18243413-a7a7-49db-b734-25801fa2a403",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dac12411-0d6b-439a-96ac-68513b4a3ffe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2eb609ff-1b2e-4360-850f-86306eb5b57d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a170bce6-10ff-477e-bf34-65be175e0083",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60d03407-47a6-4903-b26c-bb4b3a898158"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c540504c-a04a-4c0c-8cb4-45db536d1e98",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0712e4e7-4a03-4eac-b67d-8604402c1ef9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97880ff7-f8e6-4d70-a26e-558d7a4ef745",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6493faf-f5fb-4c22-957d-a08eeb38a130"
            }
          }
        ]
      },
      {
        "id": "9c06a0b1-0bc9-47d4-95ba-1af59e87dd74",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5fa53649-bd9b-40fb-bb9d-06d1af0de18a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "86715a80-3cbe-4681-961b-c547a8e8806f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49cd7822-3cf3-4500-a81e-a041ab5f78aa",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53df09aa-1b38-4e4c-b279-a4c4a6f234ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "29b2e3f6-636e-4b1c-9fa6-93acb89c4c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00eae0f8-2f48-4dc3-8582-5b7658055f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3ca10a5-957e-4752-8699-718554131b4c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a53d32fc-771e-4661-9142-e083b3c7a227",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f63913b-b761-423c-85f8-506494730c95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d558a9ed-bc8f-44a9-a84e-196579e34784",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7df875a-def2-48fa-af47-4ea457ff03a7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6196b403-2f99-4ed9-8fb5-bcd975fefbae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e105a4cf-52d2-4bae-b2cd-40fdd27f42b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fbe40c5d-f67c-4f0a-b3ac-ecd350df6527",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19b22d3e-4c32-4a0a-a7dc-df05b8b6e6dd"
            }
          }
        ]
      },
      {
        "id": "b519a173-0cd0-47e4-90d4-368c17bfc6f9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3535f971-a885-4f7e-8765-decb13dfbc1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "acf82b4f-ec43-43f4-baae-a10a09cc54a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5c832ff-fc49-4901-99e0-c615e9da95a2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4e0960-25c3-4478-a261-37e4c718c2a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1456297b-ea6c-4389-89f9-4fde583ea073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4d050f-f19d-4031-a5c7-865ba06defc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b2f5240-cd23-40ec-97ba-f5e92d3fcfcc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9351b407-2ce2-4986-aca7-0435f02263f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b987fa82-1d89-4b33-ae75-e88415ab6ad1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56898ff0-b364-43fc-8d6a-c90c508e876f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2b4a587-2004-4e2b-ba8d-db12b1961a23"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb49932a-4478-4723-8307-5f07394be279",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "74be8a06-7f26-4f10-aea5-e28a6d1ab202"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56ab5ff9-2280-4495-abea-c3aeed43b63d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "564c8db2-528b-415f-a648-8d2cc0a777e4"
            }
          }
        ]
      },
      {
        "id": "271b2b7b-4ec8-4370-952c-6ba26e926b14",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "724918c0-7969-4c80-b71e-f7385756d530",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57c44cb9-eac7-431d-bdce-68c50fe839d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "760ad4ca-aeca-46a8-94eb-9b9bb419c0bc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f928ed2-5761-43e6-94ed-23d44614ea70",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7ba0fff-4471-4f52-a093-c7e574555e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f1f573-ed64-48a5-9a48-c5746e5e8d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5085ed3-a56a-4062-8764-14fcc0af76f9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70644742-48a3-49d6-a18d-222b39311206",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d114891-7ec4-442b-bc9a-d66156475049"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d1e5181-67ba-4b45-b2ec-a91657c64573",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "158d02a4-35e5-4377-afe9-1397af24cc2e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52c3b3c8-ffac-4b99-a1e3-d943e0f09139",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "076b90b9-83f5-4948-a748-7f0e932240bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be7836d7-1ef3-4add-92fd-63c5a08c7e4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b25ee22-b1f7-45ff-85b9-0ff6dd9a020d"
            }
          }
        ]
      },
      {
        "id": "d15cb0c4-b903-47c6-bf15-c0533c4b28c9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67d6559d-f543-4fa3-81a8-b8c9c26336ba",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d22de04a-7590-47ab-8a7e-7f1b1f159617",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7ea5b0ff-8645-4075-840a-6c27c01f72d5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6db6ee5-a5d9-4d47-8949-de25c7b40932",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a88da92f-f604-417f-87f3-7e3332b64c71",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.91929824561407,
      "responseMin": 12,
      "responseMax": 664,
      "responseSd": 82.00969441751931,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698712440312,
      "completed": 1698712472625
    },
    "executions": [
      {
        "id": "f3fedb66-fdda-486a-912b-d59055f5eff4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2345e702-0cb6-403b-8043-f098451cf56e",
          "httpRequestId": "cad5ce14-7b2f-4d77-a1eb-1c6420e0bee1"
        },
        "item": {
          "id": "f3fedb66-fdda-486a-912b-d59055f5eff4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "973e09d7-5dc9-4253-a3d3-ea3d43c8f101",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "090aa674-e564-446a-9da2-d7b9a0387f35",
        "cursor": {
          "ref": "fe8906fe-2189-4af6-816d-4942f1359a27",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0fe4425f-29d4-4e0f-a554-b26a5e93412d"
        },
        "item": {
          "id": "090aa674-e564-446a-9da2-d7b9a0387f35",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0788d3a9-03b1-4437-80af-8a985253020f",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "6251c97c-6e73-4a52-acda-0d668bdd771c",
        "cursor": {
          "ref": "d5319152-5a70-4d67-ab0c-223b556da941",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fb0637c5-a0e6-4ced-86ec-f478f3b19510"
        },
        "item": {
          "id": "6251c97c-6e73-4a52-acda-0d668bdd771c",
          "name": "did_json"
        },
        "response": {
          "id": "59e799bb-33da-4832-ac9c-9b864f2d8bd1",
          "status": "OK",
          "code": 200,
          "responseTime": 664,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75dba3c9-a2e7-4677-b717-6fc1ed4f8fe1",
        "cursor": {
          "ref": "4e4a5e8c-7fae-4518-a530-2c3879722442",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f43cdb90-3239-4a3e-85a1-239b23a0a600"
        },
        "item": {
          "id": "75dba3c9-a2e7-4677-b717-6fc1ed4f8fe1",
          "name": "did:invalid"
        },
        "response": {
          "id": "b3051bf1-f471-414a-bd94-e51050763e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75dba3c9-a2e7-4677-b717-6fc1ed4f8fe1",
        "cursor": {
          "ref": "4e4a5e8c-7fae-4518-a530-2c3879722442",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f43cdb90-3239-4a3e-85a1-239b23a0a600"
        },
        "item": {
          "id": "75dba3c9-a2e7-4677-b717-6fc1ed4f8fe1",
          "name": "did:invalid"
        },
        "response": {
          "id": "b3051bf1-f471-414a-bd94-e51050763e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c2ba3a-75f6-44c4-ae43-343a459c8eb4",
        "cursor": {
          "ref": "ef29b940-b9a6-456c-9e78-f442d2b19d7a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a1966375-916f-46dd-a130-34d6f04fce8b"
        },
        "item": {
          "id": "b5c2ba3a-75f6-44c4-ae43-343a459c8eb4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4adf19e8-6afb-4af2-8442-cd36fe3d7f40",
          "status": "Not Found",
          "code": 404,
          "responseTime": 183,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724d4783-9157-480d-bc90-6c63537e8af6",
        "cursor": {
          "ref": "6c88a104-60a0-4dcd-8f56-cd67f5f6419f",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "83df86e5-f960-4320-b0af-afc2ed2898e6"
        },
        "item": {
          "id": "724d4783-9157-480d-bc90-6c63537e8af6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d1d767bd-a172-4167-86e9-60cac56130f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b229bf23-f452-4765-baf6-c8d54ff2fb8b",
        "cursor": {
          "ref": "b6cf0fc9-ec41-4a17-a826-3440b6dd9d07",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a016c749-849e-494a-a7be-033c55efb73c"
        },
        "item": {
          "id": "b229bf23-f452-4765-baf6-c8d54ff2fb8b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "23734364-e927-406e-861e-4429015ec3d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a00fe3-a2be-4c61-bf32-d3ae08900345",
        "cursor": {
          "ref": "7fd74611-7236-4f31-9c83-addae903b425",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6f365ca5-f780-4efe-84dc-873a3d1385b9"
        },
        "item": {
          "id": "b5a00fe3-a2be-4c61-bf32-d3ae08900345",
          "name": "identifiers"
        },
        "response": {
          "id": "28d31c0f-1e15-4323-a643-9274eebcbd32",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49048152-7bda-457f-bc5a-c173948de454",
        "cursor": {
          "ref": "f9214ceb-ccec-479e-b2a5-92c28b441896",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3a9be827-5700-4ee1-a958-5c91a8332b8c"
        },
        "item": {
          "id": "49048152-7bda-457f-bc5a-c173948de454",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9fcd1901-f3a7-420a-aa72-4a6a75138bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e17edc-3548-4597-a93e-740615873fae",
        "cursor": {
          "ref": "d76f9a91-cd95-4585-b662-4bf3023e3457",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a696c531-cad2-4251-8388-023aadb818b0"
        },
        "item": {
          "id": "47e17edc-3548-4597-a93e-740615873fae",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bb03abe1-ff38-4043-aa2f-35530bbad08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc9b385-a4bf-465a-aed2-dbb3050581ad",
        "cursor": {
          "ref": "f9d310a8-43e8-4dcd-b41e-62e5c8549ee8",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "77385c35-3c7c-4811-be9b-78b5a5671253"
        },
        "item": {
          "id": "cfc9b385-a4bf-465a-aed2-dbb3050581ad",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "061f7540-a13d-4d73-abc7-5f2081c234fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f84b534-2876-45a1-8d19-b4990c1313bc",
        "cursor": {
          "ref": "2fc95f1d-2115-4cf8-84cb-1ecc9f7b45df",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9ff205ee-eb81-4b0a-99f2-d77854c833ac"
        },
        "item": {
          "id": "8f84b534-2876-45a1-8d19-b4990c1313bc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "abbcae31-70a4-4d2b-83a2-cc39f958b16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d08423f-6ef1-457d-8746-f00dab1f5b1c",
        "cursor": {
          "ref": "7e37da7e-61b5-439a-82a7-c3b6f96dd991",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d3e31822-4cec-4e94-ace4-3dc1ce6bd1d4"
        },
        "item": {
          "id": "6d08423f-6ef1-457d-8746-f00dab1f5b1c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "07bd5a85-3c42-4abb-883b-77a465de83cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c429c4b6-97b8-4f1b-8636-90f12abefeee",
        "cursor": {
          "ref": "ee30346d-ebb3-4eba-8713-33a6234b568c",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "44ea6bbb-ccf4-433a-9b27-8b56ff3e97d7"
        },
        "item": {
          "id": "c429c4b6-97b8-4f1b-8636-90f12abefeee",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "903a06cf-9dc9-470b-882b-40cd328acf7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64b7fd8-98f5-4262-b0e4-86d90c61b71f",
        "cursor": {
          "ref": "d751e8fd-09f5-4be0-a459-29db0d31a693",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cba861b8-7f14-4d29-ae38-53c6ec0ca701"
        },
        "item": {
          "id": "f64b7fd8-98f5-4262-b0e4-86d90c61b71f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "972dedca-3eef-457e-a794-210819f470ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1901df8f-53a0-41dc-9869-94e2204eaeb0",
        "cursor": {
          "ref": "64158710-2fa9-4413-91eb-742740dcbcd6",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3ea51a5f-fac1-4fb8-941c-1586ba1df660"
        },
        "item": {
          "id": "1901df8f-53a0-41dc-9869-94e2204eaeb0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "72807da0-b27f-4e8d-8b1f-08538b6da02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5104da50-490a-47f7-98fa-182942ca1ed8",
        "cursor": {
          "ref": "29f5eae8-0cd4-46cf-af13-01e90f351dca",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5284c2da-e952-4c40-bc47-e95d899e0d24"
        },
        "item": {
          "id": "5104da50-490a-47f7-98fa-182942ca1ed8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "67372746-511b-40e6-8583-ad4072ddd78c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e609412-e923-4565-a3fe-e18494eb330b",
        "cursor": {
          "ref": "adaba2e8-52ca-4b15-b296-80c4dc668250",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "62097723-65e9-4410-b16a-ba6cdbbe770b"
        },
        "item": {
          "id": "8e609412-e923-4565-a3fe-e18494eb330b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f6b0b953-682d-4a64-bfe8-c4a410ce2bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a371d04-065b-4d79-8d38-384bfc419e74",
        "cursor": {
          "ref": "c911ef75-3b15-4f6f-bc41-ccc40079ea22",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "56258e1e-ac9d-4010-9492-683d965fbcb9"
        },
        "item": {
          "id": "9a371d04-065b-4d79-8d38-384bfc419e74",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8891991d-ad72-4330-8ca9-fda12fc2aaac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be50e6cf-898a-4f32-8815-dbf79aa87800",
        "cursor": {
          "ref": "a48f1c03-2433-4728-b0a5-bcd6c12e7a55",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b20bbeb5-b3be-47b9-8023-aede47ee99f6"
        },
        "item": {
          "id": "be50e6cf-898a-4f32-8815-dbf79aa87800",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9581a032-0fcb-47b0-8e35-a4cd9693d51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab83d4e3-1693-4e71-b442-8b9b9ed7e761",
        "cursor": {
          "ref": "88360d76-c270-4cd1-87ff-c22249ce0b0b",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2d09a4b4-3cf4-492e-8747-e910f062886d"
        },
        "item": {
          "id": "ab83d4e3-1693-4e71-b442-8b9b9ed7e761",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "44c0c600-0904-4cd2-8173-51ac90b4986c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f3b4e2-4661-4067-846e-88b41689395b",
        "cursor": {
          "ref": "b9add0ea-c9c1-4b68-9a76-13b07f663fd7",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "250afe0f-9d66-402c-85d0-e7047665d05d"
        },
        "item": {
          "id": "a1f3b4e2-4661-4067-846e-88b41689395b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "aaec8172-3f5b-4796-beda-91a7d50f59cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fbc6418-27ab-4431-a8c3-bbb15992bf3e",
        "cursor": {
          "ref": "ab506460-b597-4b42-8234-40a0d7380b15",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "318c6778-94df-4508-87f4-d66647919ac1"
        },
        "item": {
          "id": "4fbc6418-27ab-4431-a8c3-bbb15992bf3e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "621a3003-61ea-4f99-bedc-3e984b19b0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb261f5c-9634-49fa-a7f5-4f88c6c9d8d8",
        "cursor": {
          "ref": "4a0963f4-1d62-4899-a119-88b49a181381",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "36913619-b84f-462b-a526-6a981a5edd1c"
        },
        "item": {
          "id": "eb261f5c-9634-49fa-a7f5-4f88c6c9d8d8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "53fce726-bf6f-44fc-a473-571de0df25d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac87d8a9-92e0-468c-800d-5c3d3444385e",
        "cursor": {
          "ref": "a367880b-8d4b-468d-91c6-f603266831ea",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ad172827-8dd2-454c-ac3a-eaa01ffad0e5"
        },
        "item": {
          "id": "ac87d8a9-92e0-468c-800d-5c3d3444385e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ca59e6f6-cbaa-47a7-b259-841aee39cd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e881e0ca-e529-472b-bb2b-1883c0a29ca1",
        "cursor": {
          "ref": "b32aad3a-5b75-4d4e-a67f-e13b25a6b3f8",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "181cab81-0909-4944-bcc7-397f36ca3950"
        },
        "item": {
          "id": "e881e0ca-e529-472b-bb2b-1883c0a29ca1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d59510e2-cf1b-43f4-9efd-d8535f91c88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d067c0ac-11ef-45d3-b79f-9c7f5798e75c",
        "cursor": {
          "ref": "199b7526-b901-4caa-a073-a2a14897050c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "21efb5ba-8bd8-4a51-b309-b653ea1bd53e"
        },
        "item": {
          "id": "d067c0ac-11ef-45d3-b79f-9c7f5798e75c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "75a89c65-acae-4dfc-9824-0a6f31b9e9f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81da480-26f2-4ebc-a4df-f8dd597c33f9",
        "cursor": {
          "ref": "07d39c7d-1fa0-448f-a82b-e2422b7c3577",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c899851d-f2d2-44ef-b257-11e61b7cf54d"
        },
        "item": {
          "id": "d81da480-26f2-4ebc-a4df-f8dd597c33f9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a4cd27c9-c0b6-4240-a40c-3c1bf9472286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8157ec-9afb-4e72-84ff-55d378ad4c95",
        "cursor": {
          "ref": "9671287a-e7ad-4756-89ee-0a1f138cef6d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "47e6aa8a-f369-4c74-8250-97e816579857"
        },
        "item": {
          "id": "9d8157ec-9afb-4e72-84ff-55d378ad4c95",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ff628dec-b19d-403e-afb4-cbcb8486fa5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6352c3f6-42a8-407d-b49c-a4d2e329e6dc",
        "cursor": {
          "ref": "0817df8c-3e4d-4491-ab0b-c9ac58b276db",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ce941530-c2c4-4069-a6d7-24a2d4793183"
        },
        "item": {
          "id": "6352c3f6-42a8-407d-b49c-a4d2e329e6dc",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e8042e26-a9f0-4898-926a-550a89f0f9e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a21e7b3-2e86-4a5c-87fa-cdd7a45e3e11",
        "cursor": {
          "ref": "2697c4bc-fa39-4662-8f60-c9bf1922763e",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "250969c8-a007-4e11-8177-f93196823be1"
        },
        "item": {
          "id": "4a21e7b3-2e86-4a5c-87fa-cdd7a45e3e11",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "287cc513-496d-4e76-a8d1-d62093f71d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f3d2cf-945a-4e00-b27e-f33225ce7c5e",
        "cursor": {
          "ref": "35dbb095-c8d5-4d8d-83cc-690bc16c8e86",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e7b0211a-817f-4988-afc9-2b9d8fc8fd23"
        },
        "item": {
          "id": "72f3d2cf-945a-4e00-b27e-f33225ce7c5e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a49cb348-2d3f-4007-b72c-a2bdc2f1891f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8a7815-51ab-4663-953d-f79b345a0513",
        "cursor": {
          "ref": "c9037e4d-156d-48f9-8f2c-8054707a50f5",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9e06d47e-74a4-4c6d-8fd1-7b7ce53b5f1d"
        },
        "item": {
          "id": "da8a7815-51ab-4663-953d-f79b345a0513",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6e21e944-69d4-4af8-b2fa-00a037effafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ff8819-aae9-425a-a28c-f914df7e69d3",
        "cursor": {
          "ref": "c0cb4169-7128-438a-8834-6bf138bb40ff",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "34c9b7bf-07f6-4520-bf3e-4d5a3d700b87"
        },
        "item": {
          "id": "76ff8819-aae9-425a-a28c-f914df7e69d3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "53af57e5-812b-4e6c-b1bb-d33ca18341d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a737aacc-5cce-42f7-bdb0-1f8df09e3f67",
        "cursor": {
          "ref": "0ec5437b-5cc1-4f56-b90b-18b50f366a79",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "dd4d7a8b-8842-4f74-adf7-a348a46c7d28"
        },
        "item": {
          "id": "a737aacc-5cce-42f7-bdb0-1f8df09e3f67",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c46f9555-8bc6-452d-b6c6-feb24c8bdc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e250ffc-9c69-4797-9875-cac72a59d9ef",
        "cursor": {
          "ref": "e9fc6f65-d22e-413d-b652-a148003e5151",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ff747595-5395-4809-9932-2fedd7c110d6"
        },
        "item": {
          "id": "7e250ffc-9c69-4797-9875-cac72a59d9ef",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c28664fc-3728-4807-bd3d-cf391f6078ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3413fc16-ba19-404a-b6e5-c82fce1652c3",
        "cursor": {
          "ref": "7326adbc-91cb-4c6c-bdff-6e84682e6b0f",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5481187a-d40e-4c6d-bf71-19c5a17a5d06"
        },
        "item": {
          "id": "3413fc16-ba19-404a-b6e5-c82fce1652c3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "aa8b8a5b-3373-40ab-bf0c-3021c5bec1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5786dce9-b919-4d0a-847b-8201cf6e875b",
        "cursor": {
          "ref": "f1423820-4cc1-4486-ae32-21e2fe4b6a3f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "211244b8-e1cb-46dc-82e4-8024edfbcb0f"
        },
        "item": {
          "id": "5786dce9-b919-4d0a-847b-8201cf6e875b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "64fc70c6-a0de-4ca1-b102-54bf7ec7f3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c714c513-e9c8-45da-932c-58969e982710",
        "cursor": {
          "ref": "1d2e58e3-e9d7-45be-b5b0-6dad24ff9e24",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6567ad84-8ff0-4fab-ac29-26b01123bb01"
        },
        "item": {
          "id": "c714c513-e9c8-45da-932c-58969e982710",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4f812630-6a3a-4f63-8f8f-3863d169d846",
          "status": "Created",
          "code": 201,
          "responseTime": 492,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "23ee45b8-c626-4ca9-a758-28205bf6af5a",
        "cursor": {
          "ref": "8a4a660b-a18b-49b5-a65d-c9c81f33ce9d",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d25506ea-f601-4778-8e98-7ef845d29b3e"
        },
        "item": {
          "id": "23ee45b8-c626-4ca9-a758-28205bf6af5a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b93494ef-a090-4fd2-b7b7-4f1c8a4e67fe",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ebe374b7-f20d-4ba9-94c0-9557f3fc595e",
        "cursor": {
          "ref": "10fd4818-6f7c-4a0e-a0c4-92f3f7682488",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a7aa2db7-2419-4988-9e6a-d831b4466341"
        },
        "item": {
          "id": "ebe374b7-f20d-4ba9-94c0-9557f3fc595e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "850ce7ba-f22c-46ab-be72-ee838e3a1275",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "99c4a1b4-bd81-4e58-9860-c40cdc888c92",
        "cursor": {
          "ref": "504dd05c-084e-4f84-81a4-ac6bc1254725",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b2cc6f2b-d529-4f9b-9c89-1eb69bcfe271"
        },
        "item": {
          "id": "99c4a1b4-bd81-4e58-9860-c40cdc888c92",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5c8a1be5-710d-4fc9-992b-512f5a324a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0c2db0-f80e-492d-848c-fe3b44c470b6",
        "cursor": {
          "ref": "24acc9b3-0779-4473-88dd-e68db4f6d807",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c0dca219-444c-443b-8422-f1103df7bd48"
        },
        "item": {
          "id": "ec0c2db0-f80e-492d-848c-fe3b44c470b6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3759bf23-cc98-4d32-959d-d8828c25b661",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "4cf27e9c-8723-44a0-b4c4-566aae8df452",
        "cursor": {
          "ref": "c188fc8e-1fcc-40e3-a524-5fddc122a5a1",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a5f0b08c-008c-4e4f-9528-6907f521e1d0"
        },
        "item": {
          "id": "4cf27e9c-8723-44a0-b4c4-566aae8df452",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "211e5896-872f-4a22-a591-0dba7a9ec438",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2bd75639-01ec-4ec4-8e19-97998dea7528",
        "cursor": {
          "ref": "71aa5b25-e4e5-4405-a2fe-3eb1157d3acf",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "28ebb83a-6b36-4b9d-9328-c75012e457bf"
        },
        "item": {
          "id": "2bd75639-01ec-4ec4-8e19-97998dea7528",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "474085fb-4f13-408a-87bf-8b1cb1d65bc6",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5af1f0aa-b2f5-49a9-ae1e-592bd5ac634e",
        "cursor": {
          "ref": "ddbbe602-00b8-404c-894d-4f998a894087",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "23385f39-c318-454d-bfb1-bacff055da36"
        },
        "item": {
          "id": "5af1f0aa-b2f5-49a9-ae1e-592bd5ac634e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1e704e15-9e50-4fa7-b065-d9218178b0cb",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4f49ae90-ba2d-413a-8309-d18afc59cd2a",
        "cursor": {
          "ref": "60746071-847d-4b62-a19c-79c87c5975bd",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "dbd81241-01f7-4073-a502-09bd1087e4ca"
        },
        "item": {
          "id": "4f49ae90-ba2d-413a-8309-d18afc59cd2a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f0cb7e59-5f58-46d7-b6db-a8474ac38647",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0dc7a2a2-e4c8-4c2a-ab1b-b5d769d93798",
        "cursor": {
          "ref": "b6d6ed00-7f67-4dc0-9170-84ef7b3e6b96",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "033a28bf-3bbd-45f6-a05d-d4967e7ad458"
        },
        "item": {
          "id": "0dc7a2a2-e4c8-4c2a-ab1b-b5d769d93798",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cd2d477b-f10c-47f0-ab3a-a51fc936d868",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3cbe6f61-4177-43be-ba32-0ad02968cf04",
        "cursor": {
          "ref": "855527f3-38ca-45f0-ba3f-7e89a3d3bbe0",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "11a4cdaa-5a6c-475b-a934-2bf31fff9950"
        },
        "item": {
          "id": "3cbe6f61-4177-43be-ba32-0ad02968cf04",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2df8dd59-257a-407a-b928-c46ba0d44002",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e4ca0aed-c278-4851-9551-d88559097035",
        "cursor": {
          "ref": "bbcb62f6-b715-43aa-aa7f-c22ef7658e77",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ab5556e3-e90a-429a-aaf0-e67ea7edc9e3"
        },
        "item": {
          "id": "e4ca0aed-c278-4851-9551-d88559097035",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5e4aa0af-019b-4ac3-bba6-3550679aa6b9",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8bd3b2dd-cd5d-4bdd-9e53-cd0fcbda4b06",
        "cursor": {
          "ref": "4bc1b705-83a9-475c-8482-516dd6de86d8",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fc3c6571-1516-4bdf-9095-149249511e36"
        },
        "item": {
          "id": "8bd3b2dd-cd5d-4bdd-9e53-cd0fcbda4b06",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a664a9a9-d1bb-40c9-8afa-6ea3c81ed726",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3ccc161f-7c1a-462a-abcb-8d6eba47d74a",
        "cursor": {
          "ref": "362a97bb-7fab-437a-8e7f-720f45a3cc39",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "65cf0996-917b-42e0-bf77-77b914c6d8bc"
        },
        "item": {
          "id": "3ccc161f-7c1a-462a-abcb-8d6eba47d74a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b143c5d1-2c22-4a41-b414-fe781b6a9b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7757ff62-5ce8-4158-97a9-c1116da11e3c",
        "cursor": {
          "ref": "72735d0e-9e82-47c1-9369-7a55707acb7c",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "50f5b8f8-64fd-4419-b1a8-105c5af58b80"
        },
        "item": {
          "id": "7757ff62-5ce8-4158-97a9-c1116da11e3c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "97a46713-3b8d-44d7-8bd2-80aaba180bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5bd8bf-0df8-4228-b89f-0f2414fc28dd",
        "cursor": {
          "ref": "1f11635c-f452-4581-8f5c-7f2df9b3d135",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "67b619b0-15aa-481c-a07b-e04712b0e788"
        },
        "item": {
          "id": "fd5bd8bf-0df8-4228-b89f-0f2414fc28dd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5a328666-37d1-4e7e-b812-e747ad06c5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed72b319-8b4c-4372-950e-c464d4076eb5",
        "cursor": {
          "ref": "4402ebfe-a6ba-421f-adcd-b698a8dbf49c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "815ba28e-c7d9-429e-9a7e-db346b3bb386"
        },
        "item": {
          "id": "ed72b319-8b4c-4372-950e-c464d4076eb5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bafe6506-5867-4a81-9f83-98c660ac7101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b7bc43-cd79-49c6-adde-78bc9a581bd2",
        "cursor": {
          "ref": "d6559fe2-1900-4fdb-b50b-5eb039fa2106",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2dcb4e14-3c15-4631-b512-fbe736fa5ddc"
        },
        "item": {
          "id": "54b7bc43-cd79-49c6-adde-78bc9a581bd2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "387f7797-2073-47f2-9ceb-075aaf28562e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80cb85ad-80b6-4829-8160-0d26f071a4a5",
        "cursor": {
          "ref": "c3d354d0-b879-4e4b-be60-852115aeed5d",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f2f72d25-6423-43e4-81a7-5eb0140a7c0d"
        },
        "item": {
          "id": "80cb85ad-80b6-4829-8160-0d26f071a4a5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8bf19595-522c-4e69-ac35-92cc0f4c1c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce209440-442b-4e23-8974-1ef987b05c05",
        "cursor": {
          "ref": "8c1e5fb0-2d34-417f-a5fd-e9b3ad1dfc53",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ec0bf02b-9662-462c-a311-7faf321ac034"
        },
        "item": {
          "id": "ce209440-442b-4e23-8974-1ef987b05c05",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "eeae9ab7-14d2-4313-ab77-0c19107e89c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1deb9a-bc5e-4737-8a0a-ae26a4b5251f",
        "cursor": {
          "ref": "c2f1345e-a879-4891-bb6b-0a066809e0d7",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "eb00c2ee-7af9-44cf-92c8-6ffb8126cd3e"
        },
        "item": {
          "id": "bd1deb9a-bc5e-4737-8a0a-ae26a4b5251f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f4d92dc5-5907-41ad-aede-a98bcc63bda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de2a128-04da-4688-80dd-3f92564f5868",
        "cursor": {
          "ref": "cdac6408-1963-4e8c-9951-87c7df4342e8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0566fc76-f3ca-4da7-9ee7-bc77c79135f7"
        },
        "item": {
          "id": "6de2a128-04da-4688-80dd-3f92564f5868",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ad694daa-9728-4975-bcc2-d52d7b2de012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ed98fd-0685-48e8-ac6c-07eec88f92c3",
        "cursor": {
          "ref": "4b322dba-308f-405b-b6ea-a68c42d02ee5",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "378cc4d7-899c-4adc-86a9-a25f9bb563e7"
        },
        "item": {
          "id": "80ed98fd-0685-48e8-ac6c-07eec88f92c3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7589c390-b286-457d-88f4-2aedea4fb32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02093d3e-f4f2-481d-8df3-d70540e8b318",
        "cursor": {
          "ref": "cc3d381e-427a-4e3b-ad85-2dcb2ab42cc7",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2589275c-c8c3-45b0-b8eb-b17328c69b66"
        },
        "item": {
          "id": "02093d3e-f4f2-481d-8df3-d70540e8b318",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "30a3dec3-f765-4d3e-a509-9d6bee37b958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c68302-a05c-403f-8935-539e746b0c33",
        "cursor": {
          "ref": "242df101-02e3-48df-8131-c4bb74dd3343",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f337a5df-8a9f-4d91-945d-db507f2b06b3"
        },
        "item": {
          "id": "e7c68302-a05c-403f-8935-539e746b0c33",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f747a3ff-951d-4430-8aef-e3e2ea5fce10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ead053e-2767-4719-bcc1-a872e5c841dc",
        "cursor": {
          "ref": "5da70e56-d370-487d-9c97-4848f288d52a",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f1f5958b-546d-45f1-bccc-9d938a54101d"
        },
        "item": {
          "id": "4ead053e-2767-4719-bcc1-a872e5c841dc",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ac321382-2954-45d9-82f5-4e0193e3e4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c552be-f0ff-4a6e-96a5-c201086bfaa2",
        "cursor": {
          "ref": "3e064df3-22d2-4a74-ab0f-e0fe6585d6fe",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5ff57d90-0975-4ddb-a6e4-71eebd30094c"
        },
        "item": {
          "id": "98c552be-f0ff-4a6e-96a5-c201086bfaa2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "50ac2917-512c-4987-bcfb-621006d75a36",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9565c7cc-c401-40e2-b13d-07d261693c88",
        "cursor": {
          "ref": "41f28769-c0bc-400d-bdb2-c9f85d4f1d6b",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "dfa53dfc-7e40-48ac-ac2f-68f855d7c01d"
        },
        "item": {
          "id": "9565c7cc-c401-40e2-b13d-07d261693c88",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d01f1ea1-fa6b-4e5b-bfb7-d3f3332611e6",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "50fcc2c3-d0c7-49ec-adf3-044a7cbacb18",
        "cursor": {
          "ref": "e06f638a-520f-4092-9f01-dcac5e484139",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "53f4cb94-6025-421d-8184-9f233dabe92d"
        },
        "item": {
          "id": "50fcc2c3-d0c7-49ec-adf3-044a7cbacb18",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "419828b8-6a67-4bac-ab57-c29ce75dbe40",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "45d831e5-cd02-40df-8826-0b8eb84fe3a3",
        "cursor": {
          "ref": "84acb92c-e351-48ab-8628-88246f0f4259",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2b789129-ddde-49e2-83b3-a504799e4e86"
        },
        "item": {
          "id": "45d831e5-cd02-40df-8826-0b8eb84fe3a3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "185667bd-28f1-4661-9c96-baec74512474",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "eefb2614-38cf-4b26-93e7-d663f3159ed0",
        "cursor": {
          "ref": "1593cb18-ec07-4bc5-9bcd-aa15dfd42d7c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cc1ab957-8e38-47a2-a513-378a53ecf1bf"
        },
        "item": {
          "id": "eefb2614-38cf-4b26-93e7-d663f3159ed0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c9b3566d-311c-4ded-b133-bacdc10b508b",
          "status": "Created",
          "code": 201,
          "responseTime": 562,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "076ec79b-51f3-4501-b89e-da521957ec5d",
        "cursor": {
          "ref": "6ed5b5b0-f5e6-47f5-957f-dd125b162a89",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2d0e4ef7-4b28-4606-9c15-5c7003e7d37a"
        },
        "item": {
          "id": "076ec79b-51f3-4501-b89e-da521957ec5d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4d66ad5e-795c-4ea4-8353-e0bd9067c54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d067cacf-b050-4e1e-bd51-478b24425875",
        "cursor": {
          "ref": "2120e26b-2ab1-49ba-89b0-66465a6f17ad",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7ebaeda0-b246-49e9-a0ac-d5bbaec872d7"
        },
        "item": {
          "id": "d067cacf-b050-4e1e-bd51-478b24425875",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e599442c-efb0-4206-9fea-5d28bdeb6372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ca8058-9209-427c-8875-00e93c7f36a6",
        "cursor": {
          "ref": "f4634b8d-e82a-4792-adaa-886fa71e418a",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b4c2a9a9-3eef-4e57-a501-9c73f50eeaac"
        },
        "item": {
          "id": "c1ca8058-9209-427c-8875-00e93c7f36a6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d5d7bf2d-e9bd-4550-a757-018f5e9a6ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fde2377-bddc-4ec0-983d-957658bcf04f",
        "cursor": {
          "ref": "6f97b338-4d8a-4eb9-9ce1-583068c45d77",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f293cd4c-ca7d-4896-aacb-46d8e70abc25"
        },
        "item": {
          "id": "1fde2377-bddc-4ec0-983d-957658bcf04f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1985c22c-c1a6-4707-bef5-93e76acd0b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0449c7-fc78-4b44-a029-91945cc632ad",
        "cursor": {
          "ref": "3fd2c75f-a1df-459e-8fa9-81c853ab52e0",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "38419538-b6fa-42e3-8c5c-4d415641b21c"
        },
        "item": {
          "id": "4e0449c7-fc78-4b44-a029-91945cc632ad",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d5ce0888-c52c-45a5-b610-c2b458c60b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5eca08-9a94-4a34-8e89-76e46045babe",
        "cursor": {
          "ref": "cdca83c0-2f1f-4885-be38-cf29f012f30b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3dbc4941-403f-45c9-949b-c017740f97c3"
        },
        "item": {
          "id": "ff5eca08-9a94-4a34-8e89-76e46045babe",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9b1d4b9e-e822-48e2-99ad-bf0cee264bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b093b8ee-1852-47d2-beb4-2c173ed5c455",
        "cursor": {
          "ref": "26736081-b5f4-483a-97f2-7c7b727d4132",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "19ed9a30-87a7-4aa1-9f55-d50e85546534"
        },
        "item": {
          "id": "b093b8ee-1852-47d2-beb4-2c173ed5c455",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cdf5a5b4-21c9-458b-88e9-6f8985daaa07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf392f6e-d691-41ba-850c-7e7d52054f42",
        "cursor": {
          "ref": "89ad6628-e216-47be-9d0a-39e60dd96389",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0c641138-d47d-4a03-b62f-b29c550905b7"
        },
        "item": {
          "id": "cf392f6e-d691-41ba-850c-7e7d52054f42",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ab2cf4ac-1bb2-4258-be57-d13692db3ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0861211-2891-4bdb-8d52-9f989ad38433",
        "cursor": {
          "ref": "9506fa4b-dc96-4d98-b45f-0f02e887c8e4",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ef1c396e-165c-4439-aacf-a6a190cfd5d0"
        },
        "item": {
          "id": "b0861211-2891-4bdb-8d52-9f989ad38433",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a320c70e-3be5-4d47-a4bb-f831d563904a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06393527-6e65-4470-a3bc-28e0627be447",
        "cursor": {
          "ref": "971f8d7e-d3d0-4a06-85ee-67e893737e62",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e9b9d770-be6e-48bd-8b99-0b815311eefe"
        },
        "item": {
          "id": "06393527-6e65-4470-a3bc-28e0627be447",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "37e2215b-af14-43b2-b241-05bf6fd83095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf561270-c7ab-4a2f-ba3d-f1d097b18eff",
        "cursor": {
          "ref": "1322c54d-1c3f-402f-a993-a385c30974b1",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "17c6926f-db51-43a9-8581-8638831c4599"
        },
        "item": {
          "id": "cf561270-c7ab-4a2f-ba3d-f1d097b18eff",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "00fd64d9-04b0-447b-b6e5-458a4e0769b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefc5fba-99ac-4fca-86ff-9c9ee52c5e55",
        "cursor": {
          "ref": "917073cf-2443-46f7-a12b-9aa2396a2942",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "919e4fca-2218-4f38-ae29-9e49b135736d"
        },
        "item": {
          "id": "fefc5fba-99ac-4fca-86ff-9c9ee52c5e55",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b47fb9a3-5895-4a34-a926-4b787abd4747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0a7c22-ef57-4eb7-b51f-fb3cb34923a3",
        "cursor": {
          "ref": "42327721-81cc-405e-9c54-4e86f62f1c02",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "eeefd78a-8951-4423-ba2d-1a73941d7bab"
        },
        "item": {
          "id": "1c0a7c22-ef57-4eb7-b51f-fb3cb34923a3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9fff1095-c7fd-42bf-8d78-0018826a98b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc1da77-8385-461e-bb05-8a9e31dc4e52",
        "cursor": {
          "ref": "706903b6-cfd5-4dbc-b2ff-f2b81a133c6c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c55bf294-6861-4b86-8bc9-b02c8dcdbbb5"
        },
        "item": {
          "id": "9bc1da77-8385-461e-bb05-8a9e31dc4e52",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "511cff96-cd68-42b0-9669-ddfe0e5c032f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65c2aa0-1f6c-452a-9f43-bdc08bd065c1",
        "cursor": {
          "ref": "bd853ede-09d0-4f3f-bd04-edc7e40f68da",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "83ec56fb-dd68-40c4-9ee1-7e4dc320b4f0"
        },
        "item": {
          "id": "e65c2aa0-1f6c-452a-9f43-bdc08bd065c1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6cd9f59d-1cfb-4879-805a-da3ca4ff4cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba43539-ad1a-413a-8bdb-24b29b57a53c",
        "cursor": {
          "ref": "6314d3b2-8e3e-450c-a77e-258b8f41af02",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9be391c3-0edf-4c79-bc70-659d416549a5"
        },
        "item": {
          "id": "dba43539-ad1a-413a-8bdb-24b29b57a53c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4abe84c3-9c84-4f1b-b070-e7499f9a8516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc92f4f6-14b2-4213-be7a-4760e9148af6",
        "cursor": {
          "ref": "d8e35f4b-8699-45bc-be57-b66b716e8fb2",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9b87d1f3-adec-4db1-bee9-f31186a6373c"
        },
        "item": {
          "id": "fc92f4f6-14b2-4213-be7a-4760e9148af6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8639f70b-a805-42c0-992b-2c63f89fd285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d16e18-fcec-4b5a-b24e-7ab9978e2c0d",
        "cursor": {
          "ref": "b3fc69aa-3e10-4ad7-a0a6-e8d684fe3e75",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "09a8efd2-56e1-4e67-993e-8dbbfac3935b"
        },
        "item": {
          "id": "a4d16e18-fcec-4b5a-b24e-7ab9978e2c0d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a816be4a-ff53-4ebe-b5d8-32a6dce47d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08757c41-0e6d-4646-b6ce-fd6d72fa9fb1",
        "cursor": {
          "ref": "17cbfc15-d27b-477b-af08-e175b9366e5f",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cddf3889-31f0-4a1e-b932-337134c041de"
        },
        "item": {
          "id": "08757c41-0e6d-4646-b6ce-fd6d72fa9fb1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1c8b6510-e7cb-410c-b060-01d10e5398cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c4c5a0-f0e2-401b-b5e4-c0f6ce4b47e2",
        "cursor": {
          "ref": "2c230150-611a-486f-a473-3475eac507f7",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "16c98b93-d1e3-410d-9088-b7835f7e3880"
        },
        "item": {
          "id": "74c4c5a0-f0e2-401b-b5e4-c0f6ce4b47e2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ebc0228a-2d08-4cb2-9db6-b598ee1c4953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7828a19-fa57-4236-ab7a-21702c98d65b",
        "cursor": {
          "ref": "3da0f504-e484-404b-acb8-d219e0b5cec4",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "33f42f32-7928-48ee-9d96-bdde11ca6341"
        },
        "item": {
          "id": "a7828a19-fa57-4236-ab7a-21702c98d65b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "30151da1-66b3-4809-86b3-14cb3092dcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42bc07c-dd90-4ef6-837a-47b53f2b4d26",
        "cursor": {
          "ref": "bd4e56db-235f-42cd-9177-28fe0be375b2",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c664b029-775e-42ba-9f3f-61642977a385"
        },
        "item": {
          "id": "c42bc07c-dd90-4ef6-837a-47b53f2b4d26",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0a35ab38-4a6b-4de3-9187-5eccb46c9cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c246980e-f92a-49cb-86b2-21d47377d30f",
        "cursor": {
          "ref": "5579bb98-5f69-4827-ae5c-71c1a2bf8de9",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "478a779b-762b-4648-86e7-5758e822319b"
        },
        "item": {
          "id": "c246980e-f92a-49cb-86b2-21d47377d30f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "477bd7e4-03dc-4892-bc63-b4e36ed89f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3a251a-cbbf-4557-b9a6-a7dcf987c1f7",
        "cursor": {
          "ref": "adf3ae52-219e-41f5-afab-f3c51b7c7e74",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f3ecf645-befd-4d3f-93ff-69fd42b0e685"
        },
        "item": {
          "id": "2c3a251a-cbbf-4557-b9a6-a7dcf987c1f7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9351c866-637e-41bf-864b-c5524e436a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e3abbe-79f2-46ee-bf9d-0e0a0109473e",
        "cursor": {
          "ref": "a486b4d3-b1ec-4d1e-9880-8eecdab0095a",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "94ab1ded-e073-4aec-b4d9-da9f1f938bb5"
        },
        "item": {
          "id": "67e3abbe-79f2-46ee-bf9d-0e0a0109473e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4beb8104-5b29-4424-a386-707fea0ef53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd173f2-126a-44ea-b780-648627750724",
        "cursor": {
          "ref": "36b4f442-fa55-421b-aeb9-44362e24f3dc",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e3dfbc5a-d506-4492-860b-15f84e6bd218"
        },
        "item": {
          "id": "9cd173f2-126a-44ea-b780-648627750724",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1217759b-1f92-4bbe-be75-1efc176e5016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e92120a-ad2d-4e65-9ce4-1a5fd577d977",
        "cursor": {
          "ref": "b18f3dd9-5eb0-4153-9c1c-cd155a2a457b",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6f529770-2cb1-4b45-9bc1-43079dc2bea4"
        },
        "item": {
          "id": "6e92120a-ad2d-4e65-9ce4-1a5fd577d977",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a01c5aef-ed84-4838-bdd6-5ed1c8151829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7860c1-b1c9-49bb-b027-171dda08ab86",
        "cursor": {
          "ref": "933b9f8c-0af9-4f0a-8334-4a23c83bbb1b",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0d3b2b8e-6313-4de2-a784-b64e75442cde"
        },
        "item": {
          "id": "3a7860c1-b1c9-49bb-b027-171dda08ab86",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9020b4aa-2151-4875-ad66-19131894d8c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358da345-050f-4de5-bae3-0bbcab862930",
        "cursor": {
          "ref": "bca738fb-7b3c-45ca-9a91-9c2abcd7c161",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "80e5425d-6df3-40f2-b867-7f83ceacec05"
        },
        "item": {
          "id": "358da345-050f-4de5-bae3-0bbcab862930",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b8233b83-f55a-4af2-bce5-3adcb3804056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d394004f-bbbe-4530-909c-75405d59065a",
        "cursor": {
          "ref": "c979e9fb-5a0e-4167-be31-594294cdb80c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "86f6d224-1d72-4436-b9dd-a460da9f0895"
        },
        "item": {
          "id": "d394004f-bbbe-4530-909c-75405d59065a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "63551533-1185-4d8b-8390-4a3ce882536c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af642ca-5292-4666-9ffb-5ede5a73093d",
        "cursor": {
          "ref": "57d1ab4d-a888-4d31-8ede-81b459e59ede",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "54484f6d-2cfa-45a0-9966-a8bbf545a04f"
        },
        "item": {
          "id": "3af642ca-5292-4666-9ffb-5ede5a73093d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "97ed3e1b-7694-4e2e-9430-d7f9061ae843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90bd1f0c-d74d-4ace-924d-01efa8d2fe55",
        "cursor": {
          "ref": "bec59e0b-bb8a-4447-8733-caaffcca1750",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "40f418b6-1827-46c9-9d45-8f4694ab99ca"
        },
        "item": {
          "id": "90bd1f0c-d74d-4ace-924d-01efa8d2fe55",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dea20b86-6d53-4d07-ae09-9f66db6f7ec0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424c4d96-132e-4c3f-b5ac-80ec5a661946",
        "cursor": {
          "ref": "1f6fc2f9-6adc-4d4f-a64e-633bec5eab24",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c5290f29-8877-42b9-8f45-771661b6e187"
        },
        "item": {
          "id": "424c4d96-132e-4c3f-b5ac-80ec5a661946",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ab21a6a4-eda6-4c97-9f39-623a99a161fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "dc6abaa8-b59a-4145-acae-0bd9bc216817",
        "cursor": {
          "ref": "8cdda688-fedd-4adf-b9b1-7cf8b1dcb73b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "eb3db201-9586-410a-bfc0-aaeb148c013f"
        },
        "item": {
          "id": "dc6abaa8-b59a-4145-acae-0bd9bc216817",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a1a492cc-fd22-4bd6-8812-b9732761f798",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b93f50b-ec5a-4b1f-a803-e8b3c5d30e01",
        "cursor": {
          "ref": "31861651-1fc1-4fef-8b8e-827ce753a614",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "240e64c8-1720-49ad-8b6b-1909f761e8f6"
        },
        "item": {
          "id": "6b93f50b-ec5a-4b1f-a803-e8b3c5d30e01",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "cf353d6a-4e1c-49fd-9796-e2e58f564493",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "37de446c-2bf1-4b13-a087-90025b361c9e",
        "cursor": {
          "ref": "f72de2ec-65f9-4879-93b2-955e9081dae8",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "12595cef-9aee-4a8d-9b1e-f7de9f0be76c"
        },
        "item": {
          "id": "37de446c-2bf1-4b13-a087-90025b361c9e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "edf72920-86df-48ad-8220-b5b0c0548286",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9995b3d-a019-4462-9a00-702d034a7898",
        "cursor": {
          "ref": "d9fb9270-0f9f-4b1b-9a07-db155732691f",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e516ac70-0036-4d75-82e2-3b5644b019a6"
        },
        "item": {
          "id": "a9995b3d-a019-4462-9a00-702d034a7898",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e8ba12d3-2e34-4866-ad55-91ccc23350dc",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc963d8-7556-4e52-a9fe-cef6c7fae88d",
        "cursor": {
          "ref": "e49941bb-c273-4d24-aa59-4ecc1ea876d9",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1b1accdb-67db-4b07-9199-3e16144bc61c"
        },
        "item": {
          "id": "0dc963d8-7556-4e52-a9fe-cef6c7fae88d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e427741b-2320-4b61-b93a-f377dcb8c554",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-31T00:34:16.548Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-31T00:34:16.548Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b0c07ab9-5709-4026-9c96-29f01f05d88d",
        "cursor": {
          "ref": "918a34ea-4cb2-40d1-99df-4471ecdf1f2b",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5f99a6d0-bd4b-4c9f-b59c-477cc54133e9"
        },
        "item": {
          "id": "b0c07ab9-5709-4026-9c96-29f01f05d88d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3d4659c4-141e-4048-bee0-d1aee2d4437d",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a3ca90-623d-4a2e-9f11-d0fb7e9073bc",
        "cursor": {
          "ref": "4b05f47a-9a05-4b1f-b707-a71d7c0e9308",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "65ae7258-d8ae-4ce6-9812-2dd19340d737"
        },
        "item": {
          "id": "09a3ca90-623d-4a2e-9f11-d0fb7e9073bc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "230c298f-e44c-4a66-994a-3494f262e3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af04ed79-9f0b-4c5c-b9b5-37c1e9974545",
        "cursor": {
          "ref": "8e762c2c-c3f1-4eb2-9e49-51550b26876e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c78b7d39-7a81-4c6b-b3e6-e5491108b0d4"
        },
        "item": {
          "id": "af04ed79-9f0b-4c5c-b9b5-37c1e9974545",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9d3dac65-7e50-4a3b-8925-dcbb8a9b6d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d520c06c-4db2-4a2e-b7d7-6330c9826fec",
        "cursor": {
          "ref": "9307658b-1381-426c-b810-30d46028955b",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "521f1a1e-fd1d-4425-b4f0-52d8d6c0a37c"
        },
        "item": {
          "id": "d520c06c-4db2-4a2e-b7d7-6330c9826fec",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6e2d1ae5-8944-450d-9b59-b74f53f023ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ba7212-1735-40bb-b0bd-6db9c741d6a4",
        "cursor": {
          "ref": "56c722e0-7b69-44bc-b0e4-f431107b9cba",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5f60c460-b846-4995-ae9b-3e5f428b6368"
        },
        "item": {
          "id": "f4ba7212-1735-40bb-b0bd-6db9c741d6a4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "67eeead8-a305-4bb3-b70e-ea2c6f2dd316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baccfafb-78a6-4da8-86a8-5314169e7499",
        "cursor": {
          "ref": "eb178b69-d7c1-4aa6-9c0c-321f394cca53",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "eb8e0a9e-99ec-498c-a8e0-dcf8340ea10d"
        },
        "item": {
          "id": "baccfafb-78a6-4da8-86a8-5314169e7499",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "af917124-6b18-48b2-8687-8d62343e507e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56246609-a194-4bb6-ac73-6bf90cd89830",
        "cursor": {
          "ref": "cc54c100-8712-49a4-917f-d85965bcb147",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "566690f5-b61b-4e7f-bdae-754a7d03d53f"
        },
        "item": {
          "id": "56246609-a194-4bb6-ac73-6bf90cd89830",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9a303eda-dc89-4a46-af5d-402cdc584d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7cbb202-1884-4983-b39c-c49d0c66fb3f",
        "cursor": {
          "ref": "df19aa1e-c841-4e7d-95a1-f5a52a053db7",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2a32769b-8d72-40a3-896d-08fab3cae00f"
        },
        "item": {
          "id": "b7cbb202-1884-4983-b39c-c49d0c66fb3f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2b70c1a3-acf2-4cb7-9b66-85d03bd647e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef12147-0d70-422d-9ce9-50e797121542",
        "cursor": {
          "ref": "ac8ba730-7da0-4492-9eb4-7c98cf10626d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3b2db868-0f10-4a15-81a2-8fe9c2ade747"
        },
        "item": {
          "id": "fef12147-0d70-422d-9ce9-50e797121542",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "89139148-ebfe-4959-9119-5ca1d3563b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07414bdd-203f-4f64-bf8d-23410c8ed2c8",
        "cursor": {
          "ref": "a65041c6-9e5f-4648-a0f2-4b96982758d0",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fad4679e-c47d-4440-9dfe-06b228e09ee5"
        },
        "item": {
          "id": "07414bdd-203f-4f64-bf8d-23410c8ed2c8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c8d6d22a-fbb6-409d-9654-6f5a782281ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef211c5d-baae-40da-8686-d43d0b6d5497",
        "cursor": {
          "ref": "cfbc2a61-3405-4184-9317-d9cd33823c8a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7ead4465-1bfa-430b-b7ba-ce6d0e1b6fd9"
        },
        "item": {
          "id": "ef211c5d-baae-40da-8686-d43d0b6d5497",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b5f7dfa1-271e-482f-97de-caa1f7ca64f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d409993f-9912-4b61-9cab-cd6a8b6c09dd",
        "cursor": {
          "ref": "f32c6c37-4ca5-477f-bc36-f56ed724db24",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6c7bbe71-78f1-474b-b311-3868ce79510c"
        },
        "item": {
          "id": "d409993f-9912-4b61-9cab-cd6a8b6c09dd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1e6fad3b-b730-4766-9958-a51ab478d935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d81cd7-7557-4d5d-9f74-772ef18d2999",
        "cursor": {
          "ref": "d5050b32-016f-441c-8c3c-4b3ef49482e2",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6122b049-7b25-4a00-aa1d-04c58297ae28"
        },
        "item": {
          "id": "d3d81cd7-7557-4d5d-9f74-772ef18d2999",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d348000c-f00f-4e8d-90ad-e32ef6f14894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ea5378-aa02-4418-98e0-065e36959502",
        "cursor": {
          "ref": "84216a45-7e93-4945-a7b5-e380f3791bac",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "dd2266ea-5f90-4ce0-8a93-ed324eb28db9"
        },
        "item": {
          "id": "b1ea5378-aa02-4418-98e0-065e36959502",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f87f95d2-63de-4a90-9039-9d4a2545460c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0eb8bf-0ab8-4e7b-916f-605aa64c38a6",
        "cursor": {
          "ref": "f53902a6-dc7e-4a15-b306-ce67313b520a",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "75a0a6ac-ba4e-4aa4-ae84-e830b803a4aa"
        },
        "item": {
          "id": "9a0eb8bf-0ab8-4e7b-916f-605aa64c38a6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0bbaa692-7bf3-4d9a-aded-38d9544ed66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17686cf-2d18-41fe-8843-314d0784b0f6",
        "cursor": {
          "ref": "70883f88-560c-43aa-a428-6a46b11c2059",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1fe40752-c521-4879-9c8d-8180677492b2"
        },
        "item": {
          "id": "c17686cf-2d18-41fe-8843-314d0784b0f6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b7af2058-24d5-4f8b-aaba-6318b3faa93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bacc6f-fb71-4fcb-98ff-05d49f577f2a",
        "cursor": {
          "ref": "7651012c-2e73-4776-bacd-5c73fe656106",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5fcb434f-46f5-43cb-ad62-133de75c27cf"
        },
        "item": {
          "id": "b1bacc6f-fb71-4fcb-98ff-05d49f577f2a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9955c092-9315-400a-b095-7cbb3147ee01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b42508-3733-430d-8639-40e1c67741f1",
        "cursor": {
          "ref": "b4fc9711-8a39-42df-9ece-e361566cbd44",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c31803b8-9682-4340-a83b-ffbdb9075b7c"
        },
        "item": {
          "id": "d0b42508-3733-430d-8639-40e1c67741f1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e67ee3bb-8a13-4e08-9f34-f9830dfbeef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b15e6c-63de-4da3-ad1a-8974c5b7029c",
        "cursor": {
          "ref": "fe69b435-6d99-4f79-a6ab-c19c5cb36d3a",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3d36b4e7-fbe7-4cfc-b935-8ee697a649b3"
        },
        "item": {
          "id": "98b15e6c-63de-4da3-ad1a-8974c5b7029c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "554d0140-79f1-4a68-915d-93aa7d53411d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a06b7c1-fd6c-428d-a03e-b8e3b12c730f",
        "cursor": {
          "ref": "ce794eb9-d1c3-4f6a-83c2-579fe93ecef5",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f1a3ca5e-9884-48ee-9db0-8cc76411327b"
        },
        "item": {
          "id": "8a06b7c1-fd6c-428d-a03e-b8e3b12c730f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d6c4e596-f8d0-43c9-9bce-43c2bca6c393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ef37d8-6b4a-483a-9277-2e694438ea60",
        "cursor": {
          "ref": "a0279666-dd58-4c2b-b5e6-d55e5c147b2f",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f4ee5288-92ce-401c-9064-812fb8b6202e"
        },
        "item": {
          "id": "b7ef37d8-6b4a-483a-9277-2e694438ea60",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "91d86854-97d5-47e2-bd8a-6c2358f49507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16955f9-84f5-40dd-853a-04e3a4912048",
        "cursor": {
          "ref": "8c607c64-cfa0-4a4b-81d8-13e6a492d504",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fddf3309-1c19-4234-8f9e-82d978108b63"
        },
        "item": {
          "id": "b16955f9-84f5-40dd-853a-04e3a4912048",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5c3a0ab9-c807-45b3-9f86-0f2c87905fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac23a3e8-0d3e-43c2-85ae-7db808a31dac",
        "cursor": {
          "ref": "48b78602-0179-4537-8cc9-f70f90b44604",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "88115e2c-04a8-4127-8082-938851698059"
        },
        "item": {
          "id": "ac23a3e8-0d3e-43c2-85ae-7db808a31dac",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b6a6f877-ae79-4164-ba69-2540b09c3d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5baed4d-da54-42b0-942b-2f8d2fa9557b",
        "cursor": {
          "ref": "44906c69-4d32-48b9-8dce-1c0235c5deea",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ce2e26f8-e20d-481f-b72a-44c5029198e7"
        },
        "item": {
          "id": "e5baed4d-da54-42b0-942b-2f8d2fa9557b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "40d2fa8f-be5b-4e03-967d-ef3fbbc09017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ffc290-90fb-4473-a77d-806e9aec8b8c",
        "cursor": {
          "ref": "90e42a62-16e7-4607-b4af-ba44615bc189",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "dffe25cf-f0f3-4973-b561-016beae04c43"
        },
        "item": {
          "id": "99ffc290-90fb-4473-a77d-806e9aec8b8c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0a4d553a-8b4c-449c-93aa-a494cc4a7b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27b1634-12b0-4a0e-b410-9705adee9e89",
        "cursor": {
          "ref": "e3a12ec1-80b8-42e7-9ef5-44dd56d4b5f3",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "62f2fff1-6c36-49a6-8e01-02f878282698"
        },
        "item": {
          "id": "b27b1634-12b0-4a0e-b410-9705adee9e89",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7758a212-2ae2-48d4-8ab8-057abb7438af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360e5ae6-78c5-4b8b-b4da-0cdb3ef20aba",
        "cursor": {
          "ref": "7797581a-78d7-4ec6-9f76-4ff0322f6c3c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "111c073f-4540-4e96-8cae-ef40c1ef58b9"
        },
        "item": {
          "id": "360e5ae6-78c5-4b8b-b4da-0cdb3ef20aba",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "94899d36-884c-4d09-8d88-30a438251e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c11542-d62d-408d-ac8a-244cfb777291",
        "cursor": {
          "ref": "da609149-9e02-4a7d-b55a-a62db1cb53d1",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1732f251-c10d-40f6-b45b-147bc9eaf82d"
        },
        "item": {
          "id": "85c11542-d62d-408d-ac8a-244cfb777291",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e986428e-0f59-427b-af07-7b3358becba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d991b29e-16d9-4467-be28-1b0f7eeaf518",
        "cursor": {
          "ref": "881933c2-9c35-4e59-b8d7-f43b59e1996f",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "61012573-315a-4a07-a676-491d3e60e133"
        },
        "item": {
          "id": "d991b29e-16d9-4467-be28-1b0f7eeaf518",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6e5f0891-8605-4c10-8ee7-088f90181372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4cd1af7-afb4-4667-932d-21ad16f216b7",
        "cursor": {
          "ref": "7b830884-a01d-4c1a-85ec-119f436b4561",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2356a079-ee05-480b-aca4-50f5e0af4fb0"
        },
        "item": {
          "id": "d4cd1af7-afb4-4667-932d-21ad16f216b7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8ad1ea1a-d99e-45b1-a1ef-e9704219eb56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e53934b-0653-4b36-86f2-25478f012b5c",
        "cursor": {
          "ref": "0eea5706-ec68-4309-a927-8f9a59d91b15",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "49e71470-469e-480f-8c8e-19fb2579b05b"
        },
        "item": {
          "id": "9e53934b-0653-4b36-86f2-25478f012b5c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "faa7a0df-bf21-4aa9-bcde-b2ea638926b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9263ef1-a0cf-4da4-8a44-e4ab9084516d",
        "cursor": {
          "ref": "339d4083-ef03-4d3e-b939-39f7c05fc4ab",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "36c36488-d2a6-429e-aa3e-02e8353065bf"
        },
        "item": {
          "id": "c9263ef1-a0cf-4da4-8a44-e4ab9084516d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cb0d6f86-47e6-49e8-bf37-742f3158f4ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f05434-d5f8-44b9-b56c-2356d1f00b95",
        "cursor": {
          "ref": "70925de1-4530-47d3-82da-e6cd42819f5a",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5a4b59a1-9269-42a5-bd31-aa1dae6a2f54"
        },
        "item": {
          "id": "13f05434-d5f8-44b9-b56c-2356d1f00b95",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ccf316cf-f27c-4aa9-8e16-585a14d1c0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b96a40b-ec07-4f4e-b90e-08ae284ff932",
        "cursor": {
          "ref": "f1dc8a8f-a6a5-47e6-a21c-26d5481ce38c",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "43691c1f-02e3-405e-9f06-44052b9c9543"
        },
        "item": {
          "id": "7b96a40b-ec07-4f4e-b90e-08ae284ff932",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f11fa6b9-16df-4444-b9b5-782f4cdb2113",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9021dbe4-5826-4e9e-82ff-7d244a48b4a8",
        "cursor": {
          "ref": "77db8c9d-95d2-4f69-be82-804096e165c8",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "49e646cb-ac7b-4176-a82f-3a2c1f45a00c"
        },
        "item": {
          "id": "9021dbe4-5826-4e9e-82ff-7d244a48b4a8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "063fc8a1-cfb7-4ad0-bd85-4fd139ba8094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a93450a-ca1b-4a93-b9c0-8e058bb78cbc",
        "cursor": {
          "ref": "71bdb84c-e8a8-45d4-97fb-3ff5a20c70c8",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d19fb765-3098-4c4c-8b66-446d5455e181"
        },
        "item": {
          "id": "3a93450a-ca1b-4a93-b9c0-8e058bb78cbc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3c7e1849-ce01-4954-a02c-daff9f63cae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbed79e-2d88-4a39-894f-b226a6990186",
        "cursor": {
          "ref": "1105bbe8-5bd7-414b-8951-1b847f41d428",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8cd77073-e3d7-4a21-963a-7406591655fe"
        },
        "item": {
          "id": "bbbed79e-2d88-4a39-894f-b226a6990186",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7f24e512-d7d7-4733-a36b-6f3051324756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df5cfb8-bdc4-4e33-8b23-f87ee3ba6ab6",
        "cursor": {
          "ref": "aa2abeb0-da96-4d1d-b8e7-5aca2a36e93e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5c26be6b-737d-4c2a-a35d-0c14bbeb2baf"
        },
        "item": {
          "id": "8df5cfb8-bdc4-4e33-8b23-f87ee3ba6ab6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9ed3339a-88e3-41f9-b2bf-0315753622d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4568f24d-d481-4eae-bbdc-c9a80c373514",
        "cursor": {
          "ref": "8672776b-16ac-405b-b69e-ccc6a46b953e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1eef8c4b-b8f1-4b95-99b5-44cd9d10f18a"
        },
        "item": {
          "id": "4568f24d-d481-4eae-bbdc-c9a80c373514",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3e498834-51e4-41c1-8fd7-47e379e5f060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2755e833-513b-41e9-b1c9-edc9689f049a",
        "cursor": {
          "ref": "3174c6c9-03cb-4edd-8bce-9c44fd3e015f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9c368040-50ae-4d77-9401-a1a99fb0f3d2"
        },
        "item": {
          "id": "2755e833-513b-41e9-b1c9-edc9689f049a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3764466d-d7d8-464a-acde-c9d0b541b5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7f6de2-c2b9-492b-a450-dcdda8f137ea",
        "cursor": {
          "ref": "0530d5d1-caf1-4a38-b4af-b34c1bfb6448",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c1f92126-cdc0-471c-9f8d-72caebdae4f8"
        },
        "item": {
          "id": "ad7f6de2-c2b9-492b-a450-dcdda8f137ea",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "acd17536-213d-4141-9615-47c3c3f283a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc41414-caef-4b7c-9f34-2ee1daab9581",
        "cursor": {
          "ref": "43685358-8573-4e4a-b4f6-c95ff335d8cc",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8d718224-be5b-4a03-abbb-75365f3c75b7"
        },
        "item": {
          "id": "8cc41414-caef-4b7c-9f34-2ee1daab9581",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9a5b82e8-f110-434d-8c4f-06116986057a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad106b8-a0ea-405d-bd50-7620d2a5da79",
        "cursor": {
          "ref": "ec3df7bd-4725-436a-850a-06c59a0ba237",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "296c2653-221a-45cd-a212-3c3e4be2dc11"
        },
        "item": {
          "id": "8ad106b8-a0ea-405d-bd50-7620d2a5da79",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "90219aa3-cedd-4822-bedc-efbf33ce449e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f867b72-ffcb-4bef-9d4c-1d26366a7a9f",
        "cursor": {
          "ref": "e2215e83-ec06-4acc-9650-638924fbd0d8",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "743d1167-766f-4e8d-b2d5-fdbf391f7d10"
        },
        "item": {
          "id": "2f867b72-ffcb-4bef-9d4c-1d26366a7a9f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "83467f65-0ae7-423d-bd0a-bff2258966b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8bf7f9-dfba-4731-bb58-2f4da5b01b16",
        "cursor": {
          "ref": "38a6899f-8681-4687-88cf-99fb2effa817",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "20dab918-dd92-4d0c-a83f-49d3b7e5c1db"
        },
        "item": {
          "id": "9e8bf7f9-dfba-4731-bb58-2f4da5b01b16",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "33f3bf85-33f8-49b4-aa64-9575385deba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6045f470-3ce3-4ee8-a79e-37c57ca81612",
        "cursor": {
          "ref": "95846268-2452-4f62-93a9-2eb8bc30c04f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0ca75539-6cae-449d-b8f1-39a6e0df481c"
        },
        "item": {
          "id": "6045f470-3ce3-4ee8-a79e-37c57ca81612",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "402d197a-9b4f-40bd-9a28-53d22ef65c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6084bff2-b0f6-4b03-ab44-a0747a9b8d69",
        "cursor": {
          "ref": "de1ca047-8739-4d1f-bcd5-7710fa12bb17",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7a960216-d1fc-4994-9ba6-012d6beb4180"
        },
        "item": {
          "id": "6084bff2-b0f6-4b03-ab44-a0747a9b8d69",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3dbcda26-d438-4c05-8182-8afc8757598c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d91f67-de10-46a6-b895-0c5388136582",
        "cursor": {
          "ref": "433f81fc-93d5-4636-915c-15a0e77ed301",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "70dd971d-ef85-4aa3-8e85-ba02d4e18982"
        },
        "item": {
          "id": "c4d91f67-de10-46a6-b895-0c5388136582",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3db93933-45fb-47a4-8d66-e5cf6316b984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6953c59a-b12f-4b4e-a8fb-d041e6209ce1",
        "cursor": {
          "ref": "617178c9-2f79-4994-b987-67db0e429ce3",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c4a5a954-e85f-4e71-9af4-f1d497abe2b0"
        },
        "item": {
          "id": "6953c59a-b12f-4b4e-a8fb-d041e6209ce1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d6791eed-9975-4c6c-9680-c9d63da24285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c833aefc-cb69-4375-8875-7b2034b722e7",
        "cursor": {
          "ref": "364011c4-eca7-48da-9091-b69c7c005095",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "75d3c939-ca53-468d-98d8-05d6d36a54ef"
        },
        "item": {
          "id": "c833aefc-cb69-4375-8875-7b2034b722e7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "53b6cd2c-e504-4692-9bf9-125d90e1c99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bf6f0a-d650-4638-a720-d41ca36383d8",
        "cursor": {
          "ref": "8572e794-2527-4398-b7a6-0e35c23fd5a2",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "05bb59ff-c436-4353-aa4b-b331f3f6083e"
        },
        "item": {
          "id": "94bf6f0a-d650-4638-a720-d41ca36383d8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "97898e31-8d8a-46cf-a013-18baf73aa745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea51935-72dc-498b-a8c9-ed12772c38a4",
        "cursor": {
          "ref": "d167d6e8-b4c4-444e-934f-70e7686dc336",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d8e43c06-f34e-4db8-8217-ca6b2d90b3b2"
        },
        "item": {
          "id": "4ea51935-72dc-498b-a8c9-ed12772c38a4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3eda7e9d-2f28-4e77-9561-347a8052bae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f5ee3e-abcc-40c0-9162-3ebdee5778ef",
        "cursor": {
          "ref": "0f6d6700-d2d6-4761-bcef-a4df36f63bb4",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2bb8ccb2-5557-4180-94c9-5fbaac2118d2"
        },
        "item": {
          "id": "13f5ee3e-abcc-40c0-9162-3ebdee5778ef",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3fc5ab82-7bb1-4c7f-81ff-60ac4b455bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd12209-5564-4452-ae7c-4dbf752660ff",
        "cursor": {
          "ref": "a49776f7-daea-4716-b7c6-9e228755b357",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5696e7f3-cc04-4d40-b860-811145379b08"
        },
        "item": {
          "id": "dbd12209-5564-4452-ae7c-4dbf752660ff",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4f50640e-dbf3-4868-b84e-1c31310d92aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27cf7f4-e174-4838-8f28-89736cabca63",
        "cursor": {
          "ref": "2d14ad44-b0a3-4629-824d-c5502ba4febb",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6e014eac-bfea-46fd-8773-e39cdc9176d0"
        },
        "item": {
          "id": "b27cf7f4-e174-4838-8f28-89736cabca63",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1a1dbae7-d6de-4b51-b61e-3d50755a99cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb1fdd0-7d90-45fb-8426-31efc60d7d36",
        "cursor": {
          "ref": "849391e9-8fb0-4705-9e68-dbb72725c0d5",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "30ad3567-722e-4919-8c48-bb3d5d6f13eb"
        },
        "item": {
          "id": "ffb1fdd0-7d90-45fb-8426-31efc60d7d36",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8828d83a-6401-4bb3-85c5-075813999d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da090f63-e00f-49cd-b17f-a73feb378f05",
        "cursor": {
          "ref": "2d619748-9dda-46a8-97ac-f8677173e946",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "98e3e889-ef02-4a32-9514-b58e0e65e20a"
        },
        "item": {
          "id": "da090f63-e00f-49cd-b17f-a73feb378f05",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "538d1e1a-fd1b-437b-84a8-f5ead62e6a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b670672f-f592-4d1b-b1cb-205825d8529b",
        "cursor": {
          "ref": "a8b32207-312c-4db0-9b0b-8cc77f8ef262",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e9ae37c0-c528-49cb-9231-b63b73b25e60"
        },
        "item": {
          "id": "b670672f-f592-4d1b-b1cb-205825d8529b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b29bdea1-de94-44ca-9baa-8c683007b815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d76619-b9dd-479d-86eb-c8b5fd9e3be6",
        "cursor": {
          "ref": "7cf571c2-d206-4fc4-878e-b663ea597e33",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8ed2ac81-9886-4c26-b534-c20f0b789a6a"
        },
        "item": {
          "id": "54d76619-b9dd-479d-86eb-c8b5fd9e3be6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "88872962-2386-4d61-9937-cc5da69ff601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227caa4e-e862-41f0-93b2-f2b269455744",
        "cursor": {
          "ref": "ccf6f8bf-9fc9-443f-81c6-8223058d4149",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cb400c9c-3d20-43df-8d3a-2c47d818ade1"
        },
        "item": {
          "id": "227caa4e-e862-41f0-93b2-f2b269455744",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4cb3be69-a8ee-49f8-b750-bf1f82e2fd46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551d6bfb-519e-4870-bacf-54acf2a9e0ad",
        "cursor": {
          "ref": "1f529c14-00d3-4894-833b-81cecbd16a8a",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3b68953c-1920-4f81-a742-965b45e9d1dd"
        },
        "item": {
          "id": "551d6bfb-519e-4870-bacf-54acf2a9e0ad",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f5f94ea4-3c72-4ec7-858e-6680811c75e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a831434-f216-4791-ab11-3fc8dbda8505",
        "cursor": {
          "ref": "1f5d34e7-29ed-4ade-9696-47c5fa486abd",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fd3289de-c567-45ad-8ec3-562612722566"
        },
        "item": {
          "id": "6a831434-f216-4791-ab11-3fc8dbda8505",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "48a1069c-ca7a-47e6-9587-ab54b347835f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de02319-e59a-4a1a-971c-cad03a2d9bb0",
        "cursor": {
          "ref": "2d5fb5d9-d94a-4e47-ab99-a2e09d74719e",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e4771769-6c21-4517-812e-4ceccb1a8dc3"
        },
        "item": {
          "id": "2de02319-e59a-4a1a-971c-cad03a2d9bb0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c654939a-239b-467d-93af-89bd872c2691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362a6622-17d7-4794-8606-a787ee434526",
        "cursor": {
          "ref": "8ee55cde-97bc-4ff3-b462-ef7f2cb1ef0c",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d4956426-3d4f-4659-b449-1732c531b317"
        },
        "item": {
          "id": "362a6622-17d7-4794-8606-a787ee434526",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9f1b41a3-872a-429f-a379-1446fbd4c270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f21d60d-40cd-4504-8d80-82b91763a31d",
        "cursor": {
          "ref": "f8c3138a-58bf-4ea4-8d71-a6d9cde54fd6",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "248c52e1-267b-4877-9f40-657d4dc24af4"
        },
        "item": {
          "id": "1f21d60d-40cd-4504-8d80-82b91763a31d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fa1ed306-2bee-48b6-978e-3d3e392f5565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54cc9035-ec21-4f59-9b44-4a2fc6a31cda",
        "cursor": {
          "ref": "dcf3aeca-c9c8-43d2-8139-4c07f25267f7",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "587f6a7c-972d-4c7d-a5ea-60b4b714fd40"
        },
        "item": {
          "id": "54cc9035-ec21-4f59-9b44-4a2fc6a31cda",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "64c44027-7309-4164-a565-985febe7c0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b159ffb-d048-4a0a-9a02-7ba20619a6d0",
        "cursor": {
          "ref": "cdcda178-d87c-49af-915c-2e955c6817d5",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "97247ccd-a319-4223-900c-8663b600f304"
        },
        "item": {
          "id": "2b159ffb-d048-4a0a-9a02-7ba20619a6d0",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "475e8864-dd3e-4e06-93c6-2f5c07e9999a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f4bdfd-cae8-4d5d-bd5a-f9d0e28c9862",
        "cursor": {
          "ref": "90a74161-6289-4a14-a56a-18ac149d5482",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "15faab65-2f6a-4d3c-8d88-7c98e2348676"
        },
        "item": {
          "id": "86f4bdfd-cae8-4d5d-bd5a-f9d0e28c9862",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "fa48a014-7687-491f-a441-b9514e0090da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95579cc3-bf46-4548-8dc2-9372104fab0a",
        "cursor": {
          "ref": "f3b49954-8dfc-49f0-8432-e625cb44fd89",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1b740f98-17a8-4a9a-ac08-db46929a477d"
        },
        "item": {
          "id": "95579cc3-bf46-4548-8dc2-9372104fab0a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "83aba0d3-5797-43a5-99b8-fe2bd1241353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034f1a40-4029-402e-82a8-a49a5c2a186c",
        "cursor": {
          "ref": "17c5c8a3-081a-40ec-9492-cbabe9a2fa0a",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "05ca61ea-65a7-4744-8357-87dd7ce38484"
        },
        "item": {
          "id": "034f1a40-4029-402e-82a8-a49a5c2a186c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a001a8ec-3384-4105-b524-d666fd9eadbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebd0eae-791b-4f5a-ab8c-a6f13f0f3b75",
        "cursor": {
          "ref": "180a9e7e-6b3f-4c5f-8185-0f79c044894a",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e613e9dc-0228-4947-ab67-903d671aa47a"
        },
        "item": {
          "id": "3ebd0eae-791b-4f5a-ab8c-a6f13f0f3b75",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9a006409-f000-4682-bac7-6a8d716e032d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d2b5fe-a4ce-4248-9ecc-0201a9eeefeb",
        "cursor": {
          "ref": "c2589826-e2de-43c2-84dd-810cf56ff0cb",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "38edf5d0-16e3-44c1-a342-54b3bf691c17"
        },
        "item": {
          "id": "96d2b5fe-a4ce-4248-9ecc-0201a9eeefeb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "04af2e99-0601-44de-adae-ce2fbafb66bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35486c3b-e027-470d-81ab-41d8aea21737",
        "cursor": {
          "ref": "a30396d1-6f4d-4aae-a225-9559e2638cd1",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "976da5d4-741c-4f4d-a7f2-38d6828d3539"
        },
        "item": {
          "id": "35486c3b-e027-470d-81ab-41d8aea21737",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b43119fc-908e-4dbe-a378-8e866fd3c716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16040983-363d-4013-81a5-dd5763a21c97",
        "cursor": {
          "ref": "b4a153d4-e11f-4ef8-860d-dbdc2c366061",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3a20793a-7945-4323-8fef-a841b20cbb8c"
        },
        "item": {
          "id": "16040983-363d-4013-81a5-dd5763a21c97",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b7fd9e96-b0f1-4a37-8116-369b2ab594a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214e528b-8054-424f-893f-994038a4205d",
        "cursor": {
          "ref": "caaa7a56-29d5-4890-9a98-9a5e71e8e504",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cd857273-49cf-48de-b7a3-f5b2393f639f"
        },
        "item": {
          "id": "214e528b-8054-424f-893f-994038a4205d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0fc776ac-4307-45ab-a380-1d63b59361b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b08142-8374-4f13-af14-776cf3328a0a",
        "cursor": {
          "ref": "25482be1-a88b-4ea1-a165-baa256da3fe9",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "95c01aa9-1882-438f-a54b-5fc80fae5a95"
        },
        "item": {
          "id": "98b08142-8374-4f13-af14-776cf3328a0a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b481c83c-9739-4228-b576-bcc6d576b746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3452201b-1633-47c5-bc5c-8c5666412ba0",
        "cursor": {
          "ref": "aec26d66-e85b-4852-927c-0085a1e3fb77",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "be61e87f-42cb-44f4-94b5-ee5f8bebe7f3"
        },
        "item": {
          "id": "3452201b-1633-47c5-bc5c-8c5666412ba0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d591d275-fb3f-462a-a320-3b1f46615b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c995ce43-f18f-4f44-a4aa-28d25c0414e6",
        "cursor": {
          "ref": "5b33de80-22b2-4aad-9e9a-c3b7e40cda9d",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "83c80c6f-89d3-44a0-b6d3-56dd19a59727"
        },
        "item": {
          "id": "c995ce43-f18f-4f44-a4aa-28d25c0414e6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "566c0c63-9077-4a59-8c85-3bb63cbf89dc",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "393df292-4cd1-4406-9130-491bf2399c66",
        "cursor": {
          "ref": "26f9a171-6368-4b32-ba13-09ebc4ab376f",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0fa52f56-35f3-4465-b817-40193395b4c9"
        },
        "item": {
          "id": "393df292-4cd1-4406-9130-491bf2399c66",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d73661e5-550f-4daf-93cd-1c5e145e1e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85a8c35-4978-47c6-8c9d-93635ff8e33f",
        "cursor": {
          "ref": "5d85e0b0-77b8-463c-a12a-3a1eab7a4dcb",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "07728b32-4e75-4cc5-a5ec-766280aa1ffa"
        },
        "item": {
          "id": "d85a8c35-4978-47c6-8c9d-93635ff8e33f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c1ae4f81-139e-4325-a69a-a3b0aa9d169c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110fdbed-d6be-4a25-80d7-a300d19fe8ce",
        "cursor": {
          "ref": "95074ae8-fc22-46df-b128-38364744432a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "06bedca2-d540-43b9-a74b-a817f1834c38"
        },
        "item": {
          "id": "110fdbed-d6be-4a25-80d7-a300d19fe8ce",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "238939c1-42f7-4b70-9493-b37666bf8a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521410e1-7ab7-4f61-9b30-cb76173b7867",
        "cursor": {
          "ref": "8444123b-917b-4e0f-9bb3-44097e0041ba",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fde86b90-7368-43bf-b1be-df8b434f277c"
        },
        "item": {
          "id": "521410e1-7ab7-4f61-9b30-cb76173b7867",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8cff58ba-3dd3-4eeb-b118-b5e84d680c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dddaf69-d238-4708-bf11-becd88e141d6",
        "cursor": {
          "ref": "721be97f-922c-4df7-a9ab-3f15d797ceb1",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e2fac98f-914a-4904-8241-d428590b3d9b"
        },
        "item": {
          "id": "5dddaf69-d238-4708-bf11-becd88e141d6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "460782c5-4501-4c13-8308-80dd2b71655e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1e00ab-8e55-4a61-b81b-6683b61f7b04",
        "cursor": {
          "ref": "6ddd8b52-04bd-4d4a-8d67-aa84051e821b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bd908bf1-7c3e-4507-8419-4301e555e061"
        },
        "item": {
          "id": "0b1e00ab-8e55-4a61-b81b-6683b61f7b04",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e11f0b9b-697e-4b60-a9d9-5e8489179256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b0dc55-726a-4c57-8ddd-9c4e26c67154",
        "cursor": {
          "ref": "8a60144b-fcf6-4ded-8e20-dee53ee3bdf0",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "321d8720-fd56-4392-8f90-66a64673f195"
        },
        "item": {
          "id": "d9b0dc55-726a-4c57-8ddd-9c4e26c67154",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e4daaadd-8a45-407a-a6f0-25f2b439c438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940df88f-c1de-4ce2-9608-a2fdb9e2a6be",
        "cursor": {
          "ref": "0973498a-a4af-46a6-b9f4-9dd1af60dbf6",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "84664bf3-def5-4f7c-b1ed-1549c75aac07"
        },
        "item": {
          "id": "940df88f-c1de-4ce2-9608-a2fdb9e2a6be",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7a9b9f06-c219-47c7-873c-1a74d5d1cd7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f584a97-40a2-4b55-935b-2e64580d79b9",
        "cursor": {
          "ref": "d86756fb-517c-4a5a-987d-4cc504e25b65",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "31c20b22-adb0-4cce-807d-6fedeb053ae3"
        },
        "item": {
          "id": "7f584a97-40a2-4b55-935b-2e64580d79b9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f3182dc7-229c-4175-85f2-2c248f04e55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d74df5-a0fe-4e95-9bb9-958aab03ea56",
        "cursor": {
          "ref": "105bc40d-8762-434f-850e-63ff4ef35c41",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2d57d80f-bb60-4af3-9dd0-d00cd1e610db"
        },
        "item": {
          "id": "36d74df5-a0fe-4e95-9bb9-958aab03ea56",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d53c9c7c-8c3c-4680-9cc7-2ca8d417a541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedc63d9-4493-4940-a5b4-c83b47076cd1",
        "cursor": {
          "ref": "4f26b1bf-019b-4824-8fd7-f7bfff010d7a",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "acfdbc15-ca4f-4f90-a8b9-50c16d4798b7"
        },
        "item": {
          "id": "cedc63d9-4493-4940-a5b4-c83b47076cd1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "afd91e5b-1836-44a7-ac14-b9782d731d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f64642-bb8a-4c22-a883-714eaa00c9aa",
        "cursor": {
          "ref": "cf69aa95-e4f0-47de-9612-d0aaebd96bc2",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ac43700e-eb7b-440e-8238-43ce96a79d0d"
        },
        "item": {
          "id": "a9f64642-bb8a-4c22-a883-714eaa00c9aa",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "19fa5708-a3d1-43bb-9642-99b5d797f55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5615b632-ca7d-4aa8-a614-97c62038320f",
        "cursor": {
          "ref": "3e217d0d-7520-4e66-a7a9-eafd55c7f6a1",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d25a4734-4088-4223-ba64-58cbcb8048de"
        },
        "item": {
          "id": "5615b632-ca7d-4aa8-a614-97c62038320f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c31355f3-3310-48dd-9554-3e92a226f81d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf1681b-99f4-4abc-a771-af52889c9d6d",
        "cursor": {
          "ref": "a3816f72-6396-46b8-9751-76df2d918b87",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6e6bea09-cbcf-404b-a87c-06ebc9e49b72"
        },
        "item": {
          "id": "abf1681b-99f4-4abc-a771-af52889c9d6d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7f7bc233-f2b7-44cd-9823-78b6bdd6bdd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176ec036-1fbc-48a8-a0e7-4a470c965180",
        "cursor": {
          "ref": "06ba9032-0ee0-4c81-966e-3e5fa54613a7",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "11f6af57-b33e-4a8c-b1b0-e7dac56b6304"
        },
        "item": {
          "id": "176ec036-1fbc-48a8-a0e7-4a470c965180",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b35c8611-4376-4501-95bc-66cedf0f7c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3249c51-82fa-42a0-914c-92b1aeabbf54",
        "cursor": {
          "ref": "5d7c86dd-1094-445a-a1ca-30abc5a6c590",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "415d02a4-af23-4935-af53-ce2cf1c513fd"
        },
        "item": {
          "id": "d3249c51-82fa-42a0-914c-92b1aeabbf54",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fc7e4571-5da1-41f2-8288-8b751bfa821c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf826c2-5210-4801-8e55-4966402b62b7",
        "cursor": {
          "ref": "1216772a-89da-433d-9478-06ba82c662f3",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9dba62dc-5ab8-4595-a666-294471bfeed2"
        },
        "item": {
          "id": "bdf826c2-5210-4801-8e55-4966402b62b7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "98f98496-f49d-4b85-996c-fb9a31544513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0fb07a-f56c-4fea-b242-acac47a4a502",
        "cursor": {
          "ref": "5549e5f7-a777-4e98-b425-fbb25673a991",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "95b882c2-36d3-4d9b-b6ae-7257469127f8"
        },
        "item": {
          "id": "0c0fb07a-f56c-4fea-b242-acac47a4a502",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d723627d-960f-4501-8b24-c9ace5298cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14100bd7-f403-45d3-945e-c730fcb49de5",
        "cursor": {
          "ref": "e4a3b09d-988e-4d56-95a8-2befe70619ca",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "90cbe1b1-6dae-4363-b6c4-d5fb816ea405"
        },
        "item": {
          "id": "14100bd7-f403-45d3-945e-c730fcb49de5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d8d26ffa-6773-46e3-a426-f4849c380ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c380c95c-af92-42ab-ac81-0248d1804361",
        "cursor": {
          "ref": "ff6d9acf-b947-453f-97c2-a4139dfde783",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3ce228c6-8ef6-4bf7-998c-2aa6970f1ed3"
        },
        "item": {
          "id": "c380c95c-af92-42ab-ac81-0248d1804361",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "03f0d2be-11aa-427b-88cb-36251175298e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2703c509-ef5d-4359-a6b4-362867a0e704",
        "cursor": {
          "ref": "f413e492-bf5e-4532-b360-d0c5c9f3e8cd",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e8cd7632-4d52-45f0-8233-83b7711d2b80"
        },
        "item": {
          "id": "2703c509-ef5d-4359-a6b4-362867a0e704",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6a2239de-64c7-4ed7-a688-d5c5a346fbd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39e6816-4aea-4c95-951b-6b1104d1bdb6",
        "cursor": {
          "ref": "54c7fb88-f717-46f3-b899-196b3a21acfc",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9c96c2f9-284e-4cf4-82ea-ed84616b19d8"
        },
        "item": {
          "id": "b39e6816-4aea-4c95-951b-6b1104d1bdb6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2ffecb90-8ea8-43c5-82fc-574a7130e037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d99da9-1505-43f4-88c2-33ea0894f15b",
        "cursor": {
          "ref": "c6d2b980-1c05-4099-b503-3003dd4cdf81",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6b4781b7-6208-40ce-80fc-10f23d2e6942"
        },
        "item": {
          "id": "b4d99da9-1505-43f4-88c2-33ea0894f15b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6203af61-c001-4b6b-8c2c-ebc4f6c43ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4954f8b9-2388-483e-b3f9-0dee0b28c08a",
        "cursor": {
          "ref": "a364ab89-1bf6-40d2-a93b-ad67b916c7bf",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9aae8d66-c760-49ce-b423-b7df511730b0"
        },
        "item": {
          "id": "4954f8b9-2388-483e-b3f9-0dee0b28c08a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d0b10bfe-bdfb-4578-8bf2-6160f24a96cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7f3227-9b0e-4413-8b6c-5604a4633d7c",
        "cursor": {
          "ref": "84e5dc20-7ceb-4fd7-a0f2-d08649f974d4",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "641c99e9-751d-48aa-bb71-841c7ca711d4"
        },
        "item": {
          "id": "3c7f3227-9b0e-4413-8b6c-5604a4633d7c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1236b04a-7101-4f11-84e7-c72fa126a9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7703e9-3429-497e-b3f6-1ce5dfac62ab",
        "cursor": {
          "ref": "ad2bef95-49ad-4296-92f7-2e58a8186006",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "15019159-bbd5-48be-ae32-a2c93f0e2891"
        },
        "item": {
          "id": "fa7703e9-3429-497e-b3f6-1ce5dfac62ab",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8e69d77e-71fd-4b63-90e1-fb8347907615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9672d5a3-840b-40bb-9b09-d93fbed65994",
        "cursor": {
          "ref": "bd94aff1-51f6-47a5-be70-d7a62661ca30",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "42cafb5a-ed38-435d-b356-28a33dc2f687"
        },
        "item": {
          "id": "9672d5a3-840b-40bb-9b09-d93fbed65994",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0e11ea6e-bfd1-4fff-9d46-c398367fee36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8bb624-f92f-4d84-8c97-69b6bb0fa24d",
        "cursor": {
          "ref": "7091ff1a-793b-46e1-b5e3-d2439351f411",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1c889cd5-74fe-4704-88aa-6b947b41ba6d"
        },
        "item": {
          "id": "5f8bb624-f92f-4d84-8c97-69b6bb0fa24d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e68e56fd-3e0b-498c-a839-f60959f8d183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79013af4-c8a3-47bd-bfab-d947a843c538",
        "cursor": {
          "ref": "aa6174e3-a8fe-4491-ac07-5bdc86f422fb",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "34af184f-d829-4e28-ba7b-f4e7fa327246"
        },
        "item": {
          "id": "79013af4-c8a3-47bd-bfab-d947a843c538",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "57be1ab6-009c-4074-82bc-b131dd5fd85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d3ec5d-3875-43e2-8f04-df349914649a",
        "cursor": {
          "ref": "c6c15341-75fe-43d6-b1b7-4ee90d67fa42",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "cc87dddc-833d-447e-978f-44123fbd468e"
        },
        "item": {
          "id": "c3d3ec5d-3875-43e2-8f04-df349914649a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7c9674ea-b0d1-40c2-b5f6-c796362fb42f",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "19911a54-e467-4eca-9971-dd5ee5065463",
        "cursor": {
          "ref": "4c71007b-2789-43b0-8dcc-f34d223b9652",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "305bb59e-db60-4e21-9598-be3721e01162"
        },
        "item": {
          "id": "19911a54-e467-4eca-9971-dd5ee5065463",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "43b7486f-63b6-4b96-9294-2b61589cce92",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6cc6f823-232e-4e00-8025-28484157ac6a",
        "cursor": {
          "ref": "72898fbe-ffd1-428a-bbd6-60dc4d99ea54",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2082ae5b-9b9d-4b44-9b0e-8f227fa0bd3a"
        },
        "item": {
          "id": "6cc6f823-232e-4e00-8025-28484157ac6a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a7a922d3-4e2f-4a67-aa34-797bfde40edf",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "af0487d5-9e16-4db5-904e-b8110c39f263",
        "cursor": {
          "ref": "ac353198-176e-4234-aadb-12466f24ef61",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "20e0474a-bd80-434a-93fb-ada9b66339c3"
        },
        "item": {
          "id": "af0487d5-9e16-4db5-904e-b8110c39f263",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "232d289d-15dd-4d75-ab8a-149ecd13f0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b8fd11-d6aa-4ce0-b966-a2925457348a",
        "cursor": {
          "ref": "d4d5efbc-ca37-480b-9ade-647a29748781",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f0829018-62ba-4cd4-a749-d93b49439a24"
        },
        "item": {
          "id": "36b8fd11-d6aa-4ce0-b966-a2925457348a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3344188c-00b0-4980-9bfc-109bd43ba546",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e60be3df-dfb8-4c0b-9a9e-53d434df40fc",
        "cursor": {
          "ref": "1cc309fe-1ab5-4ce9-9501-0a19553ddd51",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2fed3edc-6bc7-494b-ad06-c0bf15a0b5b8"
        },
        "item": {
          "id": "e60be3df-dfb8-4c0b-9a9e-53d434df40fc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "044bad95-56c8-4e30-97bc-7722ed6dcbbf",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ec71b893-3677-4c3a-b3e5-570452d89ccf",
        "cursor": {
          "ref": "11c5bf94-bd91-4ab6-aa72-0cf15c70c602",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "82f64a35-688f-4e34-9824-4eb10fded322"
        },
        "item": {
          "id": "ec71b893-3677-4c3a-b3e5-570452d89ccf",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f35aadf0-c41e-44f8-8b4c-9b883d3679a2",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ca0cf767-69ae-429b-9204-c1fd778e3cb6",
        "cursor": {
          "ref": "9decd0a7-7290-4c88-8d6e-336337b8b3f9",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "99ae6efd-858a-49cd-b0d9-5fa1af43b3e0"
        },
        "item": {
          "id": "ca0cf767-69ae-429b-9204-c1fd778e3cb6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "273bf701-685f-42c5-9577-69f8e98f2955",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f0852815-d6e6-4afc-a4df-5b36d634e2f5",
        "cursor": {
          "ref": "01033179-8226-4362-af3f-575e58acd62b",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1be381b0-c960-4b83-bc3e-8922b91e6c7c"
        },
        "item": {
          "id": "f0852815-d6e6-4afc-a4df-5b36d634e2f5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1aa3d5de-f8bd-4a2b-894d-6b90cbc1a568",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "8a99fcc7-35fb-44b1-a256-56512e83930b",
        "cursor": {
          "ref": "5d5a0c8d-8c86-4054-9b76-4e6698d110e7",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e8277571-ead5-424a-88eb-a4a7b1c43fcd"
        },
        "item": {
          "id": "8a99fcc7-35fb-44b1-a256-56512e83930b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "42f7dd6a-aade-46a8-8413-c1337e39dea1",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "68e758ae-b77a-4f46-9b05-e9884b05e958",
        "cursor": {
          "ref": "2a38595d-6d31-43ab-a571-2ae60742abe2",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "06df4a4e-18e5-4d7e-ab37-985ae0c6f7b3"
        },
        "item": {
          "id": "68e758ae-b77a-4f46-9b05-e9884b05e958",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a39b6cc8-71fa-48a2-a17b-fa3e23d66838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31347098-a0bc-4e37-b574-9cea25052d38",
        "cursor": {
          "ref": "928383a9-8be5-495d-8fa9-603577761d9c",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "23864dcb-3ae9-4e4e-a8cb-5b00e539a5cc"
        },
        "item": {
          "id": "31347098-a0bc-4e37-b574-9cea25052d38",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8859368d-b861-4d90-a8e0-05a8c2627687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b411fea-7045-4932-b1b6-18baa996965b",
        "cursor": {
          "ref": "68350fac-a8bd-4359-ad43-c2d9ce01da11",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "811f866b-548c-4792-81fb-76214bf24a01"
        },
        "item": {
          "id": "0b411fea-7045-4932-b1b6-18baa996965b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "143bea1c-fa6d-4272-80c6-d3583ee76862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c35482c-bb2b-4159-88aa-b0d8663551f1",
        "cursor": {
          "ref": "0e128fbc-7d55-4d26-8a59-efc3d52a0eba",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4795a5a5-ea53-44b9-be44-8900c3e18032"
        },
        "item": {
          "id": "7c35482c-bb2b-4159-88aa-b0d8663551f1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b863776f-8b0d-4585-8376-e77a3c0ea98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acee8e73-b877-4ee9-bfb1-f2b2ca29a87c",
        "cursor": {
          "ref": "0bf725d2-1272-45cf-a48a-fab3272ce91c",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "58efb1fa-a95a-499c-8e2e-669772cde44c"
        },
        "item": {
          "id": "acee8e73-b877-4ee9-bfb1-f2b2ca29a87c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2a74b8f9-eab7-4e8d-80b3-00b6491c8523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a1ce4d-bcb9-4d35-8066-fa33e2a99d22",
        "cursor": {
          "ref": "5670bf02-8a96-4d26-853d-b45c11780b7b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "222eb15b-ebf3-4bab-a9ed-d6ccf282a621"
        },
        "item": {
          "id": "d1a1ce4d-bcb9-4d35-8066-fa33e2a99d22",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e7b6f9bf-411f-4aa1-81b7-c4543a898b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c22b429-77a2-4238-bf59-b6719989af9c",
        "cursor": {
          "ref": "1f782431-4ac7-4492-a702-16de9dc1dc56",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d6b5b018-28ff-4bfc-a58d-ce6a339ce7d5"
        },
        "item": {
          "id": "5c22b429-77a2-4238-bf59-b6719989af9c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5d08d330-c632-432f-a269-3a9ded4c302e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7ee8e5-0e5f-420a-9886-dcf9d263ee86",
        "cursor": {
          "ref": "3aa1429f-ebea-48da-8cb5-a29743c549fe",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a29086db-ef26-4ae9-ae3f-56ec4105a1d2"
        },
        "item": {
          "id": "ab7ee8e5-0e5f-420a-9886-dcf9d263ee86",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "558bc6d8-72a2-459e-a5d3-814b56563de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dc99a3-d07b-4cd3-9546-b3e2125d04cd",
        "cursor": {
          "ref": "25180e4c-bab3-475b-ac42-92e9db45801b",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "40e7d416-fc19-4ef8-93d4-bd093cc81058"
        },
        "item": {
          "id": "f1dc99a3-d07b-4cd3-9546-b3e2125d04cd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1b1949e5-a937-4c44-9302-60a54691e2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5eeaaff-a688-4a82-a3fc-77dc56b32a08",
        "cursor": {
          "ref": "9fac4232-0c8b-4573-82f6-5fb40fc5c38d",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "79f0dfde-695c-44c0-99e5-0f3cde494402"
        },
        "item": {
          "id": "d5eeaaff-a688-4a82-a3fc-77dc56b32a08",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ecbaa9d2-39b3-485a-b37d-95197824d31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a523c52f-46b6-4270-bb34-cc923d0c68e1",
        "cursor": {
          "ref": "33426218-59f3-4d98-9507-3e999e1b6bfe",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d88e7086-6c56-4e09-a631-5b406d4afcf6"
        },
        "item": {
          "id": "a523c52f-46b6-4270-bb34-cc923d0c68e1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "763fa2d1-0618-4ee2-aa8c-a1ea04cb9e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1c17a7-5076-4fbb-88d4-373373831413",
        "cursor": {
          "ref": "b3f22300-a3d1-4efb-ab7b-f31f46d037a5",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "699eb369-78ac-4b0c-b8e0-bee46aa13355"
        },
        "item": {
          "id": "8e1c17a7-5076-4fbb-88d4-373373831413",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a5ae264a-36c7-41bb-b6ef-eaf225bc002f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428259d1-a10d-4929-8a77-e6929a1d25b1",
        "cursor": {
          "ref": "e15b9556-4890-43bd-8ce4-e82e38b8ef69",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7ff4e8c6-999b-4151-9776-84762c5fbab0"
        },
        "item": {
          "id": "428259d1-a10d-4929-8a77-e6929a1d25b1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9282448e-b69d-47f2-8c6e-b40556f0aa69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4f4fb4-7e90-4a63-a5bf-e20dc5a92dfe",
        "cursor": {
          "ref": "dbb59410-1d7c-41c1-82b7-aa67879558c4",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "19638230-3ed4-4d54-885c-05874d66a3b0"
        },
        "item": {
          "id": "1e4f4fb4-7e90-4a63-a5bf-e20dc5a92dfe",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "128e7e60-304d-4d59-9943-6423e13101bf",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c3fc3bfd-3a23-4a81-86c1-4d2e532d607b",
        "cursor": {
          "ref": "3b33870e-77a8-40d2-862c-fd954e6d35c7",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "349e9785-957c-40f8-8de8-bbfcbd8d1ebd"
        },
        "item": {
          "id": "c3fc3bfd-3a23-4a81-86c1-4d2e532d607b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8f355e63-60d1-4cac-8323-b96a9fa6a89b",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9903a6cd-1b31-46f9-8de5-07475585e275",
        "cursor": {
          "ref": "a3280baa-1d5d-4a97-acb6-d31a84ab19ba",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f22a166d-5ba1-4c46-bf6d-82a56eda397d"
        },
        "item": {
          "id": "9903a6cd-1b31-46f9-8de5-07475585e275",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ccb1f3a1-185d-4042-bac4-e9d6ac46ebd4",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8dc887a0-7aae-4d28-a799-0f344aa5d8cf",
        "cursor": {
          "ref": "084cfae0-7331-47f9-8779-73b89cf5f871",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b313f243-ef96-4040-b6bf-5c5e675c0b56"
        },
        "item": {
          "id": "8dc887a0-7aae-4d28-a799-0f344aa5d8cf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b609e7d7-7548-4c8c-91dd-1799273c60c8",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "311f162d-e4e5-474a-8c75-a674488f5310",
        "cursor": {
          "ref": "377c188d-95b6-41de-abe2-c040053c2c7f",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a4c21f5c-6c6b-49d5-8661-7e3445f03c36"
        },
        "item": {
          "id": "311f162d-e4e5-474a-8c75-a674488f5310",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c9947862-12a7-415c-971a-8bb38aca4e58",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ef2e9aff-f5e8-422e-8c2c-6d6f1367ad54",
        "cursor": {
          "ref": "a3266fed-757f-42d7-9d8a-591eedff861e",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "df0984af-de9d-4143-b5eb-61aa83282116"
        },
        "item": {
          "id": "ef2e9aff-f5e8-422e-8c2c-6d6f1367ad54",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "37de2c10-ea30-4627-a7d1-df16247a4288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ffbf37-2949-4888-8f9d-35b754a80bc4",
        "cursor": {
          "ref": "8c3102ee-bf8d-4ffa-9a7f-20636d6de31c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a14fd7e6-6263-43e7-b2bf-5916fc6765b9"
        },
        "item": {
          "id": "39ffbf37-2949-4888-8f9d-35b754a80bc4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d7d9c1cb-22c4-427f-a661-3bc13b7bb4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332a726b-4876-407b-bc5b-de3b098cdd7f",
        "cursor": {
          "ref": "06e0cb9c-080c-4c8e-bc36-ce93558ff58c",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6d665f1f-b981-4f58-a6aa-60c695922e24"
        },
        "item": {
          "id": "332a726b-4876-407b-bc5b-de3b098cdd7f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7412c6f9-d847-4f30-b05e-18da73d8bc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51228c5-43d4-45ab-be1f-4e2b7dff3a57",
        "cursor": {
          "ref": "e71afbb4-ec65-4d54-a543-1c1e56f82103",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "31597a51-aa4a-41f7-909e-1cb88f4b9b2e"
        },
        "item": {
          "id": "f51228c5-43d4-45ab-be1f-4e2b7dff3a57",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fa3e868d-41cf-4548-86a5-f9bbb1cb10bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13cc496a-db08-4824-9fbe-bfe3b4fa4e34",
        "cursor": {
          "ref": "e89f32ef-3ab9-4be3-baf1-589bc1374aab",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7ceef246-5c80-414b-b920-d319830a3b98"
        },
        "item": {
          "id": "13cc496a-db08-4824-9fbe-bfe3b4fa4e34",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "16264b08-7eb8-4774-97a7-a3c72aab33c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4a3832-1617-4aac-ab06-3293e4c8930c",
        "cursor": {
          "ref": "ac003820-dbd9-41ba-ba5c-00e541b10dc1",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a95977f5-1246-449a-8635-a706d8b549f7"
        },
        "item": {
          "id": "0e4a3832-1617-4aac-ab06-3293e4c8930c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "594dd5c9-d3c6-45be-b037-39983223f986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7684dd00-8f2f-44aa-b11f-f1aaa9604a2c",
        "cursor": {
          "ref": "8b1b6cbe-cb96-4e33-919f-820ff5c7a434",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d65eb84e-afb7-4aca-b2fc-9fcd1a0b71e3"
        },
        "item": {
          "id": "7684dd00-8f2f-44aa-b11f-f1aaa9604a2c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "53f4bcf6-ba49-4384-ad73-6172b8cd403c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36436008-074f-4075-ba07-1b069fe37b70",
        "cursor": {
          "ref": "efee28b2-77c3-4943-b924-29408182117a",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "557f52f3-ffca-4457-b2ae-ba14c481f199"
        },
        "item": {
          "id": "36436008-074f-4075-ba07-1b069fe37b70",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "68a726e2-6e4c-4aaf-96e5-5734ea28f295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ba0da8-7d1e-4e25-bf87-7d6d1495d49e",
        "cursor": {
          "ref": "d9e1c4ba-59cf-44d0-acc8-3452a36ede85",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "07a8ceea-b955-447f-8fa9-215e76984ae6"
        },
        "item": {
          "id": "e3ba0da8-7d1e-4e25-bf87-7d6d1495d49e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5ac02917-d63f-407b-b12d-9756f1058282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aac54c6-feef-495b-8c17-59f5fe652c09",
        "cursor": {
          "ref": "1e84f3b4-4407-4038-9640-caa09a1deca9",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "21f69dfd-a4b4-441e-8fe6-42dda976d668"
        },
        "item": {
          "id": "9aac54c6-feef-495b-8c17-59f5fe652c09",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8bd25bbf-9687-432b-9c8f-44ccfcc9048d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5dae9b8-3033-4841-909a-244ef9518bb3",
        "cursor": {
          "ref": "d74f9461-94fc-4f14-9463-f164f3efaa02",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "854fbeb8-06cf-43cb-a94f-1719241ed7f6"
        },
        "item": {
          "id": "f5dae9b8-3033-4841-909a-244ef9518bb3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a9842e01-9c9b-4c64-a399-0f68e41ffabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c95f3f-937a-40c4-a556-bb171bfae267",
        "cursor": {
          "ref": "a6ed305d-06b3-4718-ab9b-75e6c3d676b0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2b60b2ae-6e9a-425a-b1b6-bfcc4f761319"
        },
        "item": {
          "id": "35c95f3f-937a-40c4-a556-bb171bfae267",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "cd210a53-e3fc-48e6-9b2a-6409674a848d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ea3d39-de9e-40df-8438-cb233abe38c0",
        "cursor": {
          "ref": "aa76f8bf-7b11-45a8-a3c6-fba33f3cbae0",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "875b7ea2-c667-4f6d-a62b-65445bbd4b56"
        },
        "item": {
          "id": "25ea3d39-de9e-40df-8438-cb233abe38c0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "38afa04f-df11-42e1-8d82-e377b0efcda5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f041e4d2-f544-44f4-8203-4da68dc85104",
        "cursor": {
          "ref": "94246119-676a-45d1-a37f-46279296a899",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "6ded7cc3-5423-450b-8331-6422d72035a1"
        },
        "item": {
          "id": "f041e4d2-f544-44f4-8203-4da68dc85104",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0a54a24c-624c-4361-9c13-a16838069062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931cbc2f-062e-418c-84c0-39bad0b59e54",
        "cursor": {
          "ref": "da36acff-0c06-4361-b09e-f45be913e70f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "28e4470f-5ce4-4ca1-b8a7-e22748b05abe"
        },
        "item": {
          "id": "931cbc2f-062e-418c-84c0-39bad0b59e54",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b1f03e5d-421a-4546-9aa5-21ad78b20aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9529fb2-6cb0-488a-89db-b8a27115ef65",
        "cursor": {
          "ref": "c0e3a66f-fd4f-4ef4-bcc9-5b2912c7d890",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a1900d3a-2177-46eb-8c45-203fc5067b39"
        },
        "item": {
          "id": "a9529fb2-6cb0-488a-89db-b8a27115ef65",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "137cb253-2cce-4c39-8c93-75f6505d4ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929decc1-33a2-4f7a-92e8-3502f71ff6d1",
        "cursor": {
          "ref": "d87b7133-6b4c-43e5-9640-fe70cdd1098b",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "11d54463-edbf-4e81-a8a1-2dade1dfad6a"
        },
        "item": {
          "id": "929decc1-33a2-4f7a-92e8-3502f71ff6d1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a4d6396f-1701-4748-8a7c-ab9312d3af61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e37833-9a2f-4d3a-aa88-3053522c8149",
        "cursor": {
          "ref": "e06f5877-7dc0-47ca-acf0-3aff35a94277",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "99e5186c-33de-47c7-a179-ba7898847f84"
        },
        "item": {
          "id": "f3e37833-9a2f-4d3a-aa88-3053522c8149",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1943ae98-1f2c-47cf-aa44-395e35ac42fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd7f6c2-01c7-472a-b8ee-e453a4103b41",
        "cursor": {
          "ref": "a64df85f-a605-49ae-a62c-4a8c06a3edf4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "fee14e5f-212e-4ecd-ae5c-78faae09d9ea"
        },
        "item": {
          "id": "1cd7f6c2-01c7-472a-b8ee-e453a4103b41",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a0571389-1b47-4c9d-bc96-b07c96d51fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e819f17f-52e5-42bf-978f-351b8a1293f8",
        "cursor": {
          "ref": "bcd6c12b-3987-4e58-a0d2-c0661c112564",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6c97854d-0563-46c7-a030-3e32dac1fd30"
        },
        "item": {
          "id": "e819f17f-52e5-42bf-978f-351b8a1293f8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3afe4667-b676-4bb9-bc93-67244c7a3c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e399e74-ace1-45ae-abe2-63985ab957d0",
        "cursor": {
          "ref": "76252064-84dc-4e31-8871-5413fa775dda",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "d934b9d6-a979-449e-9982-fe5ddd17d685"
        },
        "item": {
          "id": "0e399e74-ace1-45ae-abe2-63985ab957d0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "01e788cf-0e39-422c-9b71-4fff962e3c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6012b0d-cba9-43d8-a334-437a1a6d5879",
        "cursor": {
          "ref": "4066395f-837f-4296-b18d-00f8c510641e",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "2c8edcba-b448-4f34-8ebe-04baf31dd23d"
        },
        "item": {
          "id": "d6012b0d-cba9-43d8-a334-437a1a6d5879",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e2d14fe1-df3f-48fc-844a-a4128c28873b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57aa25b3-b4db-4d36-a667-24089c6b498f",
        "cursor": {
          "ref": "5dedc919-22a5-4e09-a42a-12961b030791",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c3191682-67d1-4628-b062-6d4345bd391e"
        },
        "item": {
          "id": "57aa25b3-b4db-4d36-a667-24089c6b498f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c55a2a85-afcb-4f01-b39c-f2e3791334bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4861b81a-0b16-4f7a-98d9-becfa6f91f70",
        "cursor": {
          "ref": "a82d85f5-49e8-4e99-8791-b7cde965c066",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "34828f3f-1916-414b-ae93-cf006d59a639"
        },
        "item": {
          "id": "4861b81a-0b16-4f7a-98d9-becfa6f91f70",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cdff2e17-f3c2-4ecf-b457-cb54be44f97e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60667728-ac31-4bce-af95-08f0e074375c",
        "cursor": {
          "ref": "6e15379e-2232-459e-aa0d-ced727186277",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "48e0932c-c64a-4891-907f-e43548090b0e"
        },
        "item": {
          "id": "60667728-ac31-4bce-af95-08f0e074375c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b4275b4a-15a9-4baa-9520-1f35426e735c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71fed9d-cebc-43c2-b02d-ed040f3fa354",
        "cursor": {
          "ref": "bfda3665-4564-436f-a154-dbed8d286883",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e769d1c6-4af5-4340-a759-49cf879c103f"
        },
        "item": {
          "id": "e71fed9d-cebc-43c2-b02d-ed040f3fa354",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "eb3942d8-032a-4f0d-9e50-f53f1692aed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d347d748-b9e6-4723-ade4-6a35f01c8657",
        "cursor": {
          "ref": "4f27f48a-60bc-48c3-877c-e16baf14a1f6",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "e5d102f3-94d1-43ed-ac0b-dc40c735c60f"
        },
        "item": {
          "id": "d347d748-b9e6-4723-ade4-6a35f01c8657",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4b056ee9-be8e-4d4c-a216-e1aba2593f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ab4352-3563-47cb-b2d1-9af291fa0bf5",
        "cursor": {
          "ref": "5cd7e571-a018-42b5-a69b-9cd7048e5ef9",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1f06cde2-4fce-46b8-b0b6-e8d310df1a12"
        },
        "item": {
          "id": "14ab4352-3563-47cb-b2d1-9af291fa0bf5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0c9a1ef9-5523-48b0-964f-59e361e1885e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434ddf25-19fe-43fe-86e7-73aa914fe9f0",
        "cursor": {
          "ref": "52ca1887-2d03-4183-a777-959707412e6e",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2ec7057a-a340-4cb3-8c3e-d61cda072c2b"
        },
        "item": {
          "id": "434ddf25-19fe-43fe-86e7-73aa914fe9f0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0482fe24-52ca-4e5f-8516-8a748983410e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb20e1d2-3d61-4509-a747-8cfb52a33164",
        "cursor": {
          "ref": "13070772-b16d-429b-ab80-f23c333b7cb1",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f97d4bb9-698f-4eeb-86c3-0b95b3e3db5c"
        },
        "item": {
          "id": "fb20e1d2-3d61-4509-a747-8cfb52a33164",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6db56ace-24d8-413b-a919-1b849aab78bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d90468d-0ebb-4ef0-a897-2f4446fbdb96",
        "cursor": {
          "ref": "1b154f0f-ddf9-4df9-a366-7428b90c3aa1",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b5ccfc99-2143-40cd-963a-70db7bb12054"
        },
        "item": {
          "id": "0d90468d-0ebb-4ef0-a897-2f4446fbdb96",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9ea10972-34c6-48de-b0dd-5b3bab719983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b121351-75d8-46e4-a2fa-72095e07b074",
        "cursor": {
          "ref": "c97c5355-0a16-4435-834b-4179ae1c598d",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7d72fe7c-71c6-4a0e-96dd-943b81adc48b"
        },
        "item": {
          "id": "7b121351-75d8-46e4-a2fa-72095e07b074",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fc2c5350-06fb-4d37-b949-e5b385fa8aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f1d2df-921a-4326-8d35-70b01c9f5852",
        "cursor": {
          "ref": "85509058-4456-4b99-b163-25ec394cf202",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "092278b4-5a1c-47d7-b3b6-3674541435ae"
        },
        "item": {
          "id": "94f1d2df-921a-4326-8d35-70b01c9f5852",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "782e90b2-e180-42cf-b31d-d3999e67ce4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9cf9a0-ea4c-4d31-8300-d092e26c8b51",
        "cursor": {
          "ref": "93c2e703-f7a0-4735-be29-d17ff3fb41d0",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ddb699db-e2a9-4b1d-a71d-7da2fce10d66"
        },
        "item": {
          "id": "4c9cf9a0-ea4c-4d31-8300-d092e26c8b51",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "deffb9ba-7133-485a-9c50-e7ef8bb30784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6698715-d738-4495-90af-5397fdc1575d",
        "cursor": {
          "ref": "459455d4-15ea-4bbe-b9cf-15e184e9efc7",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2979b9f7-c5f2-4dbd-9c8b-74c219e92e93"
        },
        "item": {
          "id": "a6698715-d738-4495-90af-5397fdc1575d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7bd86a90-2b73-4b6b-9683-c3df7d174ffd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabff1ce-b49f-4e3c-8b8b-39ba9e75890d",
        "cursor": {
          "ref": "5645fd99-94d3-4144-8579-a6efa500cc36",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c82f5cf8-e487-4c59-b086-c562495344b2"
        },
        "item": {
          "id": "aabff1ce-b49f-4e3c-8b8b-39ba9e75890d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "56f687d4-ed52-40ac-a163-6d9a2ab1e603",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "53124234-1522-40fa-a4fa-66db53be588b",
        "cursor": {
          "ref": "481030c3-ffaf-4b49-8ff3-312289a6335c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "a708edc5-d622-47e0-a2b6-5ec652eaa0b0"
        },
        "item": {
          "id": "53124234-1522-40fa-a4fa-66db53be588b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9e08bf1e-d55b-4857-a8f3-1bc118c46617",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "18243413-a7a7-49db-b734-25801fa2a403",
        "cursor": {
          "ref": "a83436a2-d339-469f-bcbe-4524eeae34c9",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "150f8302-09d8-40a6-823e-e0537c22f4df"
        },
        "item": {
          "id": "18243413-a7a7-49db-b734-25801fa2a403",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b535dcdd-195f-484a-b51c-996d87aa2017",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cd7822-3cf3-4500-a81e-a041ab5f78aa",
        "cursor": {
          "ref": "a969f704-0c59-4bac-a3cd-83d7dadf8bc5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ddd74b9d-c047-4f7f-a25a-97e8c105965c"
        },
        "item": {
          "id": "49cd7822-3cf3-4500-a81e-a041ab5f78aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "14e17840-61d4-4a12-baa3-976f42d2bc7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cd7822-3cf3-4500-a81e-a041ab5f78aa",
        "cursor": {
          "ref": "a969f704-0c59-4bac-a3cd-83d7dadf8bc5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ddd74b9d-c047-4f7f-a25a-97e8c105965c"
        },
        "item": {
          "id": "49cd7822-3cf3-4500-a81e-a041ab5f78aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "14e17840-61d4-4a12-baa3-976f42d2bc7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c832ff-fc49-4901-99e0-c615e9da95a2",
        "cursor": {
          "ref": "61ed79f2-7784-42be-b1f4-c95f6f94cf69",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "7351814a-4245-45df-8dba-760153a5a1e5"
        },
        "item": {
          "id": "e5c832ff-fc49-4901-99e0-c615e9da95a2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "aac4dd1c-7466-457f-a614-2d5547e52fc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760ad4ca-aeca-46a8-94eb-9b9bb419c0bc",
        "cursor": {
          "ref": "f27e039f-ff6b-4048-bd6c-7577d6f67c93",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "a536797f-6eda-4da3-bc80-8eb32adf15b1"
        },
        "item": {
          "id": "760ad4ca-aeca-46a8-94eb-9b9bb419c0bc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7cd89189-4fa5-4a6b-af1e-83e2cfc617fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}