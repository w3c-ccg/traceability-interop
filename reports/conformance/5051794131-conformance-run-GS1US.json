{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2c444b33-a22f-4055-8072-047fcf181afe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5abea333-ea4f-44d8-803e-670b4bcc4f9e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa17a822-c600-43ff-a975-eae9970c3890",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dcdf023c-5a48-4490-8da1-1317978d182d"
                }
              }
            ]
          },
          {
            "id": "2b33ffb1-86ae-4b4b-a60b-8202ef1eaec5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e37b1821-a1e8-410c-aa4e-9ea1b26a3248",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6931508a-1bda-4fe6-9256-b032328fc82e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "51f3bdfd-da4d-4378-b22d-d4bfb1a93dab",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ac9293b8-b5c7-4fff-9f96-add2ca007172",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eefb0407-81b6-4ffe-b514-528ff6c85d19",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7cc492b-104f-4a45-bec1-68a35fb857a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe97bdd8-349c-460f-bc8b-86cfb19d93fa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11ccbf84-31de-4c47-afeb-5abd65f923a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a86e0c0-e5a4-4f7a-af54-18ef58f9780e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ee7db499-77b9-417f-ae92-89446e4cc9ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "860d654e-d485-4bca-876d-e52131d80a82"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70ea417f-bcc9-478b-9fbc-711e374bb4ec",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "73f47d6f-1463-44e5-95ee-042821d4ed29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8eb43f76-d5db-4eee-b860-38e64c513086",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e336dc0-0175-4328-a96a-2a36b6776e80"
            }
          }
        ]
      },
      {
        "id": "06208923-0031-4417-acca-e3d1f2522c84",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8cfc591e-d101-4c47-a622-13b2e6b04b03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d369d8c6-188b-4c0e-bdb5-dcb6fd9d33b2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2feae045-98ed-427d-ab18-b780a22d9dda",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5643c06d-0250-4163-a1db-ba04115c938c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38927a03-87ab-48c4-a0ad-735ad45fe1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e41abc-0f62-4791-9530-417a7b333a2d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f66e401-023a-4860-8a5f-1288777ec7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45b073f2-2160-41a2-ae46-23deb65c7d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c29041-7e39-4268-aad0-ddb4ccf87b61",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f356f1-9509-4332-8ab2-5898a76d37da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fdefdefe-81d9-42a4-ad1d-90c5b68529a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a1caaac6-0835-45fe-b3a4-525a257c6133",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "846c88fa-4f70-478b-b99e-cd4e4f90c5a0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70911841-da9f-40e9-9309-4a4041320074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70664a95-acfa-409d-9729-92ac7824577c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e13cce-c3c5-46cf-9acb-ad1e597723d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a25358-c86b-486c-864a-f5f5362ca83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8759202c-7460-4e7e-bb51-1c0891fb0be6",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e963d729-9109-4ab3-a430-f09d3813822b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f8367db-b428-4119-afd9-c1b03ec7414f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495d7751-3f3d-4849-9ecb-1a547a5654d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2713f874-c7a6-43d0-9010-a1d6ee3d3791"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f187ccbc-d09e-4bbd-b8d6-9a079d4878af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "df58bebc-bb6f-4997-b2da-fc599e57efd3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4758aa9-1e3c-4b41-b3b4-d710a0118437",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9067c2da-d555-414b-a6cd-2da5e40533c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4fff7e90-9745-4c7d-8fe7-98709c293b13",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c8cf88ab-8432-4553-8e8b-750d9081e247"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45b53f23-7bcf-4bf3-8aa4-8903c6fe5566",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "188f9a18-c7aa-4092-8543-f06e97028b26"
            }
          }
        ]
      },
      {
        "id": "5ad5b636-2dd2-4553-9c17-294f683e5c1a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7ac817c1-d73d-4846-88c7-f9522afb199d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d850a25-f697-42ab-ba7a-378bdda586dc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "17e19a68-fecf-46ab-81ef-01095d5f04bf",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbcf4ec-f890-4a6c-9be2-f861be9336a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ccf82d8-f06c-4cef-84f4-827e1ba27a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8792c51b-16c9-4a6d-ad6d-bfcbf387f701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75a565e7-01f3-45aa-a672-dafef512b0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bcda8f-6e2a-4ca4-8b93-594e07829fac",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224bfce3-321c-40f2-bf6d-a84e5e9d8aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741fc45d-4efa-4769-969c-3d54d3b1493c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd344c0-47ab-426f-a35b-b8fb0467090e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4037b43d-f30b-4ecb-ab8c-bb5d040bc50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283b6424-3768-477f-9bc1-e15e5d8eb080",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7905c2-d432-4680-90b6-708fbcef2623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38aad67-7443-46a0-b103-a3c19793939d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d7ba36-a4f1-4510-9ede-ad8377130366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0249eb1c-e45a-433d-9680-1a24068e6185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365059d2-127e-4148-b67d-39ba3ecc40ad",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8f8356-8572-4c57-a17c-08cdc4db3f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978b88cd-5516-4b3e-a4bd-3884dce83d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0526851e-079d-47a1-877a-ec9a07f0f60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef9d72b6-8312-438c-8eae-e19b37762b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ededf55-6b95-48a8-8560-a82e1f917584",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "883fb6de-2e42-4f10-becf-3514e60c5905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4402f9bc-6113-4b3f-8499-0039aaaad333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1795aa-965f-4e9e-b4b9-46e08f1acf8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7be52cc4-751f-4551-b6f5-bbbd61973185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f760566-95f0-49b1-b3f8-7eb82f7c127b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09707a65-a653-4fbe-983a-782a78a8c1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11235f92-4912-45ca-b41d-f8c3cc3d14b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37882619-3ae1-4bf9-b67e-0d9984e58f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8572c409-515e-47a9-b4d9-c628c41b6c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ce5e5e-c2f6-43b8-bd1b-7152a26189a4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07838221-c941-4393-bb68-5c512624fb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1b46652-931b-484b-8c06-bc68e44e1693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cdf138-83f0-4a17-bb43-1ac7a1b6c920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3aa7cc2e-bb1d-4e12-b7f3-bc2135ac3181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750ff29b-eac0-4bb8-b30b-703654a1e415",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d5db4f-c891-42f0-b399-747b8742faf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56758bf3-69a0-4356-9c99-60e9a05eaa42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a934d1d0-25de-427e-bab3-1005ba47ac58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4eab649-7730-4601-99d8-11838b1128cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1500036-e933-41f3-ad45-0e22bdd130f6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f87200-c76d-454a-971d-77c117b0d8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b14f80-1ddc-4c00-a9e4-69944718700d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85aabcf2-143b-4526-a6e6-919dbe9fd988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81e87810-2359-4a97-9dbd-4f2f1d5bec7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6d8feb-3320-4dec-a77b-eb44097c55a7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca9004f-85ce-49a4-886e-d2e97a318ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30bcea7-7a88-4ad6-8545-8060d18174cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca527e2-f562-41cc-9e9b-07bd255cf20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1f1ffd4-cb57-40af-95d1-31ca2ee162e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b05c3c-2a39-434b-8a4a-ee3bc402f9a2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f537b2b-10bb-45eb-9094-13cb2a06af2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121cd731-7f52-4df8-be21-0471012a6202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bcf4bc-0198-4ad0-b431-83ff49b4f22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5192ab6c-41ed-4865-ad00-5b68a9f190e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af99e660-4735-428e-bedd-32c2d5e224a6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc609e9-c739-45af-83dd-72d249e0bede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c625607-c338-4564-b1a3-881da8263a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a082255-6ba8-4dc1-a1c3-55d424031b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b14354c-581b-44e8-a005-1a58efdea542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0941ca-6187-4a8a-baf1-43263d90fd27",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91369ed2-3fde-4478-8332-55065eae0cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7dc36df-de94-4846-a695-7c66485dceb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ec246d-271d-49c4-af30-63a023effa1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd0c8d91-98af-4400-a2a8-e0bc461b08bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179f50e4-aa4e-4340-bcac-e883f54a8219",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c6814c-4dde-46fb-9450-81d3e6a7da89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e5fabd-205c-4b35-b3b2-f50e3a58a403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1508b472-ab88-45a0-a113-7c3bf7aa53b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbd26786-3293-44af-80dc-c67b6600f9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b8eb60-5ce1-4a22-8b11-b34d4abf9035",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9923de40-40a4-4c8b-a7d1-34424d3a2038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1236d39-602c-45e1-8e23-b90ceddb44e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a9f6cb-a15e-4652-986b-f05af6ccb7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59b8c2d5-d4e5-478f-91f6-1f2d08553605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a04dda2-7082-4e5c-bab4-bc75eb8def4c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c438fea8-f0e3-44f8-b095-116e76d23dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d4dced-6be1-41a7-bbe6-0a65263ea0ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77faf2d-0e4e-435e-9369-edd1d1fcb537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea4af476-34fd-48ac-87a2-97d83dcba788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b2e127-45b2-4de4-874c-9c7d2aed8a1f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7889abf6-536e-482f-bb05-8c83cac16e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c47a89-2b57-4f6d-a6d4-dc5efdb3eb04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c35541f-d143-4329-99d9-038607c0e11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b84c604-666c-46fc-898d-228859e81a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb10c82a-3407-4ad1-bbab-61c1eb4ac092",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11391086-f2d2-4305-bbbd-4526c36c1a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d8330f-21b9-48ff-85ea-12e3a510ad73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0673e20d-cd37-4676-93d3-7110e776cc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d390bfcd-0768-4232-8ad3-acfde09c4ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c099e13f-170d-4a85-9662-a3cf96a4ced9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394ef435-7b4d-4db9-b11b-3aee61cb2f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f545b9-4161-4ac2-87ab-2a5899b4f148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18c62c5-1fd7-4b1f-be03-c1536b0ae059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9635d65f-127b-4851-a69d-615d25e9146e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fdffa6-8fcf-4029-bc0e-657ebe55de66",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9be00e-1801-4e3e-8f20-ca4342b6b83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34fbf9fd-234a-426b-95ac-b9474b588326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8ef997-7f66-4cd4-99b5-6823a1995fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "099a965d-c636-4719-9436-442eba2e5177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d29c04-2fc4-4f79-af1f-692e066d188b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d86a4c8-5aff-4539-8612-d1eda1d4862b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665e8f58-030a-424e-9656-c81f46bfb528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc07b50f-1652-4111-9436-a76f805c8ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "081b7be9-fbd4-48ca-b9fa-41fe8d3f67b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaddb677-f7f4-4dac-8c19-1c2fb81548c7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b247ca0d-1c69-4598-aa40-2b402070fd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d8c717-ed09-46f3-9aae-ca9db1fe877b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c2df8a-9543-440a-9375-b8b8fd97d77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c56ce42a-f1c2-427e-888a-00a1349dcd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1691056e-6be3-461b-bca1-d51db6851cb4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b91f00-6e14-40d8-babe-987aa4a2a32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98472888-b9e0-4949-9166-f8a8b07ebb03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7d051e-9490-4905-96de-6cd54540dcd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71df7865-a0a9-4ad3-824a-b65883606977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f5e885-0fca-4ab7-85b8-ad73047ed7ef",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e0781d-45e3-49e6-8923-61ab27cf89f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d612d187-a58b-4cbd-9210-c300f3451f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59078b2a-e6f8-44e5-ba81-ddbc1c55ecf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "63ff07fd-7b3c-4128-80a2-55084ea6f506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7aa2dd-3e51-4f71-be8b-bb72892cb5c6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55c11e1-48f3-41ed-9b82-1d193ebf8789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bdc0a24-0ac1-4216-afa8-cb0cac50a5bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1b5238-7d27-41e8-bece-46ece9d69356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd69491-776f-4fa6-9fd2-47451cc533a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f008c2b-b5bb-47e4-a6c0-14ea2f23d3e1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be32aedd-53c4-4fdd-8651-32fe16323a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e260f04c-451c-45d0-8027-bc4135662cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd22d6c7-f8a5-427a-abbd-86e1f9cd8d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b12353-5c71-4704-9793-3daf6aec9c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597a44ef-0cea-459b-b117-e5fefa1f002c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94de9c4c-93a0-40cb-a2d4-53af2076161d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97046ec2-70e6-4aea-afaa-6580e2fd3add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db072a5f-1406-46e7-babd-7c4ca8d172c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "09f5a48f-f966-4ae1-82d8-e0d40e7ce765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c861ff-4db5-464a-93ba-91c8acacafd4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c1b15e-6f33-4ce2-b151-92a6f56c59bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60188513-e4fe-4ce8-9f27-e38d516309b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9910f9e6-8039-421b-9668-b36f76c658bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a8b7d7-1578-4973-854e-28d512c0230b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc3844c-b047-4fe7-8a06-52fbdc6d9eb3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b2e970-3e4a-4f77-ae44-709528b97547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680bee4b-65c5-4ae8-a568-adce869941de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4915ce18-5138-4719-ab4c-e471572fcbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b93cf7ea-e697-4a5f-aad5-1876ec3de862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fde1c4b-f566-4503-8be6-842d97c70749",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81a416b-6668-41bb-9d3c-a9d6eb2ccee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b15fbda-ad99-4eeb-ad70-2e9574f0954d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef08772-7cfd-4cf5-ab42-b2cc7d8d80aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e80fcea-a87f-4992-89e8-9b5243d054f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13f1f6c-0e86-4fbe-be54-6b084324ae7d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763a3d43-d9fd-4fea-9753-e444a9212e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f1ef87-1a24-473a-8ccd-f19a223932ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2782edc-ed21-4ee8-b23c-8472c8415069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0eaf505-76f7-422c-9f38-9966bbcddfcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffa9565-19de-4de0-8e67-25a283ab1199",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef7cd82-3290-47b7-849c-47b7eec9e1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab0c277-c32d-4507-a323-d265fb661f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b43007-441c-4cfb-ba44-b9839e317012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e63080f-723d-4b80-a23d-e42eaf3d11b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0589a6bf-3938-44da-a800-6d2dbd011194",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f8dfbf-dcb2-446e-b7e4-d10f7ccbebd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3f417b-0b7e-4553-bb39-6d0707d9a83e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d88146-f878-40b1-b01f-3ca6d5523117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec100f3-6fcc-40eb-8a7c-81c0e3d3145f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8c463d-c92f-491d-9523-cc73d99ac75b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56f43b6-979e-4206-8001-66efb71c09ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d074c2-7710-4626-9d13-15f73bfe4f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782ac7fd-56db-405e-92da-ec2cf980944b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a356eef2-186b-44af-9e42-9f5e639e7a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae314f51-bd07-49e0-a5f1-709981a72590",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b541cdd-44fe-4275-bfe6-3f56ba5fe2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b18e867-ca3e-4cb7-b632-359cd8dedf3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea16204-956f-4c08-aedd-09974fcb3a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2b837b-5112-4786-934e-14c67ef4ce58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616120dd-e472-4b86-93fd-34a8eabcb26b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fe99aa-e98b-44a2-a4dd-8d6aa1b16884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2475bdbe-37e7-4bdc-a24c-e32405baf50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2141d70c-60af-4846-bb17-feb62499ffe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d50d9f-a729-4ad6-a325-c56efb988e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f80a1af-5f85-4f5c-8bdf-83836c4770a2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23563ad8-09a4-47fb-81f4-0407ec3b6114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea9b372-148d-4a05-ad30-87672ec6bc66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fac9a6a-560c-4bdd-adb2-0ba7785d65b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f7bd1a4-234b-4526-b3e1-eaeb4aee79dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd183fe-94e6-42a9-84b7-618f843fafd3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a56be0e-26ff-47d1-882f-754e4698120f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33f2368-35a3-41f1-a447-2a4ca5e7303b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3a2fe5-5411-4be0-bf6c-9715b903b74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cdb52d9-8837-440c-956f-8ee68b25e52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5296eff0-6ac8-4c8e-85ba-87a3fb29d572",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03418fb-1075-4805-8d2f-410dfc12bfde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1aacacf-cc8a-40b7-a258-64d136650bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a57e35b-3dbb-4fd8-871b-dfe574b0336b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "627ec50b-973d-4936-91b5-8e7c8192a96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340b5b06-3346-4911-ac79-27bab907a8b7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa0b112-175b-473b-bcfe-7b09b3d7e7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdb01c1-54b2-4338-8cee-dccc8fc5f35f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c72bb0b-dd3c-4e28-9083-e3cc0142b96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d9e68b-46e9-47b9-ad1d-893ab0b39886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf1978c-354a-41ae-8d32-43ac28742f78",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ea7550-c1f4-47e2-850b-670310391dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8660d981-23ca-4866-8981-f36e10519525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359a37eb-086f-4881-867d-b49bc340b8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c206a44-8ea6-4d7f-b7df-1b5f46f8510b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3ecc41-12c6-4152-b1d2-d2f73bf9e9c8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64875fa-a05d-4f6f-aa19-68fdcf994ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f07596f-3ec8-409e-b0a5-0d09f559d2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03482858-5344-49aa-a5a1-a90762fade0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e04b8861-74a8-4acf-ba25-4d3d0efd065e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1adfc5ea-7b2a-4d68-a7cd-61c739d0d134",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f3176c-f73a-4756-beb6-7578270644b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84becd3-e9ef-4bba-8042-3980978eb56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ab42fa-30c8-45da-b40c-d9c1c4d4031a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ffead24-585c-48e6-abfc-d1c15c0598e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f0e412-e5ce-4bd4-acc3-335301affb50",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804a702c-e899-448b-aabf-b21e5c370bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486bbd19-fd7a-43af-8417-933660e8390e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db571004-5b4b-4fb4-ad9b-b15cae3e35c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "578f24c6-3281-42f6-9e03-19a0e11739db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e261758-4ccd-42e2-a253-143dc2b08f4a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a57098-9ac3-4f6e-9908-c9ee1b9870b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edc0be3-251f-4f2f-84f1-8e22157f45db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbd88ab-3b3b-48af-b3a1-e46d355a8588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf533cb-87a5-405e-9584-2f30e9e74a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f42d883-6886-4abc-a88c-f114c147c3d3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e3f433-ca61-4e52-8115-1f4f1cd8dff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d972d736-6512-4404-af9b-9f77f17822e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a504d4-2379-447d-bf1e-246328f9f007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f9bb23-2555-44ce-99c3-224adceecbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba075364-c73a-494b-bfb4-74f398c4953a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7f565f-ff2d-4928-946c-d97ceaf5c6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "743010a0-b565-4cc6-b1aa-3f47122d1371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc9d929-faca-4a54-9075-788f1277ecfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "931cfcb0-2be6-4ebe-9605-bff1ad845ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da687e65-cf2b-44dd-8271-6c6419258900",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec2b0bf-940f-40eb-9308-1b011aae6173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cc95a79-a158-4578-a1b6-31422696c9a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c2fd9e-5277-4136-b37a-8b4e11f05be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48ed87b7-38cf-4f6e-9e7b-abe35b8caf14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56d1e14-1405-42c2-9d2e-749cc7c824a9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836e0db8-e86d-44d6-97f5-b6d45d5c104c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6145f2-98f8-49a6-ae69-41a7c8e4fbbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5b9936-86e8-492a-a987-5bf1cf804f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50006831-b3d1-4076-b5a9-8fb5635175c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07f0500-d1e5-4175-86f3-7b9202682ac8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b737d16f-fb2f-4e54-a3c7-bb87c339eec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66237159-fc21-4a2e-9636-3ed6c54b75d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb4098d-3b19-40b1-a00f-2e32f6f8fd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72aaf13a-cf65-412f-85ca-22fdb8caf00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425f2b48-804c-4bc3-8753-139a2eaf1196",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5cf2132-0d74-41f9-b3ad-0d15fe531c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58318fe1-5e51-4dcc-884a-b761b431f7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95eb8274-2e05-4e11-9e1e-45917664161a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d584fb8-22f7-4599-a4a6-5211ab8ce2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d5a3d2-b32c-482f-a21e-3814ee900cd8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471a4133-d2f6-4ad5-93a3-ac2606516659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9ef2e2-2497-45de-9e8a-a6dfceac0c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae710ad-018a-47f3-b3a4-133108942edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8ac637-c240-4906-b96d-6d8965c7797e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ea199c-d2b3-4c64-ab8c-804cfbbc607c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab186616-4e04-4acd-89c8-ac8408d90f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9516349-c4a0-4b24-abca-34f899f9472f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4538da51-5e76-4f25-b46e-e9333a6831a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51e8f87b-8975-4570-973d-aaf86db9bf7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63578f1f-a16b-43dd-add3-480c33ce899e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644eb5bf-ad07-48f9-9c73-78bc010d7598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85dcc091-5a2d-45b3-90b7-c86e9384f833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c67a56-a288-465e-a483-0df95495b9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44995ea4-63a3-415c-a88c-da90e72925d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc72e8e-bf8f-4b17-af7d-0858ecd82a1a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7ee4d0-e5c7-4fa2-91af-3e6080fb6172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b45bfd0-4149-40b3-9b6a-a2fb898ee24b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2dc74dc-f6c3-46be-a64c-206137cc3e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b91ed5-f280-4f3a-b343-d8c90a79501e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef60a89-0297-45eb-b4b9-8d762277dbc5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb57ce69-b328-4268-959a-0de5aa527bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be8ba4e-6ca8-4064-b8ae-d81b68686b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac25835-12e2-4844-8a97-d95398a73707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a088e48e-34ef-4934-8947-3c4449fe2950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5529ff-c7c3-496c-8c3e-bd8e3bc23d43",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ebb244-cbc1-4f90-a33b-15cdd9ac51e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48552c5-ec5d-4892-9c80-df09857fe81e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ade4554-24d5-4ce4-8ef0-45c43b4a7e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5233b4af-d52a-44cd-b3f4-b232d5190a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2a5f14-1db9-4418-834e-24aa934efe6c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c449b9c2-7fe6-4ed8-8d34-78854d9e9262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68554955-bbeb-49ea-86a1-ecfdd0cafb14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bcfe98-de9d-4e7c-bb2c-f40e37ae47d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f44ab99c-78f4-4619-a496-58b25a46339f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07099087-eff0-49de-ae9d-dbc49db00999",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77f38a4-a9bb-48a9-8455-643d6d2035ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963dbbc2-1a73-40fd-9d5a-6536135ae85c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd3d963-d086-4947-9505-e27d0f08163f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f18c54b-70b5-4dac-8e20-25e3fe59e90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86546910-319f-42ae-acf3-0972d5a42c96",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5544a19-6b62-4e13-930b-a7c4c81e799a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc54a6d1-c86a-44e8-aa7b-3b9b35e5433d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b58f031-7fb4-4936-a327-e82c01a0268c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "73901481-e875-4fae-8b06-f3ed8f9dc596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8595f1-c257-4415-9516-719b8eafe195",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbfa0ea-51bd-48ef-8989-68f1cc3365e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60dcfcbd-2df0-4f1b-9297-c68709aa685a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2b58ab-4ecb-4026-bd4f-15dfe269c943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9864ad2-571c-4873-830d-1effe7671523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170d2e60-036a-4345-a1ac-c806e1914332",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bf7685-c8ff-4575-ba16-60fd82f31f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a8e1aa-2ad6-4b8f-bcb0-dd67a3e03d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89260c38-7b5c-44da-81bf-9c869989f766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5674d4d3-5dcf-47c7-bb10-1f25b9c461d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5b5dcc-953b-4882-89fb-1cd95dae19f5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076ec550-5df6-47ad-aeb4-ecc22f585f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6000c9d-04ed-4ef5-9d71-04ece27c78b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72c9c23-41f8-43b6-b778-98c34a398cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd443f3-88a7-4961-a655-55a0518f4dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0080085-7daf-4649-9fcf-995dd52fb63e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1902a26-9ac2-4d12-bc91-6f72fb319525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f051348a-b990-41ad-a03b-d9da67a2c114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00e1e8b-c51d-4e55-ad41-0ec6ae1096c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe2aa84-4d10-4284-95c2-96b1a84e3b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d77decf-d465-4a35-90c2-9b0d0d5babbb",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2186174-2665-4b9f-9ccc-4347c2f9ae22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35fac70f-6919-42b7-a956-999074d6ac5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b8fef0-d5ab-42b2-bb48-3623683daa6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff28da9-856e-4ec7-82e4-99b01e9b9e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15cb72a9-e22f-4988-a0ca-b7c2e32d3b89",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed443837-0d5e-4a77-be89-17ada7d40595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7f76a5-a79a-4ac3-87f0-956a90064306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4b362f-b79b-4320-9915-2101ac643c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3489601c-dfc7-4bbe-a35d-f4a0d13a2c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef24e54-6844-423a-b2cd-388519c72caa",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b90f4c1-1442-4537-a989-58a6c9722cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e9c73c-3ef4-411b-9c21-6f1ec6f9e4e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7ab839-98eb-44d1-8046-9a0ab56be793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e737e1b-4c88-41d4-b3ae-b83c461c49c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83f27e1-d1d7-4fb0-84e3-fb26c27a648b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e81925f-2a24-4036-bef3-bcd76122c5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd5d9fb-68ce-491e-9b7f-487b18fa93fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081e3331-a1b5-4828-a2e2-ff55f775c217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fcaf901-c58b-4b74-9a83-37fdd5fe3fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d2c692-2900-4d6c-a58e-2f8f7d45023d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833ca2c8-2897-460b-b427-dc35c1ede6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1fb07b-df6a-4a43-8d55-e11ce0e9d5b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af37b83-b075-4c57-9e50-b97e061f5e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "947a28ae-4d57-4b10-bab1-037fdfdbacfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249ed9ad-ac72-43f2-8c1a-3b559c817855",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ea4fdb-e72d-4fce-818d-82e624358970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935acc6c-b83c-4c23-bc7f-4b2f99bf723f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7e7540-f5fc-42a3-8155-1d991b313e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b12a06e-298c-4771-ac09-d2fd38edde22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0539ed4-6f6e-4cbf-8ea3-8bccb9eaa1c7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da429a24-e92f-4372-a3db-d4cbed11872f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944528fc-bae4-4cf2-b450-8ea220cad0c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7115f4-4db8-42b5-8161-9f826563d831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa15551-bf05-4d95-82e3-d71bd6bc1b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c4bc70-cb92-4418-9311-dd4da5e57089",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5e1da2-b152-4e79-9e14-3c5764bcc83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd770ab-704b-40a4-b8b1-e777aa8b8cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcc3172-877d-4cd9-8408-9309190db140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a27562e4-10da-412b-a53a-48aa1227c21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a8207e-b1dd-4900-a1ee-58a08bc626f1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34f855c-3ba1-4e04-9eda-6766265ed78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ff99af-1089-44f7-ae54-a68a98798acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf93c01-58d6-468f-be7b-29dad1955819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "25d401e9-f27a-41d2-8ccc-e1d9f36b362c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fad10a5-3a7c-478c-a06b-e3a9b32e895a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e455783a-dc2e-4006-b826-6002bd1c2e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c068687-18f7-48f6-88eb-a61f5fc905cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10323c5a-815e-4af6-a047-9d11649684ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6139971-ced5-4967-8ef2-960984aac78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee1d2a1-0c14-43ca-a0b2-c3b7f01875e0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28695600-8325-4ccd-ad4c-9f7eae318d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "792c9eb5-d14d-48ee-8317-2e036ff8241c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd9ac1d-c81f-458a-a1fa-c21c04a12bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29e2ada7-dd20-4a22-939d-c13292f0ad5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ca79e1-12fc-44b2-9334-b3246f67ec18",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d9bdb1-059a-4db3-9920-ef3dedb2ed6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3475e96a-43ab-4250-8923-a8eaafae4c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd794077-9fef-4a6e-90c8-35a5b1a2d726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d22f8508-ac52-4e22-8e8c-fe275aeaf155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9dd423-b044-47e3-ba3f-fde57857a5fb",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74682d33-a38f-42d3-8196-61651f1a3b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0d9642-22f9-4b25-8da7-70bc052a66e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27f46c4-7015-4d64-beab-8064e67179d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6734516b-0ba8-4629-91c3-b6d83e6c25dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f787bb-00f4-40b2-8431-fd9a7b389bce",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c8e18c-b387-440b-9411-32157ab6b450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea8e167-3d8c-4302-9178-3ec9c3825fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970c100d-45de-4651-b5de-fe560f91138c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d8680d-dcb1-40ec-be84-93148b481b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f79f386-a6e1-462c-9732-131542e75502",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67290c2d-4f03-491d-99eb-8a24fc465fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911bd6f0-18ce-4781-80df-2461aaad2a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8014375-0c2e-418a-9d4c-27a329bec985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "78576b32-2af9-4f9b-afa2-110b5a6e086c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5a7d80-260b-437b-ac36-a120eb6f2f90",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e05509b-9fc1-400e-beb1-8cb7428f9c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338a77b5-5602-4b04-9055-80089afe04f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7134b3ba-e9de-4cf3-beb4-d420bdb6808a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aab97dd7-cfd3-41f4-bc1e-10937a53177a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc0260a-34cd-4ef4-8812-d6c32f20d042",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd202e52-4c00-4637-be31-f9ec5c9fcec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c045c0e1-5704-4c7f-9057-ccfb4e9212ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cde4f27-2564-4e1d-b304-237f8a63eca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8eb4109-486a-4b49-a034-b5d65c7c04bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807f1fdb-e4da-4a12-8e73-7f921fb36b7f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95804b15-c7c5-4006-b9e7-44c1e868c684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d1f5d4e-cd04-4052-ad7b-95e473b599a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352b4542-4bd5-4476-980c-c2cd01222155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70861a75-00df-433c-98ad-910a76435d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc521eda-227c-422f-a91e-539ac592b5e5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acaa75db-0798-4320-a13b-7d0f7e93fa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fc002f-b6f5-4e72-92f7-21ee4dea9bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a372b8-1abf-43ac-84e4-5dd34d89c0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16b58bb6-8adb-41d2-bbc5-6bdc30200744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c1cd1d-0531-4a66-9322-23911fc4dce4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8107da2a-4502-465a-aaff-7ecdc889175f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f376d1b-a37b-4e9f-815f-fcd8ecc71b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a40977-a2c9-46b4-9761-1acba4e5686c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb727ea-9d36-41b9-ab22-50b56d541df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950ceab5-fb35-4a0e-934b-2046cb8c3e9c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167a2665-af69-4b4a-90e6-7771af64930c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b3706f-053d-4d66-9f23-e526b0e371ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f1e141-f1e3-4efe-a0de-0262df636bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "347e45c7-5851-4dc5-ba21-59284b7fc651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fbe22e-0d01-4070-a233-8a8264a321f6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f3154b-2347-438e-826e-f779f492da79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea992f8f-670f-41f9-90aa-e10c11755b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562a4d69-2ec0-4c02-8d0a-b580f33d39b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a43e74-40a7-488a-864c-ef4f4f34efc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c608638d-638c-4d6d-9a08-74d44ee73d3c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52e8c00-f27d-4726-a624-c78dc5fa329b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d8103b-fa7e-473b-982e-2015933d6940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65035146-2af1-461f-9864-20f28807feee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb38283-d6b6-4938-bd03-7d11141f5f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1d14d0-8a10-4886-86f7-357ee1b54aff",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8827ef80-8332-44ed-bc8f-c1462a2ee65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36493c49-7d5d-4d61-b1bd-e51922016190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d86003d-5f73-45fa-b236-916136baa888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee911bfe-f08c-46e0-bbae-dd102736416f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dde9d95-a505-4b0f-a871-5b85cda95c0b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb663ef-c1d3-4ecd-916a-e3fbf35c526d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f873291-aabe-4ae9-b9e2-dfc5b24dbfcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23be3ef4-c231-4230-a175-aa410eb113ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4e013d-252b-4cbb-b4d5-27cba17bd28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a556df2-2576-4d2a-a827-e0887737edc0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880b45f9-d3a0-4d74-a366-de977f69c6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b31728-5d76-409e-9999-8c3e55257464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023032b0-ac8c-4da8-af4b-27a78208e216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ec253f0-3317-49e0-ab52-2f7680097447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34003262-7e09-4a1f-a9cb-fcf1781d0a13",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f8c7ef-4824-46a2-ad44-b34cf5692e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd180b74-e6e1-4ef0-989d-52244f006e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63057d7-0e24-424f-bbbf-2bc7c1784ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa4acc9-ba5e-4767-94ed-2684596f83ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b8ea30-dcb4-49fe-b2b8-d2bb4bb466d9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb7f2a9-6683-468e-9b7b-16bcafeba5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0d24a54f-62db-4669-b508-bd03b67bac16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81721a7f-0c24-4853-89ad-f9fdbc923990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0837f607-7079-44e6-b4a8-beef972e3b60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "edee8668-aa08-4940-98da-cdcd7903a2c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4a6da91-b507-42f6-910f-445401f2fe37",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbb9db3-eb9e-47ae-ac52-d03294e73d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9c2fc49-533b-4da2-b86e-639ba06e48e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ded6845-a6c2-4c94-8450-5b4df29b86d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2496ce22-edcb-4276-840d-11c666cda2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a4b32f-0557-4d88-8394-b9680960f487",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514a59db-e9fe-4038-be53-ed29cea9532c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d9635eb-0626-4676-8870-17eea54c9ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aceeb675-2b94-4d85-9fb3-10a71aef4d52",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba3e6e41-3b21-46f9-8d77-c9002b24f6e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ae69407-0d25-49d2-ac2f-7f79e009aba2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83ffbeaf-56c7-475f-85cd-6069ebcf9bbf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2e38869-c957-4f94-9a55-4c22760cc687",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3afc60ea-3d8f-4491-bf0b-943ea18e17cb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4fe8d293-36b1-446a-b2ef-bb50bd83c4c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea8185b8-6cbf-445f-9ad7-64239fa8289e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b887c181-5117-42fd-a21e-27257c5356a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0267e326-307c-494f-8f76-b625d8a00511"
                }
              }
            ]
          },
          {
            "id": "722a51ed-b0de-4601-a669-46cd0bd4ee44",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b4805a79-c216-4057-a860-a64359d7b399",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44453f93-7026-458c-83f0-a1b10883ef6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8ad5ae8b-5a13-4a27-a7ad-77a987a88058"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3afed99-9c57-47aa-8bc2-b4973e14016a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d639e2ea-27b8-467b-bc25-19c8eace7963"
                    }
                  }
                ]
              },
              {
                "id": "277cc6e7-9dc5-4378-97fc-a4e026cfa3be",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "214efb4d-5840-4e93-997f-ff8ad6850066",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ec6b3f5-740e-4131-92bb-4f54be8aa092"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bf0ea18-5a0d-477e-8e08-df1ac80ac3a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1fd3734d-f5d9-4a30-9c24-be5e4b0bac6c"
                    }
                  }
                ]
              },
              {
                "id": "7889f42f-3351-4e54-805d-0c9ff7846bac",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0aae122a-012c-4527-83aa-c0a281a6563d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7f5a0a8-ae30-4d6e-adea-ba9c95d7ca59"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d70a3e8e-1ca9-4468-88e6-d1947603e29d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a960d834-9ce7-4591-acf0-d1ff3d324859"
                    }
                  }
                ]
              },
              {
                "id": "937bee71-3860-41ff-b28c-7783f184af19",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "149be8fb-c412-400f-985c-6c60c89b35fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23dcfb40-8029-420a-8020-eb0ed2bf058d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e419235-e1fe-4210-93e1-3a8002835a7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ec8191ff-21c5-44bf-95cb-ba9ee3b42d85"
                    }
                  }
                ]
              },
              {
                "id": "419aac70-7635-47bb-b6e1-886e4fc0e703",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a0bd8f9-b311-4f87-b878-ee422d433fae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bd49152-239d-4eff-b9cf-fa968e56fb29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dea3f335-196b-481e-b6b6-d56a837978ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "01c06f75-6cf6-4633-b500-b0334f0917ad"
                    }
                  }
                ]
              },
              {
                "id": "a7213897-d88e-4487-8377-2f342e56ded0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdf6f2a4-75dc-452a-93e9-b0ee43f5f0af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0784b136-76c9-4703-aaf9-45b9a4759f82"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fce74b9-de9f-494c-b8d5-ca89c66c4bd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8ac2006e-5430-4785-9848-40370709c4d2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b13d666a-63b9-4d1a-aa90-e194056619fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0fd1f41d-0bf5-46e3-99ca-7bb782e4e6bc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "380c7a52-608b-4169-836e-93162176cc8d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57e68fb0-ff12-4e99-93dc-b5807bdbcf82"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc911944-06b9-44a0-9ff0-10ea325e225b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9bb5f5c8-180d-4d07-a641-38e653463f74"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cc17bfa-1a2d-4c9d-8b07-c1813f31e949",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b2647d9-74f3-42af-81b9-434b2775c008"
            }
          }
        ]
      },
      {
        "id": "f86ea626-b8c6-4a51-8894-9da7d508a5ca",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "02942f42-a50a-4a16-af6f-d37c0b4c2cab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1d8d3f2-b7a9-490a-92e1-f8f0c1fe583d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c48e3df1-7950-4f54-9179-ffa88c7817e3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d24c205-9468-47ea-8b6d-1f3d3e86b1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721d2271-b50f-4170-af94-4de992790d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a7a65a-0a0b-4b12-ae6b-95fa1b0cf1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8570d5a4-dedb-4fbb-bba8-051f75cfb03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a2f880-1ddd-4d3b-a536-747c0bb3f092",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ff7e07-06c9-4dc9-a7a1-5ce6cb5e0a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0829bf-a7c8-47fd-9ce8-99f46789c3d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441d6e0b-1992-41c0-99dc-8e16fe1e03a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb45da95-db95-414f-9515-fa292da4a92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c01ebb3-bad3-493f-85d3-4263ac7306ea",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d821714-570f-48f7-96cf-57bd5bfbef2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e22e772-db2b-45ac-a475-00e0848b181a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f146f158-3bd0-4cac-9382-af588a580c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e26533-42ea-4cca-b63c-d20c3dfddf9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108d68f6-7f90-49e5-90d3-58ea05bbe3bb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb84ff5-ed3d-4226-b794-378ec8268a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8888d338-75bf-48f9-84bf-319c53984ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693b80f7-58e7-47df-ab08-92b8d7607549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "023e6063-ef84-4600-9333-282705ee0ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056aa356-babc-4e67-816c-f4c9349c335b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafad9af-f1c9-481b-abb5-d6523a5373b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe7e403-f203-4f50-8d05-607a3459460e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112ddfa2-3127-44c4-94ed-16cdbe29df7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62130d9a-4d1d-4b1d-92ec-5ab3dc9b0c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f714c164-3db9-436a-95ce-7c65d4f774d7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de2864d-2833-431b-8158-e2220d84bf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50777ec7-b6ed-4c4f-87ed-1476567be246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee56c9aa-adb4-435a-9229-f4ea52e63950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2ca0bd-4c48-4a3c-9fe2-9cdeeaa29068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c081a9-600a-4215-bb23-1b0a2d641150",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21010e1-1998-4bec-9935-836f4a552ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda8b4d8-e034-4b36-bfa3-8b43a7d6f892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456c971b-4ad8-464a-be6b-4fc1f8c52e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2223fa34-ce4f-4b35-be1e-b152931938f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ae1b49-0747-4ad6-83a8-e88c827e126c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a838c2c-022e-438a-8926-b3aa342eead1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee1a832-1b66-4ce4-8a1b-faabefc456e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d163ce-10da-4c6f-925d-0a336377bbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "613878eb-4cee-4189-a4f9-c49d1a3905eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1859d509-0206-4a1c-b76d-b4d0a6a7365a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15408634-4b76-4531-a1bf-42849a85c409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddff1ff3-7e9b-4a1f-8683-82a251e7b7dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cabecad-6071-4d89-8293-eb4bc12d2644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff054da-bc5b-418f-a289-b80865ed3176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c487e26-1211-47a4-a80c-cf41fcab7fea",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76505871-c670-4803-a210-4be1946f88f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c656008-5527-4b55-803c-2c624720fd29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd3f2c3-5011-4cf4-b33b-375b0e245e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b679446d-1cf3-481f-9b15-f6cb99a39329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97cf009-b07f-44c2-83ca-8de8b6e739bc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f34a3d9-413a-4e5c-ae25-5a9ac3f402e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057f47a0-7f65-425b-8172-d12aa9609cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b803f20c-a5f6-4c40-91b5-5134652756cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e7adab-e8e6-4fa9-9116-d4580dfd660e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadc6cbc-d491-422a-8885-a6634a8f8dd1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094cf5c6-a923-49e5-8f53-72202e723a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c465e0-a8b5-4f38-a761-bae6ee724714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bad3f1-5273-41f1-8581-367d930cf969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91ccbb2d-1681-433d-9f4f-65d564f33e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710cc218-3459-46aa-8e0f-6942c449e069",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5111fd-89d1-4c6c-aff0-745abf16d6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8977b850-48f8-4ba0-95fb-4d856b9a6261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87bc26bf-4a9c-4bb0-8297-a3759a79d630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8bdf1e0-26b2-404a-9fd8-3900a17303a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911f44e5-77c6-4187-ab30-6b27be60036c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ccfa3c-a3dd-44c0-abc2-d55df28437fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f016185-dd52-453a-8705-d5af99104d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406b428b-0e4d-4c23-ae97-32570deb50a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5362a3d-b5a1-4867-b7b0-04acc794910e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a433a96-3ce3-42a7-b9b3-528491ded35e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6567df-7c22-474d-a642-e46c53a569e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99230cb3-9b72-4556-8b38-456e36c11230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3f013a-6ca5-4aa6-88a0-97bef557d387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1010c8f7-521a-484a-ae64-3e20c8d96e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89cd29ce-237b-48bc-83a6-5105ac14daf1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b3291c-b976-4036-9698-10ffc18f7d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770095c6-dd26-440b-b7ab-74f41579404e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab05815-bb7a-4f2c-8d50-daecf8791d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f609042c-f0d3-4545-af70-f79d26db9c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d3e684-9270-4f25-80d5-3a6a03c6d0a8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc69c5a-465a-494e-8f1f-e0e3b4d0dd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50483b5b-948a-4aa8-834c-4699af4bc585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18378002-4a9f-4dfe-a1a7-28b46f7ba380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dda92d66-dea9-4da8-bba1-f200e96a219e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca446cf5-258c-4f60-9a9c-a10a2a1bc3bb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d07851-a12a-46ad-91a6-4ed01928ebc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6c195d-a301-4f3d-8970-7f4b4b41e235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e8521c-224c-47d4-b3c1-fc43a4698cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f46ca00e-c6c8-450e-9a01-078245720056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca91d17-b549-408f-a2a5-9a81ce51e598",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca8b894-55b5-435d-af1f-ca2542e572d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffd9b3a-4f52-4ee1-8da8-1e89866300b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f4aacb-d5c5-4350-87c0-7dbad9618d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6311a3-eea2-4b18-b731-466ba9cb2501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8623d7-8577-47fa-b1fd-c7c4b873e43a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe02b51-d308-4b1f-a2b1-514e2b08badd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54d08d3-0929-409b-b0ab-8b6e5504613e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addc8601-e581-43c0-932a-75d56c46f4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d08175d0-78e8-4fa3-b256-397a59059286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd16555f-f777-4296-ae8e-e930923b58bc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39eb5cc0-7d32-443d-a482-efe593d4fa21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d726a1-8a44-4b4a-aadd-626e88b0d2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b19e92f-ead1-4a09-bf0a-bc076c1080be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ebfd1d9-0de6-4443-a912-83b449f2c6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e3c9fd-2754-4e31-b1e4-51d818c15df2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcbf9d7-e7e8-4cd8-bc65-ab8ff8e0270b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1e7365-f3d5-46f1-b885-8ce8f05b7848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffed8b81-e742-4805-8561-45b9ee7db82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6e0297-bf6d-43fe-b57b-21bb0ae486ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c24088-6973-4c94-a01a-5f2de531ff68",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d324c4ae-549e-4d0f-baf7-e05a56e1ddd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "154a5b7a-7382-4262-9a81-b88a09e7abdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e06b1e3-ccec-466f-9570-e20a0ab55b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42be19c5-051b-449c-9211-b5d115b5b74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6d389c-fd53-48a2-8bfe-62768947afd2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccca7a7-ea46-4aa8-ad92-0f0b5ffc3f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b6945b-c260-45c6-a6ae-8042f02ed1ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f890ed-654c-4430-bde6-3038935c487c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eda664f9-77b4-4b6e-96f8-e4a8486977d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972fec96-b84d-499f-945d-cf19c97e229d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6527251-cfef-4c68-8f68-305b27ba71a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a077cc-eb2d-4205-a702-66f2e58d69c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346d015d-6e5d-4271-8997-49f1cafc373e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d547f43-5ab3-4bc6-ae77-de1a6390b23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe477f4-d59a-4f23-995d-91dd6351882c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbf82ee-2330-4f59-a7db-9f5d78e05603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b712c1f-56d2-4e44-94d0-0cd9e30017ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a004905b-4d5b-4884-8eab-60609856b25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2ea964-6a9f-45c4-aaec-93cfc2c9d67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b28a70c-7622-4895-a835-68772998fc86",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "440e6688-a433-4ba1-bf5c-7105a2c155c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe2cec0-1d92-409f-bb99-5aae4be7e78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ecf097-69b8-469b-9f9f-1efe59f46ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45dbb1b7-cac1-4395-ad08-89d5837cea07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5936d46f-a921-4ba1-be25-5d528410b16d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6260c3-5e09-4972-970f-65f2786f15be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "382e563f-576c-429c-97fa-e42a3bf154f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58fd05c-04a8-48f5-ae2b-86c9d4366059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c77c4624-ed19-4ff3-bcef-fe66e0f3047c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cf4d72-793d-47e8-aaa3-bd8e3f1e8e16",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b74e4f5-95ba-4752-8898-3fcd4b2df60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e61a62-eeb5-43fe-a3df-b460c7fddaa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334958b1-37d5-4157-bdbf-aaf7832dc8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b66b0b-de49-4685-a41b-50eac82cd6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efcfacf-d75f-4d64-88fa-c752bf5f396d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4fc556-8a4d-4755-b04b-55bb458d979d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026db260-6866-4950-959b-6be36276816e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba994eab-ea66-4b33-97a0-2f59b3c0781c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c82080b1-42d4-41b0-b807-31f9888abfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804d1057-61ef-4558-ad37-5b92424d0e2e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78190eda-baff-4c86-9ef5-7e5c5ef87a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08f0599-0f01-4cec-87f2-6eaf73970bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba10fc22-3149-4c90-93d4-db8f0ac47b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3bc66ec-8448-42be-baee-ccc0760ce578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ed227b-3c64-4033-882d-92fbd3fbc854",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72f9e34-26cb-494d-8b1a-e25671ecad7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ec26c9-b3fb-4831-9498-26c40336b00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3b3590-d668-4cb1-aa8b-9bd0f137bfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8271e188-0927-4cd7-adbc-12c045d93509"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ff408510-1819-4ae6-b129-b4c1563a26dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "22eccee0-a815-4954-9b33-588cc6bdf3db",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78caf9b7-bc1f-470b-be50-a2bdd55b1a38",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "70769a61-bbfb-490d-9fb4-b987b108a63d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a68a695-be67-4502-93d2-8b3099c3f7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "700681b1-2e2b-4d8a-90bf-cc4d54894436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f93d76c-0521-43df-8eb7-29cc6aad69db",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2903529-c35a-400b-b1f9-284a7e31177c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0b201af4-066b-4734-9c40-91d5dd5d0721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8404cff-e8bc-4970-8535-062e7d51b1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8574bd3-c6eb-49d0-88c5-5b7d56c59969"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d03c00b-e179-4c7a-b2ed-75f16cbe199c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0403e899-718c-4efd-a6f0-d17ab81402eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b32f658-94eb-41d2-8770-6652c62cfe73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88ea5655-fde2-43b6-ad27-4f8dc9d29ca7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96f2096b-46c1-4488-bece-bd835c99e659",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "61ff6243-6871-42ef-abbc-28bdcb67128d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec79a9d2-85c1-4a80-91e8-e202c608cb91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "610c0ce0-5dcb-49c1-b2f5-8bd47be3469e"
            }
          }
        ]
      },
      {
        "id": "9e5da394-9fbb-4d33-b4ff-24fa4b78bcee",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f1155877-fc6b-4c90-a8dc-f02bed100b1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8446a333-633a-46f7-bc53-a5ea79a24b18",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5de83022-8247-470a-ae2c-26fc1f499661",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1706053-cc47-4580-bb48-d4c863dc3263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6ca8f2-8384-4b89-b4f1-3b1d817b4736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3f8e53-2567-418a-90fe-0bfc335f17ce",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f113eb-d3d2-47e3-a495-0a94fa3e0fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34b6603-bbce-4f94-b0e3-107f415440c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee5d4f5-758f-480f-8558-a7cc7b368fff",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd7cb0e-938c-4946-9314-b0d4c83fc4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724a391f-6921-4a55-9359-48b6dbda5665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a248e6e8-7df6-4670-aecd-98fa45efc4ed",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf218a5-c5aa-4ea3-a810-78667eed5bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc355ab-678f-4f64-a735-14b80675f82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fa4449-baf5-4597-a1f0-b8b63720209b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852cc07c-e9ae-4f6a-b814-c1b6563446d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2dfc288-f368-41ee-b961-637c5827117a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656f145c-6b98-41c3-91ab-f92cd6e04ff8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf972790-af1f-424b-bd3d-e3149f61d992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3c005c-cf73-421f-aedc-38078acb5dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b47c996-298b-4b95-8f81-bc26cc30d67f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71405e43-114f-4128-b88c-afbf171690c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295229d5-b667-42db-9a69-06142911252d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cca8b3f-d472-453d-9030-b1545bb576fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "306381f9-21ad-4bfb-8946-10f90437667e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75574577-47d2-4ad2-aa50-d3bad1fc8242",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0888e5-5b18-4c57-8d11-563622e8d7ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5beca83-f16d-489c-9729-2dcb487101ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f9a40d-87e1-4ef8-99f3-1178f9effd4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f6c18b-5c02-4564-ab34-e0797952845a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6510fa18-313c-44aa-93aa-820c6cb37e23",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0f2ba1-e178-4196-99ff-bb137dc0b0e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34c2288d-d363-423b-8bae-6b6239390ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12dcba45-1b29-4bea-9061-78ace9f402dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102f7855-7522-48e4-a83b-8bcf75f0ef21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f076b6-de86-40ed-98ae-c74512157bc5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ef46fc-5af1-4ec5-b348-f44596470a53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaf00876-ebed-4413-8e41-30b2595003d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "415d3159-7fb1-4c80-bf16-0c70b0915d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86def7c-4aab-4b3a-b533-aa1c8ed472e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13c4200-552f-492e-8c6b-23cd6b63be81",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6710773-7f77-475c-8a73-29a6b24f0a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8d345b6-9a97-4a83-90f1-821c0370db03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d78c3f-f097-413c-81f9-99faaf7de41d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "568681a9-9c03-4679-92eb-578e9a8ea53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6ae53b-7b36-4515-928a-44767fe9b63d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d77474-c7af-41b6-9757-da29ce7f4d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4ece59-76e8-4136-b7f0-f4205b341b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18981393-f98c-49c2-998f-849fb9d93763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99399169-f1f9-4bce-9c48-f949b3c0bbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34cb60e-8be4-459f-b129-f38d6c147472",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54b13df-70f2-4f2b-84e5-8cff6a04ffec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c25f095-7206-45b6-a639-0b5fdd9faa17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47428a5-8648-4dbb-94a7-0bb31ed6db54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0a5be9-d2f4-4b86-81ec-f2b52ec6aaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074edbc1-bfde-4345-868a-b40e7bf2c08b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccbfee2-389e-4d50-99e3-ef7fad00ea6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da44198d-1858-463c-a0ad-9f013b72c729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1dafbc6-30aa-463d-9caa-09bedf56fd3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c711c7a2-3e61-4470-ad01-29d1f4313e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abce22d7-8f33-481f-bcfe-54d3dfb17a2f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c103a15-3377-4654-ab14-418688d92be7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "192ac366-b1ae-4adc-aacd-c3388a465452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b817da-8fb5-484b-b446-f414dd125185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63585a4-9c73-4098-9e77-e2ed39cdf18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3fc0c8-94c4-4fe4-969e-7dfdb18294f7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd1a782-e438-4a44-8a33-1c8aaae8c042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae4d70d-bc7e-4cb1-8241-503b33a05bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "711a389e-2550-4a08-9ebd-aa57fdb51f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6532a16e-a912-40a2-934e-5bc0f6abadd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428b55ee-3170-41a2-b0fb-5f07fbe7f89b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26fb052-7295-4df4-ae7b-45dfa79f02ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4825682d-60cf-4b05-ad73-f07ef64e177f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc71a837-b8de-469f-8e32-c447107c1e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99482fe0-90b0-4a97-906a-f4a51e4ee95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cc7d3d-b544-4ce0-8105-ad98ef71bbd3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c21bd2-3b6f-4746-bb0d-7324b1d76b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b04e21-2c09-4e91-b8d8-56d7a05d450c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52cf910-62e4-4535-9d15-94734d663d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e17fe08-fcba-4c8d-b5ca-68b3be3d1e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382b5052-6aa2-499e-aece-1e55f927d725",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca6cc9a-7241-4cea-8149-cddc2c0e0660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2360308-89ca-4849-9610-7677ef7f5dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8dc127-e9cc-41f5-b3d7-d4f3c5de88de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9bf0691-181f-4263-b1de-c009abb638de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2218aa38-ace6-4268-8631-5b530c4fdbea",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81afc528-7fd8-4388-bf97-7a7baf396960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a597843f-f101-40d8-9526-4eb1857aaa5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3af350-1d0d-489f-94f4-c95b07760235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66ea3073-ac06-4c84-a024-b47254422936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6017a9-3c38-4428-8162-882e25634f27",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40c29e9-6ff9-4fe7-80dd-34bdd8dc40c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c91f0f-5e27-4a42-b7b0-c1f4d5a62e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6d0705-3542-4410-9fca-ddba3a253e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd87eff-1cec-4aad-ad67-d6f096973260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa4c76b-babe-49c6-b3cb-d8500dd1cbeb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3264552-00e4-4c38-827e-be2972155275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc6df90-f627-4328-a4f3-a4a18284e806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba02cbda-87a9-4b97-8e71-715f12862a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ce1c92-e8c9-41d8-89f5-ef67c1a90d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454b5d24-1108-497d-9c77-b033db8fae75",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40ada72-e3a0-44ad-99c4-593322c3af83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1579b5-28f2-4d81-9532-d0daee396ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca853f1a-6ffb-451e-9b2c-11756296dbb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276ea798-8192-402d-b2e9-033950abfa21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15903f18-574f-4611-8575-1e4c30abc594",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45563b31-f319-424a-a587-2a1bd03a00ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6adc4878-8f54-4d53-b679-54a5e48ef307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3a2032-2448-41b1-bcf3-a87ab10b9143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2d529a-a9b9-4876-a828-3b9cc7bd18fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10042d37-a438-43c4-8bd6-cc1e008db884",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcc6b64-aef0-4c0e-9d26-86cf3556303d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62fe6bba-d35c-42ef-a7d8-de048ffaa779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6163d168-5791-4003-b8a8-c21e1536399e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d899d0b-6bb2-4532-aec0-7536314e6242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a225e542-5e96-4785-9091-b65dc4b2f089",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a35c43-e7b9-4550-80c4-3a418426c48c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e6d90ce-bb6a-4bed-b875-5d1315342682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebaec946-3753-4689-912e-82d4a439e1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68eea518-8208-4004-aa65-c5749c879ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b9e5a1-1f4c-44aa-bf45-81a57e41c9b0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bb3efc-cad4-49e4-a195-8c1dfdcd1abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64cbda29-7a56-4fb8-8693-5d09c343ed54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0207a9bd-6ad3-4e98-b722-89548abbf10c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e08c58-1e11-44e0-b478-781997b53e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be936149-e46e-42cd-bc52-b34656708da2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf7476d-27d4-4348-b086-f5fa40c55c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724f7a49-e862-4334-b159-d620a3759087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ceab0c6-c29a-431a-b4bb-00cca02348ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29519df9-6bc7-4dd0-a451-3318a9f0b804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72194c4-aa9a-492d-9e06-6854171f2e7e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073a143e-5b6f-432c-9ed6-5c4e536bdfd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a258ed79-39ac-416f-8261-9636c0b2a875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ba391d-3fb5-46f8-884a-f877efc62fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fdf747d-c663-472e-b431-bb9dbc4d84ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea18706-f278-4ecc-9eb1-4eff06f00862",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cdbb341-37bd-4301-a671-2924b543f1fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79712dab-af23-4b52-a84f-6d3dd574260a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362828a3-4789-4364-bf47-aaa8bd8b4aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c883910-7239-4761-b58c-cd888ad95764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65274684-275c-42d1-bfef-1dc4278a1651",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c103e95f-dc26-4ec4-8cf0-54d0ad9f92c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eaafc42-9be8-4937-b25a-71534cab8a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f5a164-768c-412a-95d3-4945ebfb810e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caddd33e-5273-4a01-a8fd-928888b2dc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a297293a-c554-4e11-8ea7-180b2190278a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be22d24f-5fec-4c0e-89ff-83945bb1fb15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "989ca7c6-3856-4eaa-9bef-8288ace117b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87e6c1d-f66d-40cd-8445-571ce75cfe5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d99113-f17d-4697-8c11-58f7364a3f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20328d19-98bc-4633-8f76-0f8a593b4f22",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3280d22-cc27-443a-af59-be98773c8040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "167d694c-f92d-4951-8c56-708982008337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0281d37c-6609-4e7c-9ecb-f96ce4c7deac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df14e37c-5620-49b3-8b09-5fd17ea19ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e32d754-f012-4b8e-a3f8-863045442430",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ecc4d5-ad69-4028-a529-0ac35183e0d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93b7e734-d446-4f29-aa98-d3580200add1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f65bfe-b0ec-4faa-aa71-ae77bd545056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc28d0f-dd4c-406f-9abf-56bc7242218b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67db77ac-0a02-4eb6-9870-8e070bad96d2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883432c1-a0e6-429e-bf0b-45e613b0ac66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f5bfa58-1a33-42a0-8b0a-637798e3c021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a1a515-8b13-4e8d-a2f2-3bd51d43249b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623dc608-775e-4798-9cd0-c790f4e18f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20677af9-9d7a-47c5-a3b1-06b294d238a8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d418fe-865c-4e93-8c4f-010f349a5b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da737626-4b90-43d7-a7ed-450902f06582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5948bbdd-c4b1-4cd1-8ea1-2a125ad2ab95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35630b0e-a4b0-43d4-8e31-116720ec3d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfda14f4-d4c3-4dce-95ec-89c4ba9790c9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2f1db5-1512-4260-b68b-be316545903b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc3c1f0-a01a-41fc-a44a-dcf797920888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5be2d9-af0d-4fec-a182-88afd0e7170c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6210b156-29a5-450b-8497-2eaae4b4f7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2cb20f-99bc-43f2-83da-48d36aaff382",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d96275-baf1-4413-b1f3-0b278f5502fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2b3fd5-e58f-40a7-a881-6a55fb906687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aef9518-5af4-4cab-b8bc-9506395c12e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2cef34-d5d4-4e97-adfc-23b73c906356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4f483d-8d7a-416d-8ab1-b08aa731782e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4204230-4b99-4762-9cf4-880425871f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94868d4d-d8c5-4c92-b67d-20be2807a9c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914e1e76-b47c-464b-b4bd-9780a68d0f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994d24b1-2895-4943-bf60-45cc7221523e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40df15f8-cd0a-4bc8-ad97-5520ca5e1fa5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd4ea3c-5f07-4929-b700-87dc1e5d4981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75fb404-94a0-48f3-9668-78f3426e26f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbabdb83-de03-4d1c-bf59-96f644daf2bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef8ff8a-017a-4f49-869c-19f116463967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b894949-2aa6-4cfd-9058-120fb80ccb2c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a4f3b6-9205-437f-91f4-cd211a0657e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f30779-d3f9-4414-aeec-90e18f14df0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1eeb47-d6de-4143-b812-8a482adc0863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20a30a5-6ce5-41df-8616-9b318402eef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4971fb-8629-4b6f-8a03-adad4a53e862",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67da95be-1a76-40e4-bd9d-bc6988c9586b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69208517-1a6c-4bc9-946d-25deb14be58a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554cfa6c-1e20-4a85-af63-2e00fd9c5360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72518c1-494e-4372-801d-a545740dc9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc55258b-8b82-4eb9-92e2-087796749f08",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a25221d5-b422-4d69-8153-4f85b1ff0838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84db32fd-a917-40d8-bfcf-9b6b4095f569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbf224f-f42f-4b76-8558-52a2072294ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1d88a2-f93e-468f-82d6-29b6545d2934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ca73c9-2306-47b3-bc98-d5bba98d62f8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b528497-2ce8-4a07-96af-dd4de9123612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8409cc0c-50d2-44fa-9908-56fc22f2bc29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf27c55a-7f3c-40fa-9695-fd0a682dbe19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb50a8e-2d08-4ef0-8307-7590f3e17dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09b2ab8-c5ec-4618-8214-10777f7b1d47",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bbe517-4200-4b53-b0cf-a32a196b262c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0527e0d-b32c-4595-a676-338c3a887a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7be4e0-4c43-40bc-b800-68c987f2548f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2af4ff1-f5de-4938-99ab-806f599c8897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471de000-5dee-481f-bae8-1fc5d0e8c831",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d47f620-7f69-48c2-a527-74444a437ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf164795-0d93-4c57-84d8-285252d68ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4080fd2-8e47-42f2-b210-d0a9643b823f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8716785a-716b-4088-a16f-2b89ac45f9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d987e487-3c35-4980-9da4-aee4a8c74b83",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82db587a-7531-41ff-86cb-39ed715b8403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e2c3f9-f961-46cf-af29-1d01b29b2c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbc6aee-20be-438b-9598-e540e4cc3ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db039de-4d43-4375-ac90-be75391aedb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba1acc2-0d43-4412-bd55-09d2b9055564",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17821d81-4919-41c9-8428-2f1d7f84da9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8397a5ce-fbe6-4f5e-8574-cf72f12e5cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c40f37-7eaf-4af6-bfc8-869add17f716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0cdbcb1-b522-4706-b253-0b087174f029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d134688d-a9c9-4844-b6b7-4f931f8102cd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882a955b-2f10-4173-913d-7769824e4acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c86020e0-79c6-4a57-b4b1-cb5b327939d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56745963-2729-4415-8640-38960aeb4c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436dcb99-5044-4b74-a051-14a5d23cc7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bd81bc-9dd4-4536-a81c-beb1c3064fb1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597a936e-a1d2-44ca-82ca-13c946e4ae53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fca95b5-91d1-4944-a182-aef1c58a33bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a514f795-916f-4fc9-acab-c1a3941fc4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92024515-5f2d-4015-93ca-274fc481c3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b66e29-271f-41d4-873d-6cb61c973688",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cf33cf-7dfe-40dd-8489-2b8550b23eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd48f9d1-eb41-4588-ab3b-febdd3ec079e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c9266a-3f0b-4d09-854b-89657b266a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a85c2f-984e-42ca-8f3a-318843fa6dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2645c837-04d7-43fd-a2bf-c52d7383bf10",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f69ecce-9504-462b-b37f-298ac469d9e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b7902c-89f5-453a-ad4a-a191081313d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "130d0a03-d77d-416c-89a5-2b508cbc91aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640041b1-7ce3-4df5-9116-52a2916d0ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc59a5d5-3505-4ac5-8f07-fa81096a3f80",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5be608-c31d-4382-9b2e-b2c98ee7f5a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312c8098-57d4-4082-8b42-2cd5d347419d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e961428-cfa0-4fa8-b9a7-c0bef800dd5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a86bc6-24c2-40e8-af26-f35b79695d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801aa3d7-a288-4953-a15e-579e404214ad",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed926c32-9ac6-467a-be7a-1611a6fc2f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e3cb03-c9dc-40a1-bdba-c9e12f241c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67f4c19-cc62-4072-a85c-7aa7c7937cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8abd1158-faba-4c11-89ea-06e5717f1e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05879e7f-4c6c-4415-a5cf-968436a51c67",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01738ee0-fc14-4119-8a3f-99e1368b4e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8e11ca-9d53-4f90-bf4f-da81298fe759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f597464-27c5-48f7-87c3-42b4b09ff3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe034f5-5990-45bf-bc1d-770b7ac7bbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320cef75-39bb-4873-8ba0-e560a8e4e3e8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2cd27e-b7f9-4509-8238-1368fb0314e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883f21e8-730f-4df5-a51f-f97102daaf0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe69495-b278-46b2-a8e6-035a92bcfcf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f4194a-ac5a-4403-a832-37ba818b27fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695c78b7-a65e-4694-86c4-99d38d31da89",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0641c64e-d6b7-4ae4-870c-2867be08bcf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aecaa63-6228-4031-a788-0e31cee6e231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f52ac1-3adc-4416-87de-a20e04973ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55180c90-4c54-46a2-8bee-334166ce1de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800a937a-bd4f-4096-8411-483b2076a19c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3e2d97-12c0-4f53-8381-22885d24eb97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74705d2-da6a-4b83-b248-db5cf5003ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2455324-7d36-4378-8db2-dc94b7c72516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5d0eac-673f-402a-8317-2174e0728c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a88a1a6-b308-489b-9143-d795f9523dda",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9356e7a-08b9-4932-b692-5e1402a8b076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a6bb822-fab8-4b8e-814c-dbf327b81243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80944c9a-3ed5-47e6-8cbe-5e94bb9fd6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e37ef9f-7cc0-4e11-afc4-d2e1505a9c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3226a95a-e78d-4b96-af75-5d9e3145863e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d946e3c-e5d3-4c56-96d3-079376147314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7171ab42-fe1b-4532-9475-3a01ff4ed69c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2d2c4a-d917-4da1-a501-855e7de35dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965cb388-1d5d-460e-b622-8ee42d229e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df45904-308d-4d74-b70c-35ca2e0c7135",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5a266d-27da-4dba-9424-b7313d6ef70d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "944b77e6-dd2e-419e-af86-0d1117e2128c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f1fa16-46dc-4260-8279-ece2af95c0e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc656c40-ae19-4557-b8e6-142dd30067d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67468fd7-83dd-41cd-acbc-35ce4b34b318",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3361bfb0-6e1c-4b3e-a8d4-6378be5ffced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b7f6a0-7411-43b6-b0d1-895a07d93061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "989ffa2b-b04c-40ae-84c4-13bc21306817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d272c18-b883-44e0-95e1-88ac6e6dbb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf629a3-6f53-41d5-a60d-55d81c1c77d3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4dfdfa-2954-4f42-aec5-99e80440cd90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4d69d9-3743-46de-8a0f-9260379820a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40c0e9a-b185-4558-b76f-7a88642d107c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0efcdd9f-d09d-448f-9d9a-71234080db25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b102c10-2ab0-4eec-ab8c-03c123b1bb28",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90dec6a-38f0-4d59-9223-c2e7532bf743",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f558f51c-8973-4955-b035-70d8643f4801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f420c7-6e34-48a3-b0d5-da234e419a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9315535-a4e6-466a-a380-d554a62fe5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f6ddc4-a8c0-4aec-adae-ff26b8e393b1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d6551d-63eb-4de0-918e-c98c00c7d95c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb520775-ec43-4445-abe6-615f9199ab82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422f6e17-6473-487f-87ed-10ff9cbf09dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ae0dfc-ad31-4848-8f52-2be05bebdc41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a776c591-70c5-46e5-9142-19c962c69e5c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e053fcd5-10f4-4be3-8421-afcee163f252",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05a22184-f388-4429-810c-b79892a1722f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26de4442-a912-4708-b7da-e59ff1ea3357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df5e9ca-22b6-46ea-86f8-4b8e24176086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab739cb-fa81-41c1-b07e-a3af2b94124d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d90431-c87c-45c5-80ea-7b9c267eb691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85aec7bf-4f25-40d3-94c4-c866f24af46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c50b4fc-cd3b-4cb1-9548-8b16a3b0b1ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8ef016-c6bf-46b1-8bb5-0af4d371fb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d5cbce-d7a7-4ff5-b1ab-ca7dc1cf9cf3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4deed415-3afb-42e4-bc00-46fab109d702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1407c3b-ba64-4554-a189-4650c7761e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d1c26b-e8be-4554-8a18-219e16396a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e96ae19-dd37-4371-ba25-977d0a3183d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35ea8c4-2a4e-472f-9729-5c18534cbd4c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9811412-188d-4f25-9d0b-28b596a90fc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f916f79-e982-4e2a-8570-7b025c8457f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6632dd5-0aa9-486a-9f1e-d3c76c0650ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50678435-f77d-4e05-be99-d16151146611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22544bd1-b7cd-4fbc-88dd-743f172d44a8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee787018-78ed-4795-b66a-3535e69a58b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bfe5501-b109-4688-b63a-7dc644024d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dcc3d2-dd54-4086-a964-ce25024cee6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067bb862-94bd-43cd-a502-a421caf7fb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbd4c09-f000-4e11-b524-93ae32d8b577",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddbb0db-7be0-47d2-9527-ab50f1371d13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67f21a9e-e7d3-4222-8402-698bab46eb40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "891b12dc-e397-4239-8d6e-b5a27a3ccffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fec7719-b123-4780-b3d6-c02751e17744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f172520-a9a1-414f-8acd-638d0a97a474",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5c71fc-21cb-4ce2-9455-20fe72cf4cc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c777a58-7b62-4893-b553-effe6852cc6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d994caef-ab2c-4f18-8699-6956c28c568a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b82dc0-2c3b-4104-be88-b8df0cf0eab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd595f76-f133-4030-9e76-6f3fb5b64fde",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66b47d9-34de-4d9a-9d1e-8a99d20a46d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc972a39-30ec-4f18-952f-c7dcc9c3e242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8088e4b2-dccb-4482-bfde-2e63da79c228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd1c9dc-649a-4ce4-94d4-a79308a64804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69050d5a-041d-48e1-9efa-dd6946f30afb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16425d03-2b60-45fe-9e3b-a72be51bc5df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e37bf501-89ef-48c0-bd08-ff3645669a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab57a8c-903f-4cae-ad39-36ac39b26046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662ff1bb-c7a7-4806-8cbf-dcbab5e5ce08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c007a5-0ae1-43e3-9646-b53678945461",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39da97d-c742-49d1-b80d-8f9ad1f72e2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d04e056-e87e-47ff-8d69-dbaa18cfe433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b2da6a-f25e-4933-a6e5-feb14e8cf048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1203d1b-0ada-4256-81e9-b61e898693db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc24fdbb-ad4f-4946-87ee-5ea346a1270b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43b6bb1-8cd1-4cbb-a787-4dc632ad35f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a31b55f2-a87b-440e-86a8-e0b5fcf1cdf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f5f14b-a80f-46f8-9d10-0c5473222e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada1e7fb-a40c-4ea1-a5ad-a3bd8c8264c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59d1489-b2b5-4db2-8702-13c5698d2350",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d80090c-894d-4921-9c3a-a707df416ea6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "648019b0-0ae3-411c-95b8-4a19ab7b0e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519f4475-f80b-4d7a-8e91-f40b28159350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba73d72-9fd4-4877-a656-50025d59280f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a908a154-8bff-4672-b2d6-9c2943e642bf",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd8b3b8-39b8-45bc-b3f0-b8e7baed12db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "673ce925-5166-427a-8585-a915be5d0a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e6563a-f674-41ee-a440-5dbd54d6655d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5bfd78-d816-46dc-a4f5-32cba442e4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eedfc1aa-2aba-4115-9571-59b5168e8e9b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93f935b-c876-4bdb-8298-2321b4912af4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb14cb00-1922-4f3a-9b7a-cb90f1642c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03328e4d-f8c3-4936-916b-717d65c3888f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4095194-58ea-49c3-b84a-f438ebe5b520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60aa774f-d729-476a-936c-9e343c056037",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee2193c-c0ea-4a9c-8a6c-279f1c5b2594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11a88ba6-9b75-4046-91d2-6211219ddf1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdaa4e9-5625-41cb-aaa4-fdf545d6872f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3c52b4-c6fb-47be-8147-3607f4da3349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88890df7-a2da-405f-aff8-adebfd475674",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df184a96-5af0-4909-a14b-ea4deacde97f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7adc2c89-13ae-4491-9cab-33e99642842d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336263f8-fb1c-44bf-9b23-4a812bddc8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4a62af-cbef-4ceb-8b8f-6e65b7e64fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ab94f5-d99c-40f8-a243-3e82e5e2a42a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131069ae-0288-4a17-a39a-19be36388bef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b6e0d73-63c7-4c24-b641-17a1e1de690e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f461029c-32a8-4d6d-a40f-64f2acccfbc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49976f8-2834-45ab-88cc-722ddfaf13af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251dfb3a-4dfd-4f7d-9598-63ac3b56c02f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653486b6-42dd-4bdd-9162-d8a72f4ab70b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61141eed-8cff-4d1b-b1ee-7a53677821e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19f3c4d-3b21-4406-9876-d4c1b7f9ebfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b573ca3-889b-41c2-a7d3-07a7111768df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1ee2ea-b2a5-40d3-b471-225edda685a1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6521c667-04bb-4341-97f0-ee3a7e3b4ca1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "460d4e3a-2d44-43f2-b283-8a8353b86ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0a5820-28ad-4ffb-a622-2f74851e4629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62e3904-72b7-499e-bf2f-e57f3864377c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c71b78e-2324-4ccf-bcce-ca21c98a0af7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07aa10f5-1a07-47cf-abb3-2fab74447002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef2208a-8502-4477-804b-6004a4fc1cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62ee86d-d593-4bf1-924a-e15324003fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e24cd9-026b-4108-b0a7-7cf3b661552c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1e5f80-a10d-4e34-89f0-e54db28405ea",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4002a3fb-80bc-4896-bed7-210aceb37be3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2590cc6b-5372-4e5a-95dd-a07dd3faae75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee10750-f4d1-487e-8824-8c952640b5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811e754b-a692-400e-a9af-843911263cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ababc30-3a7d-4d5c-9a82-be8841e07db0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fcad8c-d27d-4b3a-9750-af8711b4ab5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5283e590-38f0-49b8-b4bf-c04a710c9a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c252605f-8681-4b3c-a196-a880a3c3912c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3898dd80-d304-4be8-8b07-7e9c33b141e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cb2364-51c4-4800-a2e3-fb429cf6761d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee910e84-66eb-43da-ad0b-01e5560fe7ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e54d7de9-3299-4a7a-9723-8cdbc77bf7c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1b92db-9233-452c-a203-d8e3fa349bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d12d3e-2a26-4753-b1d7-46a10b801f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f4f33e-5cde-45c3-a4d6-62d91e217f7e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135eb27f-d9f6-4942-8a27-726982f47e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb182c8e-3fd0-42ce-9807-02f8f34b2a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f27063-9141-49c5-b784-a895735a3dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bed655b-0e34-41a9-a19d-42237aece555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb305ddd-26bd-4088-82d4-a49b0191f3e5",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3457f426-197d-45f5-b926-403e96c5d441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e28ea1f-b088-42b3-8d1a-18832bcd0147"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2930ce2c-f21b-434d-9965-55a12b6d3f6f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0223758-d59f-4fd7-bbbf-16d9f0175a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c68f63b-c4a6-4022-ae30-027eacc89fc4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979f57dc-6ba4-47e2-8175-662e1c25bec0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44538052-ac1b-4b22-9f44-c4bd0365fe37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba0c787-0c29-456b-924f-2296b6dd3960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ff5669-2578-4735-8b28-8b43b7a73662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b512a4f1-874a-43f2-9dbf-f19d591b6548",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78015542-0400-4d0c-9cc3-d7f060b3f2b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44162750-953a-4164-8ee0-ff2e9c14ef33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6e9d03-b9cc-489e-a4c9-e38a7a780710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b053008d-ed7f-4edd-b58d-064350893698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5533b3be-0f86-45d2-8f51-4d2feca99831",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6511aaa9-4ea4-4c88-98b8-10b966220b4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94a02c3e-2df4-435c-af83-c318e34ccdf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6621e6-0f0a-488b-a6d2-620de724d74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1834f271-b634-4f4a-a678-211221db0f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1df87f6-bcdb-4c1f-8cd9-f839e2f6699e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabbacf7-7dd7-4808-8c3c-04ace3414f95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30f28846-6638-47a0-a9e0-76762528fc5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2cb47a-1ea7-493e-b7d2-50b89bb9b9b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d62ce3-7b61-4038-8c06-9677e6bfffab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346cddd0-15df-467a-9a86-e20ab0524f4c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b3f0c3-dd0a-4746-bce2-b7eee52bdbbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7c7d17d-ef6e-4115-8cd9-d61afdaf023e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea66ac9-2f9a-408e-acd4-446a70b8a0ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e4cb02-a30d-436f-a5a8-177a234630e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98541cfa-dae9-4935-a190-841cf45ec010",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eeee03e-ab23-4399-94ce-3a2cca82b571",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "182ff55f-43b0-46a8-9564-383ec0a69e3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "259d2551-099d-44bb-98d3-cb44bbdbcb60",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "194d3126-a90a-41dc-9553-d0f938c85a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1708811-d196-4eca-9c31-0c13e5fc050d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b873b8d2-1b05-487d-a766-13dbb7be69db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1492538a-55b9-4ac5-b16e-303a35eddad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "044d9be8-e2a5-45dc-a2a3-ce266e6fb312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5baf4e73-cfde-413b-b987-dc80ea8baa24"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87c5fc44-b683-48dc-a03d-21a1537c30cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a908e19-586b-49cd-ac3a-83868537ca58"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8614d623-a2e5-487d-85dd-1845e932f746",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50ee6d02-e606-47eb-aea1-9b3af4f053d8"
                    }
                  }
                ]
              },
              {
                "id": "d547f0a0-6ecf-4536-bea8-25e341de16d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63a258c4-79e0-4d8a-8cdf-d3e030085d14",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bccc58-63f7-4aea-ab20-6092748f512a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "764e7dd7-03a6-4e09-bc5f-7be3af394328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7e0a47-9ba2-41d1-8caf-77580a691a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75e80364-81bc-49f5-98dd-e198177ecc84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69389f7f-839a-40c3-a0c5-0e99a4831afc",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95fe906-93f9-4c6c-8c28-e59fb8ed9362",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "902318e2-2e0e-4fae-a5bf-f4df29834a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4381c90d-52e6-49f6-b2af-86bd9b09a85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ecd89da-5ea4-4d3f-bca4-9d0cc8127ec6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5184201-be4e-484a-8cc0-c27a187bec5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67dbe6e9-9127-45aa-90fe-c98941987c1f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbd69c4e-95b7-4995-a02d-680d73fc9dd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19a3297d-1276-48b3-a4e1-f982be1dbd80"
                    }
                  }
                ]
              },
              {
                "id": "c75d614f-7c77-4a70-8d6b-2e26727494ae",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5ecf5d62-d534-46f6-bbbe-fe1694b26f8d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76398c76-b012-496a-8aaa-69bacdf83559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ec6924a3-28dd-4410-b9e7-d7ccda8c81c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299aa24e-b2ad-4efc-82dd-e607f192c144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71730a96-d2a7-4cfb-9b8e-7bdbd63abc5b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f88dc377-71f5-4a9e-959a-a0740369bf3e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "39d7f71b-7932-45ca-a9b0-f22527024363",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2edb7d09-dbf6-4f12-be07-441fe93254df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0a09f118-5e3b-46bb-8d3f-36b07c5713aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e89efc9e-eac4-4c62-a211-ece0465626e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c0fbb61-2257-494a-8078-abba2f2222b7"
                    }
                  }
                ]
              },
              {
                "id": "c2f51432-009f-4dc1-89f5-e1b16792fa4c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70a0e518-2cbf-4078-99ba-39a2bb1e7b24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "83625042-a30f-411d-922b-97859595abe7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4cf0445f-36b9-422a-b5eb-82e307bbd14d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a782c8ad-d6a4-4add-9bb4-a6067ffb7426"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "692c1122-38c0-4f2f-8fc1-a672b82cc4fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1b65e390-19f5-4972-8c45-7e551f6384c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eec98978-5d97-418f-bf09-4900ed68e3ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bda62ad5-3d32-403d-ae16-33c0978f1f21"
            }
          }
        ]
      },
      {
        "id": "771177d0-db27-49be-98db-2bce16e127cc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b7615c43-b158-486e-80d7-8abd4ea771b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29fd62fb-8368-4f2a-93a3-f99cffca65e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30ff11a3-fc36-48ac-ac5d-f6ca1aa59f06",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcc9257-006f-4e2f-b9ce-2edb9e000acd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c6fd9383-5170-4e81-84ae-77fa4f3db2c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b0e693-170e-4ca2-8c98-52c9234d3fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e797aa5a-d0a5-429a-aa07-98bda3652d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b87d539-6308-405a-b121-d5e48b44182b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9bfc2e-a310-4ce8-9e62-4e08db1cd05f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "892fefc6-d87e-4883-8e13-623ca67c7499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81d2484-66b0-4fe3-b94d-b85b67d0d08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "058cc08b-2464-4e61-bbb4-c0ce80585eb2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88de5cd5-1c90-4c8b-867b-65246b1eda10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf839263-f5b2-426e-a7e1-f6645c6a0965"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4f511eb-0a12-418e-9d7d-ccb31743cd64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "878be834-6b45-4170-a28e-e90ee279c185"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a46f2eb8-ca9c-41f2-8b42-09f0d7b6debe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "eb7a19ef-deee-41e6-b378-679d561c788c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16f5b15d-2db3-4332-a42b-9b541c8c9a05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09bdd891-6aa3-4166-a7b2-687ec16ffd06"
            }
          }
        ]
      },
      {
        "id": "35df71d0-02e1-495b-a75d-1a0602b76204",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2aa8a6b3-d928-4495-a1d5-e8e14c3e2545",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ca79fc1-31f7-4b25-831c-cd3e8bd397c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e3f4f72-a586-4458-bd65-dd1f8cefc463",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7ac3c8-2087-400b-9e44-aee468893a0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e467bdc5-5d84-4525-8859-b5d187e98086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9806df5d-762a-4d0e-add7-8943279810c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc00d4e0-ce12-4c91-a976-da9ac44e3abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26cd46d-7605-4177-86a6-95c9f9305a97",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe7c5d6-9c8c-4d6b-8bf2-fcfeecb68d39",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe3391c-1f0d-4265-a455-93f96f8d70e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54446a13-f902-4023-b91b-e0ad3778616b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39f850ba-6e40-4807-a631-5a2ae07be8f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03d5bdd0-ffeb-4738-81ef-845b3de758b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fc351af-9736-4387-ba86-2432feed66f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3793e208-c97a-43b4-95fe-2f3ec5b71e40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cdc78b7-a4cd-40fe-8eca-23d48a08e539"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42ae75cf-4715-4196-bce0-cb7b12680662",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9a8b00cf-e6c7-4938-af3c-2b5d67bcb895"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b825c874-9892-44ed-9eae-7b7e51300788",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7031b12b-29ac-476b-a2a5-e0cc0b175531"
            }
          }
        ]
      },
      {
        "id": "5227981c-b052-46f3-b762-870b48be5cef",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "eb13387f-8bad-43f2-95ff-d48603c48922",
            "name": "Negative Testing",
            "item": [
              {
                "id": "56d3b4a1-ff44-46d8-84d7-9829f8e8c5f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf741b11-207c-428c-a710-e755b74721f7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba08264-9554-40b4-9530-9474c32e84d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2533e6be-e2e2-4afa-afa4-b7ac9ce04f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26207970-f4be-4842-9f0d-30752b1607d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0f02674-0d99-4850-aaf7-52a0bdbfae04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba7673d-f326-4b53-bee7-c64822a6719e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac76318a-08c4-40d0-ba6a-2d3ba5131a8f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "789cdf21-9ded-4e42-a50b-a455685e504d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00186799-1f7f-436d-9d88-e0f36f760ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a5b496e-6ead-4f32-8a40-966315899123"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad788594-99f3-43d0-9d1e-047232e7c07a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5192dce-1dfd-4b27-a3df-49cba078bc37"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d71ca20d-e788-4a5d-9ce9-b03a532451af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6111641-9a5d-4828-a380-08fb74bdd995"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb99e88f-077d-4869-81e2-c877bcba6b36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2ad58c21-53af-4da8-afec-7ac03ba649b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2b12c60-7b62-43ff-ab3d-cfd69fad4c2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fb3e830-29cf-458a-9573-766480cdf871"
            }
          }
        ]
      },
      {
        "id": "70905bda-7c05-47a7-9117-cfa2c67057c2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5f669a0-919d-436e-9518-a9b41dd43fe8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a55e2c7f-f6f4-4b8a-ab8c-a42aa3e821a3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "85b8ac21-58c5-40b8-8a8e-1a86ded844d9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0a8b882-e598-4b06-8c38-2fced7baea34",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14c38ee8-e627-4915-aa3b-31e5d611b8b1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 344.3846153846153,
      "responseMin": 7,
      "responseMax": 17348,
      "responseSd": 1364.2704665560852,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684802267004,
      "completed": 1684802367427
    },
    "executions": [
      {
        "id": "5abea333-ea4f-44d8-803e-670b4bcc4f9e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2a20d403-209c-46fd-b079-ccade3368743",
          "httpRequestId": "1705f89e-88ef-4640-93a0-d9d5908d12df"
        },
        "item": {
          "id": "5abea333-ea4f-44d8-803e-670b4bcc4f9e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2104df71-56e6-47c3-9f9e-c4f7b1a7ecdb",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "2b33ffb1-86ae-4b4b-a60b-8202ef1eaec5",
        "cursor": {
          "ref": "1cbba7b4-1e3e-4d7b-bb3b-2ecd72cfba40",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f9d226ff-7317-457f-96f3-b6d8d3285682"
        },
        "item": {
          "id": "2b33ffb1-86ae-4b4b-a60b-8202ef1eaec5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "58b42b61-c815-4c76-ad9b-42cea3135c44",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "eefb0407-81b6-4ffe-b514-528ff6c85d19",
        "cursor": {
          "ref": "2c3a66ae-6d13-42b1-9cba-085df04f4bea",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e4525b4a-e318-4649-9402-31dba28d5752"
        },
        "item": {
          "id": "eefb0407-81b6-4ffe-b514-528ff6c85d19",
          "name": "did_json"
        },
        "response": {
          "id": "d9571410-9218-4ed7-81f7-22744334fdaa",
          "status": "OK",
          "code": 200,
          "responseTime": 569,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2feae045-98ed-427d-ab18-b780a22d9dda",
        "cursor": {
          "ref": "b0d6e03d-6086-4b9c-92e9-f7670a5f892f",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ec3d03a3-c3fb-4d39-a0f2-2430b746602c"
        },
        "item": {
          "id": "2feae045-98ed-427d-ab18-b780a22d9dda",
          "name": "did:invalid"
        },
        "response": {
          "id": "f3613710-b41a-4ee5-a2f3-aa2249eb330a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5213,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2feae045-98ed-427d-ab18-b780a22d9dda",
        "cursor": {
          "ref": "b0d6e03d-6086-4b9c-92e9-f7670a5f892f",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ec3d03a3-c3fb-4d39-a0f2-2430b746602c"
        },
        "item": {
          "id": "2feae045-98ed-427d-ab18-b780a22d9dda",
          "name": "did:invalid"
        },
        "response": {
          "id": "f3613710-b41a-4ee5-a2f3-aa2249eb330a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5213,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "11e41abc-0f62-4791-9530-417a7b333a2d",
        "cursor": {
          "ref": "e47f8b13-30c0-4c7c-8897-46e76b63d1ad",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "835bcaf1-619a-423f-af8d-cb31ee6d3b20"
        },
        "item": {
          "id": "11e41abc-0f62-4791-9530-417a7b333a2d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a2a8ade6-327d-4028-8ae0-9e78238ed146",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c29041-7e39-4268-aad0-ddb4ccf87b61",
        "cursor": {
          "ref": "5d92d448-1bb9-495c-a071-7642c5b199c5",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "874926d2-2ac5-4d05-9dea-e7b2b721be09"
        },
        "item": {
          "id": "e7c29041-7e39-4268-aad0-ddb4ccf87b61",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d3b93179-0f6d-45e0-ad0f-7d04be8035b4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846c88fa-4f70-478b-b99e-cd4e4f90c5a0",
        "cursor": {
          "ref": "0bbda26e-1284-4a0d-83ae-0aed72dceb05",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dae39bd5-44bd-4943-a28f-42de205b5c79"
        },
        "item": {
          "id": "846c88fa-4f70-478b-b99e-cd4e4f90c5a0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "64719c5c-bc82-4cff-bb9c-68958f51c4e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 207,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "8759202c-7460-4e7e-bb51-1c0891fb0be6",
        "cursor": {
          "ref": "c5b395b9-58fd-41bc-bd7d-263ba9e0a7cb",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0dda5209-3333-4aeb-9b62-cdbceeedfd2c"
        },
        "item": {
          "id": "8759202c-7460-4e7e-bb51-1c0891fb0be6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "45195530-0b10-4dc0-ad39-7a50496ff1dc",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8759202c-7460-4e7e-bb51-1c0891fb0be6",
        "cursor": {
          "ref": "c5b395b9-58fd-41bc-bd7d-263ba9e0a7cb",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0dda5209-3333-4aeb-9b62-cdbceeedfd2c"
        },
        "item": {
          "id": "8759202c-7460-4e7e-bb51-1c0891fb0be6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "45195530-0b10-4dc0-ad39-7a50496ff1dc",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "df58bebc-bb6f-4997-b2da-fc599e57efd3",
        "cursor": {
          "ref": "1113a784-ed6b-4c48-b047-8259981ed129",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "24c70c9b-b676-4aa8-bcb3-b8cedfea431d"
        },
        "item": {
          "id": "df58bebc-bb6f-4997-b2da-fc599e57efd3",
          "name": "identifiers"
        },
        "response": {
          "id": "4b741f01-44b1-418a-a208-94346728cddb",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e19a68-fecf-46ab-81ef-01095d5f04bf",
        "cursor": {
          "ref": "a3a587f3-0389-4ef4-909a-6059801cdff4",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4188267d-dd0f-4764-9d96-75a89f63d4ea"
        },
        "item": {
          "id": "17e19a68-fecf-46ab-81ef-01095d5f04bf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1fc78813-55d1-479c-930c-3cd992770dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e19a68-fecf-46ab-81ef-01095d5f04bf",
        "cursor": {
          "ref": "a3a587f3-0389-4ef4-909a-6059801cdff4",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4188267d-dd0f-4764-9d96-75a89f63d4ea"
        },
        "item": {
          "id": "17e19a68-fecf-46ab-81ef-01095d5f04bf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1fc78813-55d1-479c-930c-3cd992770dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bcda8f-6e2a-4ca4-8b93-594e07829fac",
        "cursor": {
          "ref": "d0c00451-12e8-4488-aba0-5d78b3b21ba3",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4daeecb4-9fe0-4526-8346-9f22c4394c8c"
        },
        "item": {
          "id": "53bcda8f-6e2a-4ca4-8b93-594e07829fac",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8a099136-701d-42be-be84-0b3a38b09e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283b6424-3768-477f-9bc1-e15e5d8eb080",
        "cursor": {
          "ref": "952251d4-a74b-4aa0-bc92-8744efea3636",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f8b17d33-e597-48fa-af5f-13c7571802ab"
        },
        "item": {
          "id": "283b6424-3768-477f-9bc1-e15e5d8eb080",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "08954c30-b6bb-4aa4-867b-a465060ba00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365059d2-127e-4148-b67d-39ba3ecc40ad",
        "cursor": {
          "ref": "ba624630-63d7-49b7-83b4-6ce1c735d3bd",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "528d791e-478e-4d97-9567-f865587366a2"
        },
        "item": {
          "id": "365059d2-127e-4148-b67d-39ba3ecc40ad",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1fb881c6-ff0d-4c34-8162-5268b4db0319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ededf55-6b95-48a8-8560-a82e1f917584",
        "cursor": {
          "ref": "241fda86-b399-4451-a345-89b34df93a0e",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0e56fc1c-b839-4d66-9223-170c940e104f"
        },
        "item": {
          "id": "9ededf55-6b95-48a8-8560-a82e1f917584",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8af16341-ada5-476c-971e-b4555b38a010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f760566-95f0-49b1-b3f8-7eb82f7c127b",
        "cursor": {
          "ref": "8c7e1763-0685-4c94-83b6-2bdee325488b",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fc487176-e4d9-460d-8170-ba6fbe655b86"
        },
        "item": {
          "id": "5f760566-95f0-49b1-b3f8-7eb82f7c127b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cd3ec87c-d373-4bd7-ab93-266e9d08e0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ce5e5e-c2f6-43b8-bd1b-7152a26189a4",
        "cursor": {
          "ref": "223fe97b-16cd-4637-8bfa-04a1d5d4b17a",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "85af9015-353f-491f-9547-f6a22993a058"
        },
        "item": {
          "id": "51ce5e5e-c2f6-43b8-bd1b-7152a26189a4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bfb9ca62-3263-4eed-9f69-519c53a53576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750ff29b-eac0-4bb8-b30b-703654a1e415",
        "cursor": {
          "ref": "71104b60-fe01-4a2f-ae2e-0a949595e089",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ef092032-3156-41d3-9f20-a901862dffdd"
        },
        "item": {
          "id": "750ff29b-eac0-4bb8-b30b-703654a1e415",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d61f0bdb-bdd2-4235-a93f-25235ab86fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1500036-e933-41f3-ad45-0e22bdd130f6",
        "cursor": {
          "ref": "420f8c9f-d313-402a-a944-b0be27dc666b",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "02f8cfb7-5c62-47c6-8f33-45dddc19803e"
        },
        "item": {
          "id": "c1500036-e933-41f3-ad45-0e22bdd130f6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "358406ec-b55e-4ac2-99a6-cd7a186ff5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6d8feb-3320-4dec-a77b-eb44097c55a7",
        "cursor": {
          "ref": "1af6c1cf-2bb0-4c80-b4e6-b8189efced39",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7fb57e68-b225-4be9-9c76-037904c99b82"
        },
        "item": {
          "id": "1c6d8feb-3320-4dec-a77b-eb44097c55a7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "20e08339-7485-4a38-984a-ada822e5ac4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b05c3c-2a39-434b-8a4a-ee3bc402f9a2",
        "cursor": {
          "ref": "079ad160-9358-40ed-8bbf-42994fe40f6c",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9ca77896-e69d-4ebe-bfb4-706322af947f"
        },
        "item": {
          "id": "b8b05c3c-2a39-434b-8a4a-ee3bc402f9a2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e743e7e9-d995-4ee0-9982-e27c9414be83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af99e660-4735-428e-bedd-32c2d5e224a6",
        "cursor": {
          "ref": "2865c17c-0a93-41e5-94f7-5add46068f0d",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9225cd0d-7b58-4520-a69e-133481cb367f"
        },
        "item": {
          "id": "af99e660-4735-428e-bedd-32c2d5e224a6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "eb9e8078-032f-4baa-a6e7-dc7962f25f30",
          "status": "Created",
          "code": 201,
          "responseTime": 1134,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "fd0941ca-6187-4a8a-baf1-43263d90fd27",
        "cursor": {
          "ref": "df9c0f09-1c3e-48ea-a2dd-411248656ddd",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "66961a4b-535f-4c2a-83e1-dc69a5f6ba80"
        },
        "item": {
          "id": "fd0941ca-6187-4a8a-baf1-43263d90fd27",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b2591e67-7a4e-4609-b3ea-7e092e3dd6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179f50e4-aa4e-4340-bcac-e883f54a8219",
        "cursor": {
          "ref": "c515d406-9513-4875-9964-3ec98a8cce4e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2f7da72f-9770-43b7-b424-600d1c5027a3"
        },
        "item": {
          "id": "179f50e4-aa4e-4340-bcac-e883f54a8219",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "06606a77-2d6d-4314-9855-b8c103101ab7",
          "status": "Created",
          "code": 201,
          "responseTime": 8076,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "80b8eb60-5ce1-4a22-8b11-b34d4abf9035",
        "cursor": {
          "ref": "63a0faed-17e0-410d-88ee-bae8b3869c3e",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fd86d598-0d17-4b0b-ae97-e0eebf9ecf0f"
        },
        "item": {
          "id": "80b8eb60-5ce1-4a22-8b11-b34d4abf9035",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "66177945-7c61-4cef-a716-620f44853001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a04dda2-7082-4e5c-bab4-bc75eb8def4c",
        "cursor": {
          "ref": "d189be95-8272-4450-9cca-76bc2749d184",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3059f2fd-ef6d-4e91-bacc-d4d92bde0c6a"
        },
        "item": {
          "id": "2a04dda2-7082-4e5c-bab4-bc75eb8def4c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d59d831c-9604-4778-a360-692052da5b14",
          "status": "Created",
          "code": 201,
          "responseTime": 3453,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "64b2e127-45b2-4de4-874c-9c7d2aed8a1f",
        "cursor": {
          "ref": "b2992242-727e-4b8c-9cde-46705da814a0",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ebe978d1-7dd2-4afc-b6bd-1a1591ff7001"
        },
        "item": {
          "id": "64b2e127-45b2-4de4-874c-9c7d2aed8a1f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8e939a97-8f86-45fc-9829-1b22a95e356e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb10c82a-3407-4ad1-bbab-61c1eb4ac092",
        "cursor": {
          "ref": "a64011c7-2515-4fb6-bf4d-c4d414c27293",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "98b9e59e-a83d-4937-92eb-15b29e6aaffe"
        },
        "item": {
          "id": "fb10c82a-3407-4ad1-bbab-61c1eb4ac092",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "dbf64091-b5d5-4eea-9550-3f9816130fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c099e13f-170d-4a85-9662-a3cf96a4ced9",
        "cursor": {
          "ref": "2c671781-6fd0-4598-b8fc-1cc3c815ce69",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "666360c4-a95b-4266-abe7-6a8acd4a39bb"
        },
        "item": {
          "id": "c099e13f-170d-4a85-9662-a3cf96a4ced9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4283d7af-4b4b-4495-aa7c-be9b28859fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fdffa6-8fcf-4029-bc0e-657ebe55de66",
        "cursor": {
          "ref": "4ecd015b-fa67-4db5-a8ae-9c9820e10dc8",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "09c31e7c-5b9f-4d3d-8bd3-b9dca2b0095c"
        },
        "item": {
          "id": "a9fdffa6-8fcf-4029-bc0e-657ebe55de66",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "68ab8cd8-ad21-403f-8d65-f17f0af00b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d29c04-2fc4-4f79-af1f-692e066d188b",
        "cursor": {
          "ref": "f0f55f8a-2289-499e-933c-e07b7c307ba0",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f6c58e32-1916-4b8f-bde5-14df4967dd9a"
        },
        "item": {
          "id": "d2d29c04-2fc4-4f79-af1f-692e066d188b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bec0098e-8966-48db-a1d0-fab4d46ce3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaddb677-f7f4-4dac-8c19-1c2fb81548c7",
        "cursor": {
          "ref": "7b3dde0f-f834-423a-a66e-fe1b6c385326",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0d9d6ac9-f49c-4643-a996-a87bf9508476"
        },
        "item": {
          "id": "aaddb677-f7f4-4dac-8c19-1c2fb81548c7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b5582c84-1ca5-4033-afe3-e0120675a67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1691056e-6be3-461b-bca1-d51db6851cb4",
        "cursor": {
          "ref": "415a1771-04e2-46c6-a71f-8a8d721d1568",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3d9fa3a6-8eb3-45d3-a513-25180ed5f094"
        },
        "item": {
          "id": "1691056e-6be3-461b-bca1-d51db6851cb4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c99b2b49-7d5a-403a-b5ca-077a413412b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f5e885-0fca-4ab7-85b8-ad73047ed7ef",
        "cursor": {
          "ref": "82359491-fbb2-4027-afd8-dbef88cb6b76",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fff1fc08-8c9f-407a-aa02-9cf85c75af51"
        },
        "item": {
          "id": "e3f5e885-0fca-4ab7-85b8-ad73047ed7ef",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b4eb5c6a-7a13-496a-8221-df790a4f39a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7aa2dd-3e51-4f71-be8b-bb72892cb5c6",
        "cursor": {
          "ref": "32441193-94f6-4f5e-ad74-97b5595cfc05",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "09f3d565-adda-42d4-9afb-a6d86b4f2bf3"
        },
        "item": {
          "id": "9d7aa2dd-3e51-4f71-be8b-bb72892cb5c6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "48ed1316-e1b8-468e-925b-0478641b064c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f008c2b-b5bb-47e4-a6c0-14ea2f23d3e1",
        "cursor": {
          "ref": "ed9c12a6-4ff5-4737-817f-cc3b37635709",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "030feda5-e1d2-4c1c-8711-c2cce0242609"
        },
        "item": {
          "id": "9f008c2b-b5bb-47e4-a6c0-14ea2f23d3e1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "66062e0e-b350-43c8-910e-456e92efa86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "597a44ef-0cea-459b-b117-e5fefa1f002c",
        "cursor": {
          "ref": "208ca7fc-9cdf-4147-b3d3-dedd4aaa9a69",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c22bc601-c10d-4836-b320-811bc92fe3f4"
        },
        "item": {
          "id": "597a44ef-0cea-459b-b117-e5fefa1f002c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b13b7044-b28c-474e-b371-28fb82db4bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c861ff-4db5-464a-93ba-91c8acacafd4",
        "cursor": {
          "ref": "250e3908-b3e5-4761-85fe-ad216affcf71",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0de99397-e3d9-487f-8bad-e3ccffe6e99e"
        },
        "item": {
          "id": "56c861ff-4db5-464a-93ba-91c8acacafd4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b8d33ae0-71e9-4411-bfcd-5bd722bdc5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc3844c-b047-4fe7-8a06-52fbdc6d9eb3",
        "cursor": {
          "ref": "1e2093fb-a46b-4259-8bd4-45decbec978e",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a5381d32-b581-4a2e-ae75-9c1f126aa35f"
        },
        "item": {
          "id": "5dc3844c-b047-4fe7-8a06-52fbdc6d9eb3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "58486008-3805-4467-b2c4-03f47d9d050a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fde1c4b-f566-4503-8be6-842d97c70749",
        "cursor": {
          "ref": "d6f406cb-e4c3-4caa-9443-6e1eae052cb7",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "69f28c7a-3642-4d1f-a371-c49adb211077"
        },
        "item": {
          "id": "9fde1c4b-f566-4503-8be6-842d97c70749",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "956ded3a-31a4-45fa-aef9-1aace8fbb9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13f1f6c-0e86-4fbe-be54-6b084324ae7d",
        "cursor": {
          "ref": "03f4329e-17b9-40f4-a248-dbc3a127814a",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5364c05d-d2bc-4d72-89f0-ad93eb75ae62"
        },
        "item": {
          "id": "d13f1f6c-0e86-4fbe-be54-6b084324ae7d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4328f4ae-4795-4ce0-90fb-eaa013058322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 779,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffa9565-19de-4de0-8e67-25a283ab1199",
        "cursor": {
          "ref": "de2e3134-8545-4b35-b0f6-7d00833e49b9",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "160da887-9ae1-44f4-8464-7a4d1c642278"
        },
        "item": {
          "id": "4ffa9565-19de-4de0-8e67-25a283ab1199",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4c733e7e-0d0d-4bb8-a866-ee16957c28cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0589a6bf-3938-44da-a800-6d2dbd011194",
        "cursor": {
          "ref": "365bba32-2b30-459b-838b-afecd676fd9d",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "896bc106-f27d-4cd9-82b5-47470de48812"
        },
        "item": {
          "id": "0589a6bf-3938-44da-a800-6d2dbd011194",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6bef5c6d-a828-4723-91f6-99ef94b90f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8c463d-c92f-491d-9523-cc73d99ac75b",
        "cursor": {
          "ref": "9a24fc24-70ac-48f8-a4e1-6331dbca15c7",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b31e1e36-b134-401c-82fa-de764d864207"
        },
        "item": {
          "id": "bd8c463d-c92f-491d-9523-cc73d99ac75b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "15ef80f1-9699-4088-a9aa-cca20d94ed51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae314f51-bd07-49e0-a5f1-709981a72590",
        "cursor": {
          "ref": "ea2d4505-1866-41fd-afe8-b7f8cc313049",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "284c6466-4735-4171-aa86-91c41c5b3ace"
        },
        "item": {
          "id": "ae314f51-bd07-49e0-a5f1-709981a72590",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0fb97059-acf0-48fc-a23d-8974ec5fed2b",
          "status": "Created",
          "code": 201,
          "responseTime": 2681,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "616120dd-e472-4b86-93fd-34a8eabcb26b",
        "cursor": {
          "ref": "d9b6298a-7e3b-4c6b-ac7c-613942628506",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bfdf18a4-f978-4d8f-a4f2-b2d5c8963aad"
        },
        "item": {
          "id": "616120dd-e472-4b86-93fd-34a8eabcb26b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "81a8ffef-fbb8-4852-8d71-c798986fd3a7",
          "status": "Created",
          "code": 201,
          "responseTime": 2497,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4f80a1af-5f85-4f5c-8bdf-83836c4770a2",
        "cursor": {
          "ref": "c1c96715-2622-4011-98df-c57735ac876f",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a63fe3eb-5026-4626-89c7-cb6af4249f26"
        },
        "item": {
          "id": "4f80a1af-5f85-4f5c-8bdf-83836c4770a2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b6010659-484a-4e73-af43-55e58d893433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd183fe-94e6-42a9-84b7-618f843fafd3",
        "cursor": {
          "ref": "4c2aee0b-ac49-4d80-8d8c-6e7b81abf8b4",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1d37233a-5cde-4a27-aef7-9276e0fd1435"
        },
        "item": {
          "id": "9bd183fe-94e6-42a9-84b7-618f843fafd3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6d948cde-f169-4938-91f5-6a6b67d156a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5296eff0-6ac8-4c8e-85ba-87a3fb29d572",
        "cursor": {
          "ref": "599cecdc-dd78-4816-847d-a39f8889d032",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "59f8580d-7af8-4151-a996-96fa34c0407b"
        },
        "item": {
          "id": "5296eff0-6ac8-4c8e-85ba-87a3fb29d572",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f9f3087b-3a6c-49c5-8534-b4bca9320112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 764,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340b5b06-3346-4911-ac79-27bab907a8b7",
        "cursor": {
          "ref": "d0ef9804-10f1-41c3-ad12-300e5dd05204",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c9b25dab-1f91-40a8-b18c-2ef5f81fc9ff"
        },
        "item": {
          "id": "340b5b06-3346-4911-ac79-27bab907a8b7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2743530a-e99f-4347-8366-0fb58c9f4a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf1978c-354a-41ae-8d32-43ac28742f78",
        "cursor": {
          "ref": "d0faace1-3bfc-4b66-b495-235b55024fae",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8ee3863c-e1e8-468d-ae6f-8f1976f26765"
        },
        "item": {
          "id": "4cf1978c-354a-41ae-8d32-43ac28742f78",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "eb1c0f90-6dbd-4d93-84fd-66be64f07eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3ecc41-12c6-4152-b1d2-d2f73bf9e9c8",
        "cursor": {
          "ref": "6bbcc593-7cc8-429d-99a4-5d070a7028e1",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a60de279-fecc-4b65-9392-2fb157b2a727"
        },
        "item": {
          "id": "dd3ecc41-12c6-4152-b1d2-d2f73bf9e9c8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2fbef8c6-1536-4fc9-96d5-8d918ed4b1d9",
          "status": "Created",
          "code": 201,
          "responseTime": 2684,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1adfc5ea-7b2a-4d68-a7cd-61c739d0d134",
        "cursor": {
          "ref": "15d3af32-2f2c-4744-a044-735ffed32061",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "045fdf0d-dd15-4bd6-9d0d-aae218f29bab"
        },
        "item": {
          "id": "1adfc5ea-7b2a-4d68-a7cd-61c739d0d134",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f30d28aa-f331-4ba2-bc16-3f211913827b",
          "status": "Created",
          "code": 201,
          "responseTime": 3106,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "54f0e412-e5ce-4bd4-acc3-335301affb50",
        "cursor": {
          "ref": "b618e075-458c-4bb3-aca0-adc3264fc34c",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "63e135fb-8f39-4e22-a59d-6ede2de65492"
        },
        "item": {
          "id": "54f0e412-e5ce-4bd4-acc3-335301affb50",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a2d0db03-0bc5-4e39-856c-684c2b461fca",
          "status": "Created",
          "code": 201,
          "responseTime": 2128,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5e261758-4ccd-42e2-a253-143dc2b08f4a",
        "cursor": {
          "ref": "3aa21f5d-6cee-4124-86ed-86fc5cf2d624",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "16e3d28c-ec79-44f4-99de-82d5bf8fc0af"
        },
        "item": {
          "id": "5e261758-4ccd-42e2-a253-143dc2b08f4a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c832f842-63ec-4bc5-af89-22e6e526f727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f42d883-6886-4abc-a88c-f114c147c3d3",
        "cursor": {
          "ref": "8308225a-755c-4a8b-baa6-cad975473e7c",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "29e01748-79ca-4dfb-8b4d-b5825607e4fd"
        },
        "item": {
          "id": "1f42d883-6886-4abc-a88c-f114c147c3d3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "54b54327-d8c2-4d8f-b2ba-5200a192e30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba075364-c73a-494b-bfb4-74f398c4953a",
        "cursor": {
          "ref": "a2157709-a69f-473b-839e-f060685c1277",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b782b947-dc69-4a33-89f7-0aba6ece2f8f"
        },
        "item": {
          "id": "ba075364-c73a-494b-bfb4-74f398c4953a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "37eaf438-d70c-4fc5-92f9-97feac1382f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da687e65-cf2b-44dd-8271-6c6419258900",
        "cursor": {
          "ref": "2b9bb9fb-f115-4919-828c-36816d0338c1",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4d0ed3cc-a592-485f-90a0-6527a23cdeb1"
        },
        "item": {
          "id": "da687e65-cf2b-44dd-8271-6c6419258900",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b5430f48-2d98-40d8-8bcc-7a11ec0223cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56d1e14-1405-42c2-9d2e-749cc7c824a9",
        "cursor": {
          "ref": "13a8e5c7-6cd2-4ec3-9fd9-41ac02e8ce48",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d0f9f769-2c44-4339-bef0-4c9a561c30a0"
        },
        "item": {
          "id": "d56d1e14-1405-42c2-9d2e-749cc7c824a9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dbb56305-a8f8-4d6d-b338-01a8323d5805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07f0500-d1e5-4175-86f3-7b9202682ac8",
        "cursor": {
          "ref": "d4ceaf39-1e09-4597-8e8d-451d0330e2b2",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a6378396-3b9a-4361-83e1-31a370e86080"
        },
        "item": {
          "id": "f07f0500-d1e5-4175-86f3-7b9202682ac8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9fadb4a4-16eb-41c8-99fb-d33be3be6cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425f2b48-804c-4bc3-8753-139a2eaf1196",
        "cursor": {
          "ref": "d82f24b0-b30d-4552-aaa8-dd6bfb96d4f5",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "891625e3-a684-47e3-b548-3fe6622c4acc"
        },
        "item": {
          "id": "425f2b48-804c-4bc3-8753-139a2eaf1196",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e5a946ca-306b-4ed7-8158-bd0b38f3bfca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d5a3d2-b32c-482f-a21e-3814ee900cd8",
        "cursor": {
          "ref": "9f6170ec-6c75-4503-a3e5-f83f64a1c288",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fd93f46b-89d5-4755-b60c-73de1257670e"
        },
        "item": {
          "id": "18d5a3d2-b32c-482f-a21e-3814ee900cd8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "dfcef34e-4acd-4f6f-b8fa-a7a48533424f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ea199c-d2b3-4c64-ab8c-804cfbbc607c",
        "cursor": {
          "ref": "aab00494-d27b-49e4-bbd1-3a1867cb6fe9",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9ab1ff6a-7506-4cf1-bf91-c458c059995f"
        },
        "item": {
          "id": "59ea199c-d2b3-4c64-ab8c-804cfbbc607c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "bedabdad-b119-4b7b-bb9e-86732f5895b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63578f1f-a16b-43dd-add3-480c33ce899e",
        "cursor": {
          "ref": "fe684207-b96b-45a5-b9bc-4ac9d4eebff4",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6dfb844a-2a2e-4c8b-a60f-f853eaf74ca9"
        },
        "item": {
          "id": "63578f1f-a16b-43dd-add3-480c33ce899e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "48d37a3b-1acb-4f6a-b032-7e27e10928cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc72e8e-bf8f-4b17-af7d-0858ecd82a1a",
        "cursor": {
          "ref": "0e004b3e-02e3-425b-955d-2a4744765425",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d5315ede-a9db-482f-a080-4ab10f6d4d97"
        },
        "item": {
          "id": "dcc72e8e-bf8f-4b17-af7d-0858ecd82a1a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "814350f7-c140-4a8f-8f85-1a774f2ceac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef60a89-0297-45eb-b4b9-8d762277dbc5",
        "cursor": {
          "ref": "37d37eef-94bf-4ac4-8349-75c7d7b0f434",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "af134ccf-d617-4188-bcd8-c3ef69ac30c0"
        },
        "item": {
          "id": "3ef60a89-0297-45eb-b4b9-8d762277dbc5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "dcc3cdbd-f8bf-46f6-97b0-200d7fab443a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5529ff-c7c3-496c-8c3e-bd8e3bc23d43",
        "cursor": {
          "ref": "8849d845-00f9-4a31-80c7-700cccc8f080",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5d8dbec6-d766-4cd8-a482-abec26c8d175"
        },
        "item": {
          "id": "0e5529ff-c7c3-496c-8c3e-bd8e3bc23d43",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1d17e544-8858-4a56-9bc4-48860a2cb511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2a5f14-1db9-4418-834e-24aa934efe6c",
        "cursor": {
          "ref": "f823e6ee-e443-4645-ae07-25aa21ad4c5c",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d6b9fa2e-28df-46c7-8799-05a0ba8db2d4"
        },
        "item": {
          "id": "af2a5f14-1db9-4418-834e-24aa934efe6c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "520028cc-f1a0-4c96-b668-514fe2089c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07099087-eff0-49de-ae9d-dbc49db00999",
        "cursor": {
          "ref": "87297ae7-ea32-4603-ae9b-d11e27f7f2b6",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cb94dfc3-4ec6-4adf-852f-4a19978ae528"
        },
        "item": {
          "id": "07099087-eff0-49de-ae9d-dbc49db00999",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b7666dee-e845-4a89-b9ec-ae2965ed6dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86546910-319f-42ae-acf3-0972d5a42c96",
        "cursor": {
          "ref": "72462f55-c20c-4e9c-a409-b34ae1b42357",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9a73f5d0-b498-48ae-8be2-a46f53a6a4dc"
        },
        "item": {
          "id": "86546910-319f-42ae-acf3-0972d5a42c96",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5b132285-e2ff-4d99-ad08-9f16ffaee1d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8595f1-c257-4415-9516-719b8eafe195",
        "cursor": {
          "ref": "5601d1be-5086-4712-bc14-62f184c7a97a",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e32ade66-f82f-4e06-a773-54e0c3b51d18"
        },
        "item": {
          "id": "1a8595f1-c257-4415-9516-719b8eafe195",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f843db01-50b2-46e6-9d10-babcfd9036b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170d2e60-036a-4345-a1ac-c806e1914332",
        "cursor": {
          "ref": "090f15c3-b4db-4c10-a249-84186571f196",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "403e75d5-d0ff-4a14-aa8b-7ce61e6e8da8"
        },
        "item": {
          "id": "170d2e60-036a-4345-a1ac-c806e1914332",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "59a6ce85-d0da-4e0a-9eca-bdfd57e12fc0",
          "status": "Created",
          "code": 201,
          "responseTime": 2649,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "af5b5dcc-953b-4882-89fb-1cd95dae19f5",
        "cursor": {
          "ref": "f43ff09d-ef3b-4221-9bce-6e17e3fc823c",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "12a0b2e7-3210-41ba-901a-409febc4d6da"
        },
        "item": {
          "id": "af5b5dcc-953b-4882-89fb-1cd95dae19f5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8678bbb4-cdf8-4106-bfd2-4dd3d30cac34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0080085-7daf-4649-9fcf-995dd52fb63e",
        "cursor": {
          "ref": "0df4cca6-608e-44e3-93ff-f5899301f6af",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "73ff93d6-1541-49da-bc33-318bb03477e5"
        },
        "item": {
          "id": "d0080085-7daf-4649-9fcf-995dd52fb63e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4b7838a2-fa35-4f9e-b17a-88151d7ed66c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d77decf-d465-4a35-90c2-9b0d0d5babbb",
        "cursor": {
          "ref": "048f6e03-25fe-4f55-820d-1870c4f37e19",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6471858f-ee4b-489f-8426-672d9312058a"
        },
        "item": {
          "id": "9d77decf-d465-4a35-90c2-9b0d0d5babbb",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b3e18ced-11cf-4ac4-8c85-bf1cb35b6dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15cb72a9-e22f-4988-a0ca-b7c2e32d3b89",
        "cursor": {
          "ref": "ad6ebdaa-0ab9-4b8f-84b0-7356b81bc730",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "216aab42-1bb4-406f-a30b-91bc17920148"
        },
        "item": {
          "id": "15cb72a9-e22f-4988-a0ca-b7c2e32d3b89",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b44f9a1d-8cdf-4dce-bf32-c64c0f2c3775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef24e54-6844-423a-b2cd-388519c72caa",
        "cursor": {
          "ref": "d1faaa8b-f997-4835-a67f-fb337a11073f",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ea41e894-c3a4-46ee-bb73-cb4159a19d3f"
        },
        "item": {
          "id": "6ef24e54-6844-423a-b2cd-388519c72caa",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7c4ed6de-9273-4af7-a890-75f33f4a5de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83f27e1-d1d7-4fb0-84e3-fb26c27a648b",
        "cursor": {
          "ref": "3305b8f7-d494-4730-8096-50dc03b91509",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b2d511dc-3b0c-4d47-9b72-2cf4f054a35b"
        },
        "item": {
          "id": "c83f27e1-d1d7-4fb0-84e3-fb26c27a648b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "79136375-87c5-41eb-991d-0c9b30faf844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d2c692-2900-4d6c-a58e-2f8f7d45023d",
        "cursor": {
          "ref": "7095d5e7-9fa3-4f77-a580-c265a334eca2",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "be79f0fc-0279-4216-b024-e9c930ce2b1d"
        },
        "item": {
          "id": "01d2c692-2900-4d6c-a58e-2f8f7d45023d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5f786ef8-07a8-41a8-81c0-b2b275976173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249ed9ad-ac72-43f2-8c1a-3b559c817855",
        "cursor": {
          "ref": "1216731b-4950-4b37-838d-04977d257118",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "aaed76dd-f668-4af2-b0e4-572abaa6c6bc"
        },
        "item": {
          "id": "249ed9ad-ac72-43f2-8c1a-3b559c817855",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "16e56a3e-1bf3-4e5e-a4da-dc8a9c8b5f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0539ed4-6f6e-4cbf-8ea3-8bccb9eaa1c7",
        "cursor": {
          "ref": "e48fa1dd-bb0f-4b7b-a87d-e3a9a7db4f22",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "209d905e-3548-4fd0-80db-9268699017b3"
        },
        "item": {
          "id": "b0539ed4-6f6e-4cbf-8ea3-8bccb9eaa1c7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f7cc870d-4ec5-4c1b-8bb3-44b9bf57990b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c4bc70-cb92-4418-9311-dd4da5e57089",
        "cursor": {
          "ref": "b40d8f36-f504-44e2-a23b-6d04d7dc7926",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "277f5a5a-3032-4595-826b-2c3b003be976"
        },
        "item": {
          "id": "09c4bc70-cb92-4418-9311-dd4da5e57089",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bd062c43-4993-44b4-bd07-9d8b68a5631c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a8207e-b1dd-4900-a1ee-58a08bc626f1",
        "cursor": {
          "ref": "6e745ed6-ae45-4e8a-bf7a-4241faf6cb3d",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fe5b0892-7444-4e24-8d70-2f4e89d822ce"
        },
        "item": {
          "id": "f9a8207e-b1dd-4900-a1ee-58a08bc626f1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a0e4e1f7-f3eb-4366-bba0-20c2e7e389a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fad10a5-3a7c-478c-a06b-e3a9b32e895a",
        "cursor": {
          "ref": "8889fcd3-00e7-4a7a-81f3-b8f9d2278db5",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "645a90bc-2eef-4c96-9103-88351c37a27c"
        },
        "item": {
          "id": "8fad10a5-3a7c-478c-a06b-e3a9b32e895a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1a617520-44b2-47c6-a665-1a459b1c46de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee1d2a1-0c14-43ca-a0b2-c3b7f01875e0",
        "cursor": {
          "ref": "36fddc8f-a4ad-4cf9-8724-76f6a1cefe1f",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "73a31b93-df44-4136-886a-94284953db0d"
        },
        "item": {
          "id": "1ee1d2a1-0c14-43ca-a0b2-c3b7f01875e0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e4de65d0-f19b-4156-98c8-e2f0009d6eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ca79e1-12fc-44b2-9334-b3246f67ec18",
        "cursor": {
          "ref": "03928d16-bf26-467b-91ff-c358cdfff3ca",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ded3942b-fa7b-4b87-892a-2020314f679f"
        },
        "item": {
          "id": "45ca79e1-12fc-44b2-9334-b3246f67ec18",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "39093186-b934-4ff4-ae9d-7e359d4b7faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9dd423-b044-47e3-ba3f-fde57857a5fb",
        "cursor": {
          "ref": "1da5a918-117a-4760-9ffc-6616eff5ba8e",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9a2a9f7f-11e6-45e0-aed9-b8190f8900e7"
        },
        "item": {
          "id": "3c9dd423-b044-47e3-ba3f-fde57857a5fb",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fea54964-e7ca-4b8b-8c29-019ba6849a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f787bb-00f4-40b2-8431-fd9a7b389bce",
        "cursor": {
          "ref": "87201232-8723-482f-8b1a-2bebfc29fad2",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d21065e4-f226-45cb-94aa-1f8ea8258de1"
        },
        "item": {
          "id": "c1f787bb-00f4-40b2-8431-fd9a7b389bce",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "54f761c2-9858-4784-9a26-6f5f6488580c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f79f386-a6e1-462c-9732-131542e75502",
        "cursor": {
          "ref": "c4880e25-6d1c-4465-8862-bc7417ee909f",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b49c25d3-ed25-4980-becf-4037a72abfe1"
        },
        "item": {
          "id": "6f79f386-a6e1-462c-9732-131542e75502",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0a602141-17e4-4ea6-a9b3-ea32afbf26ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5a7d80-260b-437b-ac36-a120eb6f2f90",
        "cursor": {
          "ref": "047aa8cc-6f68-40c9-92bd-925113c845d7",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6942c896-2459-40cb-acd3-a4feb1880240"
        },
        "item": {
          "id": "bf5a7d80-260b-437b-ac36-a120eb6f2f90",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d7ac4a31-5d2e-417d-b4f2-bb9e4564e453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc0260a-34cd-4ef4-8812-d6c32f20d042",
        "cursor": {
          "ref": "6317f87e-adab-4159-bf22-e147b5894c2f",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "36dfc6bf-1f96-42e9-bcc7-382bdc2838ab"
        },
        "item": {
          "id": "3fc0260a-34cd-4ef4-8812-d6c32f20d042",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "09baa631-fbe8-4a0f-ac20-d29142342949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807f1fdb-e4da-4a12-8e73-7f921fb36b7f",
        "cursor": {
          "ref": "4149c5e9-a488-407a-9e18-9a35f700b9ee",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "46a61873-30f4-4af1-92db-c4dd6c0c9d2a"
        },
        "item": {
          "id": "807f1fdb-e4da-4a12-8e73-7f921fb36b7f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "149215b3-d755-4bec-8046-1ecb925aa1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc521eda-227c-422f-a91e-539ac592b5e5",
        "cursor": {
          "ref": "9731ab7d-f147-4eb6-86be-10daa864f0d4",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "170fcc13-e459-431b-a647-713d3c186d65"
        },
        "item": {
          "id": "bc521eda-227c-422f-a91e-539ac592b5e5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b5799bff-0b86-45a8-aae3-90256bf133b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c1cd1d-0531-4a66-9322-23911fc4dce4",
        "cursor": {
          "ref": "4be659e8-7e41-4306-9abe-f095128c769d",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ab99aa3d-1dfa-4dd4-b6de-7af420f9359d"
        },
        "item": {
          "id": "a1c1cd1d-0531-4a66-9322-23911fc4dce4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "95bf39af-bb4e-43d5-87d5-18ebdc5f1723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950ceab5-fb35-4a0e-934b-2046cb8c3e9c",
        "cursor": {
          "ref": "c88d4455-3c02-4200-b183-48cf9d8a8ce5",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2f4fcfe4-95d6-4b10-b1ff-5af751599a8b"
        },
        "item": {
          "id": "950ceab5-fb35-4a0e-934b-2046cb8c3e9c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7c20d70f-5cbb-4fb1-949d-f9da4e7f09ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fbe22e-0d01-4070-a233-8a8264a321f6",
        "cursor": {
          "ref": "668ec173-112e-4878-8288-b2b501a6b624",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "934a821e-a1fc-4d95-aa01-260bd7b55942"
        },
        "item": {
          "id": "e1fbe22e-0d01-4070-a233-8a8264a321f6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8d67ba15-3472-4e1e-9547-cdf7be5d948d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c608638d-638c-4d6d-9a08-74d44ee73d3c",
        "cursor": {
          "ref": "6f262e61-0ab5-4fe0-8e84-7f8cf761bbd4",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "592c06cc-9f33-4276-b7df-aad6eb6893ad"
        },
        "item": {
          "id": "c608638d-638c-4d6d-9a08-74d44ee73d3c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e4bc5212-509a-42d9-8fb2-989f90ca4850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1d14d0-8a10-4886-86f7-357ee1b54aff",
        "cursor": {
          "ref": "d98bfef6-f031-4186-9ba5-9c4e7bb90393",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4e3ae06e-9751-40ac-825e-87b7dd398869"
        },
        "item": {
          "id": "ba1d14d0-8a10-4886-86f7-357ee1b54aff",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b993c312-1495-4a15-a2ce-c95c357e1c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dde9d95-a505-4b0f-a871-5b85cda95c0b",
        "cursor": {
          "ref": "67d5f873-77f4-4dbb-8580-d5e710874cf4",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "df4643c6-4e15-4894-8597-7e96ca239979"
        },
        "item": {
          "id": "6dde9d95-a505-4b0f-a871-5b85cda95c0b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f21573ba-c618-4867-b2c1-79bac2bf1f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a556df2-2576-4d2a-a827-e0887737edc0",
        "cursor": {
          "ref": "794b45d5-1749-4a20-b556-298fbf1dd8be",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b1d8d8cc-0bcf-4393-9e95-d4d48490a70c"
        },
        "item": {
          "id": "6a556df2-2576-4d2a-a827-e0887737edc0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fd5062ae-d03a-4703-ac34-64d211b683b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34003262-7e09-4a1f-a9cb-fcf1781d0a13",
        "cursor": {
          "ref": "e86c5123-a1a7-4439-9367-035f93589e83",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2f905a18-f526-463b-9f86-a1e4edb6e3b5"
        },
        "item": {
          "id": "34003262-7e09-4a1f-a9cb-fcf1781d0a13",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "723c9f8b-a8be-4560-8aed-5ec8b62ecd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b8ea30-dcb4-49fe-b2b8-d2bb4bb466d9",
        "cursor": {
          "ref": "47f7fc82-e0e9-4556-a6e0-99247b5d3b19",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c9769ae6-0705-42eb-8a37-645b25eaae80"
        },
        "item": {
          "id": "93b8ea30-dcb4-49fe-b2b8-d2bb4bb466d9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d89e4e2e-1957-4474-8f89-af9511d33c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a6da91-b507-42f6-910f-445401f2fe37",
        "cursor": {
          "ref": "a1b74b34-24b4-4373-a70a-559f2f2ea6bc",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1c08e421-ca69-4aa5-b5c3-0e3bb12e8c1c"
        },
        "item": {
          "id": "b4a6da91-b507-42f6-910f-445401f2fe37",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f4ef13fd-090c-4d6c-ad23-d564f9f9bbe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "19a4b32f-0557-4d88-8394-b9680960f487",
        "cursor": {
          "ref": "6aac84b4-2fa3-4edc-bfcc-58a14ee1037f",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2d90cce7-28bb-496b-a966-1832d6c371a0"
        },
        "item": {
          "id": "19a4b32f-0557-4d88-8394-b9680960f487",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "9031396a-cb11-4581-a846-6307acd4d266",
          "status": "Created",
          "code": 201,
          "responseTime": 2561,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b4805a79-c216-4057-a860-a64359d7b399",
        "cursor": {
          "ref": "c4efe023-6f53-476c-82d2-5d228fb9b6e1",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "aa01ba3c-c9bd-4a2e-95cd-f14219d1df5a"
        },
        "item": {
          "id": "b4805a79-c216-4057-a860-a64359d7b399",
          "name": "credentials_issue"
        },
        "response": {
          "id": "acd88f5e-3ff9-4040-a136-56d56b41b5c8",
          "status": "Created",
          "code": 201,
          "responseTime": 2608,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "277cc6e7-9dc5-4378-97fc-a4e026cfa3be",
        "cursor": {
          "ref": "ba27645f-3f0e-4e46-81c9-7cda90051c2f",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "874a1dc4-848e-4721-acc9-d61f747bfb10"
        },
        "item": {
          "id": "277cc6e7-9dc5-4378-97fc-a4e026cfa3be",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "44adc98d-12b8-4a0a-b34a-f4baf0fdd1c1",
          "status": "Created",
          "code": 201,
          "responseTime": 2340,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7889f42f-3351-4e54-805d-0c9ff7846bac",
        "cursor": {
          "ref": "0eebec75-ae32-4d4e-a4b9-38f6166ae93f",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "43e7022f-6bad-41f2-b37d-d5556b3b7ab3"
        },
        "item": {
          "id": "7889f42f-3351-4e54-805d-0c9ff7846bac",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4dc8c73b-c430-4e22-8a9c-94a992b6fedc",
          "status": "Created",
          "code": 201,
          "responseTime": 2586,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "937bee71-3860-41ff-b28c-7783f184af19",
        "cursor": {
          "ref": "0d78530a-da2c-4115-ba7d-263e68756e77",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "84f54116-c03b-4195-87b7-fe77c3d5cbfb"
        },
        "item": {
          "id": "937bee71-3860-41ff-b28c-7783f184af19",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "549ec1c7-5e98-4a9f-8a29-d76099232415",
          "status": "Created",
          "code": 201,
          "responseTime": 2539,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "419aac70-7635-47bb-b6e1-886e4fc0e703",
        "cursor": {
          "ref": "71eaa66b-2b32-4ef1-93e9-f1f581a65141",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fb29219c-b92e-4f03-ae14-9baf8923d7ff"
        },
        "item": {
          "id": "419aac70-7635-47bb-b6e1-886e4fc0e703",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "193473c5-221d-4784-9831-88618fb4a2e9",
          "status": "Created",
          "code": 201,
          "responseTime": 2263,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-23T00:39:03Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-23T00:39:03Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "a7213897-d88e-4487-8377-2f342e56ded0",
        "cursor": {
          "ref": "e8903e86-9431-4591-b19d-b9b83f342ac7",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "442b3bdb-16a1-485d-9345-801254225592"
        },
        "item": {
          "id": "a7213897-d88e-4487-8377-2f342e56ded0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9d0ae786-aeae-476e-bbba-e5a28873da02",
          "status": "Created",
          "code": 201,
          "responseTime": 3806,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48e3df1-7950-4f54-9179-ffa88c7817e3",
        "cursor": {
          "ref": "c44969a8-9bc3-4e93-996a-65f2606308f7",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "78e26614-a766-4b2d-bd03-0ebd33d5252e"
        },
        "item": {
          "id": "c48e3df1-7950-4f54-9179-ffa88c7817e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e924d791-95ae-4eff-b38f-c07f5cae0d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48e3df1-7950-4f54-9179-ffa88c7817e3",
        "cursor": {
          "ref": "c44969a8-9bc3-4e93-996a-65f2606308f7",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "78e26614-a766-4b2d-bd03-0ebd33d5252e"
        },
        "item": {
          "id": "c48e3df1-7950-4f54-9179-ffa88c7817e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e924d791-95ae-4eff-b38f-c07f5cae0d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a2f880-1ddd-4d3b-a536-747c0bb3f092",
        "cursor": {
          "ref": "3f8cc0e2-f66a-4f07-ab04-5108df56af05",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "155d7c4f-62a5-49c8-a872-4d2973637144"
        },
        "item": {
          "id": "03a2f880-1ddd-4d3b-a536-747c0bb3f092",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dfec78a1-a893-4e80-80cb-59ae752aa6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c01ebb3-bad3-493f-85d3-4263ac7306ea",
        "cursor": {
          "ref": "8933c2b6-f015-4787-8a27-dc273414a996",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "960d77f0-ecaa-4070-a240-1175e49776cb"
        },
        "item": {
          "id": "6c01ebb3-bad3-493f-85d3-4263ac7306ea",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "44addbe6-4475-4db2-92e6-2bf881b13a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108d68f6-7f90-49e5-90d3-58ea05bbe3bb",
        "cursor": {
          "ref": "86829e8e-5f60-43d0-b21d-7a41f2582c29",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e4eb551e-5f3d-4015-af73-608c4144a2c9"
        },
        "item": {
          "id": "108d68f6-7f90-49e5-90d3-58ea05bbe3bb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1fa8b519-3f2f-48bc-81df-2cb7923f3a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056aa356-babc-4e67-816c-f4c9349c335b",
        "cursor": {
          "ref": "06d27c8d-b779-46f4-86b3-f9187957b225",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d46ea701-200c-46a1-ab99-ee676c1e658e"
        },
        "item": {
          "id": "056aa356-babc-4e67-816c-f4c9349c335b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "10e6fb1e-bdce-4e12-b8f5-664d02ad10de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f714c164-3db9-436a-95ce-7c65d4f774d7",
        "cursor": {
          "ref": "0e88c76b-b1a5-4d90-86d7-ef1732535648",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4a683278-6e0a-488a-a331-dc20152efeee"
        },
        "item": {
          "id": "f714c164-3db9-436a-95ce-7c65d4f774d7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2b322251-9ffb-485e-9ecd-ba9d940fd362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c081a9-600a-4215-bb23-1b0a2d641150",
        "cursor": {
          "ref": "377eac17-a3e5-4ac2-8a15-8f0d4cf21be7",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d96c92bc-870f-4177-9ca9-2ccc68af3ff4"
        },
        "item": {
          "id": "19c081a9-600a-4215-bb23-1b0a2d641150",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "29ed5cb5-40a0-4239-abb8-eac19f6cb6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ae1b49-0747-4ad6-83a8-e88c827e126c",
        "cursor": {
          "ref": "a76067da-663b-4ee2-abda-33703782e745",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f66f1b9d-1793-44cc-bc02-e04e0c5529c1"
        },
        "item": {
          "id": "f5ae1b49-0747-4ad6-83a8-e88c827e126c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "51d2cd27-9ccb-46fa-99b2-898156b0e7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1859d509-0206-4a1c-b76d-b4d0a6a7365a",
        "cursor": {
          "ref": "43f46435-f7d0-437d-b584-ffe25080ba9f",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b8da1a2b-3c91-4843-bc26-f2ccdff39d78"
        },
        "item": {
          "id": "1859d509-0206-4a1c-b76d-b4d0a6a7365a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5e7b5d8f-1efe-49de-abf9-760a83904630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c487e26-1211-47a4-a80c-cf41fcab7fea",
        "cursor": {
          "ref": "20b5939f-ac55-4ff3-91d3-fe988963a536",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c10148f3-fe4a-49ec-851c-67ada1fdb2cf"
        },
        "item": {
          "id": "7c487e26-1211-47a4-a80c-cf41fcab7fea",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "55ca5e1e-2fcd-4f3a-963c-27bc032291bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97cf009-b07f-44c2-83ca-8de8b6e739bc",
        "cursor": {
          "ref": "1e0894cb-7620-415f-8f43-2845f947f11f",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "baa46aa6-43ce-4e14-a45b-72c0f7a28ed9"
        },
        "item": {
          "id": "e97cf009-b07f-44c2-83ca-8de8b6e739bc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "115b1bd4-2c6a-4ad0-bbf6-4dcf2a781d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadc6cbc-d491-422a-8885-a6634a8f8dd1",
        "cursor": {
          "ref": "a14d85f4-5f55-44b0-8b70-7615166def68",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d383f370-07df-46a5-9104-0675dcb3e7a3"
        },
        "item": {
          "id": "fadc6cbc-d491-422a-8885-a6634a8f8dd1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ad818f8e-2dc9-400a-b69d-ef305ff383c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710cc218-3459-46aa-8e0f-6942c449e069",
        "cursor": {
          "ref": "bd5c1645-8211-48fd-95e6-8e4e0c2de85b",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "22b34610-e8ba-44fc-8f35-eaa5524f775a"
        },
        "item": {
          "id": "710cc218-3459-46aa-8e0f-6942c449e069",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e3a36417-2f20-4e71-a52e-faad1589deef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911f44e5-77c6-4187-ab30-6b27be60036c",
        "cursor": {
          "ref": "2c17aba8-bf02-41df-b013-7f5d9dda7bd7",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1d77415f-6e03-4582-b9cc-a28e5bad5af1"
        },
        "item": {
          "id": "911f44e5-77c6-4187-ab30-6b27be60036c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "35a73004-ce1a-4f9d-b8da-352ea669dabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a433a96-3ce3-42a7-b9b3-528491ded35e",
        "cursor": {
          "ref": "33ad8185-6c8a-41d9-af17-c50ede42a04e",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "12110bd6-8df5-4f5a-ae89-a673172f1b34"
        },
        "item": {
          "id": "9a433a96-3ce3-42a7-b9b3-528491ded35e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5bfed3d2-dd28-4adb-8a4c-ee23952c08fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cd29ce-237b-48bc-83a6-5105ac14daf1",
        "cursor": {
          "ref": "1bdfb232-1e24-467f-b60c-8472eda56a24",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "63812167-d32d-4eb0-a855-6cb5e01686b7"
        },
        "item": {
          "id": "89cd29ce-237b-48bc-83a6-5105ac14daf1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8cf03fb9-6ab3-4ce9-829f-dd7eab6f7f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d3e684-9270-4f25-80d5-3a6a03c6d0a8",
        "cursor": {
          "ref": "a15a7b17-6c34-4e3f-93fc-3c9e07d05a90",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "882eeb59-c894-49ff-a1f0-cd3fb1383a78"
        },
        "item": {
          "id": "b2d3e684-9270-4f25-80d5-3a6a03c6d0a8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "84cc3521-24ad-45fb-9130-91d9a8416031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca446cf5-258c-4f60-9a9c-a10a2a1bc3bb",
        "cursor": {
          "ref": "a87acaa4-2410-4e8b-a1e4-c77bd41576c0",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "097bf0bd-0bea-402b-a16f-c046aee36dba"
        },
        "item": {
          "id": "ca446cf5-258c-4f60-9a9c-a10a2a1bc3bb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d23b5c32-78cb-4a61-b399-1fffb549a7c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca91d17-b549-408f-a2a5-9a81ce51e598",
        "cursor": {
          "ref": "223cce78-75e7-4d2d-a5f4-ec5a7cd9cf64",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "901f4d00-3b0e-407c-ab82-394209e94fe1"
        },
        "item": {
          "id": "1ca91d17-b549-408f-a2a5-9a81ce51e598",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2fe90d78-5a1a-4b12-9f76-f67ec54166d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8623d7-8577-47fa-b1fd-c7c4b873e43a",
        "cursor": {
          "ref": "ff25e7e0-d5c8-45d4-a89f-0f64302b2356",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b2b67488-b0bb-4edf-bc57-8366c2c35174"
        },
        "item": {
          "id": "6e8623d7-8577-47fa-b1fd-c7c4b873e43a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4d746d93-9364-4767-af46-6064eb68cf09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd16555f-f777-4296-ae8e-e930923b58bc",
        "cursor": {
          "ref": "3cfa6337-128c-4fd1-b47d-68aff7651c8f",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "71f95603-5916-445c-9546-f87cecd83a46"
        },
        "item": {
          "id": "cd16555f-f777-4296-ae8e-e930923b58bc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3d73facc-7c07-45b8-9de8-476dfc011dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e3c9fd-2754-4e31-b1e4-51d818c15df2",
        "cursor": {
          "ref": "4695e05f-cccc-41c5-9e90-3b039a7f4149",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d4baac7a-1b00-4440-92b5-d123d1cd3d91"
        },
        "item": {
          "id": "03e3c9fd-2754-4e31-b1e4-51d818c15df2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9a3ad233-2520-4456-a4b4-4feb8c6c7f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c24088-6973-4c94-a01a-5f2de531ff68",
        "cursor": {
          "ref": "ecb754fa-e2cb-4ddf-ad8b-8ddd9d4e1ab0",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "328e2ffa-768b-45be-ba1a-170392095a0e"
        },
        "item": {
          "id": "d6c24088-6973-4c94-a01a-5f2de531ff68",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ac406eab-e6d2-4edc-982a-dbf5704f6f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6d389c-fd53-48a2-8bfe-62768947afd2",
        "cursor": {
          "ref": "b562fa29-8379-426a-a33f-8dd6114190d9",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c130f8c6-c361-485f-94a8-2e2ce815e798"
        },
        "item": {
          "id": "7b6d389c-fd53-48a2-8bfe-62768947afd2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c31addfd-f384-49ca-a78d-b09d80f3c43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972fec96-b84d-499f-945d-cf19c97e229d",
        "cursor": {
          "ref": "d2083ddc-d773-49f2-8723-85b7c5a59ebc",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "39f87d56-0b05-4ea2-ab77-720cbaafeda0"
        },
        "item": {
          "id": "972fec96-b84d-499f-945d-cf19c97e229d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2d038df6-d8f2-4da1-8f88-c1e7de995b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe477f4-d59a-4f23-995d-91dd6351882c",
        "cursor": {
          "ref": "6c6ea9b4-02ba-41dc-877f-d152e798c362",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2e8c7ff9-050f-4d10-a90f-8e89e5c7614c"
        },
        "item": {
          "id": "2fe477f4-d59a-4f23-995d-91dd6351882c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "07cef600-0149-469c-bcfb-cec59b881914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b28a70c-7622-4895-a835-68772998fc86",
        "cursor": {
          "ref": "39d2c221-01b3-4356-a899-368df1583bc5",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f86bd746-696d-46a0-b997-53c0f85f4bc1"
        },
        "item": {
          "id": "5b28a70c-7622-4895-a835-68772998fc86",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8c338e21-968d-491c-ab67-183aaf14ae9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5936d46f-a921-4ba1-be25-5d528410b16d",
        "cursor": {
          "ref": "eb3d8cbe-3617-41a0-80ed-0f39ebe04539",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "15f1fb14-30f4-4683-b348-a4c3c6c46ce0"
        },
        "item": {
          "id": "5936d46f-a921-4ba1-be25-5d528410b16d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "73a72a77-cdfb-4073-b66c-9c0d525d5e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cf4d72-793d-47e8-aaa3-bd8e3f1e8e16",
        "cursor": {
          "ref": "e226979b-5b5d-4c2c-8f11-cc2afa1b7dd3",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6c02041d-233a-40aa-81b9-641ed0969d36"
        },
        "item": {
          "id": "65cf4d72-793d-47e8-aaa3-bd8e3f1e8e16",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ae6fab62-8024-468c-9bf2-eac1a430ab27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efcfacf-d75f-4d64-88fa-c752bf5f396d",
        "cursor": {
          "ref": "f076527a-5c07-44ed-9798-470871cbc91c",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ef903d76-a10a-4648-b2ae-4fba9d66a1d0"
        },
        "item": {
          "id": "2efcfacf-d75f-4d64-88fa-c752bf5f396d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "171d262d-4a8a-460b-981a-039ed7d04953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804d1057-61ef-4558-ad37-5b92424d0e2e",
        "cursor": {
          "ref": "0ff52108-bf51-44bb-bd2b-fb2a416ebc0a",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "93b9950a-3156-4d3b-bed3-f02b76c47382"
        },
        "item": {
          "id": "804d1057-61ef-4558-ad37-5b92424d0e2e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e7613725-0251-4219-bc94-9a76e6f23469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ed227b-3c64-4033-882d-92fbd3fbc854",
        "cursor": {
          "ref": "eeb88b28-270c-4052-917c-ce6de33688c9",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2c9d5e32-b992-4587-83d5-01bac53bed91"
        },
        "item": {
          "id": "a2ed227b-3c64-4033-882d-92fbd3fbc854",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "febb8184-e198-45df-9fa5-accb6612f6ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22eccee0-a815-4954-9b33-588cc6bdf3db",
        "cursor": {
          "ref": "83628621-67a5-458e-b115-30400b69c755",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "391bbb40-dedb-4f7b-8e0b-ad3f75131dc5"
        },
        "item": {
          "id": "22eccee0-a815-4954-9b33-588cc6bdf3db",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "228a7c02-77f7-4be2-ac1a-28fd350941a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "8f93d76c-0521-43df-8eb7-29cc6aad69db",
        "cursor": {
          "ref": "c9bd1070-2a90-4305-80e1-a487139bc184",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "77ac0437-e21d-404a-b405-fd38b9271b17"
        },
        "item": {
          "id": "8f93d76c-0521-43df-8eb7-29cc6aad69db",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4636c934-e1f1-4042-9d11-e362852fd2f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "5de83022-8247-470a-ae2c-26fc1f499661",
        "cursor": {
          "ref": "73f11f25-bc92-4e43-b2e4-9e8d3826aace",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8c34802b-129b-40bd-bdf0-0f65467d0d74"
        },
        "item": {
          "id": "5de83022-8247-470a-ae2c-26fc1f499661",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8e5c75fc-cfa8-4837-86c0-509cbe84d92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de83022-8247-470a-ae2c-26fc1f499661",
        "cursor": {
          "ref": "73f11f25-bc92-4e43-b2e4-9e8d3826aace",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8c34802b-129b-40bd-bdf0-0f65467d0d74"
        },
        "item": {
          "id": "5de83022-8247-470a-ae2c-26fc1f499661",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8e5c75fc-cfa8-4837-86c0-509cbe84d92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3f8e53-2567-418a-90fe-0bfc335f17ce",
        "cursor": {
          "ref": "39cfa1a0-ada5-4b0c-8574-798763c5b5b4",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8ea59b02-c93e-4beb-aded-6306ffba2865"
        },
        "item": {
          "id": "fe3f8e53-2567-418a-90fe-0bfc335f17ce",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4db5e70c-65a0-4443-b5f3-b1c3b3ac057c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee5d4f5-758f-480f-8558-a7cc7b368fff",
        "cursor": {
          "ref": "fc88ba22-9f8c-4687-a16f-a302eea1e8c0",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0a236463-5446-45e1-87f0-17c3dad6cfe4"
        },
        "item": {
          "id": "6ee5d4f5-758f-480f-8558-a7cc7b368fff",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2093fb5b-d1d4-4e9e-9d30-64987350bb9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a248e6e8-7df6-4670-aecd-98fa45efc4ed",
        "cursor": {
          "ref": "04627f4b-6a53-4a44-92af-5d9a6462d651",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "679e87b1-287c-4f66-b603-f3d704655dec"
        },
        "item": {
          "id": "a248e6e8-7df6-4670-aecd-98fa45efc4ed",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6da6bcfa-3b82-4992-82dc-ab5769b8b62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fa4449-baf5-4597-a1f0-b8b63720209b",
        "cursor": {
          "ref": "71a14c2a-7d26-4c50-b07b-552aa485b420",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6ddf2906-71ba-471b-a7d8-9c3bb1554d3b"
        },
        "item": {
          "id": "c7fa4449-baf5-4597-a1f0-b8b63720209b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "46398013-6d68-4029-b0a3-32e9978297ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656f145c-6b98-41c3-91ab-f92cd6e04ff8",
        "cursor": {
          "ref": "fbde747f-5404-4550-95fb-acd40b0ad9e8",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e0d2e08f-b1b0-410e-a3ef-83dc99aa6516"
        },
        "item": {
          "id": "656f145c-6b98-41c3-91ab-f92cd6e04ff8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b6bef918-1c88-44fb-b649-08456b356995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b47c996-298b-4b95-8f81-bc26cc30d67f",
        "cursor": {
          "ref": "d9caef62-60de-4b9d-9b12-a9bba9397784",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e6b23573-7340-4042-92b1-f69a19ef7334"
        },
        "item": {
          "id": "0b47c996-298b-4b95-8f81-bc26cc30d67f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1dd7048a-de21-4519-ab36-d5f99962c763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75574577-47d2-4ad2-aa50-d3bad1fc8242",
        "cursor": {
          "ref": "19ce99b1-6a2d-4d39-8077-67f1b9b5b9ed",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "215a5d56-25a3-468c-be4e-3c38a832d47a"
        },
        "item": {
          "id": "75574577-47d2-4ad2-aa50-d3bad1fc8242",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f4d16ad4-8800-4a88-a760-7d7b1cd28b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6510fa18-313c-44aa-93aa-820c6cb37e23",
        "cursor": {
          "ref": "58b2365d-9f2d-4d37-9d21-15a192b7e88b",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8e65d74a-bf90-4857-9072-61e55be498bb"
        },
        "item": {
          "id": "6510fa18-313c-44aa-93aa-820c6cb37e23",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3b6295d9-1719-4a2c-b776-a454e6f9730c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f076b6-de86-40ed-98ae-c74512157bc5",
        "cursor": {
          "ref": "d632f7c5-d83f-4f87-aff6-545d721b2dd3",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "18addc31-f414-4193-b3c8-52fbfe9f09af"
        },
        "item": {
          "id": "96f076b6-de86-40ed-98ae-c74512157bc5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6762cad8-09df-41f0-82fc-727c6cb1e5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13c4200-552f-492e-8c6b-23cd6b63be81",
        "cursor": {
          "ref": "7e150521-2951-47a7-a2de-af77dc97ef02",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "256a52f9-ffa3-43ed-b2e9-7de6863f88e1"
        },
        "item": {
          "id": "d13c4200-552f-492e-8c6b-23cd6b63be81",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5b675fef-59c9-492c-9cb2-aefc145b009e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6ae53b-7b36-4515-928a-44767fe9b63d",
        "cursor": {
          "ref": "f5bc17e1-eeaa-4551-8236-2ccdf2cf7f6a",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2b890441-97b7-496e-81d1-48c01a344dc9"
        },
        "item": {
          "id": "2c6ae53b-7b36-4515-928a-44767fe9b63d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5d438448-5305-43a8-9934-7420e13dfa92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34cb60e-8be4-459f-b129-f38d6c147472",
        "cursor": {
          "ref": "459c384a-3297-4f49-83a7-bbaefdc4a0c4",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a8ad6f22-81d3-4f7a-9cfc-15f4c63b57dc"
        },
        "item": {
          "id": "e34cb60e-8be4-459f-b129-f38d6c147472",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bacf828e-eae6-4105-b625-e9d8d27d7289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074edbc1-bfde-4345-868a-b40e7bf2c08b",
        "cursor": {
          "ref": "d7ee39a8-a57a-4e2a-885d-15576a637f8a",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c4bc9cc6-42ad-484b-a68a-bf6fed506aff"
        },
        "item": {
          "id": "074edbc1-bfde-4345-868a-b40e7bf2c08b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5cf5c2ed-7f29-4c8e-a576-c116f193acde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abce22d7-8f33-481f-bcfe-54d3dfb17a2f",
        "cursor": {
          "ref": "00e66f18-0a1f-434d-b362-2d3224f8d456",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "afb16de6-5429-419a-b61d-fdcc8000400c"
        },
        "item": {
          "id": "abce22d7-8f33-481f-bcfe-54d3dfb17a2f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e155c252-6b81-4d8e-a768-214107780b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3fc0c8-94c4-4fe4-969e-7dfdb18294f7",
        "cursor": {
          "ref": "e0f27db9-2074-472d-8200-aa42adfca70e",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "38e8448d-4455-4afd-a3a9-5b73538c4e09"
        },
        "item": {
          "id": "ea3fc0c8-94c4-4fe4-969e-7dfdb18294f7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ca4e214b-b522-4578-84b9-a0a80bbbbd67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428b55ee-3170-41a2-b0fb-5f07fbe7f89b",
        "cursor": {
          "ref": "4bae21c8-7992-4498-bd5b-6151a31ee554",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1c46dd64-10a4-4996-bb70-f2c522ce1efe"
        },
        "item": {
          "id": "428b55ee-3170-41a2-b0fb-5f07fbe7f89b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "430dcf5c-8957-4df3-bba0-2235d76aade2",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "60cc7d3d-b544-4ce0-8105-ad98ef71bbd3",
        "cursor": {
          "ref": "af272929-4f12-4eeb-9ee0-ed86dc550ed9",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1051a384-474b-4637-83d7-dc1979c48d38"
        },
        "item": {
          "id": "60cc7d3d-b544-4ce0-8105-ad98ef71bbd3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "69b145db-2df3-42d9-b7a1-73e7a3d78259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382b5052-6aa2-499e-aece-1e55f927d725",
        "cursor": {
          "ref": "c3b2d5bd-41a2-426d-8280-49e8c0949081",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5f85e378-f808-4ec9-9125-3988653378e5"
        },
        "item": {
          "id": "382b5052-6aa2-499e-aece-1e55f927d725",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cd699e45-eb3b-4cdc-931a-0a33cdac46ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2218aa38-ace6-4268-8631-5b530c4fdbea",
        "cursor": {
          "ref": "6cd5a014-4188-493d-b68c-cf0f4992aa46",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4a76b74f-db71-44be-9afc-5c3faec7856f"
        },
        "item": {
          "id": "2218aa38-ace6-4268-8631-5b530c4fdbea",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e4ddbd84-65e9-470b-a2c8-99cf1b6d60b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6017a9-3c38-4428-8162-882e25634f27",
        "cursor": {
          "ref": "c02a525d-4f77-41ce-9105-7b9d3327e45b",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ccfd93b2-f80c-4bd2-9d02-6d0fdfb6f6ff"
        },
        "item": {
          "id": "0f6017a9-3c38-4428-8162-882e25634f27",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f79af0bb-5424-48a1-9ebd-6de04b7c02de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa4c76b-babe-49c6-b3cb-d8500dd1cbeb",
        "cursor": {
          "ref": "f4f92bb0-2e81-4880-b224-0fb85c6de440",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1b18e168-8844-4f7c-8615-beec2bdb07d1"
        },
        "item": {
          "id": "aaa4c76b-babe-49c6-b3cb-d8500dd1cbeb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8f12a823-0d74-430a-9d20-ab2c2a3f4ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454b5d24-1108-497d-9c77-b033db8fae75",
        "cursor": {
          "ref": "ea5a059a-a4c1-46b3-ba05-5fa533dfa183",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3002981e-fab5-48fa-bb91-f1c33908043d"
        },
        "item": {
          "id": "454b5d24-1108-497d-9c77-b033db8fae75",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bd2056b6-fbcc-4422-b690-e61962040951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15903f18-574f-4611-8575-1e4c30abc594",
        "cursor": {
          "ref": "11de6ea2-3ac5-4c53-9f3f-2afb88f5ad2b",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "93aa5796-6ae1-4909-a826-2970033cf8c3"
        },
        "item": {
          "id": "15903f18-574f-4611-8575-1e4c30abc594",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6453c9d5-444d-4690-8582-56e92e80e05b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10042d37-a438-43c4-8bd6-cc1e008db884",
        "cursor": {
          "ref": "97b8aa26-f51d-4917-b1ac-d64867c85ebb",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "449427b3-9286-46ac-93fa-61f1221cbc9f"
        },
        "item": {
          "id": "10042d37-a438-43c4-8bd6-cc1e008db884",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b1436516-670d-48db-a07d-22827296d2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a225e542-5e96-4785-9091-b65dc4b2f089",
        "cursor": {
          "ref": "5f615be6-7741-42f6-83e7-02418a7da951",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ea086436-280f-47ae-8e80-1f043798ca29"
        },
        "item": {
          "id": "a225e542-5e96-4785-9091-b65dc4b2f089",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b87cc2fd-d7a4-421a-9a4d-457e2e8f1791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b9e5a1-1f4c-44aa-bf45-81a57e41c9b0",
        "cursor": {
          "ref": "e6d60087-be78-4503-8084-3ffd18f31c38",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6d13f0ed-51d9-4384-b334-21cdcd89200e"
        },
        "item": {
          "id": "99b9e5a1-1f4c-44aa-bf45-81a57e41c9b0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8dac146a-7953-4f09-a336-be3ff5ae4ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be936149-e46e-42cd-bc52-b34656708da2",
        "cursor": {
          "ref": "8d570630-8c43-4968-ade1-300f95ce5908",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4a584798-d5de-4605-b581-e6186ef31de1"
        },
        "item": {
          "id": "be936149-e46e-42cd-bc52-b34656708da2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d5a1e60a-e03b-47d8-b2d3-755c3a0a1e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72194c4-aa9a-492d-9e06-6854171f2e7e",
        "cursor": {
          "ref": "cc715874-7d16-47b0-b9f2-4bc8b57b3af2",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b273f672-1362-4246-a594-63d696916347"
        },
        "item": {
          "id": "f72194c4-aa9a-492d-9e06-6854171f2e7e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "53ae6453-78d4-4603-bec8-10eb6bd3fed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea18706-f278-4ecc-9eb1-4eff06f00862",
        "cursor": {
          "ref": "0ba12eba-7ebb-4006-99ad-783becd0dfe5",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "58525932-097e-41dc-a220-5415ce58577a"
        },
        "item": {
          "id": "eea18706-f278-4ecc-9eb1-4eff06f00862",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f81ee302-6e36-425c-bc99-296efdbedea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65274684-275c-42d1-bfef-1dc4278a1651",
        "cursor": {
          "ref": "0448ab5d-b90a-406e-b15d-cf6f6b2b9eaa",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5d658e58-4459-4aa1-9e7e-a007e970385b"
        },
        "item": {
          "id": "65274684-275c-42d1-bfef-1dc4278a1651",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c0a92227-63ce-4921-b182-820ba16b3a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a297293a-c554-4e11-8ea7-180b2190278a",
        "cursor": {
          "ref": "1a6ef208-d015-46ec-ba90-b6864583d59b",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "07f23e9f-6526-4a04-8448-fd49c460ba22"
        },
        "item": {
          "id": "a297293a-c554-4e11-8ea7-180b2190278a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4aaac859-26d9-459a-af44-6b23e01f2bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20328d19-98bc-4633-8f76-0f8a593b4f22",
        "cursor": {
          "ref": "e7bcbc4e-0f60-4c50-bc74-2d0a4a640900",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d8b223de-b8e7-45ad-ac95-c5c82a50d579"
        },
        "item": {
          "id": "20328d19-98bc-4633-8f76-0f8a593b4f22",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8ba2bb14-bdf3-4c75-9c42-8a420da31ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e32d754-f012-4b8e-a3f8-863045442430",
        "cursor": {
          "ref": "9c4fcd2f-8772-4a01-9411-783e16e39d0c",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "62635ed8-77c9-47cb-9821-87a6d1127841"
        },
        "item": {
          "id": "4e32d754-f012-4b8e-a3f8-863045442430",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9f7e0e52-a83c-4841-99cf-04bd18148705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67db77ac-0a02-4eb6-9870-8e070bad96d2",
        "cursor": {
          "ref": "a00b8935-8543-45c8-8f2c-780255f508ab",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a5f41bd2-9b45-41e4-9237-aafa9e9da16d"
        },
        "item": {
          "id": "67db77ac-0a02-4eb6-9870-8e070bad96d2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a60f5e2f-e0d2-499c-a646-ddb54f5a349e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20677af9-9d7a-47c5-a3b1-06b294d238a8",
        "cursor": {
          "ref": "eca92768-14d5-4db9-88d5-ee6eede3001c",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9f50d783-4e88-4470-8a9e-444c3c9d2a1e"
        },
        "item": {
          "id": "20677af9-9d7a-47c5-a3b1-06b294d238a8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "22eb2fbd-60af-45a8-9600-6685d33fca80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfda14f4-d4c3-4dce-95ec-89c4ba9790c9",
        "cursor": {
          "ref": "c1a119b8-ada8-4192-a15a-762b9c52d0ba",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0acd1615-2a8a-42d8-b0b3-fec5be46ea57"
        },
        "item": {
          "id": "cfda14f4-d4c3-4dce-95ec-89c4ba9790c9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "519b0aa9-933f-496c-b01f-d1bb25294b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2cb20f-99bc-43f2-83da-48d36aaff382",
        "cursor": {
          "ref": "49a9fd99-218b-4215-a77c-8d7e970c0d76",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "67adc3ac-5a4a-46b2-abe4-38df85935286"
        },
        "item": {
          "id": "be2cb20f-99bc-43f2-83da-48d36aaff382",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ac9c6db2-09f5-4a49-9ec4-ec2912fffb5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4f483d-8d7a-416d-8ab1-b08aa731782e",
        "cursor": {
          "ref": "fd00b647-c2e7-466d-aa87-01f40d7c0fc2",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "110b80e3-1a73-4884-b6ac-58c4da521656"
        },
        "item": {
          "id": "fb4f483d-8d7a-416d-8ab1-b08aa731782e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "92e31857-5490-4031-96df-178947c70b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40df15f8-cd0a-4bc8-ad97-5520ca5e1fa5",
        "cursor": {
          "ref": "19d99ee9-9dd4-4229-ba95-83e95ce15305",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a5d282cd-e441-4e1c-a105-ad08104492ff"
        },
        "item": {
          "id": "40df15f8-cd0a-4bc8-ad97-5520ca5e1fa5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c099afb2-467d-4ee6-b9c7-f889ec85cda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b894949-2aa6-4cfd-9058-120fb80ccb2c",
        "cursor": {
          "ref": "2be98ff0-d779-4204-ab09-0409facd073b",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "667d7010-1b5e-47dc-9c95-6a42947d3499"
        },
        "item": {
          "id": "9b894949-2aa6-4cfd-9058-120fb80ccb2c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3300a16e-4b0d-491f-8d20-86a6d844136c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4971fb-8629-4b6f-8a03-adad4a53e862",
        "cursor": {
          "ref": "f95c07dc-070a-461b-a6ac-b5a8fb612dc8",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3c44fc36-eb70-4aaa-a0f7-b2875d20fc43"
        },
        "item": {
          "id": "ea4971fb-8629-4b6f-8a03-adad4a53e862",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "49713077-92b4-489a-85a6-7b30e99167a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc55258b-8b82-4eb9-92e2-087796749f08",
        "cursor": {
          "ref": "fe4f89e7-a572-42e7-a326-5bdb9aa45ccf",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "088544ac-5b7b-44c3-a62c-259628380d98"
        },
        "item": {
          "id": "fc55258b-8b82-4eb9-92e2-087796749f08",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6e47a060-8227-4e39-bc71-8282c7de92de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ca73c9-2306-47b3-bc98-d5bba98d62f8",
        "cursor": {
          "ref": "0376c437-2740-455c-9712-89a73a36e7b5",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "808d0a84-b013-4932-91bc-7fc9dfe6cdfe"
        },
        "item": {
          "id": "08ca73c9-2306-47b3-bc98-d5bba98d62f8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9070d468-4dce-4ab4-85e7-d9af70eab62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09b2ab8-c5ec-4618-8214-10777f7b1d47",
        "cursor": {
          "ref": "ffcb7869-4d6b-4dfa-852c-d9037c456c06",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "882de002-6bde-4f05-9e46-780b47cbfcf5"
        },
        "item": {
          "id": "d09b2ab8-c5ec-4618-8214-10777f7b1d47",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0a135385-a993-448e-98ad-3d3b54969e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471de000-5dee-481f-bae8-1fc5d0e8c831",
        "cursor": {
          "ref": "1a482c13-8958-4e07-92f8-90199c6de479",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f91be5f0-202f-4db5-9cda-2e1da8d43014"
        },
        "item": {
          "id": "471de000-5dee-481f-bae8-1fc5d0e8c831",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "89173b4f-e580-4bfb-ab27-af97d9a91aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d987e487-3c35-4980-9da4-aee4a8c74b83",
        "cursor": {
          "ref": "10b73d14-2819-4963-8a44-c40b9245160d",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6931c0d5-e493-4d5e-a300-5ab42f2cf4f1"
        },
        "item": {
          "id": "d987e487-3c35-4980-9da4-aee4a8c74b83",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "787e4282-992e-41e3-ae50-7ab62bd1fe76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba1acc2-0d43-4412-bd55-09d2b9055564",
        "cursor": {
          "ref": "a54d0a3a-11ca-479a-99cf-b6f1080afd7b",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d005bb1a-1ace-4972-a29b-f3f992938972"
        },
        "item": {
          "id": "0ba1acc2-0d43-4412-bd55-09d2b9055564",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fbbc88cf-6e08-4fd2-b257-852472ee8ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d134688d-a9c9-4844-b6b7-4f931f8102cd",
        "cursor": {
          "ref": "9b4e6578-7d25-4f9c-8633-28ec55072816",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ac9e7063-0fe6-437c-9dd7-e9acddf50f50"
        },
        "item": {
          "id": "d134688d-a9c9-4844-b6b7-4f931f8102cd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9d0c4e65-ede4-463c-ae12-b59e93c01e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bd81bc-9dd4-4536-a81c-beb1c3064fb1",
        "cursor": {
          "ref": "dd42de21-cf30-47fb-81d8-9d2c7208c71f",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "99ec5a32-bfc8-44b1-a22b-1d503b2c263b"
        },
        "item": {
          "id": "e6bd81bc-9dd4-4536-a81c-beb1c3064fb1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "de74f530-845c-43f4-b888-dcc416855bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b66e29-271f-41d4-873d-6cb61c973688",
        "cursor": {
          "ref": "aed535e0-7c13-4f09-8b39-cdc4c490c2c1",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7a1971bd-fd4f-4b29-9eb4-1d98badcd2d6"
        },
        "item": {
          "id": "90b66e29-271f-41d4-873d-6cb61c973688",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e3bc33d9-7a06-449f-9979-187c20c3cc96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2645c837-04d7-43fd-a2bf-c52d7383bf10",
        "cursor": {
          "ref": "6b4d0dc9-43d3-4405-b521-6eeb30351f3c",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7779e147-0bd3-481f-9db0-23154472876f"
        },
        "item": {
          "id": "2645c837-04d7-43fd-a2bf-c52d7383bf10",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6865f7eb-4ac2-4335-b56b-919d47864b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc59a5d5-3505-4ac5-8f07-fa81096a3f80",
        "cursor": {
          "ref": "b0b66fba-1b70-4b0d-a4cc-2d1b604f50bb",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a369fdc3-c20f-4c37-9a8a-52905f52ad1c"
        },
        "item": {
          "id": "cc59a5d5-3505-4ac5-8f07-fa81096a3f80",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3e5d5d44-1239-470a-b58d-8cb6463aa4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801aa3d7-a288-4953-a15e-579e404214ad",
        "cursor": {
          "ref": "5d992c3f-1e6a-4763-8402-8daa5f982423",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c507c1af-7b3a-4e8c-b2ee-45d194916465"
        },
        "item": {
          "id": "801aa3d7-a288-4953-a15e-579e404214ad",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8d93670f-afde-474e-ae26-4f828294c947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05879e7f-4c6c-4415-a5cf-968436a51c67",
        "cursor": {
          "ref": "a2c9465c-f1d9-4049-bfd6-3a12827ea1e3",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3661e626-f870-44f6-8d3f-48c1b02d19af"
        },
        "item": {
          "id": "05879e7f-4c6c-4415-a5cf-968436a51c67",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "25e6bb49-a2fd-4f51-9e60-aa6afd1a12ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320cef75-39bb-4873-8ba0-e560a8e4e3e8",
        "cursor": {
          "ref": "ee864cd1-8dae-475c-b003-f4673a500cb3",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b43f22b0-8d2c-459f-8204-fb046e3f63bf"
        },
        "item": {
          "id": "320cef75-39bb-4873-8ba0-e560a8e4e3e8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b981e634-4321-49b2-b460-18802f893dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695c78b7-a65e-4694-86c4-99d38d31da89",
        "cursor": {
          "ref": "4134868e-94a8-4511-897b-3c8cb7340257",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d6f0184e-ba53-4f61-885f-ca49f0786f6a"
        },
        "item": {
          "id": "695c78b7-a65e-4694-86c4-99d38d31da89",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "be46c414-96a8-4f1d-b8ee-b25312b36621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800a937a-bd4f-4096-8411-483b2076a19c",
        "cursor": {
          "ref": "c45ef8ad-3d3a-4fe9-99b5-2c1cb1a11dcf",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "69439c08-2a7e-450c-a861-980b852f260a"
        },
        "item": {
          "id": "800a937a-bd4f-4096-8411-483b2076a19c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ff7bb477-feef-43fc-a9b4-fcc375004c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a88a1a6-b308-489b-9143-d795f9523dda",
        "cursor": {
          "ref": "b84350d5-b6ea-4296-a772-36730f7c1455",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "05ec17c6-d32c-49e0-bd80-73b459ea8d2e"
        },
        "item": {
          "id": "2a88a1a6-b308-489b-9143-d795f9523dda",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "83d1cef7-3a83-4a10-8182-8648f4a74f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3226a95a-e78d-4b96-af75-5d9e3145863e",
        "cursor": {
          "ref": "91850bbb-bb9c-417b-94a9-048c5e33d8d0",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "630c8fab-71dd-4471-a48a-5c0cd5e7f0c3"
        },
        "item": {
          "id": "3226a95a-e78d-4b96-af75-5d9e3145863e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "47eb70cb-c611-4eb5-9edf-e6f4ae99b689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df45904-308d-4d74-b70c-35ca2e0c7135",
        "cursor": {
          "ref": "eebc62af-2101-40ce-897f-3049c100a089",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3a81d087-da56-41f0-84eb-974f981c36ac"
        },
        "item": {
          "id": "8df45904-308d-4d74-b70c-35ca2e0c7135",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "55d7ebf0-8bd1-43eb-9aa7-a124438143b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67468fd7-83dd-41cd-acbc-35ce4b34b318",
        "cursor": {
          "ref": "256d4276-95a2-472a-b967-e30d33c7ecc0",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c797cd99-869e-4cf3-8c20-6e85151061c4"
        },
        "item": {
          "id": "67468fd7-83dd-41cd-acbc-35ce4b34b318",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "43c93e81-b33a-4b70-99c9-30b3a01aa8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf629a3-6f53-41d5-a60d-55d81c1c77d3",
        "cursor": {
          "ref": "b9ef48dd-2f95-444a-a9ff-34a62fdf3695",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0b4e080b-5055-499c-b940-22597e2cd7d5"
        },
        "item": {
          "id": "adf629a3-6f53-41d5-a60d-55d81c1c77d3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e3dca769-9441-4c27-b41d-26c21284391e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b102c10-2ab0-4eec-ab8c-03c123b1bb28",
        "cursor": {
          "ref": "dd0b05aa-906f-418a-b9f5-a68b0e41f769",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cc409735-eece-4ae9-becd-328a27183ca8"
        },
        "item": {
          "id": "5b102c10-2ab0-4eec-ab8c-03c123b1bb28",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7d276d24-cea8-4604-8cfd-b11dde0c3476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f6ddc4-a8c0-4aec-adae-ff26b8e393b1",
        "cursor": {
          "ref": "3487fd2b-77f5-4bd6-ad75-4758f6fd4a94",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "dbc3814b-5e51-449d-9bfc-57c0845f9882"
        },
        "item": {
          "id": "92f6ddc4-a8c0-4aec-adae-ff26b8e393b1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8e548294-65a8-4e34-adfc-ac13c72e718c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a776c591-70c5-46e5-9142-19c962c69e5c",
        "cursor": {
          "ref": "93d8ab89-1210-4763-a256-6b12690a8139",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "69dd6c88-2f3e-46c6-83d4-6ebd4259a796"
        },
        "item": {
          "id": "a776c591-70c5-46e5-9142-19c962c69e5c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a4e84baa-3430-498d-9677-cd7a45a666b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab739cb-fa81-41c1-b07e-a3af2b94124d",
        "cursor": {
          "ref": "742c777e-1313-47d7-9c70-28ca48e509c4",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "37000d86-dc1b-4dec-b811-3de6e2e081ca"
        },
        "item": {
          "id": "4ab739cb-fa81-41c1-b07e-a3af2b94124d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "85f9db2d-406a-4523-a632-abd9248d99ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d5cbce-d7a7-4ff5-b1ab-ca7dc1cf9cf3",
        "cursor": {
          "ref": "8c1d52c2-b4a7-45dd-aa0e-79df03d99eaf",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b8502fcf-e2b9-41be-9083-2cc516845bc8"
        },
        "item": {
          "id": "34d5cbce-d7a7-4ff5-b1ab-ca7dc1cf9cf3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "15ce1c82-7560-473a-8e30-08e0e066146c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35ea8c4-2a4e-472f-9729-5c18534cbd4c",
        "cursor": {
          "ref": "9ee6e5da-3046-46ad-902d-aa5a31aba661",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "31ac1e5e-1d17-42be-b7d2-35449a7b00c7"
        },
        "item": {
          "id": "c35ea8c4-2a4e-472f-9729-5c18534cbd4c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "55a569f6-7c9f-4e7d-9ce4-b918b530d572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22544bd1-b7cd-4fbc-88dd-743f172d44a8",
        "cursor": {
          "ref": "9fe64a47-3cca-43dc-b236-bca45665d623",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "83da5d29-af52-4c75-9bc6-9e2d4c7773c5"
        },
        "item": {
          "id": "22544bd1-b7cd-4fbc-88dd-743f172d44a8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6d8e9225-fcbd-4408-956e-a109abf240d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbd4c09-f000-4e11-b524-93ae32d8b577",
        "cursor": {
          "ref": "3e5d2ead-3d9b-4529-8021-d1a239a81c50",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b202bf78-316f-4611-82a3-b62db6ad6d2e"
        },
        "item": {
          "id": "acbd4c09-f000-4e11-b524-93ae32d8b577",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7fd9a2d4-be0f-435c-a493-1f173a7379ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f172520-a9a1-414f-8acd-638d0a97a474",
        "cursor": {
          "ref": "592780c1-a458-441d-a09f-9353e64eeace",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "98cf6992-a35a-4bc2-a261-5627dae7719f"
        },
        "item": {
          "id": "2f172520-a9a1-414f-8acd-638d0a97a474",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "70764ba4-6e05-4c87-8075-3ddf7fd637ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd595f76-f133-4030-9e76-6f3fb5b64fde",
        "cursor": {
          "ref": "11d9be82-f41d-4343-abd5-2170aacd45be",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "088cf7ba-be97-4275-88c1-45cb9593fb63"
        },
        "item": {
          "id": "fd595f76-f133-4030-9e76-6f3fb5b64fde",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0afb9e87-cfb6-4f94-a5fc-d7a031fcd503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69050d5a-041d-48e1-9efa-dd6946f30afb",
        "cursor": {
          "ref": "26f64d6c-9821-4b2d-9767-b05f0bb5610e",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4822c62f-0637-40e7-a76a-7061ca8c0f3b"
        },
        "item": {
          "id": "69050d5a-041d-48e1-9efa-dd6946f30afb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "df0aa8d9-fc3e-46d8-9975-9e8cfec66887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c007a5-0ae1-43e3-9646-b53678945461",
        "cursor": {
          "ref": "1aa407bb-1558-4478-9b06-fc090f54fb81",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bcf76771-6bb5-4457-b4be-79efb7b4307d"
        },
        "item": {
          "id": "53c007a5-0ae1-43e3-9646-b53678945461",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7b66507a-501d-4594-a517-fa38c6c9a595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc24fdbb-ad4f-4946-87ee-5ea346a1270b",
        "cursor": {
          "ref": "28598c62-43fc-40fd-910c-80c7711a4945",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b63f1d58-42d4-4c9c-86b1-70c6c0172691"
        },
        "item": {
          "id": "dc24fdbb-ad4f-4946-87ee-5ea346a1270b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a7660af2-721d-48b8-81a7-38dc36f9ea7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59d1489-b2b5-4db2-8702-13c5698d2350",
        "cursor": {
          "ref": "1d2a727b-13ac-4557-8c76-e9ab4a1e4444",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e8e710b2-d11b-44ad-bba2-dd84b1a3237e"
        },
        "item": {
          "id": "e59d1489-b2b5-4db2-8702-13c5698d2350",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fce61ad5-f9a6-4d12-bc03-94616176c550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a908a154-8bff-4672-b2d6-9c2943e642bf",
        "cursor": {
          "ref": "6d3e318a-c374-457e-894d-24a6b169f7bf",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4760dc1d-e923-4e48-87ce-f5fd3cf49d1e"
        },
        "item": {
          "id": "a908a154-8bff-4672-b2d6-9c2943e642bf",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "df84b38f-8480-4ca7-8308-e1ad21dacf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eedfc1aa-2aba-4115-9571-59b5168e8e9b",
        "cursor": {
          "ref": "d91abcfd-bc6d-416c-8a6e-f534cc3c1a53",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "40624574-711d-47fc-b32b-3b55c5f76a40"
        },
        "item": {
          "id": "eedfc1aa-2aba-4115-9571-59b5168e8e9b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "04cafcc6-6c2d-444c-8171-58a83bad792e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60aa774f-d729-476a-936c-9e343c056037",
        "cursor": {
          "ref": "f6abe226-a821-4682-a998-5016447f9a17",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "90ed8236-9701-477a-bf4b-6a1c72e9e75d"
        },
        "item": {
          "id": "60aa774f-d729-476a-936c-9e343c056037",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "be6d8e0f-5be9-44ce-91ca-3b9af54d900b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88890df7-a2da-405f-aff8-adebfd475674",
        "cursor": {
          "ref": "fbcd74bc-2ebb-4e18-9fb6-6c7d5616d804",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "acb3806a-07b9-46dd-9aa5-b83e91003b42"
        },
        "item": {
          "id": "88890df7-a2da-405f-aff8-adebfd475674",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "25703593-1604-49f4-87d1-2f146c28b6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ab94f5-d99c-40f8-a243-3e82e5e2a42a",
        "cursor": {
          "ref": "8e323e25-9f02-4424-8d76-86895a8ce241",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "57c5c004-eccc-4f1d-88a9-133e9f67b092"
        },
        "item": {
          "id": "51ab94f5-d99c-40f8-a243-3e82e5e2a42a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "91662941-5386-4627-981c-96f208475703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251dfb3a-4dfd-4f7d-9598-63ac3b56c02f",
        "cursor": {
          "ref": "16248d54-d79a-4b8f-81c0-ad892e823653",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ca83b8a1-cc35-4dcd-9b2f-3018c25d0410"
        },
        "item": {
          "id": "251dfb3a-4dfd-4f7d-9598-63ac3b56c02f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "67234aaa-d22d-4346-b489-5c50425ad1e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1ee2ea-b2a5-40d3-b471-225edda685a1",
        "cursor": {
          "ref": "91a99f2a-f17c-46a9-8ff5-626c4c31806a",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6078be40-6634-44d7-8ddf-80a51785e30f"
        },
        "item": {
          "id": "0a1ee2ea-b2a5-40d3-b471-225edda685a1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f1469eef-1ffa-4217-991b-dce73132e4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c71b78e-2324-4ccf-bcce-ca21c98a0af7",
        "cursor": {
          "ref": "a30af492-b1d3-40d7-9f52-f91b72b5f98a",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b2593bc4-07f3-463b-b3ae-2794d93d6106"
        },
        "item": {
          "id": "4c71b78e-2324-4ccf-bcce-ca21c98a0af7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "72c8b6ab-8e29-4653-83a8-70314818ae8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1e5f80-a10d-4e34-89f0-e54db28405ea",
        "cursor": {
          "ref": "05442054-9314-4285-ae0c-1a337bd2124c",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f5370c2f-8fa9-4874-9e13-82e9c25a89cc"
        },
        "item": {
          "id": "3d1e5f80-a10d-4e34-89f0-e54db28405ea",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "78508239-7da5-43a0-b5d5-6ac978365953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ababc30-3a7d-4d5c-9a82-be8841e07db0",
        "cursor": {
          "ref": "1b7b2750-4006-441b-8416-bfd02484905e",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4bc0b0aa-5db0-44e2-83a7-5bdee3ac63ed"
        },
        "item": {
          "id": "1ababc30-3a7d-4d5c-9a82-be8841e07db0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1d0641c1-2147-4b54-83ff-112f5c6eeb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cb2364-51c4-4800-a2e3-fb429cf6761d",
        "cursor": {
          "ref": "aefb4015-7ef1-47d7-80bb-cb729a716c66",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0563954c-ca58-4611-bd2d-0262418b3332"
        },
        "item": {
          "id": "f8cb2364-51c4-4800-a2e3-fb429cf6761d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f6f9213a-616a-44db-baa2-3fa96be19ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f4f33e-5cde-45c3-a4d6-62d91e217f7e",
        "cursor": {
          "ref": "7ea604ed-9707-4181-b830-93a1f1e8ef22",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cfbbcfcd-98c0-4d90-9ce1-f8dbb4e59159"
        },
        "item": {
          "id": "08f4f33e-5cde-45c3-a4d6-62d91e217f7e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cfe6ee87-fa18-4cb3-b53a-d5c27b05b0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb305ddd-26bd-4088-82d4-a49b0191f3e5",
        "cursor": {
          "ref": "2f37ed80-55b3-42ca-8302-82a91c29d0d9",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7e06f473-b04d-4a4e-9175-ecc46a418cd5"
        },
        "item": {
          "id": "eb305ddd-26bd-4088-82d4-a49b0191f3e5",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b8d6aebc-01db-46ee-b694-8eaf8cec21b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c68f63b-c4a6-4022-ae30-027eacc89fc4",
        "cursor": {
          "ref": "5ea366f2-4e68-4766-9155-bab856c493c3",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "26f4f09a-dfd0-4886-b249-1417b6d89e66"
        },
        "item": {
          "id": "6c68f63b-c4a6-4022-ae30-027eacc89fc4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1615741f-c1ec-4d71-9cad-fead166782c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b512a4f1-874a-43f2-9dbf-f19d591b6548",
        "cursor": {
          "ref": "2acdcd9f-049c-4011-8115-83c034a46623",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "efcfd734-ac41-4333-ad95-d96842a07fe3"
        },
        "item": {
          "id": "b512a4f1-874a-43f2-9dbf-f19d591b6548",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e1127437-9b2d-46df-8754-3ea267406596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5533b3be-0f86-45d2-8f51-4d2feca99831",
        "cursor": {
          "ref": "9b859cc3-0e92-46eb-808c-9cde597d447d",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "15e2d81c-fb76-4795-87b7-fe0c12bb6de5"
        },
        "item": {
          "id": "5533b3be-0f86-45d2-8f51-4d2feca99831",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "73f05c56-363e-4883-a879-e91eca489379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1df87f6-bcdb-4c1f-8cd9-f839e2f6699e",
        "cursor": {
          "ref": "5c11a298-2f2e-41db-b3fd-21f60a588bb9",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "79b6fa00-54a4-4d78-a1d1-d76ddb255e55"
        },
        "item": {
          "id": "a1df87f6-bcdb-4c1f-8cd9-f839e2f6699e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0fcc3b9f-5b7b-4055-8c59-ab892988b782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346cddd0-15df-467a-9a86-e20ab0524f4c",
        "cursor": {
          "ref": "9447b708-1ed3-49fa-a73b-db5ad8a3e652",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9f87ddf8-2d25-4c99-96e2-1b46cbf00bb0"
        },
        "item": {
          "id": "346cddd0-15df-467a-9a86-e20ab0524f4c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ad84e4c3-1a0e-40cb-a321-3eca7c1fc606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98541cfa-dae9-4935-a190-841cf45ec010",
        "cursor": {
          "ref": "fa3cd2e3-da2d-49a3-ad61-6634781c4b96",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f5e291ca-2800-420b-bdb7-6d2992ff6fe3"
        },
        "item": {
          "id": "98541cfa-dae9-4935-a190-841cf45ec010",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "40af3111-aff6-434d-b367-d4f9356e6567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1708811-d196-4eca-9c31-0c13e5fc050d",
        "cursor": {
          "ref": "206cd5ac-5638-4ea2-852b-14cafdb37d2d",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cba67832-b070-4732-a482-7861616804c4"
        },
        "item": {
          "id": "b1708811-d196-4eca-9c31-0c13e5fc050d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b55ad4f8-bccb-4236-a106-48dd372b1bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a258c4-79e0-4d8a-8cdf-d3e030085d14",
        "cursor": {
          "ref": "043c1a84-98f0-49c8-90c7-875ea7687884",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fc106d2f-ec88-480e-a7b5-3c58fb0c9a1f"
        },
        "item": {
          "id": "63a258c4-79e0-4d8a-8cdf-d3e030085d14",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "43e49959-5a2b-4d7c-82a3-f0099c81a762",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "69389f7f-839a-40c3-a0c5-0e99a4831afc",
        "cursor": {
          "ref": "cef2ab38-4f59-4e21-82b4-a5fca1b8767e",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5500bbbc-b2a6-4f41-a911-87ea66d38fe6"
        },
        "item": {
          "id": "69389f7f-839a-40c3-a0c5-0e99a4831afc",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "703df4d0-c75e-453d-b8bb-34cf117346b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5ecf5d62-d534-46f6-bbbe-fe1694b26f8d",
        "cursor": {
          "ref": "e56a1dbb-83a8-4807-9293-dcc208ee84cd",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9f1114a0-52d9-468a-8a4a-6a65bd7a5763"
        },
        "item": {
          "id": "5ecf5d62-d534-46f6-bbbe-fe1694b26f8d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5f60f435-ff1f-461e-a8c9-34e251576f82",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d7f71b-7932-45ca-a9b0-f22527024363",
        "cursor": {
          "ref": "ce583c33-471b-4b14-a3ff-14d2dddc4d22",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "64da8764-53e1-4010-9173-2a45f99324cb"
        },
        "item": {
          "id": "39d7f71b-7932-45ca-a9b0-f22527024363",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c5da7955-9487-4110-b9af-31fcde9819b7",
          "status": "OK",
          "code": 200,
          "responseTime": 2137,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f51432-009f-4dc1-89f5-e1b16792fa4c",
        "cursor": {
          "ref": "82bd550f-521f-4c9b-86e9-c2f61e98d158",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "48ae660b-11f3-4496-a9f8-324edb687663"
        },
        "item": {
          "id": "c2f51432-009f-4dc1-89f5-e1b16792fa4c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "346ec47f-99da-4895-ba9e-76b36ec92052",
          "status": "OK",
          "code": 200,
          "responseTime": 2660,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ff11a3-fc36-48ac-ac5d-f6ca1aa59f06",
        "cursor": {
          "ref": "a4206a37-7d1a-400e-91a1-fdba957408c3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "91eb8ab2-5018-470e-8c38-b524a9d32e60"
        },
        "item": {
          "id": "30ff11a3-fc36-48ac-ac5d-f6ca1aa59f06",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10d7a179-3054-4d9e-8c50-277cfff4eebe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "30ff11a3-fc36-48ac-ac5d-f6ca1aa59f06",
        "cursor": {
          "ref": "a4206a37-7d1a-400e-91a1-fdba957408c3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "91eb8ab2-5018-470e-8c38-b524a9d32e60"
        },
        "item": {
          "id": "30ff11a3-fc36-48ac-ac5d-f6ca1aa59f06",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10d7a179-3054-4d9e-8c50-277cfff4eebe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "30ff11a3-fc36-48ac-ac5d-f6ca1aa59f06",
        "cursor": {
          "ref": "a4206a37-7d1a-400e-91a1-fdba957408c3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "91eb8ab2-5018-470e-8c38-b524a9d32e60"
        },
        "item": {
          "id": "30ff11a3-fc36-48ac-ac5d-f6ca1aa59f06",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10d7a179-3054-4d9e-8c50-277cfff4eebe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "2b87d539-6308-405a-b121-d5e48b44182b",
        "cursor": {
          "ref": "5748c222-c2dd-4d56-a597-3f683c62bacd",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "02c5e0a5-ee44-47bf-92d3-7477d04aa083"
        },
        "item": {
          "id": "2b87d539-6308-405a-b121-d5e48b44182b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a7670187-2eb2-4b72-afc4-2748d1087556",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 201
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "8e3f4f72-a586-4458-bd65-dd1f8cefc463",
        "cursor": {
          "ref": "6330545c-1f92-41c0-b6d2-8aeb78d5e342",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3d42331d-77a3-499a-a2b2-6717f30b400e"
        },
        "item": {
          "id": "8e3f4f72-a586-4458-bd65-dd1f8cefc463",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a2369c86-a4cb-4f93-b03d-356671b5a40d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8e3f4f72-a586-4458-bd65-dd1f8cefc463",
        "cursor": {
          "ref": "6330545c-1f92-41c0-b6d2-8aeb78d5e342",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3d42331d-77a3-499a-a2b2-6717f30b400e"
        },
        "item": {
          "id": "8e3f4f72-a586-4458-bd65-dd1f8cefc463",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a2369c86-a4cb-4f93-b03d-356671b5a40d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c26cd46d-7605-4177-86a6-95c9f9305a97",
        "cursor": {
          "ref": "6ea789c1-bd34-490e-b397-bb50f8b7cf28",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d7364e99-4682-4827-a9f9-2f88a3b35882"
        },
        "item": {
          "id": "c26cd46d-7605-4177-86a6-95c9f9305a97",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "27930093-949a-4f64-8d31-53cc41ae98a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 128,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "bf741b11-207c-428c-a710-e755b74721f7",
        "cursor": {
          "ref": "6bef24fa-cf28-4fb4-ad92-b756af3505e5",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8efde55d-7bba-49e1-bfde-0edf2724f31a"
        },
        "item": {
          "id": "bf741b11-207c-428c-a710-e755b74721f7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3e112222-3add-4385-bcee-15f454706d91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "bf741b11-207c-428c-a710-e755b74721f7",
        "cursor": {
          "ref": "6bef24fa-cf28-4fb4-ad92-b756af3505e5",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8efde55d-7bba-49e1-bfde-0edf2724f31a"
        },
        "item": {
          "id": "bf741b11-207c-428c-a710-e755b74721f7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3e112222-3add-4385-bcee-15f454706d91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "dba7673d-f326-4b53-bee7-c64822a6719e",
        "cursor": {
          "ref": "95bd7f54-d5b8-4294-a841-203f13fe51bb",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6a90b0f0-e1e5-4483-93a6-b76667c0fbaf"
        },
        "item": {
          "id": "dba7673d-f326-4b53-bee7-c64822a6719e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c7aa6e74-ca0b-404f-bb4c-b5fe52444b8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 185,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}