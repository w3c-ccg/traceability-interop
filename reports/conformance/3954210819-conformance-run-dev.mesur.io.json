{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f474c333-cad1-427f-9082-b85844698d65",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bbf822b2-00d4-4e98-8dc7-ff4155c20c2d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f938ebee-6a33-4225-9e16-5604a59eaca0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cdab331a-9c95-4a65-b7a8-d91a4308e864"
                }
              }
            ]
          },
          {
            "id": "5600bb77-255c-4e4c-9adc-a4c27fb0cc48",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48cbc309-c528-4db2-ac00-510bb26a0a0d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a17a4253-e5ba-4e13-b0e3-982317fa3b7b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0565ebbc-950d-4944-976b-3dfff0ef599b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "58d89373-6b28-457c-ab44-c4972621ec22",
            "name": "Positive Testing",
            "item": [
              {
                "id": "767f554c-0e97-413f-9bde-6ad86c043abc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "040f4a63-1d59-4b21-aa11-e5277eba9c6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e19d3610-4311-41ea-96d9-696aba84fc48"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "507e557f-940f-4148-8475-d2886087dac7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4e29da10-02c1-4d7f-b83a-a806a8731f7f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2f4d4825-3ad9-41e3-b7f8-da0379bc3ac1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ef22568-22cf-4547-bb04-8bfa538596d7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18aa6a12-1273-4ec1-91f2-b0f948736b5d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "360d89b4-c741-4d57-96aa-d518c1fca019"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cae4922a-e01b-4d76-bdb6-8d861716491f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "809b5157-ab5e-4b0c-8ca6-dfd15c239507"
            }
          }
        ]
      },
      {
        "id": "54d7a416-acd4-4419-9877-dde60ae20a6c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9a75d3fb-480a-4bb0-9cdd-add1890f815c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0498e0c9-948a-498e-8bed-24a490c2eceb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "41deab36-3b5b-45d0-9f25-54c5110b64d3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff93916-0a9e-47ec-b61d-e76de246bec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f1a7950-7f32-412a-9811-24f856b2b5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70fe4fe-a325-44f3-ad51-9f1e938fa8f0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae90c9d-d80a-4987-84cd-86350649886d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78b6f76c-2297-4df7-9390-55850cac6f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8f196a-2ec9-4669-8dc0-da24936c3a1a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30dff95a-a36c-4e89-974d-1a8b8e1805f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efae403c-c7a0-47ce-a1ee-586626fa4117"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5de247fd-43dc-47f1-a100-70153e81350c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18f5da34-ae12-44d6-81b0-bd8aec6e4a30",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b56e31-294a-4872-9960-6e1ab7f3e2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "225413b9-5144-4859-8e9a-17f1d78b7e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16535f7-9d5f-4e96-a44c-36f3e0f98aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4641926-e0fc-4c1f-bc7d-fc63958697fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb82ae1-d617-4713-8e9e-3a00ba95a4bd",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a523e6f4-70a9-4ba9-ad5c-16e8f26f52c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e27f6997-b583-4186-8908-079f2a41ac8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33752ce-a762-4248-b7c7-ce254fc83827",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "95689d59-a39a-4840-8ab3-9c23e4fb4b6d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "aec03e48-66a4-480e-a76d-0cc5c7c3effd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6ad08395-e088-45f4-8578-a4268e73e173",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb80fbd8-c635-45ff-bbb0-0da4e116652c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "51bcc7d7-c17c-4480-9f38-9acdf90e563a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "165f525c-450a-4cda-b362-0a26aa990e9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "20686fef-cf69-4819-a50b-1e268b55886d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "adac3670-03f5-4221-a188-0a030fb242aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce6b3f09-f29d-4b14-99a4-6a7b46df7f91"
            }
          }
        ]
      },
      {
        "id": "92f63a24-df87-443d-970d-3765d3765989",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ef47350e-65fe-4e36-82d2-0f9a1054ec88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14a3ef33-d3e7-4602-8c79-0eb9eb0c5d66",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "149508ab-c16d-42c6-a490-69dedda85063",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105f4a2e-ce75-40f8-85e8-e6a845d15e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e45f66e-5af7-4c43-880d-144b0da1ad8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0122bdb3-7d20-4292-964f-ca8d77f0907a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6061a6c-2bb7-41d3-a286-080530565be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4268d1b5-6fe5-4ebd-8bd3-f6378fcd522c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1448da26-f3d4-4940-a8b5-603ea5552187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103dacb2-2ef4-4f6e-92ad-a9def21836b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41667b69-0e39-4338-bc50-fd665ab2797d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fb985f9-5bd5-4f50-97a3-567246999d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81382f18-db61-4759-93f6-4c9525cb8fb3",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f837b617-e305-472e-9d2d-9a15d2a042b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c01141b-619f-44c9-b7cf-0ed01ca4c211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b4f6ee-f38c-4f6e-a96d-84208e3dccb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2584c8bd-6c96-47d0-a2ab-19d2b6b4c17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc6275d-3505-437a-88f7-5ae4030eb94b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c588927f-b456-4d6b-82b3-661b76bafd7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e523604-4197-453e-9738-012eed3b1934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dd559b-6012-4868-b46b-523c894aa75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e35ead2d-c627-4089-83da-c72484790685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843edf50-0a45-4e49-b5b3-a9c857b0d6ae",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b9787e-24ee-447d-9c51-24f77d94786d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe6ca67-a45c-4655-81c3-b8b483080216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91dcc6c-aeb5-4e17-b4f5-f92b62ea966c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "113a82e5-bb46-4e58-8b67-5fbdb3dd9bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39687f5-d0b1-4df8-b632-0031c9315016",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef9b953-1a21-44ef-92a0-4ed52d287f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e491dc2-ddb2-4235-bd1e-c4941ec8341d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ab2158-f53d-4647-a69d-b94a9075b075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b4c3e81-75b5-41b5-9ecb-843dcaa37272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c19d28-f14f-41aa-8c7c-2b133c429e44",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e514bfe-5993-43ac-8732-3e8cef2ec39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d93dc7-d3a2-43b7-816d-abeca9bf04fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0658f075-6c5c-40ff-a3b5-56fe5c8b62a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fa42fc8-0550-4f35-a4ac-04dd9e47d89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05699f04-cb2c-49be-8b18-5f5873dee420",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18465561-89f2-486b-9eee-ab8f51b89ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b7a9aa-4836-4b14-b0f6-e6744b9de1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2396c2-6b9a-41f8-a1f2-4b2284c9f398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f88a36f-10fe-4f5f-9f7b-7c8881f33472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b492f9-968e-4710-aa4d-ea196fadc09c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c308ba-0274-494e-a278-d58ae21e0c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931518b1-72e4-4f75-a2c2-d1ebdfad9bb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cae07e-2ea6-435a-8706-0b2bbc9c1298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e173a5e-7608-44ec-bf8e-6970e006fb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d29144-7f5a-4424-9347-91d6320005cf",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db51084-b437-43e7-9f5b-1f329d400f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed7fe6c-6e68-496f-a5e0-f39044ef9df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b141b14b-29cc-4d23-96b6-cddaf50781c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24459a16-3be0-4422-97d5-6e0cc8755aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8818362d-1edc-482b-b3bf-1c9675172db6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "241bd90e-f297-430f-9c26-c7fac112af9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4ae211-196b-4ecc-8451-47493e42c6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e6e618-9082-4222-915c-9da9de702a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dd2326a-a61c-4e39-b610-21993abfaf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d37cb6-6da8-4db8-a5fb-c48eac538db9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7fcbc1-2b1b-4ea2-ae3c-fa56d0da4cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bd3c2c-05bd-43a9-b22f-94eec2888d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c333816-00da-4f11-8cb4-6b685f31ecbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "467aa195-9208-40ae-8b99-b28642ce63a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cdecd6-76ed-437c-8984-332a9e29d6b0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43302285-0dd7-438f-9d3e-108184111e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e96bbef-8f8c-4be5-93d6-c73c8f1dc245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6fdc6e-228d-405c-b089-86bf2e863754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68898497-88ad-442b-8756-0abacb52793d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503cf402-f6d7-4fec-81fd-9422446a9947",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f444fe2a-8d58-4711-b294-c05c9fc12308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20edc3a0-b5be-4c6b-9c5f-ec292ed295f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e98ccf3-ebb1-4701-9ba4-bf47121b1c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a977f90-c7ce-4cc1-a751-ae14d17d5aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c949b9-ebd9-4619-9758-e95c596a78ff",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e84466e-1f0c-49be-9365-17e0673c7d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef29b90-210f-4ded-a9ed-1d2bbec23f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c7ab5d-4210-4b48-8267-9555e13d2c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7898cf0e-46b0-4e66-b43b-2a38d1fa14d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81add414-c44f-4dbf-859a-2282094172f3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e508f63d-26a3-4ee5-a64f-310a15a717de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53cab6e2-ebac-44b5-a3d4-343bddd7d4ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107c0532-0f7c-47fc-8efa-6af8233d4fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9e1f9f7-0780-4430-bc2b-e0a058fc7c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7736b4-03d5-4684-8671-02a50162b224",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f8e016-52a2-4d21-9837-aaba1e3bff3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340d58cc-ec1d-468b-8964-a88a24e3474b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40d0356-792e-402f-9775-7960966e5677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdabfa93-4782-493e-8c2f-520df75b2784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878902de-8419-422e-ba24-615716c18993",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a010af-cbca-4b27-976a-14898d3c9d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0890ed86-a6e3-4eaa-9efe-d115b14f2186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b63676f-146a-4512-a65b-0869056b9a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02a86489-d6e1-424c-a76f-2889965605bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1924cf-4426-4c23-a3b8-c76d484afa90",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7498ac5-de4d-4456-98ce-651073ac9389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f876e68-ea07-4ed4-9f66-9ad3bf7fa7cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93311e0-3e15-4d98-be1b-be05baace5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24101472-873e-4cd7-9b5c-2d9e147b0ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379d753c-56d2-4ad4-b4b7-54df4879f658",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc70f79-d3bf-4210-bb4e-d3b6f1d925e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf016bc-647f-416d-968d-4f3c8bbf43c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4691d88e-3abc-4153-bca1-29ebe6d7afd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd27ed9-0081-4630-8722-62821fb61731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5380ddf1-7096-47cc-b005-d2d5e669b79c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d62e6e-2ebc-4ef4-bbbb-dec9b7b72919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e799c14-c7a2-44e8-85ea-6d756600a7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d2c529-5187-4b4a-8b85-19a0a3d43974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "823dafc1-6be4-4d60-9fee-8fd08baf7e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3297c579-d08c-48a5-9dac-274dbd05bf07",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe99a1e-5216-4d76-a0a6-a5cf8006db60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74fdefa-0aff-4d34-abc2-b8dd45c40d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32905de-c578-4de5-a88f-e08754e31737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c11a411-ca02-4db6-a530-ba552489391d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5d62b7-b72e-4154-ba2a-59c5413566b8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86c19df-41bf-41f6-8c95-9e44acdec2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd3ac02-1d3a-4fed-8dd7-db86e45f541f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f533d98-3553-4214-98c6-de92db0387e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa62856-3135-47cc-aa20-cb13152061d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb32967-f42c-43e9-a9d0-82de4e8d5462",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefbe285-2878-4342-b711-be2a88117b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bca35b0-6b5d-47c5-8fdb-379acaa8564d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8587491d-30dc-4360-898b-f1c145b43745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2e3fa20-1351-494a-92b4-6c9cb53e987f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c22ef0-a114-4b62-8952-e9c4adb24054",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b65393-2b5e-4522-bb64-5838b208ae08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a64581a-e414-4e57-9bad-79909d340b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d87ba8-ca3f-4afd-af2b-bd87b880fcc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0afb5928-6ec2-4920-baf0-db0820b4ce5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78292787-aa2f-4ac1-8f5b-8f510bb8f0fc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71da508-4b6c-436b-947f-d93ec5baf0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a07a55-01e0-4a9c-840b-89256f44c83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ace10e-7e15-4c78-b70b-d4afd8ef8863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbff0c4a-d8dc-4363-9e4e-3e8df141173d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cce2daa-b1d8-4d15-8c59-68089aec8274",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30d4f05-8d03-4911-b107-f7e2ff5c5f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896c9455-5051-48a2-814a-d63d48be0c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f88fb4d-757f-4c82-b792-28c6e3eeb44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "54dd476b-b4fd-4d45-9305-42781c4cfc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b6ad3d-ca88-42a9-9d9d-9898cd235e91",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1532ec-a9b2-4ce2-969b-6eb196b46030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0eda25-0024-4a4f-91b2-e02fbc56a12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bc83ec-2b9c-4a50-be0a-83052e00b84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "78632c4b-ce8e-498b-bb17-9c8f7c153dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb099611-d661-4047-afd3-37f88900471b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f822d1-3206-4f1d-9bda-5328ddbb0646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6fd4960-4d8a-40e6-80ea-c5368324459f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19904395-313d-4432-ae9a-a93bc0f67747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "804af645-bc9d-4621-9797-a8a582daea32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576446be-d33c-4df1-8ce9-514c9a3adad1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d31628-f8ab-49d5-9637-209ba1d7af3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11693db3-5107-45a3-839d-55f131c809bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2cff7c-f916-4f09-85da-02028b51b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d28da442-6b4f-42b2-91da-f4773d60e346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ace750-30f7-40bd-afbd-3022ad2d3540",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47b2837-e0da-4443-b501-3c0cbd770fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62125893-3769-4569-9288-a2356a3f456b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff658b13-d697-4026-8879-b7294c3ec8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d690a3e-8f27-41dc-bb30-4a2c005482e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c300099f-acb7-489f-a3d7-e31243f83e9a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b572ebde-3450-4c4b-abf0-907575ac2ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1302e75-3dbe-4e3c-9341-2192c8db88b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4c9fc9-4d44-4635-afc2-97b4eb989a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d562c3d1-a98f-4cb3-af9c-c72e0ccaa8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e343d44-73d4-45a0-9120-2707bf7cd251",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38a529c-0868-4e9c-888a-0c2417fe6b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc36eeda-d7f7-47ae-885c-58c4aac9f73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ceb7b18-264e-4eb3-8184-05d9e817bc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "92edabbc-d5c6-4013-8fad-4e923f306fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3153915e-6b87-4deb-8ce3-2024d7d3f776",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada37160-0cb0-4af7-bb6a-303a4cc63d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d39a6c-dcb4-4eaa-8377-1fa6d436e015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34382203-764f-4626-bb32-ec3532d5aaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "306e6d35-ce65-4e5f-91c4-743af7991884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0905f155-6e92-484d-8114-3ac681045f2e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41735de9-b933-4453-b378-1b362caf4263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adddace7-1b9e-4b58-a75e-751c4e7b8c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ffa5eb-af40-4aed-9987-c8aa7b2a73cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b847c01-c2e8-4840-931e-9ec467853290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08902211-89d5-4fd5-af7b-e33833c78d66",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f439932-b339-4ac2-98cf-065ed8ef7feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ccc1776-e087-473d-92c8-0e86f8b9a402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca79c70-27ab-43f0-810c-0ba936f0a8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5286f1ee-8bde-4deb-9446-570b3afdeb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382c806a-11d7-4e4b-b468-4780a9aa9505",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92157a5-157d-449d-89ea-8fdb4e6e0877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c09fe8-0283-4f7a-ae4d-caf54fdca646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2e531c-23ad-4a0d-afcd-123359356f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b723884e-3911-4db2-98d2-efddc5e003dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2dd05ee-02f8-4cf6-b424-2ad7a6d93683",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd3aa9c-89a4-41b3-aa1a-04aca9bd4b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df837b0f-7ffc-47e7-9571-b3b141f5e409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22374e20-ff2b-4f83-95e9-21b9a1cbe7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d143f8-410f-48a2-a497-411d6b67c37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a376405-61b2-4864-a8ea-811b17ad4f71",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5fc613-6b18-439b-b8fe-56d9e2fca132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c417a42-6570-4436-b287-701898ab5161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347aa2fe-60b2-4c23-aada-381eabec33a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff47935-5e13-4be2-a9b0-9889d2babca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd45f388-9285-4b74-a87b-dde54cdaf6ca",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a71cc77-2847-4baa-9968-4a9f0dd0cd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bcc50d0-3df7-4c7f-94fe-41ebe83edec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba429207-7cf5-4d5f-b793-2e2c97cc53af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5472785f-449a-46b3-8b90-0eb39ed61fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c403253-5969-44d5-a787-7e878b100d9e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad7906d-6892-4bdd-9479-b429fe56f4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7572634-97ae-48db-aad9-761992fc9f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7dcec3-e801-42c5-9f55-c080f9a13608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0692022a-033a-412b-b35f-050e5ac1973f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f116628b-61e5-43ab-9c9d-de83747413ea",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ac6c52-378f-4959-b7ce-d1dfaaea0a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f78411-eb5a-420e-9a72-9204365fc936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e76e3a7-95ba-414c-bb5f-62214b3733ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f36d5ec-22db-472d-861c-c1ba9a54f882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e52d9c-0146-4e5b-96ab-978b3056ead9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9be931d-5ed6-4ac4-b1ca-effb43916f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1a84b2-685c-4011-a9e0-48cfb67b7947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac27f7b3-9407-4513-b008-383f4d3253e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8d054b-2934-4ca4-a637-83f15dc41d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4439df6-8b06-4211-ba27-a9ce7241bb50",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbd638e-fb16-485f-ae7b-9f67cdb2dac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bfa22af-869b-4c21-9afb-643cacba8d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9ab713-682a-4158-bf7e-0a848e65b9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "81678664-2843-4850-bcf8-9b478bdd0945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75554a48-29f7-4380-9793-95120269ba2e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c8f8a6-b2b2-4b82-b0e9-a38387ff19c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bd9fd1-2611-42b9-a348-aa6231ae5193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4fb6a7-a8b6-40e3-8390-981a5ad659f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "426f3147-b5d5-4731-bbed-33133ac2717e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e07163-169e-49e1-b94e-4ef392aea6ca",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e75f3a-f51f-4759-bede-fdfa6d31974d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9333241e-7330-4a01-b267-a27687b70bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb8528e-2616-4ec0-bde6-a0e75d35e673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "21cb7500-499f-4dad-bb07-6412af65550e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec4e005-889e-4042-a23c-bd5d739207a2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cdacc8-3b8c-474f-96a5-a325a3af0570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc001a58-efa1-41f2-8011-88f7ed8ae889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66876d68-4bd1-45e5-9270-e80fb885ca36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b924b19-7d0e-41e9-81c3-9df5f6dacd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c945fe08-6a8a-4ad1-b219-c94d8a465563",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f1822f-728d-4184-ad1a-894bb3681c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f121439e-834f-4fa2-b339-d86a5e9b6f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6859c7-5d88-491a-a81b-c88feaae418a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b731ac7f-ef2c-4a9c-87d9-d414fa30424e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbde3ec-6206-426f-a6fb-558a0e877656",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8bc69a-0067-49c2-a640-4728934333bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c5dc18b-d93a-4e59-b814-a03356e62b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12269cb8-54c6-466a-a7b7-0c258555c8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac06ec6e-ef24-41fc-a7d2-8c38f3f76bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00326597-719b-4f28-a94b-b7e3889ea0d3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d75d83-4c74-45f8-b871-32f3c8fb49e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b50c3f5-ac6d-462e-ac17-983eff143e4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2a4610-7ac8-4a9f-a394-c9596678eac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8631df6b-9003-425c-9aa3-4bc464514c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4ac82d-0610-49a0-b25e-0375c26077ad",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dab94b4-38f3-4a18-a091-7a707fcae354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a8b3b71-af3d-46b8-bac9-a1b062beed7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b291bada-9c71-439a-b3d5-49a71e8c2446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32deab77-1e04-4da0-bcc9-9f78d5ccf02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b270f5-f03c-4d7d-b971-008e62994228",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2b524c-55ab-4f23-851f-6075a1805c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90e7cc1c-0279-4c7f-9c84-0a976e8bb91b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69804f4-1f4b-412b-9ba1-f217fc9460f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79490245-cb39-4504-a5c0-085528048939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07a39d2-660e-436f-b4f0-f35c27f92c3f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867deca1-f310-4579-b0bc-e3eaed73f39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8458d74-ac50-4910-8455-8a95e7683ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8bde5e-1d70-4bc1-813d-5045c7912632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1322829c-be05-49fb-bb1d-07bfe90fa49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81baee65-12fc-4596-aafb-de987630eedd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92c55e5-1d59-4954-b68a-9c8e4f28fb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db303cee-41e3-41d4-8418-c2d7a1d81c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932f746f-d4f7-4e1b-9ee0-6720de6dc9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f20431-fc9f-4dd7-b27e-40db18a6159f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083c4169-e519-46aa-b3f8-2828c0af5bb6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0957ddbe-fe3a-4c04-890e-6350b7875ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4178d670-ba63-451d-b538-77a33a36dad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1110827c-5681-4f72-b759-4d5e0ddf2ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "472fc16e-8e62-4f27-b20c-ee47ed3ebfb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dd62c6-60eb-4455-8cb5-556a110fb252",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdbf4ab-64db-4ccc-9261-3253dffd2394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17d83797-49ba-49fa-8b85-827a4b50d8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e51eacf-9a8e-4905-b6f5-2ab5883badd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc2be9ff-5b92-44b1-8159-53f6ffeed2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa879a1-6f8b-4e51-a970-e69e325a45c5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58beddb3-8e53-4a3b-b08b-49e735a44ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4c856f-ef6f-4c8b-bb3f-94e188682469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b6f5b8-0487-45c2-bafe-930d5d663232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8074a159-c626-4ff5-8081-1939dbee39cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360dd559-30a7-456c-ba18-e5cde250a54d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562aeb6c-fef0-4e32-aa0e-c711f752bd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe31a46-abc7-46f2-9bf8-b07312460e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b64a516-117d-496f-bf29-39b8cec91d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e5caf5-6296-4a3c-8058-43e5617040b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f8d26c-5556-4630-86f3-7c61618b40ac",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439fb26d-9a9d-4418-a740-9294f7fbcacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9e0222-bc2e-4a0c-9e63-b73449ec3cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e327c2-22c7-4eb6-8ebe-481266c0f3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "39d16ee2-3c6d-4bd8-9073-0dfa6da37343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9022e08e-3bdd-41b1-9d59-581a333a3f23",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f489792-b2ca-4f0e-97eb-a416080d222c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cab67d0-81c0-4a33-9788-b1d7ebe591df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d80df9-e6c6-4642-97e3-aa72d61e0833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f50ad6-ec14-4e97-bee5-8d389c91e963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbeb817a-6e8c-45bc-98b9-cbbd4eb2424d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf50953-41e2-4694-8b17-904f26e87b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3840a568-e5d3-40b5-9beb-95360607835c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30977b8-2d3f-4c48-8c5b-38965f6e2799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b23d9a-6625-4b88-bfd6-c54654c5b814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe07a984-bbef-4859-907f-37747942faa6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f4e899-5bd3-4fc3-9d59-9947b00ab250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37147f5f-13fa-4f47-abea-6c509e45b896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd78a11d-82bd-40ef-a98a-001c673649d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "869fe696-6a3a-45fb-81ca-875adb7827b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b770d47f-5d66-4c5a-8148-17e74128a350",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3c1957-39ac-4d17-9407-f9918a5fdead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c4d95e-6309-4c18-94ad-a6afdf8c22e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd42005-1c85-4b75-a740-7307082a434d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fbfdfef-06ad-4192-b43f-89a47bdcf548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7102f9bf-26f2-4b27-9a93-dc5f32bd1631",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fb29c9-6482-44db-ba0c-301c5b655a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9ee88e-49fc-4378-a150-da0495518a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5c9ea4-cb3b-4dcd-b77c-c296bfc7c37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "293d93c6-9b2f-4316-830d-8ed1666e20b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178a8004-591f-4192-9b16-bc6408790216",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e66621-1291-4035-89f1-0b7835d5c7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a6c9fd-c622-4c8f-90a4-2528df1aaf81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72604470-52aa-4ba1-93b8-c70013620df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3557260-e896-4912-b4a2-0a6a018b9401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcb8bc1-6918-44e1-9682-e8d53fb4a871",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b2c4ea-fa40-47e6-b201-24de3aab87d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4aa9e27-fcbf-4109-9354-8f2c5b165155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46536f9-8181-49e9-b2ee-f33db764ea13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36f161ad-050d-4457-9ae5-3d37f4621e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bdb4a1-5539-4aeb-8ad2-3a73a9f8e7a9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec46753-9847-4d42-ab34-2d591cbd4e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74b16ce-7152-4a4d-b302-69cb2713bf0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aed30b5-a75b-4a6f-9baa-21c96bfe8b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5806dda7-d7dc-4635-918d-a25778e1cbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e151c6e-a305-46f6-a184-0a0033509111",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7640431-80bb-4735-99ed-b721f7089722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93bda8cc-4888-4cc9-a1ac-edd53cf3118c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d811fb4-63df-4035-b46f-6a878a5d7915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3296576d-6a0c-4e4b-b06b-0d33575a745f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6651d31-d880-4867-ad89-784bee18c2a6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19c6e3d-e121-4381-8b53-1bdfdf5c5ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ab0c91-c481-4d6f-92a9-074feaab147c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903ba3c7-1b19-4c8b-b217-9e8355279405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3376e566-8727-4d4e-ba48-1f7cb7f318f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc973a7b-daad-4414-aef8-02fd96370755",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634f66f8-8ad7-4577-ae5d-2ffdc78bbe9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be47a069-daae-48f1-bcbe-1f2bb87e5fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36d178d-449c-4a6b-b650-2416054cb6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4be66c03-687d-41e4-853c-66a620a314c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559a7b83-3c3a-4aa6-9e30-28757352b9b5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fad0399-6e62-42ac-a20c-4372323cd791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5d6613-975c-46d9-8a3f-5e4b2688d973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6973be-dc4c-4ab6-807d-b7fb48c03b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3fb03e-9394-448b-bfc8-0a99daa37459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9566a3bc-eb23-41b3-a0c8-e19c84117c1e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c83710-648c-4aae-b540-272625ed1673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729953d7-69c2-4a6f-918b-f4fd5c2f2d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3074d319-e39c-44e5-badf-3610cde3007e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95180bc9-2810-4983-903b-5ba1a93485a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877cdc30-6e1c-4569-a6c0-093a369b9d40",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d344336-1a2e-4618-9b3e-2215a8f81d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c424f0cb-7644-482d-a0cb-4d3b47be1ffb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c2dfb1-c9c8-465e-bfe6-007b44f1fbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "870a05fc-f7b6-4523-894c-7abd2e46db3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8582ea45-c8ef-4268-a0a5-ee0226a34d12",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7d02be-8bd0-4970-a797-46a634b9c6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4960b9ee-e883-4236-a989-c99b8169302a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d0735b-1788-416e-9b67-ee4e702fb959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92713cf5-8e27-40af-a248-6510748e238a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e595249-76aa-4c86-b430-5c7318aa6dc9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7843b200-4ac8-4de3-940c-0236deb40681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4870a41b-b221-4b25-996a-0ec8bc34d4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaef93b-a33d-415f-b435-bc1a6c9dd019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba678eed-4341-45cb-bd57-d46e39d42194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e425bf-215a-4363-8301-1e090b8fcf1b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e807b2f-14e0-4f99-bee8-6dce9f63b9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b159f7-630b-4ec5-a744-4fbde8480b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41709f4-3c4e-4ba0-82c1-cdfd9f6edf16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2beae3-c38a-4021-b23e-89d3116e0439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adc7f3c-ce2f-417f-a104-7758d9978ebd",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bac52c5-fbb2-4176-88f9-f16be7d4e6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80af768e-2b23-46dc-ac84-77dac36b27d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03cb5be-2c8a-4349-a873-662c8fb8894b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c19e0cc2-598f-4813-b451-5dd1a9911e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4385928e-d22e-4877-b818-b2e7364d8ef3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c284fa-13f0-452c-abff-2ad5b764688a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04bb06bf-7ca2-4fe6-b23a-9e8edb28fb3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74272429-5444-40ef-b8a7-31294f41e295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b23ec23-3d1e-4e34-a99f-71d0a5f4ccdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836a5d95-cc12-4f57-93f2-fc386599335d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d50050-e7a6-4544-8563-1fa2b3360deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7d9d92-14b5-4afa-8da6-e459321b20de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf572ef-14f9-4724-b0ba-858e6ef031a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc961f6-59f1-4e50-adf2-5016e83140f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff0baff-644f-4d63-8448-45c5308e4f8d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae0487d-0b5f-4f09-9b1b-c8368b7b857e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fce675e-c9de-4742-957d-475ad6efdf16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee70f4bd-0240-4986-9a2c-2ee0bf467050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b93c9f-f46c-445a-bb67-def5147bc239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6d3aca-c791-4f1e-b8a6-b145b2420512",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead12ca0-6a55-4975-aa08-1e266a1aa73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40ada90-c2c2-4730-9b52-49f7c621ec2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cfda10-c807-4775-a1c2-ae4ccc44a7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d59f12aa-4771-40f4-8d3f-3e18206dfd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc27b60-8027-4366-8b5e-722d4c801206",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13534031-be93-4f3c-aeac-e7a8ce92beff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204041bd-e511-4e3f-b393-fc793cbe0e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c81e1c8-d8a5-4ed7-b191-3d491bb853b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8dfb8ae-288f-4280-b6db-5171d4a2369d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3241c62c-0e86-4778-818c-61fbd75d8492",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80bba8c-98ff-47e8-b1b5-a4b36a1df0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76d7c0d-45fc-4180-934d-ea01b2985149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7e6bb3-fa09-4a3e-888b-95d8b4b19710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a79374-5b03-407a-934a-ef08e4db7223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d53d15b-e0dd-4a57-9daf-70190e834be9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf5f9fb-e49a-4c47-874a-03044b9feb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77647898-cc2a-4066-8fcd-a3b66bc152e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c9de10-0e22-4ff2-b680-21a5e92aa1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4daa5464-5390-4593-b208-8ac42a81c1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66c4ccf-823e-49bc-a4bf-3b9556ee8f8f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07baabe0-cd9f-4b7b-9bea-5f2698e38aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44418f5f-61cf-413a-a507-0f8a049c6e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2ddd60-aed3-4268-abfa-dec2fb715791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f26c96-2215-4917-b91a-49b760d2453a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62245b6f-595f-48c1-a7ef-09f4b4169ef3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ed694d-4b08-4495-8340-1abeb3950609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c003b3b3-10d6-4d2f-a342-a2c8630b87e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478c9cca-1364-4007-807e-65b3b5a70e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a2d3756-4f2a-4c1c-960a-50313bb4e65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430293ce-5750-4e9d-9b92-13f9cc841e81",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3797236e-94c8-4d42-b104-b90d9a02895f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5261903-f44a-46b5-8cdd-da66a355bac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c77870e-73ae-45e4-ab75-dcee207a568f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79fee9ed-1de0-4f65-b08d-41e622b3dfbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466eedc8-14be-409c-8d70-dfdce5b10f2b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6512cb0b-602d-4c60-800e-84db6bb2c413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e1e39a-72d4-48c2-a04c-e28d610e13b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10158adc-b272-4105-9d4a-83270083adb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb87a531-9011-4ab6-a1b1-c619098df73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf59ceb-0542-49a7-9823-991b03eecab1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3498ed31-d4f3-44cc-bd10-d03702a94653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647902d9-73a8-4d0d-b4b5-b37a5e7f88a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2918ab8-7d61-4b39-9bea-c42c67a42080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f10c1891-1604-44d2-94bb-4a7bff8f12a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61db4c3b-69f1-4b22-b6b6-fe831e3417fc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65361957-ea63-4aae-ac1e-b406ab9810eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58c936c-8ebe-4999-83c5-8a70dc987018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafd472e-26d6-4eef-9b90-9b68af3f50ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c2f19e-3d1b-4f25-b0b4-a810dbb144d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f35496-61c8-43b1-a3c4-5eae495999ea",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e129e4-12f3-4551-8051-d535fe39d668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9edce1-a870-44c7-b411-528b16cf526c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4201eb-f44b-489c-b3ce-58f64260d1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb9ca380-454e-4749-b8d0-55defe65dcd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb6e7ff-04ca-4e00-be44-6bca205b8ad6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aab1be0-0ff5-4130-816a-d957133b9495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17187ce0-e387-4a52-a009-bd5f366acbb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0452e99c-31d9-4183-aa24-8951dbd4f034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a98f1d3d-e701-41b2-8064-46d10ef80131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d167a66f-0c9d-4ce7-be28-0b86bf95787c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b64b1b-dba2-4731-be31-b94287601f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1f7da58-c61b-4455-ab4e-69efa446d932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3164bbf0-49f6-4e5d-b329-c6f1fb193112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a476c6ad-3f74-4f03-8e85-88742e9d1f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b871c753-7f12-4b9f-90b1-a5e3a9490859",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a9e391-bd88-4e16-b2f0-1fd05eb0e5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "691f45cd-606d-4ac5-ae2e-914c0786b3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711420f2-8c16-46a7-9743-0cfb3ca669da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8daaf4-83c2-4dc5-bbea-7c54130c9c89"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9c44eff4-4990-4c8c-aa50-d3fb7a202a19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b90b315-e716-43ea-9376-f8c4679cd9db",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2f7884-a4b8-46e1-9271-53966c9941ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2bb3e6e-731a-4be9-a734-d4f792722ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf0e173-6953-466f-9370-bc47b28b5dca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "caebeb62-aa1a-4bf1-85c1-694240274f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c184c2c-3132-4429-989e-b34c23e79d2d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea8c0e5-55b9-49b6-99c8-b1b293668469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a57cbad-4bb6-47bd-8263-d36fa1822a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef68d13-67c2-4420-a330-5dc6427f4c83",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "691564cd-f99b-4ac0-891f-8c42a3a9d1f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ae50fcd-c202-4564-80a8-49fe3f14fd16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aaeed498-a3b6-48f5-8db5-248650ba9b06"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2127b833-65ac-4959-9193-e7a7de8127ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "447e043e-02d0-4e6e-9f73-84d6e4d9419c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6ea0cdd-29d3-4150-9bf5-fc05397e8976",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2e80b32-c083-43a1-a1af-cbb38912069f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "659bf008-fb63-4882-9b8e-19873a9f3aaf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d435be08-8124-4887-a545-77f522807e2f"
                }
              }
            ]
          },
          {
            "id": "158b8681-bcc6-41b6-bd53-ccaa4a9a3404",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f161f807-c143-430a-9ed7-a462089e7a92",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "745542fb-0f65-4108-86da-d05f1179e347",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "398fab1b-c6b8-499a-8618-f754544f3857"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "675eae8c-f17d-43a8-b6b5-bed0b22f1bfa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "66c72097-dadd-4a07-b843-593a4de0ee25"
                    }
                  }
                ]
              },
              {
                "id": "fb2704e9-7dc0-42be-a409-ed0581d57bd4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f187fa90-907d-41f3-96fa-521c2ce3ba96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10f1e137-2d0a-4e08-a864-91ddf6a5d0b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd9091c0-90e6-4331-af49-2655ae281563",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ca0e22e-b2c9-45a7-b6a8-22075b20c320"
                    }
                  }
                ]
              },
              {
                "id": "d9996928-fe7f-48eb-b308-a83db6dff60d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0667d52-274a-4479-ba60-e0fb5b3c2422",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c91038e-11ad-4157-9e00-656a020c855e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2660cf39-8681-4c3c-b814-f107e78206c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "84a919c9-eeab-409c-b53f-7eeb2dc6baa6"
                    }
                  }
                ]
              },
              {
                "id": "239f0350-8cd0-4724-a20e-217e70e99848",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e00272b-eab4-4041-8ed9-cb8642eab038",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b880a167-ae7f-4103-85c1-c7022fb9c6c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52389ba5-d0a5-46b5-86e9-98a3b432b9da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3d2399e6-46b2-47f9-ae9d-4c5a6d2b1f22"
                    }
                  }
                ]
              },
              {
                "id": "a298689a-0c59-4a77-b444-a4a25ea6001f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50f559e1-ccc6-4d9a-8b39-0a04515d969d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c902e31d-a775-4891-8bd7-90063a38ec6c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c6e392b-3ed1-4944-bbc4-286da91e198d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5a6b7e94-c224-47d3-99d8-89c498a1ece0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "798ed72a-4e2c-40d3-89d2-67c0c1c880db",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3fd4dc02-5874-42ba-8789-7817a4fa28d4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "74f2e6bf-8240-4c8d-9f1f-554976b80b43",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80f0ef7e-c8bc-4b8f-bedd-fc11dc4a0f45"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa9deda8-b01c-47a9-902b-950f0e596948",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4beddd63-c285-4a04-a4b3-5e081711ad56"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7496faa7-7ed7-46aa-ad50-9f6e78b787c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3268b4bc-bff0-4b32-a319-e281100e3069"
            }
          }
        ]
      },
      {
        "id": "7a6437f5-e9f8-4851-83fd-bcab5c68de3a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "69fc63a2-859d-4e7b-bef7-632252d726ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "394c8cb2-bf4d-491c-887d-df4b18c49f9c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eff4baa3-0575-4711-b4f3-262b3062a067",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95408414-dfbf-45f4-9925-c48879d385bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbeb1b93-b8cd-4f5a-9bbe-ef8bfe33a842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c726341-2e3a-44dd-89bf-6a7537f2b29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "70da6d6b-388f-487a-8a85-67e2963fe23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347e5621-32bf-4ac7-8f02-9975b30534b7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99ab3ea-646a-4b47-be27-b438a1bdcd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c74e00-1dcf-4c03-94b1-4863320ffc99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2016d67e-ea33-45a0-948d-244677a8bd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa152e01-35e3-42c6-ba50-f2617c5f9c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6050639-9af0-4517-8efa-cb602cc29c29",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249b2754-fc91-4c65-824d-faa0805e1837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30a1639-5e42-4ef1-8159-f2ca10683624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b3f07d-425d-416d-8657-28a5ca970492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70e2123d-26db-4235-a86c-fd71804a13d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fd1908-c811-452d-b769-7ade5d3041a4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee89053-fa83-4839-9faa-04c47460c768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e396d97-6199-42c6-a2d4-8f97d961a817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60269276-1ffd-4dfa-a5ad-c1ce4a5eee16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d5cd25d-5a30-4ede-9f95-559f9ee45389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ae61df-cf63-40ae-9479-c680164f566a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42bd922-218e-4294-a97f-de7aa075598c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1891280f-9aab-4e72-997a-1b12bb4f30c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31672ad1-4f42-44e2-965d-583c7c2fe116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9dcf668-c987-4b2f-a51f-616ad86656b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fb5442-fd21-4360-bb3b-dcdb096df3b9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ce91f6-967d-417c-a4b5-f2c58440c256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "828209c4-1269-41c6-824d-f8546901b360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0783d9c-97ba-4001-9fe1-3604723d4d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3189af-5d15-4b68-8fba-63ba47efd563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5571bc26-0963-43da-b01d-65ef97329a67",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f22eeaf-7c5b-49cc-ab2b-ff7508248644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42fdd49-7f5e-4da4-83a0-9098421b07da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cbd708-a74e-4179-8f45-6a310edf8f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d17b7cb-9b7a-48ef-9677-946d9cdc05d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cf2398-b592-4cfe-8da0-6a5868fbaf60",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271431ca-8d62-4a62-a590-fe5b4987a828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aebc8ec-6051-4ac8-adc1-2c41d94bfeb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd3a7ef-80f4-4976-87c7-5eace6488d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d0a324-9def-43c8-92ec-34a8952c3de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3738391b-a6fd-4472-b216-feb74a6a5b59",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70c1dc8-2a43-4c37-9489-2644bdd1cc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca04cd1-c37d-401e-8142-1c8fff8c30e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1647f6-e3f0-4c46-8426-a23fa48c3d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36ea7f44-00e9-4513-8f2d-2ebbc77f4425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fb8910-25b0-4c83-b1cd-d9904e703889",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68101156-6a86-4b77-a437-36cca8023e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c2f4a7-4638-46bb-893a-8be406ad0a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7a138c-53dc-4236-b6c2-972b8e9f2f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03a4532f-11dc-48e3-bcb9-533f9706b61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21465f94-dd14-4270-a18d-0fd294816d02",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bc71e6-b928-4458-8403-f7469f5bf10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed923bdb-503d-4cc4-b1e2-bbfe0ccea21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650c560b-8f2b-4f21-a50b-da5079306ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7dfad7e1-28ea-4c8c-bc8a-bae3ae242648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc71fb1-330a-40c7-9ec5-d1f6a04c322e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0127856-3c4d-40ca-bb1d-01f15de6356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e449c9-6458-41ce-ac4a-c101ba02c43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e904e7-159e-4a4c-a98c-d41759a24159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a9dab80-06b0-40e9-be4b-caf809f8ad73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e3dfb9-9475-4933-84d6-312b3faeeb5f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be460359-acb6-413c-bb7f-0a03ff7b165f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bc5fb3-6a8a-4122-813e-d8a66428682b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab4c1c8-1612-43ef-80d0-5939bd25804c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8aa902d-8cb2-4040-8763-959aabd69ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bc1818-f3e3-4808-821b-ab1e129f915d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1d2ab1-9577-4acc-abd1-bd56a7d06b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f120ce-183f-46f6-a985-c947f8d6edfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a3e137-b516-4b7f-a7ed-2e624d357c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a12d100-1edb-4813-ade7-d1cfce3ec5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa78298-acdb-4709-a657-ccd360a88914",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c683b1d7-e5a4-4b8c-989f-4209cbf26ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a745410-7808-4da1-8a00-771fcc699e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67a23e0-f940-44c5-a851-e329543ceb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f14d51dd-8289-495a-b366-9e2b609d6070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09794eb3-e991-4d00-a295-dd9652f6ab9c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8cc3b9-531e-47be-b811-fb169e952781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fbc25d4-71fc-41b8-81a4-7c588629c100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f015419-0ff4-4970-b294-dad99f35ef08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a84babd-d62c-4532-a6ee-6ec08399320f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900a806a-2355-4404-a66f-733794f3c6b0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ec50fe-1e3b-4b81-b560-1f0acb7f4ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65240fd-ae84-411b-97d0-7202de9a2672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2d9825-d65d-4e7a-aad5-07f7d7265dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "92c3b2bf-ff17-4ef3-9d8e-3b430accc0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9a00e6-4c1e-4b30-95bb-dfd3fb7aa357",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb85fcb0-bcb4-4176-9948-704a08016e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86229d0d-afa9-4dac-aa79-3e3826fc00f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63aa146-e0a3-4816-83ab-1b094a7319e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7fe2395-03b6-46f3-88d4-1c4cb7374645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3372cc-55c6-469e-b62a-684d3038da4f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d06df8-85af-4bbb-abb6-59108ee2a309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313b5906-346b-4417-a4d3-5a2284e294b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c962ec-b88c-4ce6-895c-449c6eeaec52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a2c4ab-307a-41ba-8749-9b15fc10257a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6664347-7f25-4c25-8e60-027e62c3b426",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6616cc-4ba3-4912-bd3c-722c76a78e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91525d70-9815-4903-b331-8de397134343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8577b4e4-afbc-45ab-aa00-2c19f85d56a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56075a7a-c845-44f2-abdc-782e59113a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01363c3-529f-44aa-b8d7-4516710a6de2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb793ad-07e7-485d-a616-a90e9183709e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc90d11-6808-41b0-87a1-6a99b2258db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1b296e-ba8c-40a0-9e44-16275f1fa6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb9b3891-ea0e-491c-a4be-df44bfe7f72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d539fb-8306-4982-b680-d50d36810b22",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadab3bc-9aa3-4d55-acff-6252f888d5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b2af594-97f5-4057-bc49-4c03cc25b673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921c5e6e-6862-4642-895e-325d3b17a496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c00eacc8-657b-497e-bb29-7d6af2ad592b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76aa112e-a748-46d5-b096-429fc82c85a1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d869c5-892b-4754-b4e6-437b3600290c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62241605-45c8-49f4-9f13-5a12c85680d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001b80c0-1297-44a6-9c6d-31990ee723e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e04e16-625e-498f-8767-311c3a81f7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0968da68-fa82-4902-b812-b40fbce201de",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb096277-763b-44f1-890e-e48b257b366a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fccaf9b5-65a3-417b-a030-9438c3be5f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5669ee8-ebc2-4577-9840-ac8f276abe93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef3b2a7-fd69-4783-a920-474718107bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25a3ce9-d0bb-4a81-b9f0-8f57a5d17a52",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e645ef-7738-444e-be8c-ba2e5a6d6411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49dd4509-35fd-4e6d-860a-b56ea2fc3b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534defec-32c8-4c2d-b2e3-56e1af878eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4b0d31-43d5-4540-832c-434e01af6f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befcd547-391d-4ba8-83da-c3ec57ab82f5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06347039-70ac-474e-b5ba-35baf965c840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95c4eda-1404-4467-ba94-01a58b4a18d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f296078b-462b-443f-b538-1282818eaf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2399440-f4d1-468b-a4bc-89545d314e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef31a17-b4cf-4c8c-b354-7d40f29acf45",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8271f1-2649-42a4-b0b9-c31a3727d57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6590448f-0b0e-45e7-8ef2-9ecc05f2c825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818ee1ce-069a-4446-b3ab-a3e62ebe5fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f01cc7-3242-48cd-9f39-ffa66ecbc3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45307b06-4dc3-47d7-b40a-edf18e849117",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396ec123-ca79-4ae1-8c79-a1d5d9150483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562e5fe7-8744-4e66-94cc-aca80dcba676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4a0ca2-9107-4f5c-ab81-e107a59ea4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcabb183-909b-400e-afcc-c01b6fb83279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69027d21-bc34-4407-a85f-f2193ee6c6de",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82188c23-c7bb-4ed4-a878-63a450d65dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f279bef1-3984-4c77-a0c6-537297a7718d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804b537d-96db-40d1-b22d-1c30ddc6fc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6af8fcf-28d5-4e75-990a-6e2a7dc7eb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d91203-9eec-4e2b-bd01-3d828f144ebd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673bc6a5-0ae1-4809-852a-39951d43e35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ba0b8f-271c-4bfd-8629-a789931079ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91f5df0-3dac-47e0-aa8a-413c3a2b2c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c8424b-533a-4f13-99d1-3a29349aa8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e3de15-b274-4697-b7c7-2a1fa7ca1821",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca40c06-c4db-47c4-8119-bfada43fc0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70161281-a707-4713-a1a8-af4d26f8a6a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3c500d-9c83-4757-9ad0-55dfe8b09b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "046bc95c-d530-4973-9d1c-8116427754d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ff7bd4-786f-4adf-93eb-168b02dcc680",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4d6481-8190-426d-a4a6-8492afee4733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab05ee9-877b-4c74-a326-2c6da7e22883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1653245-6166-4fb6-ba38-7f7bd7c7ddae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c2f41ab-9167-450b-b2f2-9e4b581bb4dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "48b6ffbd-d436-46f3-93c5-66c879d04913",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "528d5ac2-1cec-4da0-990d-39d183f74e96",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c146c3c-90e8-43bb-bfb9-1b8ae72c2f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c922847f-43d0-42d7-8ece-703b48c66bdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9e56c9-71d4-403c-939b-223457393e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6874e16-dff4-4eec-b575-548ff1675f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efaa4f3-602a-41d9-964d-44bd407fe6af",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478eede1-6568-43b4-8700-6fc29671fcfa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "71aed04b-5beb-4c1e-a41c-3b08043d7b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5320c3a4-a008-454f-a84d-855c522395d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aed09782-7427-44a8-9493-98e942eaed29"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f73f693-c806-4e68-bb44-5a31910a47f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cb811af-a735-48da-b2fa-da7a0a337de5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2da27104-52ee-424c-86c0-24782a31ce34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4830d17-82b0-4ffa-bfc4-606d14a6680e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2d2c353-98d9-4b98-a9f6-7a995419bffc",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5070dfdf-d45a-4f94-839a-49e5e13ad5ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcf3fe70-94b3-422f-83e1-835396deaddc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84ad66fe-d0b9-4e8b-a787-2770870e4bba"
            }
          }
        ]
      },
      {
        "id": "572c70f7-59ce-49a7-9589-0333b82dc764",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c670b00c-88d5-4a7d-9d49-e77f0efad7da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c22c018a-210d-40c8-9f29-b24d03889fd5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e7a1870f-ae90-4e9c-87a1-48719915fb3a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f926db4d-9a79-437a-8af2-e462415712d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885dc6e5-c64c-4ced-882d-8d077d8ed2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bde1bdf-0dc3-477d-a604-25c1fd0eed31",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05341703-7568-4725-805e-9cf02801f83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d95f922e-9180-4e2f-b762-75c15cf19a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a8f9ec-3c12-49bd-ac8d-9edf05472c5b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c03b5b-0c4b-4a86-944b-3b60167ff382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db76bb96-d7c7-4b56-b84e-06ea3d9ba7fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5d0601-9b69-4cd5-94e7-09fc746c79fe",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf83066-85ca-4e7d-b692-f2b16b7321eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0feba9-e8ef-4d3b-94c2-78e379d151b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5065e95b-0bcb-4ce5-b3ce-4f22cb3bd932",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c16cfb1-1b37-4b8d-9010-7eebcf8aabc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0431da9-f19c-442c-a914-0b0e22f516f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f5f880-555d-456b-b8ee-4d846d7cb5f8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da94007-a66b-4b91-b4af-3224eb9229c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf865db-524f-431f-bbbc-886201a7a6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec197b1-39b5-426f-97d2-d847a0c115de",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f89340-d293-4412-bce1-3f3b706d2e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfbbcae-7a59-475a-beb0-d5c366e02790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb4c955-a368-423d-8c53-5ef5041de1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a543d13b-97f8-43cf-a24e-900576796cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ecbfa2b-198a-4992-ace4-a3c55a2b94d1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a11159-8fd6-4642-8233-0a5e68be0c75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d4082b9-5acf-44ce-ac4b-7740076f3314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6b2f5a-652b-4ac3-aa87-09f0e3c6d537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e3fcd8-42a8-4de3-ace3-efd233288d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d65a385-c1cb-45af-b74a-620aafc786cf",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4769df6a-7ec9-4994-ac3b-d0a282726373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d26ad69-a54f-4445-aabb-f03dd937d182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c8af3b-09da-4bc2-936c-feec3693159c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22bde23-5e66-42c9-9538-b76620dd13f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b6d6a3-bea7-46e0-a9f6-cfa61578599d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb17553-db70-4325-a8d9-ad53bb7c5f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e9aacc-0e04-456c-8470-e3fdd7758f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "047f73a9-196b-47bc-8e35-378da3127c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe24bdb-5a58-477c-8168-39458ea4c3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c68f1f4-209b-4aab-80ff-92d166dbfb14",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992ca3c1-86f6-4142-84bb-7d87e6b28612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4422f45-98c4-4e06-8f7c-66bbeed511f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7daa831-1634-4dd2-859a-4c51e551c311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4f658b-b6c3-4fce-8059-bacb382295bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f391f6-e0dd-4ea0-b3e6-73bc126a5496",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a533104-c40c-4a32-b063-17e3533b0415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ab605f-8f37-4b30-af69-be460e98ef0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6029ed15-644f-441f-be1b-9bfd97645871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "910ac35d-19df-4f9c-b432-b4c0aa713fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2a1f65-122f-4ead-ac5f-8722fd4a73ed",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083eb2e1-696f-4782-a705-d7a2963b6b85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "012be346-76b2-4625-a977-daf760b3d927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b73f6f8-52f8-440e-a619-441972b84ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e48f76-1914-41da-9cec-67a2a3887649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf9394f-4137-494d-9a4f-54bc74e0e1c4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91965010-12bd-4269-b7d0-021706a87883",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24d49b8e-066a-42d3-8ab6-12ac65eeed82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "794f058f-2ef1-411a-a91a-a0ce03790dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6a18b5-5d57-429c-af0d-71a765325e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e07df9-a3c8-470f-bdbf-1c786bce4ab1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdf7a0e-0ed0-4cd6-a5d2-65596e7ee73c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b73e0395-8fc8-4d3e-8ffa-adc8bc71ea87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "524cf0b7-9dba-4182-ba63-9a9f4113d998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9063c5a6-6f94-4798-be94-8651b92aad39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4f7219-d025-47e3-a981-a90382fa1a73",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f962c6f-0e5c-4aa7-9eff-1d60f0301c64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ed26da-629e-4da1-a852-e64c846916ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb86ad3-d764-43a4-aa32-3aff0e1b6b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5868be65-2b73-4695-b4e2-70c190f092b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae67a4e-8c5f-4e4b-a96f-e08f7ad746b5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843aa415-4da6-44ea-9e34-3250760563aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa2637c-4daa-4efb-82a4-90c658444dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "562fd6ae-78b2-47f7-a534-6ee2d885d6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f901b38f-44e6-47d1-adea-6149e9122ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07dab43c-10db-443b-8508-72fa1c3233d4",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9297361-c222-4807-b3a3-0375ed47e9b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb9d5d5-5dd1-4bf9-b989-65cb895165d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06846621-a4fd-4c06-8384-ebe615566cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85918f17-44d6-42c5-866a-edf09f850510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed84ed9c-bb83-4d5e-80ef-0bc3d0931f62",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8240f2f-1d88-4ca0-b9ef-d44e099e96ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4facfd3-51f2-4565-970a-209d40ce83cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7a3568-db2d-4f35-944e-ccb392033c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81995f3b-a281-4ae9-b911-8c0c7e1aaf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b37d84-299f-440c-888d-4f93ee192946",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040c8a1d-33b1-4c4c-88ca-e875f870be68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c06e999-02e5-4077-be2c-b27b0697db81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d962299-4346-4aea-9412-751b2bf597cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72193390-81eb-40f2-8dc5-9dee416594f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78bf9d7-b5ac-43bb-bbfc-c9796ad237c3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e235fe06-96a4-4330-88b1-168c134188f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e25031d-14c7-4d8f-92e8-4dca6aac7f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac931e5-b9ff-471e-89d4-a5261d2b7f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d27f8e-76fc-4d34-afbb-1f8e33f314c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c746063d-1fc6-4845-93c3-095a40b93249",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8d4cb6-a049-417c-a0ea-72716ccc3b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76520454-8b0c-4eb8-9c25-11e27d4ac480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f953c1c4-27b6-4532-a8e0-3637dde97dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2102108-b7e4-4295-a09a-1384ee077de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e298b048-5d67-4829-9319-8e8396297abe",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee16550-d450-4bee-8085-a24ccdfe4c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a607a144-5143-4838-8338-70a0d2b61d47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb95ef9-c598-46cc-a0d1-fde59906a1b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf8c49d3-38ec-4667-8bd5-86c37a5c46ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e17bd20-4624-48ec-a476-4e31b4aaa55e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4040860-90da-47ae-b1d9-58a182484935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba87c3bb-53e8-4bbd-bba4-f194a23a51d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "714bbb0c-7c7d-4c80-922b-03d7ef3263ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0fd8281-8b5f-47cb-8ef9-7c89721a3baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3e4c60-c141-4c42-bb7d-fb4d6990166e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c53625d-78dd-4423-b8ca-7799e257c368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5a181a8-9501-4991-857a-d24052c6f742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f73700-4671-4d98-b03e-cdbdfe15ec1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba271f5-7d9d-49a7-81ba-514da2c497b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9282c37-cd66-46a9-8a02-a5b250b370a0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbb0cb4-a953-4854-afe4-5439f25f7295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56abef36-2be5-49cb-b075-29a499a0f6de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97dcc73a-bf6c-444b-bad7-1ae2f3dc7c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a727a0-f20e-4536-9da9-7ff38bf5e53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5f30c6-080e-450f-9fe2-3ef9a9c3e10a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee2e6dc-4430-4064-8375-a22072f51c41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b1a7689-c820-4aa1-9f35-65ac6639afc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c58162-048a-41ce-8a25-f70e64d24335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edbc7997-030f-4877-876e-bcfa201dc77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de87b48b-b32e-4fbe-a237-b6594b26fe40",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fbe1ce-3648-41e6-8a5f-f2b7431ba4a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "899956cd-1852-4c67-90d6-a67125e86d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf5b017-c288-4326-bbac-1fb9e1e107df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01423d05-392c-4b63-8403-2531433fb8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3012ed3a-3fe6-47d0-9eeb-04033c216a15",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01e6879-176c-4784-a71f-9ca3575286ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2c8ad1-f791-4631-8438-ecefa237210d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03780781-d0df-4f6c-8d8c-c17a35429dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fcb3f3-0d4b-461d-b304-94722ebf30ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcb3057-4749-4c8c-a6e3-0004f4cfba3d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e3a8b4-cfde-4ebc-95ed-77ec90d84302",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b661e298-c1bc-4e22-9059-ca0d1176c712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "232b9484-2451-4372-a251-0c7e8a2dcdc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1848d7-fbc7-479e-acf7-5068f5c55e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa77cfef-6772-4471-ad79-1f821e376317",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c35a2e6-aa5a-41eb-9d95-71629027d6b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "870b4075-500a-4579-ace2-2b0869d8c3b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74a7802-3525-419f-b249-f74470ea12d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6282091-25bc-4aaa-aaef-bd46b25524b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa821b2-288a-44eb-887c-a6d42c1ca7a2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d7aef3-56d2-4f80-9723-39e3ca840ca3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2db2e1bc-1ebd-40f4-8f3d-69dab28a62c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "363abfa9-f6b4-454f-8fd7-67b05cd5c9ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b3a51c-4da8-459b-b59a-ccadcd774958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65f521e-4567-407a-9a54-d6bd2b69ca5e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e76bc84-6211-439c-b2ee-34d68ea1ca1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e2666fd-0766-41d4-8ece-763b02d5d58c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5731120-99fb-4c35-84eb-f4de4db611e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad837b0-aa56-428d-b411-60c5afe0ab29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e27ba2-a5ce-4212-807a-1c1084edb34d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a0e889-1758-4dc1-8dfe-138f71f7142b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b405318-d38d-4b2b-91d7-38e2a49930ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60e64ab-8468-49a6-9999-5b62bd9266b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b15bb4-04ad-47e7-91ef-3f163cbbac89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c63cb1a-2b1f-4fcd-ae90-e9c357512890",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b6cfb4-f85b-4efd-8a4d-ef657d72e48b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71c19d94-88d4-4f62-a663-047178b44082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3718787d-89ec-49b7-a860-b9ce3f08635f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29128d59-c217-4b80-b10d-0a87e029844d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb58b00d-6cbd-4039-bf3e-9f057cfd69a3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03914fd1-a3e4-44e2-8c2c-d0f8e86b98cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f9f23d-1079-48e8-84bf-434689100a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d08923-32aa-48dc-8f2e-6bd57aee489d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd61354f-08bb-4e34-a455-302d6f9c9259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6795c5b-2151-4d15-aa17-7a8c246f8922",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea6463f-5453-418d-8c4b-85ca608c1fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b6dddf7-f31c-4c52-a830-e1b71c3f6bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37431d7c-0499-49fb-bb1f-ec8b2421559f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d2a902-f73e-43a3-a545-7723852e7b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5584fe62-1391-4746-860b-019df45ae619",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867893a5-93de-4b26-a56c-980f70a05bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4ba8b7-6d88-4172-90ea-21424515174a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3928a8d0-4878-4d8f-a7a8-1cf2f2c8e88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "714f5396-d05a-42ec-bc00-2077f08295f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4635095-3588-4d8e-a590-9b612d6def1c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e393aa78-06fb-45d1-b5e3-edfcf9012c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4975f3-bbec-474c-bd84-ad6b0940b430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3806107e-5183-47d4-a094-99f7fb0998d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bcfaa6-6a01-46b6-9f5f-9597026d235b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc747daa-97bc-4190-ba19-65651ae9dc5c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f991476c-6200-4a48-885e-763d2db833ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd31c72-1a24-4ab0-b0e7-1d626ca07602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c232651-d92e-44f0-85f6-91bdf12858a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbcd04e5-370e-40e4-9cbb-363997931fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17114b17-209b-4c8f-8a47-2f6adc66e1df",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975b8f11-4424-480b-b378-651a3734cc06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd1090c-7751-4887-9335-c2a11ba2d76b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "895a5e4e-aea7-4bce-9e94-9f07610e653f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7a0518-001d-415a-b5cc-4f505403f281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ca3f52-983d-402c-9fb0-7ef57fc7f00d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a75ae0-d17c-44e4-b8ef-5ace793e5489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785f9b88-5948-4f0c-af38-2358022bc898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c1ed9b-bf94-461c-8a04-23c3e1a286ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2703776d-6fce-4a7a-ac8d-b6f963d108f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874df540-b831-48ee-acf6-d6e027b5fd15",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee8b69a-9847-4f61-ae2a-76274ef07a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8955e654-dac2-4b1e-8e48-d5e9868589a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1af319-5b3c-4578-bfa9-8da0ae113d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12740f1a-183c-4542-9136-66536ea4ff51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9593bf26-42a6-4409-a03c-58eab1110b45",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8615a04e-89b6-4aeb-bc76-aab14d0a5c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8160d7-4b07-4606-a6f3-2b32d0c733fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c960b3fc-d1d1-44a2-949d-9066f13bc919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736d15af-aa55-4e56-a2f2-7e48769649b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d50ca0c-0d0a-4845-815f-2c4108c0ff20",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2b1630-70b1-410c-ab47-45fca1597de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c698abc6-ce9c-4f17-8ea0-7627bd1b6447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8324520-b893-453b-863b-cdc4fedf43dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e4940ed-8f31-4085-a419-613da9a717d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3976df16-4258-4436-90d0-157a3ee740a5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cd4524-b393-4d97-b5ee-0d3bbeb9fa7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "392e4387-3cc4-4afa-8120-27b561b85a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a0f6c1-398a-4c04-94ce-0a1368d454ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9edbe8d-6fc2-47a8-87e6-69d7c8d00ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd247ab-a900-4466-b98e-7c6f02a3d3e0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1938cf9-8d30-4fac-ae81-e66760aed40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10aac610-a8c1-4c81-8712-8d4bae6da386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a018b9-0b08-496a-b51e-45cf80bfead2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45450d7-f11c-4ec4-b270-bb3987e1f229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1684880-d888-49d3-8cc8-a8976b18f91c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16d00bc-d990-43e5-82d0-56aa96eb6a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf54e03-9f8e-408d-81ec-de95ca0564ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a2e6f5-5620-4510-a321-48c1a705d40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b5954de-d360-4f37-8da2-355e0f9d2291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84402f03-c472-4a73-8792-754bbc17e372",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a3e0be-5b05-4432-880a-a6caf28ca4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2360b4a2-6fc7-4ea0-b907-c3c5be278282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e65bb4-9136-4509-9911-0fccfed0f36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "390733c4-482b-4dc8-8759-d4f7ef476550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efdc4ced-d3f3-4e2a-8d19-fdc12300b4be",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db20ce31-73e3-4836-8c9b-74265ca0e560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b501e6db-73b6-4a0c-8f4f-e4f036db1104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1d9d3d-d96f-4a66-a824-e82bb82821f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0a194b-69c4-48f2-bfb9-2966a93b9ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ed199c-07bf-4fc1-8c47-476b517926f2",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0d8f49-ecd3-4872-891c-d659d182704f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7ed49b1-1ec0-4e01-861e-986b57e60b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8135b8-601b-49a4-8f67-72acecb73d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ff7e3a-16ea-4e36-af65-3b559ea857fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb9e69f-d616-44f8-87e4-9d37cbf7f851",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e403ca66-8a03-4ba6-898b-7d2fee63c57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4721007-22a3-4c82-a586-00f96436c885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddac1fd-ec8e-440d-a4f6-9b6ae4dce72d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a12de1-9e27-4255-b881-9faf7c7e5a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e955520b-de8c-485b-9714-63a8ce7e22eb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c22700-d239-40f7-adc6-06f125c0f62d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6101b1b-44a5-4ea8-a2e9-79c4d493f3fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0167a668-5a3f-4212-a43b-0517816541ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9903fbfa-141c-426d-b97b-9aab460a8fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3ed7b1-f743-465c-b4e3-3a6ce07f154b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2da2b0-ed56-44f2-864d-12270c49e5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2d8bf1-3e85-4fe2-a3b5-b20e6abf7c01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da38e6ec-9cfb-4508-b9e0-78565665ce30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024eca58-d404-43db-af58-2433e711a0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fc0068-b5b7-4173-b112-2f9efe7f7d3f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4c5093-d9bb-4f74-ae8f-62549cd4f119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e858a069-abd1-4fa3-9840-b8afc4c70592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f4a850-e19d-4444-83fe-66a3e1ad9879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b557c7-9d16-4f61-a222-86f75bdae670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90da368-8a5a-42ad-a87d-51dc0ef548bf",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0aec1d-98f5-4c3d-9556-ed21b2196e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c07866-be8b-4358-8bd8-5fd553055c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aec7446-7de3-4ae3-9553-34c7e882b2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef34f9a1-76f5-40df-9272-aa40343cd858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28620ab4-99a0-4c25-a888-5eff029d1f93",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05baab7-e95a-43d1-8cf7-cb0670f51138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1096017a-c08c-4d37-a89e-9315f0eeceda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef004d7-ef3d-4841-b520-928ad2324087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b4f29c-e33f-415b-aed5-6e3be0ccb962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10cd55e9-b28f-405f-abb6-d6863bc2e0c8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1090e718-4cd0-4e1e-b71a-79b50ffea6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cd1f00-bf39-4adf-a065-6faf088e5cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e962236-53b0-40de-8440-66f19b6c7039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebfc1a47-94cb-41dc-812e-574af61ab673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1af30b-d80e-4969-b963-1b52eb9ec31f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4d9a46-aa1f-4333-95de-33eabf19ea38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ae046c-c5be-43cb-889e-5a7484346334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9255d4-0d8c-4dca-aeff-df8e3210eccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317dc022-9b4d-4e04-ac4b-2de2351765c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ccb27c-ac00-4ab6-93f7-a18f96a56169",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d846879d-3e39-4f23-80f0-1c54fed23344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c36ab30-7e8d-486d-a0f9-1a6b499e8656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6cbe56-9bb7-4c37-8a15-161e716a0a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e4d0b5-95c6-4b37-98aa-377f6e2ffecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee66c2b7-ccd0-4ede-9a0b-cc8700b66a7a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7279e2-24bb-4de0-9d3c-9332d5ee4e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24090dc6-5341-45eb-9c2b-c6295388c192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c968cc-308c-45ac-9258-858566181662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd3fd053-b249-464b-ba37-0e20c1f6f19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb296e0d-0fac-4cb1-a1f7-8d2460b4c25b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9c82b2-8514-48c2-8160-fb7636ea779a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f831574-0b36-4f7f-92a2-83d67c0b925a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8c08ac-6942-4991-831e-61f8f9069914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba26709-debc-47a0-867f-aa699a1c47c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364e4b3c-a4a5-4042-b528-566c2fb37d62",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81588e3f-ac5f-4def-a46c-2a3e987d7cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cae6e1-46ac-45da-a595-6179a9740d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b8a258-6ace-4147-8b10-692455696444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a88213-93bc-4bd0-9222-86db56dd3c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac93831-9b87-42d3-ba81-be23ceb7b510",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55146a3-4c68-4deb-a710-4b12db41af9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f378e940-96e0-4a0e-a534-9cd866a4ec21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a10e30-05c1-4d48-93da-9c32cbf9caee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a00f07-b252-4f61-99aa-e976bdfe4b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba73299-5f68-4eee-ac95-76904f7c1d75",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bf3b5b-78cf-4394-8806-6a7efc54b987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "946b7cfc-3b8b-4c45-bc32-435339862cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aaef6b-bdfb-4849-a8b7-56b8a2b1ec41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df99599-f4b0-4dc1-8ddb-edcd42dd04c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8dbf6b-5fd5-4ef6-a19b-b248dc0fdcaa",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45894966-254b-4e36-9316-6629e8d0e737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7cba323-9343-4913-ba72-f6be8b0de814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ea768e-649b-4b33-af9e-4202dbeec5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7edbc9-a6d1-4459-8b35-d81f65e92955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3550126-c115-4743-9e70-14d0330f1d63",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c169f096-862d-4d84-9512-847912f435d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47f715b6-0fef-4501-a9db-c06c0b01a475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "965d9e1e-7d10-4ae2-b7ba-0e5de916232b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2ee54f-5728-478e-bc02-fe6afc5f6ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d384058e-e3fb-4e86-88d4-3f2fd83ded43",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03339440-d5ff-43e3-adcb-5622bf469cce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a999e116-652f-4d02-bc4f-6759e392a5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e524b288-f401-4089-b7b3-56c9dbbf208a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827aeec2-eed1-4af8-b3d5-5e70f58586c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ff8933-9a85-46fc-a129-c56897fd16be",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09175267-f7ee-4087-bf1d-9edfc8447b0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6a05083-7e17-4855-8f04-25e57116a50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a54d0c1-1389-4d73-863f-b6b92542a325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff57163e-aa2b-458e-98fd-fadf676f3bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f3f8d3-efe9-4629-873d-2fecb22ba856",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5dc541-5655-44b8-a578-a1e3e2f9897c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ac333cb-39dc-4bee-9fd2-033e71cda55b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981479c7-de03-4223-b94d-d19d19f185e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc85888f-e6f7-433d-9740-76d0736e3fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38353fd-d0ac-4b78-a509-f8557d2d6542",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7571b11b-8382-4ec4-a7ae-fc3c6ea9097c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "959bec57-562a-4410-a0bd-73ac79453d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e725b57-d612-4f3d-b653-3017947de7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82219f9-2786-45e4-8156-bc1859d353dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8215f2-10eb-48ea-adc3-fd9f3101a022",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8aad9f-d61e-4475-b6ba-92e9c6cd9891",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74574f77-6792-4400-a462-4a385b83d9ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38209d2b-02de-4da8-821d-f006ce4306f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24bf6dec-258e-462b-ab16-9b36b2be2f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b373023-7350-46dc-82dc-3679e5111e63",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cdb4e1-7a98-4d3e-ad9b-780696c456ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "444fb4e7-51b9-4bd8-b88d-57e952f85424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7113de0e-a52b-4173-971b-e003ada1a918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98bb7e7f-62a3-4a46-b1b5-1306ea2d8cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7eeaa1-2cff-416c-9272-9fceda76e26b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1caf8cb-1b45-4390-a78c-e93e95271a8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea0b5950-6f98-47c0-9b4a-40fa0a5943b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d48b11-bdc3-4e88-b774-8b10cf6b431b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c466273f-6707-4a2b-83a3-08dcfd4ba626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e836a9-6c22-4385-a651-09938606af20",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c582548-fc26-40c0-adf2-0fd764675369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90f32914-99d8-4a99-82ed-77f05ee36ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ed7a60-815d-472b-bf61-a77ee3e1117c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa99e7c9-f93b-4f9e-8815-04a9e598573c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a978b427-c040-4bb3-8a05-3b7cee08da00",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16aeeb87-9db4-4aeb-acd6-79ff6df2eef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28437043-01fb-493e-8b90-fab5aa11abf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197e4a6c-a1aa-4ae5-9eed-d0e09ef1e61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a8366d-c6bb-4864-a01d-6ad38dff4aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d6683b-3a88-4672-a1d7-a1ece4bd6c31",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fd709f-8545-49ba-bb42-c341272fc1fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca3cec98-756e-4c50-9892-cc09b7379e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa1d926-bdc9-4ec0-b169-7957ce80a48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def81469-464e-4b26-823d-9f329d0bc82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3c9ea6-575e-4056-97d4-5659344304f5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0440bdd4-f9c3-417f-9902-2d5224117e0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a0879e7-1bd5-4b9d-9f3d-978af9a11e17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ef010e-e830-4040-ab94-03c36ffb5597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8457bc1-0f21-4ae2-a9b6-0e0b17e63101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc41f80-4cb2-4441-b237-ebe7c3334bfc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b987bf-1ab6-4498-9190-72f696d7c184",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0467df86-376d-405a-a3b1-4a0b5ef90729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d460c54-2a7e-422a-a07e-9c6021d2cb5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09ccebd-7f59-4ef7-8a47-e324b00539aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb46894-1ff4-49ad-b692-de39f35f158a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed698bfd-9591-49ff-9929-9ddd9fd23ead",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf1ce97-b7e4-410a-9c12-7ba92241b46a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b06818b-bb6f-4c70-8136-d2730b13e957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f12ddc6-558b-48e3-bc8b-54fda3374c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6480853-28cb-47e9-9e0c-eea5e98914c5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce76f89-e265-4fe5-b753-9071ac044b9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17c8d149-cc33-4202-a88c-d05937f1e318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb97e278-7470-4147-b27a-6d06ed634bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5abc3b77-6b59-49ad-8d71-63961f6188ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4be57b9-0d0e-478f-adb8-2e1c56168526",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e29ba79-b229-4b56-96b9-372408ba276d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f85590f6-a6e6-4587-824b-d08e24c24720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326dcda4-f843-49db-b9a5-221c598e04ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c571005-df4f-45fd-a1a5-659cdbcb60b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21305a23-fd74-4655-ae4c-262dff8d02fd",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3be5e9-77c4-464d-bbd2-03005a5fd7e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aff2cf32-400d-4dd5-9db6-7097db11c8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c91e865-6ad6-41a2-89ec-af251ede33b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2a681f-256f-4b8e-b8e6-a241477dad0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7488a3-6af5-4869-81e4-e435179525af",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb76553d-3e00-4c4b-8587-55fab22cd00d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10b83264-9b49-4572-b706-e166f8d8c8da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee8d73e-869c-4e23-84b7-f01d1173141c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd0123ef-5fc0-41bf-859a-2a14b850bd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95da56f8-5ae0-4fdf-84cb-4362aacd4b3f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40347c1-c773-4cde-9237-0f71da8fa998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb9aa80a-f2ad-4ddc-afea-fdf58cc29fa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "250ed6fc-26ca-408a-80c1-9124653a5aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fefa605-2ca4-43b4-a515-2b49383c4ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8d2496-67d1-417d-b0bd-a9e8254e07f3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fade716e-4b48-4d33-88a7-3281e3427adb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e15c7b09-bade-4b1e-8640-d3af72ebd71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0e4a88-c144-46fe-ad22-df24d77e9cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925ea5aa-6449-443d-974f-ab1305590635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2aae81-fb26-4c40-a821-7738a2c8977a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f46920-6599-44e1-8c46-7e3dc7757500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e8f6e0c-6f76-493f-8b1b-3d68239c2e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce4aa1f-14f0-42d2-9ee1-755cd574673c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370a598a-754d-4c3d-a6a9-8c532ea5871e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e1f365-8f88-4e05-9d3a-13305ba31a7c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85566f63-858e-4ef3-a056-9a86093264c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12e675ec-7434-4f3d-8ff9-826fdf9f0e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a03c4c3-6873-48d0-8de8-f9e22666248d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6dbc02-d6fd-4172-8fe0-0ee2b55446aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f100a2-3f6e-4667-a90e-a22b42625e66",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72143287-3d86-4839-b239-7265b6580aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "117942db-4cf1-4b3d-9afc-20d20877532d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3762f0a5-ab54-4657-b867-e0040042e739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "993da4eb-fb8a-4050-aed4-9925b3c4d204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fde5c4-66ef-45f1-846a-34b384d5f5ca",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe9259f-bdde-4f37-95d7-e2bff4885fe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2a03edb-8030-4fcb-a1cf-90c2946d7bc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bdcf7c-e190-4806-a690-21255bf40903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65b1071-dc5c-4de4-a2ef-4b98604d4234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e5142f-b024-4b2b-80bc-d54957deefd9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5627936-23ad-495d-acaa-93958b64c66d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c38333-afc1-416a-bc86-b448884a5603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26fd4d8-b8c7-4b21-8730-580bbbc4d92d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c68e17-bd92-4254-a0ba-f19f105815c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba485714-99ba-42b5-a7c0-ff0ad3899a35",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c666ecc5-5ac4-43e8-97a0-640a3d10022e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fb65b99-06c8-4788-bb1d-3c1990ebbbfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68158a18-82f4-453b-b9a4-3955d343613a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef4f7cb-e841-408f-a703-fa48882b1506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758a3608-565a-4e3e-85ed-218fc328aeb9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03004f20-72fe-448a-b2d0-5ed1c9232c05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c696305-cd1c-4c38-84f4-db76ed7e45b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce48fde1-e0fc-4385-bd46-9b387c0a2c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c12ac626-2ab8-4bdb-b2c9-2ca1d7f87a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24212513-1dae-43e1-88c4-b3afdf37f019",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6682be4b-aa45-4887-9ec3-8c29888a53bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70302d16-6890-4ea1-89ee-670d648d6f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c663dd19-373b-44ba-a86f-9e08cc641ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad97a19-27f2-4b03-b6bb-e035477ec1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848e73d4-78f6-44f0-8de7-6029673ae5f3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9573cd0b-c67d-4165-a813-7c423949a803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30fa9092-36b9-4366-895b-efb19e55031d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f51b55b-b748-4b06-9366-3c9e65184869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df80d000-893b-4ece-8278-28c60697133b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a184eda-e02c-4f9c-8e4e-8dda662dca79",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b7d82a-29f6-4f4d-8069-c1f5e4b48617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eaa3b8e-7ad1-4294-b710-f7cc170b3aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8a5c4f-2734-4d04-a2d1-b0134849dc13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97741895-985d-4eb2-a8c2-3edc434c1c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b438dc-3761-48c8-bc41-54677fa0512c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15fc61d-02cf-477c-abe9-be08b3afbf3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a6b488b-c326-47aa-aebc-b7a73f32104e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2288068c-ac53-40fb-990c-20bd80ead300",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e21556-9702-49a2-a81b-89288c72ce04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab9677b-24bb-4e29-a481-eb2674d848db",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97168d67-cfd3-47e5-8d22-967d8fb0a81c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97358ea7-7476-429c-815d-5f2051162664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33c5861-03da-4b6b-a8f7-db067f6f7972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73971926-48bd-4a8f-97ef-cd5be4ada048"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a75ac96-e714-4b79-a696-3b08daa28b83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce5db4cc-d105-4e1e-b12d-2d4d1cbec809"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0eaff7f3-12f5-4d14-8ced-e6bd8c08bf9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eda60e6c-18df-4b12-b16b-cad1163b9021"
                    }
                  }
                ]
              },
              {
                "id": "4ba3904f-146d-4b28-8fdb-49ab7adb7566",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "defbeb25-3469-4d1f-9cd4-745fd7e78881",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b257ab-bfdd-48c3-a3b3-1900aea76ded",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0263e7a3-fcc0-455c-a900-2c067720d0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49af2ac8-213d-4972-a30d-9aac2cb17b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32ae2d2c-ac8e-42c6-b7f5-2fa6fcb9ab97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8beef1bd-914b-4b93-920c-4418c1b70078",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66c206a-8af2-4354-b5c5-87380d628ad7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a431a312-63c8-4888-9079-71c143bda823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e26607-c40c-4d34-abf9-1a49049e97b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2c7e8c1-a659-4c67-bfc3-ec6888f153a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f391d994-7750-4cc0-a0bf-047ce1729b76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e490ecef-e6ef-4862-9b6a-3f07d99c6bfd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0546094-1d9c-414d-964d-dd41b5b81224",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a479d8b1-ddff-4000-bc7a-9ebe96b5ed0d"
                    }
                  }
                ]
              },
              {
                "id": "de71e448-08ed-4214-b05f-9cf513b0e3c7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0576ab40-0bd5-448a-8322-233d124ee01b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9cef75-1d55-4d71-b7d7-75eed73b25aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4bdfdd9d-3091-4105-b285-175f4f605fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5fa336-49c6-4d69-9d2f-2c9423563abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bd5d90-8929-402a-94bd-67e4e95802d3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f98764df-a2aa-483c-a86d-4f3895f673be",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a1156d8-c4bd-4bed-9054-720c6620a66b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d38c1fc-1ff0-4006-90e0-2bf11bf4f34e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6b80a1bf-06e0-40f0-b836-d0639b567f9f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61c72d41-1e7a-4251-85a0-734fa86ff4f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44411f02-288b-4e2a-adde-230bf4193fb4"
                    }
                  }
                ]
              },
              {
                "id": "429ee48f-07bc-4502-a83e-a32824437f62",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee8868e8-6531-4126-94db-7574cbc9e58d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0c9e58a2-a81c-4232-856b-c335ba8e5859"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ada3abd5-f583-4b95-abe1-2bfcbc9da029",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0df3da55-b559-4684-ade0-be34cafa5d9b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc157e31-f56f-4789-b6c1-ae1e034561d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "76834356-fa4d-4529-afe9-2eb910cd6e8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1264705a-47ef-4173-9db0-21319ce51e6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6aa1d847-ad4c-4af8-be6e-c9b03519d1d8"
            }
          }
        ]
      },
      {
        "id": "6492702e-8602-4a86-8c6e-c5d8efff9c19",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8c4f25e0-8df9-4f0a-ba2a-751d59a0e0a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d50b8d65-906f-4b30-9242-adac26ce1adb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f957749d-b47c-4cb0-8a9c-4dc734506572",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862f5102-511d-435a-861d-7ce76c3b3603",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c6c28958-b322-4a79-bb2f-fb3fd480beef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfac946-e4e9-483a-8eb0-55fb3f3a5fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "779a62c4-dcb5-447f-a725-fda91895be26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604bef98-d3f6-4526-8d49-f67f25ff08f5",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93278c62-bef4-4f42-a25f-234c263b0a3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e1dbf9e3-ece9-4807-aa7f-7f7263674722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6481d1e-aa9f-41c9-b1ce-c2574db429a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c32b169-2dbc-47a7-8e7f-54a271cfdf13"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e91c3597-84de-474a-8a16-a58b8dbb7643",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7b5f88d-6318-4343-a9ed-8b8c425ec644"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff6d582c-0a39-4059-980f-bbb55f785047",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28107988-512f-4743-bf3f-89bfa5100de9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "759a1213-7516-4335-a71a-51ce732f432f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d9c79297-4b92-46b3-a41c-5f20db3d3534"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98d85af1-6956-4eef-883a-f2cd64596644",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb6ed2aa-8c50-44fc-bcd6-639ea7e65843"
            }
          }
        ]
      },
      {
        "id": "e43e2aa3-3b31-42ca-9ac6-93b2b1fc5d55",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d884d4c3-afd5-4ea6-9981-620fa1ce83c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1fa4881-1654-4f7a-b025-82b6ee2fdb96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d500678-52ba-4917-96d3-4482a25c4c6d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a521d2d-eb0c-4370-bea7-6c7ec1c2c955",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cc0bfb10-4ee9-4751-a36f-ff0de1955883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1689603d-3cc3-4560-b6d8-7814e355f2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be01bf01-c797-4c71-88cd-d39cb3bb7eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20389223-196f-4cea-a483-10b313f52678",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882e1131-fd53-488b-8b38-18ddf619e441",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e8d63acf-b1b6-4a9f-a600-73b49383269d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f23e0f-1e0b-4c73-bd9b-894ba9ad9075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19385e79-357f-41e9-b673-6e3d53d30ec6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2311700e-b4af-4b03-8ca9-0b4930226517",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d92dc8bd-49be-4b17-babe-ca0204d52901"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4317bdf-8cfd-4938-b81a-f460a9d664b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7beae9e-ff69-4b33-bc63-f03f4fa3b18b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a988dbb0-7f68-4d08-9683-e95ad668e6e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "14dadada-d964-4cfc-b66e-e12e01ff98b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83a58cd5-2f4a-4091-9412-eefb011ee063",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96c04499-fe98-49eb-8de1-007a281ea278"
            }
          }
        ]
      },
      {
        "id": "da78d6e1-f995-447d-bf8e-d36908d68124",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d27b9dae-f811-48fa-8579-26bdbd47384d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa3b83a0-f524-423a-bdac-1eb021de183e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2021ce37-b208-46e1-abbd-b15bae164f79",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e123bef-a753-43c6-962f-98669e488da8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8650a0e1-0165-4a87-af75-3f0bfdf81463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b2e823-3b9c-4d8e-a47c-8fe486582e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1d2d4c3-8505-4d78-ae4e-fe635992bf8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc00390-82a6-4e52-b285-13a9441a79d5",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792fe9d5-86cd-4cd1-a069-d1907ab1844a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "933421ee-690b-41ad-a861-54b6fa9c0756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1524f4-757b-4103-907b-71a1ec0b0c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4428a93e-e7c5-4465-b340-80da2e913bd1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eec5b108-0133-4c49-ba86-78c7c5c07256",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f448091-602d-41f7-85ad-53f4207597de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0212ea5-9a68-44c7-8a92-ed3b7d1b09db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc3137eb-1694-46b5-9788-3419a4089faa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fba12c49-1519-4398-a754-cf1a0b3fb2fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8bee5a67-2046-46b6-87c7-65baccccf014"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f0f4fd3-a266-4bb4-b626-044cb480158f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29adeca1-283d-45f7-9abb-fba2604eb78a"
            }
          }
        ]
      },
      {
        "id": "112f5f2b-067c-4eae-9bf6-bfb06010daf0",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0dc326e0-c85e-4a19-a36d-b963870fc6d9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31eedd90-e0c4-47bd-8f72-9d694910f277",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e9d06a6a-d3ed-451e-9821-b097daae3ba1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "414eb861-317f-4572-b3b8-9d2eef1de512",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0dd72f6a-904d-4fa7-ad9f-9e662a96b373",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 135.01145038167934,
      "responseMin": 20,
      "responseMax": 934,
      "responseSd": 173.9371098687669,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674088816066,
      "completed": 1674088862109
    },
    "executions": [
      {
        "id": "bbf822b2-00d4-4e98-8dc7-ff4155c20c2d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf725017-8413-4d92-ac21-6425f9c37e18",
          "httpRequestId": "0486ab23-0447-4848-af97-eed0240b7348"
        },
        "item": {
          "id": "bbf822b2-00d4-4e98-8dc7-ff4155c20c2d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0d8f8488-ff97-4e2f-a544-7f0c8ec58e3b",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 0
        }
      },
      {
        "id": "5600bb77-255c-4e4c-9adc-a4c27fb0cc48",
        "cursor": {
          "ref": "187572b8-f979-4087-b13f-b9621ae9b07b",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e84bd000-92e1-4add-86ba-5ddfe71a3668"
        },
        "item": {
          "id": "5600bb77-255c-4e4c-9adc-a4c27fb0cc48",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f36611a0-c659-4d42-993c-cf70bba82eda",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "767f554c-0e97-413f-9bde-6ad86c043abc",
        "cursor": {
          "ref": "e9e6fb9f-e2e1-441d-94c1-3f81a87a779c",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b9e5e3e3-c7bf-4ee0-afa5-1499da7ffee3"
        },
        "item": {
          "id": "767f554c-0e97-413f-9bde-6ad86c043abc",
          "name": "did_json"
        },
        "response": {
          "id": "2d2064e3-aef3-445e-8467-3bd5237c73a2",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41deab36-3b5b-45d0-9f25-54c5110b64d3",
        "cursor": {
          "ref": "e461a60c-f7a6-4bb6-9c3f-7f44a3b8ca7a",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "73a3b603-560e-4d79-9a93-acbde7edc8fa"
        },
        "item": {
          "id": "41deab36-3b5b-45d0-9f25-54c5110b64d3",
          "name": "did:invalid"
        },
        "response": {
          "id": "04aec42e-c20c-4b38-941c-0adadaf426b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41deab36-3b5b-45d0-9f25-54c5110b64d3",
        "cursor": {
          "ref": "e461a60c-f7a6-4bb6-9c3f-7f44a3b8ca7a",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "73a3b603-560e-4d79-9a93-acbde7edc8fa"
        },
        "item": {
          "id": "41deab36-3b5b-45d0-9f25-54c5110b64d3",
          "name": "did:invalid"
        },
        "response": {
          "id": "04aec42e-c20c-4b38-941c-0adadaf426b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70fe4fe-a325-44f3-ad51-9f1e938fa8f0",
        "cursor": {
          "ref": "132ca412-1630-4384-81b5-ddc5dc75acc3",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9bf4a492-c013-4383-aede-5dc04f159a6a"
        },
        "item": {
          "id": "f70fe4fe-a325-44f3-ad51-9f1e938fa8f0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4591909c-7fa9-47b7-832e-76a27d7ccb76",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8f196a-2ec9-4669-8dc0-da24936c3a1a",
        "cursor": {
          "ref": "fca8c1d1-376f-4fad-9fb5-b220fd11e618",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "42d9a5f3-9d2f-45e9-a1f0-ddbc4e6cc02a"
        },
        "item": {
          "id": "eb8f196a-2ec9-4669-8dc0-da24936c3a1a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4f3e4954-11b2-4306-9d75-6b5c1e24c76e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f5da34-ae12-44d6-81b0-bd8aec6e4a30",
        "cursor": {
          "ref": "c274c933-214d-4b5e-805a-24245b847512",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "356428db-7b45-47ce-a4c1-d35afb4212b9"
        },
        "item": {
          "id": "18f5da34-ae12-44d6-81b0-bd8aec6e4a30",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d891e1ce-1256-4e10-9e3d-3f40baaf5c1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb82ae1-d617-4713-8e9e-3a00ba95a4bd",
        "cursor": {
          "ref": "e3f8f46f-9a97-46e1-8623-3f549fd0677f",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "511ab34c-dbed-4d72-a369-89092440a518"
        },
        "item": {
          "id": "edb82ae1-d617-4713-8e9e-3a00ba95a4bd",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9d937872-6305-4057-be08-f8041678bfc4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb82ae1-d617-4713-8e9e-3a00ba95a4bd",
        "cursor": {
          "ref": "e3f8f46f-9a97-46e1-8623-3f549fd0677f",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "511ab34c-dbed-4d72-a369-89092440a518"
        },
        "item": {
          "id": "edb82ae1-d617-4713-8e9e-3a00ba95a4bd",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9d937872-6305-4057-be08-f8041678bfc4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad08395-e088-45f4-8578-a4268e73e173",
        "cursor": {
          "ref": "11080af1-f5cc-4881-b5f8-8330ba0fe752",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "40f3695b-d078-438b-a7d7-62fbb918c3aa"
        },
        "item": {
          "id": "6ad08395-e088-45f4-8578-a4268e73e173",
          "name": "identifiers"
        },
        "response": {
          "id": "c54ad083-07b4-4e03-a75d-1877abb9db6f",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149508ab-c16d-42c6-a490-69dedda85063",
        "cursor": {
          "ref": "9c65f822-fb4c-4ef2-806d-711d3f147f14",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4d57518f-f014-4132-87ca-db839f577824"
        },
        "item": {
          "id": "149508ab-c16d-42c6-a490-69dedda85063",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fa0a6dda-c570-4668-8ffa-090d66c8c3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149508ab-c16d-42c6-a490-69dedda85063",
        "cursor": {
          "ref": "9c65f822-fb4c-4ef2-806d-711d3f147f14",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4d57518f-f014-4132-87ca-db839f577824"
        },
        "item": {
          "id": "149508ab-c16d-42c6-a490-69dedda85063",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fa0a6dda-c570-4668-8ffa-090d66c8c3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4268d1b5-6fe5-4ebd-8bd3-f6378fcd522c",
        "cursor": {
          "ref": "8feb652a-2f89-4904-9ed9-39924cbddf45",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "982abb59-d6a0-4353-89c8-363f31696635"
        },
        "item": {
          "id": "4268d1b5-6fe5-4ebd-8bd3-f6378fcd522c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f1de21d8-5173-4276-9d6e-c5d5c1eeaaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81382f18-db61-4759-93f6-4c9525cb8fb3",
        "cursor": {
          "ref": "d2b8ac97-8c5f-4894-b263-907e250b7054",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a89bdccc-2e66-4bd3-95d8-d8cb8f0e4e09"
        },
        "item": {
          "id": "81382f18-db61-4759-93f6-4c9525cb8fb3",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "2849ca32-173f-40dc-b7fd-101e21ad065e",
          "status": "Created",
          "code": 201,
          "responseTime": 709,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "cbc6275d-3505-437a-88f7-5ae4030eb94b",
        "cursor": {
          "ref": "d6786fb8-63c0-4d7f-92b5-3a1ea5ed145b",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3e2824dc-c934-4c56-8061-855e175a3a07"
        },
        "item": {
          "id": "cbc6275d-3505-437a-88f7-5ae4030eb94b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7f41b77f-e812-4b87-81a1-845b4467e5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843edf50-0a45-4e49-b5b3-a9c857b0d6ae",
        "cursor": {
          "ref": "8483daaf-7260-418d-91a0-331ac94b1574",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0cccb610-bcd2-4db1-9b22-85c353dfecd5"
        },
        "item": {
          "id": "843edf50-0a45-4e49-b5b3-a9c857b0d6ae",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cd61dc9d-4fd1-4982-ba38-dd1f7c3dcd66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39687f5-d0b1-4df8-b632-0031c9315016",
        "cursor": {
          "ref": "33909f97-e1bf-4e8f-aef2-acf9f7c1d5f2",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b20f0223-cdab-4d01-a6cc-9d8a40769040"
        },
        "item": {
          "id": "f39687f5-d0b1-4df8-b632-0031c9315016",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a8ed7e93-fc7a-4d1c-8fc0-2457a676ff39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c19d28-f14f-41aa-8c7c-2b133c429e44",
        "cursor": {
          "ref": "3a6a405b-98b0-4938-9da0-3ef1d09ab3f6",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2cba83df-a4ec-411d-bc8d-7fd01fcdd750"
        },
        "item": {
          "id": "67c19d28-f14f-41aa-8c7c-2b133c429e44",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ccc7863f-2fb4-44f2-a337-27b2faabd52a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05699f04-cb2c-49be-8b18-5f5873dee420",
        "cursor": {
          "ref": "2084968d-ae55-4eaf-be00-3d724f7ffcf9",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cb5be4cf-4ca5-4012-b2a2-54e21117ad8f"
        },
        "item": {
          "id": "05699f04-cb2c-49be-8b18-5f5873dee420",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a6f27640-9576-4600-a8f6-c3e9c105c78c",
          "status": "Created",
          "code": 201,
          "responseTime": 564,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "48b492f9-968e-4710-aa4d-ea196fadc09c",
        "cursor": {
          "ref": "e12e8a92-1f8e-478d-a368-d21c2421923a",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "18c1fe0c-f5bc-4763-8271-5bcec2576479"
        },
        "item": {
          "id": "48b492f9-968e-4710-aa4d-ea196fadc09c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c8728a32-d711-4efe-b41a-17150854896e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d29144-7f5a-4424-9347-91d6320005cf",
        "cursor": {
          "ref": "52c5b508-5e3c-4e90-a2cf-6ec8087d1866",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0f4d315b-720a-45e0-b406-0ee1383bd507"
        },
        "item": {
          "id": "c4d29144-7f5a-4424-9347-91d6320005cf",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "94263285-317e-4f9d-a6c4-eaf1f3c90e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8818362d-1edc-482b-b3bf-1c9675172db6",
        "cursor": {
          "ref": "dab51f76-03e8-4c09-abff-31a880450559",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "286a5d04-b32d-4d0c-9952-30177ca7c21a"
        },
        "item": {
          "id": "8818362d-1edc-482b-b3bf-1c9675172db6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5f1c7175-5f4c-458d-b022-e180642c7f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d37cb6-6da8-4db8-a5fb-c48eac538db9",
        "cursor": {
          "ref": "7fb7c068-ea7c-417f-8bb5-552c7a9d3b01",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3efaa704-7752-4bdc-bd1a-2273e239d941"
        },
        "item": {
          "id": "44d37cb6-6da8-4db8-a5fb-c48eac538db9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "77704acf-8dea-4fc8-8bf4-020d85ec997c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cdecd6-76ed-437c-8984-332a9e29d6b0",
        "cursor": {
          "ref": "13c96a89-364d-44fa-9741-286bfae08ddd",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "72ed9657-c69c-4595-b87c-bdd8d00898af"
        },
        "item": {
          "id": "b1cdecd6-76ed-437c-8984-332a9e29d6b0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b4effbd3-b249-463d-85da-aa2a555ade12",
          "status": "Created",
          "code": 201,
          "responseTime": 561,
          "responseSize": 735
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "503cf402-f6d7-4fec-81fd-9422446a9947",
        "cursor": {
          "ref": "0753fe25-e8a3-4748-92a9-1f5382f9495b",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "247291f7-fca0-4f00-9c8d-93e225698a77"
        },
        "item": {
          "id": "503cf402-f6d7-4fec-81fd-9422446a9947",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "8709a31c-33b3-4409-b030-756ebaebb125",
          "status": "Created",
          "code": 201,
          "responseTime": 934,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "00c949b9-ebd9-4619-9758-e95c596a78ff",
        "cursor": {
          "ref": "4835830b-059b-4ef2-afaf-3a3af3cde90c",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c7be6367-3b9c-4af1-8f3b-751dcc325256"
        },
        "item": {
          "id": "00c949b9-ebd9-4619-9758-e95c596a78ff",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "30254868-076c-48fd-8379-9b0e2cfb843e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81add414-c44f-4dbf-859a-2282094172f3",
        "cursor": {
          "ref": "bed539f4-45b1-4e23-bca5-100ac0c2f5ad",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8ad98a4f-5696-4d4c-932c-98d0b481b5fa"
        },
        "item": {
          "id": "81add414-c44f-4dbf-859a-2282094172f3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6e34e0a3-067a-4aba-a1d5-9fbffec455f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7736b4-03d5-4684-8671-02a50162b224",
        "cursor": {
          "ref": "84b1aefd-e46d-4c28-a4c3-90423b74bcf8",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c7658d56-7447-4165-8f72-e761a96919b4"
        },
        "item": {
          "id": "ca7736b4-03d5-4684-8671-02a50162b224",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "033186c6-ce03-4ef9-99a2-a648892a0b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878902de-8419-422e-ba24-615716c18993",
        "cursor": {
          "ref": "5f722625-ea8f-4dc2-9c13-a1348d8ab54d",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1a045f6c-5418-47fa-9bd7-e4ecf1ad139d"
        },
        "item": {
          "id": "878902de-8419-422e-ba24-615716c18993",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "92da89af-d612-4ec0-ba55-541d11941d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1924cf-4426-4c23-a3b8-c76d484afa90",
        "cursor": {
          "ref": "2acafa7f-eab7-4a55-b32c-65e8e5784309",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f066a315-f76c-41e9-9539-f8e8665ddda2"
        },
        "item": {
          "id": "4d1924cf-4426-4c23-a3b8-c76d484afa90",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8ae8060d-ac0f-4607-960c-57f9cb1cc2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379d753c-56d2-4ad4-b4b7-54df4879f658",
        "cursor": {
          "ref": "02350407-1e87-4280-af79-2c926e8f254d",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cd83be0e-21b1-4811-9f11-30b28c13b1e5"
        },
        "item": {
          "id": "379d753c-56d2-4ad4-b4b7-54df4879f658",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9fc80ba8-c4b1-4168-bc2c-7c9cb9ac583a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5380ddf1-7096-47cc-b005-d2d5e669b79c",
        "cursor": {
          "ref": "9d7ad9f1-d060-47bf-8c03-5f5b6b8b89d9",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9be1163d-4933-4a56-9622-9afd839d7451"
        },
        "item": {
          "id": "5380ddf1-7096-47cc-b005-d2d5e669b79c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6c5eb65b-32ad-495b-b262-d1f7d906509e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3297c579-d08c-48a5-9dac-274dbd05bf07",
        "cursor": {
          "ref": "04e89928-41e6-4899-aee2-63557dc7909e",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0fe4302f-9a21-40d7-a66f-ff9f162c80d3"
        },
        "item": {
          "id": "3297c579-d08c-48a5-9dac-274dbd05bf07",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "207ffc34-8965-441d-a2f4-2778ada57693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5d62b7-b72e-4154-ba2a-59c5413566b8",
        "cursor": {
          "ref": "581cc555-4b39-4416-9e5b-187e6ab836d1",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "850d6660-4e1c-4a84-a80b-637619c68246"
        },
        "item": {
          "id": "fb5d62b7-b72e-4154-ba2a-59c5413566b8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ba4168ec-555b-4f66-9934-d9ca6a23bf04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb32967-f42c-43e9-a9d0-82de4e8d5462",
        "cursor": {
          "ref": "fb3f96d0-5094-4e3f-a25f-e257a8146798",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "18def01c-641b-4e47-86b3-b87a0b28a20b"
        },
        "item": {
          "id": "edb32967-f42c-43e9-a9d0-82de4e8d5462",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e330e2a9-7c2a-48a8-a44f-bec4d9027cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c22ef0-a114-4b62-8952-e9c4adb24054",
        "cursor": {
          "ref": "0250ec40-4e93-4fba-b7ff-7d7f0d2478ed",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "007cb0ce-2a4e-4655-99cc-a2068aa5224d"
        },
        "item": {
          "id": "92c22ef0-a114-4b62-8952-e9c4adb24054",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "49f532c6-f285-4834-a79b-a1f3cb0dc872",
          "status": "Created",
          "code": 201,
          "responseTime": 702,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "78292787-aa2f-4ac1-8f5b-8f510bb8f0fc",
        "cursor": {
          "ref": "1cfd5f3c-6b64-419b-adbb-a3ef42be6ce0",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "94973ef6-446f-4f07-bfec-93e8e16e36c6"
        },
        "item": {
          "id": "78292787-aa2f-4ac1-8f5b-8f510bb8f0fc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cba787b3-4aab-4d7c-8df1-74352b3e37f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cce2daa-b1d8-4d15-8c59-68089aec8274",
        "cursor": {
          "ref": "94cfe880-75b2-4b0c-b56b-272782ba70c7",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "188db4ed-f366-41ed-b6e5-aaa2e463303c"
        },
        "item": {
          "id": "2cce2daa-b1d8-4d15-8c59-68089aec8274",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1e0ff271-f7e5-4f41-88e6-9dafb6de3a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b6ad3d-ca88-42a9-9d9d-9898cd235e91",
        "cursor": {
          "ref": "29ae60af-a544-4dfb-8782-2915e3e35e60",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a10207b2-6281-47c4-bba9-cabb24ba845c"
        },
        "item": {
          "id": "25b6ad3d-ca88-42a9-9d9d-9898cd235e91",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e0ca3c88-d185-48aa-9142-99f4cfbdd78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb099611-d661-4047-afd3-37f88900471b",
        "cursor": {
          "ref": "83a38dad-37c7-4572-b324-44e1991107bd",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "12e5b59a-7ecd-4397-8753-52e1139d6a2a"
        },
        "item": {
          "id": "bb099611-d661-4047-afd3-37f88900471b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8dde080b-2b2e-40ce-9374-073f55729276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576446be-d33c-4df1-8ce9-514c9a3adad1",
        "cursor": {
          "ref": "4f1baca9-f2ac-44c6-af8b-455935abc0a4",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c466f274-ce8a-42f7-a14e-a3b61169c1a9"
        },
        "item": {
          "id": "576446be-d33c-4df1-8ce9-514c9a3adad1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5ab390ac-550c-4b4b-8071-1bccc0a37b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ace750-30f7-40bd-afbd-3022ad2d3540",
        "cursor": {
          "ref": "e9bcd046-5989-46ec-8251-c6133c020fb6",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4c60c322-a4c6-408e-8546-8a311ddc95a3"
        },
        "item": {
          "id": "97ace750-30f7-40bd-afbd-3022ad2d3540",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bcbd4c36-1787-46fb-b65e-1ccaa54dfad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c300099f-acb7-489f-a3d7-e31243f83e9a",
        "cursor": {
          "ref": "0f38f54a-e498-4d19-a5e5-a1dae07bc835",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b79195dd-dde1-40d0-bfa1-4a68e56e4b82"
        },
        "item": {
          "id": "c300099f-acb7-489f-a3d7-e31243f83e9a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d4b4d3c5-3cfe-4e5b-ac66-17bdd449a461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e343d44-73d4-45a0-9120-2707bf7cd251",
        "cursor": {
          "ref": "e2170b24-8f3e-419b-84a4-93fe1a760995",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1845e506-4bb2-4635-b031-b9d9f135ca97"
        },
        "item": {
          "id": "5e343d44-73d4-45a0-9120-2707bf7cd251",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e2319a7f-b78d-481f-be13-c317697afb3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3153915e-6b87-4deb-8ce3-2024d7d3f776",
        "cursor": {
          "ref": "91b39eb5-799e-4bb0-90c0-38ca72627fb6",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7e24627a-4d92-41bd-a717-3beb36d53631"
        },
        "item": {
          "id": "3153915e-6b87-4deb-8ce3-2024d7d3f776",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a17ffffb-d159-4762-b4a6-c7d805b1f676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0905f155-6e92-484d-8114-3ac681045f2e",
        "cursor": {
          "ref": "70c37efc-3212-4042-b6e5-842d0a27d1e9",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2c21bed0-a184-4599-b087-42accf7fa20b"
        },
        "item": {
          "id": "0905f155-6e92-484d-8114-3ac681045f2e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "082ef6dd-5108-44bf-9605-362388047957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08902211-89d5-4fd5-af7b-e33833c78d66",
        "cursor": {
          "ref": "e2ad30f7-15ef-4508-be44-65620c5c5e55",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "21da9aaa-d7e3-41dc-bfab-364ac1a0d7b4"
        },
        "item": {
          "id": "08902211-89d5-4fd5-af7b-e33833c78d66",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "169c774b-a3aa-4c4f-8ec5-6087b8711fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382c806a-11d7-4e4b-b468-4780a9aa9505",
        "cursor": {
          "ref": "b0d65116-d3fe-42b4-beb9-8ee46b694268",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c238b34a-b9fe-4f7e-9bcb-9ad77fc333b6"
        },
        "item": {
          "id": "382c806a-11d7-4e4b-b468-4780a9aa9505",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d5a750d4-e0de-499c-b07a-2b12fc2ccf91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2dd05ee-02f8-4cf6-b424-2ad7a6d93683",
        "cursor": {
          "ref": "797aaad5-c79d-4604-9d4f-988e46caed4c",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "09349211-1b1d-4168-9679-e4c9e3c733f8"
        },
        "item": {
          "id": "e2dd05ee-02f8-4cf6-b424-2ad7a6d93683",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ba576817-d2b1-4c91-ab3a-c555116079d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 380,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2a376405-61b2-4864-a8ea-811b17ad4f71",
        "cursor": {
          "ref": "bb3f6758-555a-4770-b60c-e5f149cc7037",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "960c9177-3506-4143-b4cb-f69451f0bf29"
        },
        "item": {
          "id": "2a376405-61b2-4864-a8ea-811b17ad4f71",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7c4289c5-2791-432e-a565-a50325cd50dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd45f388-9285-4b74-a87b-dde54cdaf6ca",
        "cursor": {
          "ref": "289031fa-be88-4060-b07c-43106f8ea970",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6dcfa95e-0506-4ca1-8a0b-2cf6b044b577"
        },
        "item": {
          "id": "fd45f388-9285-4b74-a87b-dde54cdaf6ca",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "459df3aa-1e27-40d5-aa30-8ca58bb9fda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c403253-5969-44d5-a787-7e878b100d9e",
        "cursor": {
          "ref": "435f1572-883d-46c4-8866-050ca86c124f",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9a455e20-f67d-452f-8992-136d59be9728"
        },
        "item": {
          "id": "6c403253-5969-44d5-a787-7e878b100d9e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1fedc756-d050-4468-9942-8550ae2d5f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f116628b-61e5-43ab-9c9d-de83747413ea",
        "cursor": {
          "ref": "922254e9-c826-4024-96cc-7e3136f79737",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "900b18dd-6d1b-416d-be57-83ad92c6cc04"
        },
        "item": {
          "id": "f116628b-61e5-43ab-9c9d-de83747413ea",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "471674cd-b199-4a35-b4a0-f8d469999177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e52d9c-0146-4e5b-96ab-978b3056ead9",
        "cursor": {
          "ref": "894fe889-2e19-427b-81d5-1da23ce03f0e",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cc850369-9bc4-443e-83b9-673582149027"
        },
        "item": {
          "id": "47e52d9c-0146-4e5b-96ab-978b3056ead9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "90814f2f-e6e8-457a-8098-709e89b5eb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4439df6-8b06-4211-ba27-a9ce7241bb50",
        "cursor": {
          "ref": "e72343ba-e4dc-42ec-a5d5-a26142d77242",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8d3ce1e7-f6e0-49ed-9632-c063187d9ac3"
        },
        "item": {
          "id": "f4439df6-8b06-4211-ba27-a9ce7241bb50",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5e56da93-c876-41f3-8c24-087b947df69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75554a48-29f7-4380-9793-95120269ba2e",
        "cursor": {
          "ref": "93ecb5ca-f2e8-495a-ae73-7d610d812190",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ca4296e0-31fc-4dd0-baf5-a1b461125b23"
        },
        "item": {
          "id": "75554a48-29f7-4380-9793-95120269ba2e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "761d820f-0a4c-48e8-9654-452a63c4b859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 389,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "50e07163-169e-49e1-b94e-4ef392aea6ca",
        "cursor": {
          "ref": "02a87aee-405b-413d-89b2-8beb1a5389f1",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "eb959129-07f3-4319-a02d-7dfc0f4f03d1"
        },
        "item": {
          "id": "50e07163-169e-49e1-b94e-4ef392aea6ca",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "db416883-0119-45d7-aa38-0c0f9616bc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec4e005-889e-4042-a23c-bd5d739207a2",
        "cursor": {
          "ref": "e3479b2a-8149-4578-8a34-27d340f85bae",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8c79e84f-4d98-4aea-a468-f2007ebf916a"
        },
        "item": {
          "id": "8ec4e005-889e-4042-a23c-bd5d739207a2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "18f824a8-120b-4ffe-935b-21c6afb0a2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c945fe08-6a8a-4ad1-b219-c94d8a465563",
        "cursor": {
          "ref": "0001c70b-585f-49c8-9709-019fbe0357c9",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "20c91815-0e99-450c-8c98-6a5d2ca05eae"
        },
        "item": {
          "id": "c945fe08-6a8a-4ad1-b219-c94d8a465563",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1e3b6f1e-6219-4a45-b9f7-9e88f00571da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbde3ec-6206-426f-a6fb-558a0e877656",
        "cursor": {
          "ref": "c7f32ff4-6ce4-4bce-9a29-2382b350c496",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b181adcb-d801-4aff-96e2-b59e39dc1b01"
        },
        "item": {
          "id": "3bbde3ec-6206-426f-a6fb-558a0e877656",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c0dc8f5a-7fab-4062-90b9-179084033631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00326597-719b-4f28-a94b-b7e3889ea0d3",
        "cursor": {
          "ref": "b1d15e0e-838e-4aa4-9549-690ca06e8093",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d5b1dbd1-1b0e-4777-83bb-5c9f793049df"
        },
        "item": {
          "id": "00326597-719b-4f28-a94b-b7e3889ea0d3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "08bf4998-b2a7-46d6-b581-01199e5fda64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4ac82d-0610-49a0-b25e-0375c26077ad",
        "cursor": {
          "ref": "b369dde8-6d23-4248-803c-47006345e863",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f4fc29d2-2a14-45f3-8ad9-6f2de41f8bf3"
        },
        "item": {
          "id": "9f4ac82d-0610-49a0-b25e-0375c26077ad",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "20a7b919-bf8a-449f-81d0-5dbc365cd566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b270f5-f03c-4d7d-b971-008e62994228",
        "cursor": {
          "ref": "c80d0d78-4fbb-49c8-94ae-898d34716581",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1010bfb0-8e44-4378-a2d0-42ed7ae020ab"
        },
        "item": {
          "id": "f2b270f5-f03c-4d7d-b971-008e62994228",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "617dcadb-fbf1-46ea-a3db-28f912c6c2f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07a39d2-660e-436f-b4f0-f35c27f92c3f",
        "cursor": {
          "ref": "d4569107-80d5-40d5-88c1-febe98b6047c",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ea106bd6-5437-45ec-99a2-c809cae22f63"
        },
        "item": {
          "id": "b07a39d2-660e-436f-b4f0-f35c27f92c3f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "394a424b-44f6-4bd1-b930-899f36ec6e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81baee65-12fc-4596-aafb-de987630eedd",
        "cursor": {
          "ref": "57a34ae8-c295-45ad-aca0-02c88c65e9af",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3c4426af-9759-4485-83e0-5eb362da6648"
        },
        "item": {
          "id": "81baee65-12fc-4596-aafb-de987630eedd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7fee9844-8a36-4c3b-9845-29fa437e6487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083c4169-e519-46aa-b3f8-2828c0af5bb6",
        "cursor": {
          "ref": "f3f3a667-b5b0-45a7-bfef-0a442ec0ee16",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ec53c907-f413-4ef3-a271-0d5efa4f83f8"
        },
        "item": {
          "id": "083c4169-e519-46aa-b3f8-2828c0af5bb6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "88b42527-86cb-4d66-9680-a180d5cc5d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7dd62c6-60eb-4455-8cb5-556a110fb252",
        "cursor": {
          "ref": "30c23925-7aa2-4071-a8c2-93c00c8d7f15",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "29d09bef-a196-46f3-9d28-f577093dc0fd"
        },
        "item": {
          "id": "c7dd62c6-60eb-4455-8cb5-556a110fb252",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3bc93fe6-6fd7-4a0c-be0d-0c5add7b273c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa879a1-6f8b-4e51-a970-e69e325a45c5",
        "cursor": {
          "ref": "41c353c9-073b-41f9-9729-98af6b37e624",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4b63f49c-60fa-40be-8b7c-6575d168e9d1"
        },
        "item": {
          "id": "daa879a1-6f8b-4e51-a970-e69e325a45c5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6e6f295c-a11e-41ee-a8de-28f83b5e4caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360dd559-30a7-456c-ba18-e5cde250a54d",
        "cursor": {
          "ref": "389f0fb8-a869-4162-b3cb-bab93ce9d866",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f2899096-f572-48b4-83be-12765c61644a"
        },
        "item": {
          "id": "360dd559-30a7-456c-ba18-e5cde250a54d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "83c12629-9c68-406c-9c40-cdf2c488004b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f8d26c-5556-4630-86f3-7c61618b40ac",
        "cursor": {
          "ref": "8bf4fdf7-08d5-4e47-9cfe-6a51aaca6638",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7d4190ba-be6e-477c-8c53-5655cab058c7"
        },
        "item": {
          "id": "38f8d26c-5556-4630-86f3-7c61618b40ac",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "edfc3aad-ef79-46ae-9dfa-e2e667abf86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9022e08e-3bdd-41b1-9d59-581a333a3f23",
        "cursor": {
          "ref": "c804faed-b99e-44e7-aef7-1d62d24deafe",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b4a3d6bc-f169-4f7a-b3a8-766e1951df53"
        },
        "item": {
          "id": "9022e08e-3bdd-41b1-9d59-581a333a3f23",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9b11d495-8692-461a-9ed4-8b9076b07104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbeb817a-6e8c-45bc-98b9-cbbd4eb2424d",
        "cursor": {
          "ref": "28458112-3527-40e6-86cd-e927b54a7cde",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1fd391fb-34b3-4bcf-98ca-4b315d0fedd7"
        },
        "item": {
          "id": "fbeb817a-6e8c-45bc-98b9-cbbd4eb2424d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c1b33dd2-9da1-4f03-9a7b-8398e00efd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe07a984-bbef-4859-907f-37747942faa6",
        "cursor": {
          "ref": "bf9a0859-2bd2-4c89-8597-90793accee87",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f939acfe-372c-470a-854f-b297891237eb"
        },
        "item": {
          "id": "fe07a984-bbef-4859-907f-37747942faa6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5b7df63c-6dc9-4292-af6d-fe6c25a72c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b770d47f-5d66-4c5a-8148-17e74128a350",
        "cursor": {
          "ref": "3f6ce706-dcc5-48f5-ab71-65146882f6b8",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b17b7d00-f8b2-471a-890c-18d53ec2f034"
        },
        "item": {
          "id": "b770d47f-5d66-4c5a-8148-17e74128a350",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c14cd3cc-7158-4838-82aa-09a921c0b45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7102f9bf-26f2-4b27-9a93-dc5f32bd1631",
        "cursor": {
          "ref": "a8bfd6fd-f4df-44a6-bb37-67b9951a69d6",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6b268f99-a9fb-472e-aabd-f283f66ad1bc"
        },
        "item": {
          "id": "7102f9bf-26f2-4b27-9a93-dc5f32bd1631",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1bfec817-bb6a-4445-b120-cb65259088f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178a8004-591f-4192-9b16-bc6408790216",
        "cursor": {
          "ref": "471b5c68-a6e3-49c1-857f-2abc40404482",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f4ec3ad8-4a20-4679-8455-1a5d4f79a574"
        },
        "item": {
          "id": "178a8004-591f-4192-9b16-bc6408790216",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "afc80958-9741-4448-b74c-ff243b67988a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcb8bc1-6918-44e1-9682-e8d53fb4a871",
        "cursor": {
          "ref": "303f7930-eea8-439d-8f36-bf623f150515",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bd5f4d5c-d91d-4427-946e-bd1c3ad8bab4"
        },
        "item": {
          "id": "9fcb8bc1-6918-44e1-9682-e8d53fb4a871",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ca8ea5c1-a904-48ef-aa14-a54d7774e066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19bdb4a1-5539-4aeb-8ad2-3a73a9f8e7a9",
        "cursor": {
          "ref": "dbe84744-f939-4156-b71f-7462c00201ff",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "775c0ba4-d1db-416f-a055-f9f1e4f64ab5"
        },
        "item": {
          "id": "19bdb4a1-5539-4aeb-8ad2-3a73a9f8e7a9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9b6c5ace-2470-4fab-82ac-341383b99e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e151c6e-a305-46f6-a184-0a0033509111",
        "cursor": {
          "ref": "731543af-c26e-4cec-b378-d1f4243fa5bd",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b1fedb9c-92c5-4886-b8d3-abc2b245a98a"
        },
        "item": {
          "id": "6e151c6e-a305-46f6-a184-0a0033509111",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "83e9fe7a-ba81-42d9-92d8-5b7442ca44cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6651d31-d880-4867-ad89-784bee18c2a6",
        "cursor": {
          "ref": "531327c6-8955-49f2-85eb-8ff861993371",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "715d40dc-b397-40c4-92c9-d59a15afd872"
        },
        "item": {
          "id": "d6651d31-d880-4867-ad89-784bee18c2a6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "913743c8-18ab-4f12-97fb-de538a9bec23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc973a7b-daad-4414-aef8-02fd96370755",
        "cursor": {
          "ref": "34d86b37-7a03-4e2e-9f9f-98eab0a8a5d1",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a693c40f-94f3-440e-b766-a35126c668f5"
        },
        "item": {
          "id": "cc973a7b-daad-4414-aef8-02fd96370755",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1648e765-9705-4326-b298-d06ac8ce6b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559a7b83-3c3a-4aa6-9e30-28757352b9b5",
        "cursor": {
          "ref": "2ef3e116-fcae-409d-b535-2b37c4af320c",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "58e74b09-30fc-4b13-9807-5cdb84684994"
        },
        "item": {
          "id": "559a7b83-3c3a-4aa6-9e30-28757352b9b5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f6a5c96a-face-4f07-98f3-ef747e9b9372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9566a3bc-eb23-41b3-a0c8-e19c84117c1e",
        "cursor": {
          "ref": "86f01ce4-6f46-41d5-9ca6-3e1ca62f7daa",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "425b19e8-ba44-42f2-8253-a00bd7f0a1ca"
        },
        "item": {
          "id": "9566a3bc-eb23-41b3-a0c8-e19c84117c1e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "cce6f505-c909-41fc-9bea-2b158dfa7db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877cdc30-6e1c-4569-a6c0-093a369b9d40",
        "cursor": {
          "ref": "8af4a24d-bb1a-48c4-ab04-108ed77f2eb2",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "42e1e246-5a8a-4562-b023-eec24917f3aa"
        },
        "item": {
          "id": "877cdc30-6e1c-4569-a6c0-093a369b9d40",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "afa8c70c-d286-4a06-84c5-fa6184b8b134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8582ea45-c8ef-4268-a0a5-ee0226a34d12",
        "cursor": {
          "ref": "1b9ed4ae-a1d9-43a2-b025-4d5b4e16abd7",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38f29e78-3b2c-43bb-8e4a-82a3c10dba64"
        },
        "item": {
          "id": "8582ea45-c8ef-4268-a0a5-ee0226a34d12",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fe99b032-8dd9-402a-b8a8-77caf69a295a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e595249-76aa-4c86-b430-5c7318aa6dc9",
        "cursor": {
          "ref": "25b72400-7528-41e3-a898-ce8fb55bc849",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "96538c02-7bbe-447e-a90a-767bae044937"
        },
        "item": {
          "id": "7e595249-76aa-4c86-b430-5c7318aa6dc9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1accde02-fb7e-40a2-8130-fbfb6317a9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e425bf-215a-4363-8301-1e090b8fcf1b",
        "cursor": {
          "ref": "a808e606-0993-4a2c-891b-99a80f97c523",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b6b43f91-1387-45b4-9582-032495ddf22c"
        },
        "item": {
          "id": "17e425bf-215a-4363-8301-1e090b8fcf1b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "da8252d2-22fc-400a-935e-f64ce2b2c4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 398,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adc7f3c-ce2f-417f-a104-7758d9978ebd",
        "cursor": {
          "ref": "77108d37-5c3d-4c85-8aec-431b3f6cdbae",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "07f1c579-f612-4037-81a7-236f7e370d75"
        },
        "item": {
          "id": "7adc7f3c-ce2f-417f-a104-7758d9978ebd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "402a47e4-bcf6-4efe-9964-41ec75f9f80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4385928e-d22e-4877-b818-b2e7364d8ef3",
        "cursor": {
          "ref": "85740a79-adb3-4b6a-8c65-4ab3dd64dd4c",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "59d1b3bb-062b-433e-8286-c1dfa3c63b58"
        },
        "item": {
          "id": "4385928e-d22e-4877-b818-b2e7364d8ef3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "113d15f9-c24a-4b27-bb14-3b8949ab3844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836a5d95-cc12-4f57-93f2-fc386599335d",
        "cursor": {
          "ref": "5f79fd1b-7bc8-483a-8986-ce7e2f9b13c8",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "56f070cf-9b75-40f0-808d-3155195c66a7"
        },
        "item": {
          "id": "836a5d95-cc12-4f57-93f2-fc386599335d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a91fd637-5655-4cda-b4dd-7f0d28179492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff0baff-644f-4d63-8448-45c5308e4f8d",
        "cursor": {
          "ref": "ea754550-65c9-4d83-a192-d6b2eb4e9d35",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "894b6e9c-fdbd-472a-8b01-1ab96af3f928"
        },
        "item": {
          "id": "bff0baff-644f-4d63-8448-45c5308e4f8d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "84572ffe-50c3-496f-accd-d1ec22f4d846",
          "status": "Created",
          "code": 201,
          "responseTime": 719,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "8b6d3aca-c791-4f1e-b8a6-b145b2420512",
        "cursor": {
          "ref": "1c65e22b-8651-4144-af1e-24061a73d1d5",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ad926005-9a60-4d9d-87ff-981fcf5ce961"
        },
        "item": {
          "id": "8b6d3aca-c791-4f1e-b8a6-b145b2420512",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f559cc96-8a88-4076-9bb7-d5f19c154ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc27b60-8027-4366-8b5e-722d4c801206",
        "cursor": {
          "ref": "2ff6ee7c-78a4-4490-a245-ced0786f6c2e",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a60e6307-b0db-430b-8f8a-9d4845dbcde6"
        },
        "item": {
          "id": "9bc27b60-8027-4366-8b5e-722d4c801206",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "35862511-feea-49c1-be29-cf2bfae6b99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3241c62c-0e86-4778-818c-61fbd75d8492",
        "cursor": {
          "ref": "5ef6e71a-78db-49a6-a44e-c91d65e3a24b",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5a880033-9854-4a9b-9ea7-55741c59c078"
        },
        "item": {
          "id": "3241c62c-0e86-4778-818c-61fbd75d8492",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "93f19992-4d0e-4f92-bc48-47c8fb1fad46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d53d15b-e0dd-4a57-9daf-70190e834be9",
        "cursor": {
          "ref": "f1655e05-aeea-461f-acf6-de48210c7d4b",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8f48b6c5-4c1a-48ad-8db1-50f11005df32"
        },
        "item": {
          "id": "7d53d15b-e0dd-4a57-9daf-70190e834be9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2d52ce2b-ae9d-44cf-ac40-03b19cfba28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66c4ccf-823e-49bc-a4bf-3b9556ee8f8f",
        "cursor": {
          "ref": "a60dc482-7753-4f75-b850-5ff697f39bfe",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ae30ff46-a58c-414e-9633-9dc51620d5af"
        },
        "item": {
          "id": "a66c4ccf-823e-49bc-a4bf-3b9556ee8f8f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d6b36836-2177-4118-841d-282411fc88bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62245b6f-595f-48c1-a7ef-09f4b4169ef3",
        "cursor": {
          "ref": "ad56e168-c7b6-40ec-a3f1-c03c4eebd4f6",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "96f180a1-641f-46cf-a09f-b74d181f9fee"
        },
        "item": {
          "id": "62245b6f-595f-48c1-a7ef-09f4b4169ef3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a51d143a-a7f3-4680-8ec2-932c78736bed",
          "status": "Created",
          "code": 201,
          "responseTime": 857,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "430293ce-5750-4e9d-9b92-13f9cc841e81",
        "cursor": {
          "ref": "4992fa7c-97ac-4436-a51b-812357cd765e",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fd8ec15e-8ec5-4d47-b820-e9652f34040b"
        },
        "item": {
          "id": "430293ce-5750-4e9d-9b92-13f9cc841e81",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9f3051f0-af6c-49c3-8e34-4c7a29b191b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466eedc8-14be-409c-8d70-dfdce5b10f2b",
        "cursor": {
          "ref": "ebc8253e-3eac-4448-886b-f0cf4157593d",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4389c31c-602b-433f-b5b9-8fb47204a062"
        },
        "item": {
          "id": "466eedc8-14be-409c-8d70-dfdce5b10f2b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9a7a7289-5ce9-4db1-948e-41f69b026903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf59ceb-0542-49a7-9823-991b03eecab1",
        "cursor": {
          "ref": "766cb833-6361-42c9-89d3-b80fd37cbc9f",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "dde2a8c3-f76f-4d10-91fa-504f8fa63b92"
        },
        "item": {
          "id": "ccf59ceb-0542-49a7-9823-991b03eecab1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "16b3ca98-dbe5-46c5-9fd4-e54c89dbcfce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61db4c3b-69f1-4b22-b6b6-fe831e3417fc",
        "cursor": {
          "ref": "fa74505a-1da8-4e68-baed-2be0f9cbb23a",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9c32d104-b061-4e0d-aab3-0c63891f4b3b"
        },
        "item": {
          "id": "61db4c3b-69f1-4b22-b6b6-fe831e3417fc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8ff06e2e-8f5a-4ca7-852d-68ab29fe2742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f35496-61c8-43b1-a3c4-5eae495999ea",
        "cursor": {
          "ref": "ceb8e9b0-82ef-4b99-8154-1ca96224e70b",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "173d1533-ac3b-444b-8e43-95f387df593d"
        },
        "item": {
          "id": "00f35496-61c8-43b1-a3c4-5eae495999ea",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4329aa48-aea9-4a4d-b07e-6fb8a61e59ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb6e7ff-04ca-4e00-be44-6bca205b8ad6",
        "cursor": {
          "ref": "0703c7a1-46cf-405b-a3f3-45349b4353d6",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a1ac57ac-e6a4-4288-8e3d-161dfa5ca96d"
        },
        "item": {
          "id": "4fb6e7ff-04ca-4e00-be44-6bca205b8ad6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "702d36d1-940a-49cf-993d-9fd4760aa019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d167a66f-0c9d-4ce7-be28-0b86bf95787c",
        "cursor": {
          "ref": "0d81fbd1-afb1-4085-bd39-1bc381f526a7",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "12610245-90d0-41f7-9d01-08ca8f97fb67"
        },
        "item": {
          "id": "d167a66f-0c9d-4ce7-be28-0b86bf95787c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5587ac88-449b-48cc-873a-c5e0bd496c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b871c753-7f12-4b9f-90b1-a5e3a9490859",
        "cursor": {
          "ref": "16964844-abe0-48fa-a0b8-b5c802537f99",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "61540f51-243c-4d47-a5fb-bfce79a68d28"
        },
        "item": {
          "id": "b871c753-7f12-4b9f-90b1-a5e3a9490859",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fb19eec2-b945-4f51-b5d0-8d2efd2114d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b90b315-e716-43ea-9376-f8c4679cd9db",
        "cursor": {
          "ref": "3249f1d8-ff70-438e-ad43-d62500019d05",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "41031230-4d83-4553-a752-44da64285547"
        },
        "item": {
          "id": "4b90b315-e716-43ea-9376-f8c4679cd9db",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e8b4ea38-94d8-40aa-a573-6a3a7a1fde54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "6c184c2c-3132-4429-989e-b34c23e79d2d",
        "cursor": {
          "ref": "00c82d29-2093-40d5-a98f-b0c5d6d84684",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9d1b6a08-ca2a-472c-b78f-ca14fdc4d555"
        },
        "item": {
          "id": "6c184c2c-3132-4429-989e-b34c23e79d2d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e393cc0b-48ad-473c-aee3-2579b0909484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "f161f807-c143-430a-9ed7-a462089e7a92",
        "cursor": {
          "ref": "b854ebc1-60af-4071-ae57-e5274776def7",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "efc197da-9573-4e6a-beae-d82e2daba11d"
        },
        "item": {
          "id": "f161f807-c143-430a-9ed7-a462089e7a92",
          "name": "credentials_issue"
        },
        "response": {
          "id": "dc029d05-ac37-4bb1-b91c-068f552b543c",
          "status": "Created",
          "code": 201,
          "responseTime": 698,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2704e9-7dc0-42be-a409-ed0581d57bd4",
        "cursor": {
          "ref": "43533f2f-2829-4ca2-b7f9-c11e057f4f19",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "daba72db-e30e-43d6-9b29-41382339b233"
        },
        "item": {
          "id": "fb2704e9-7dc0-42be-a409-ed0581d57bd4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "81aeaf3e-3ea0-48df-8861-657d3ef031da",
          "status": "Created",
          "code": 201,
          "responseTime": 682,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9996928-fe7f-48eb-b308-a83db6dff60d",
        "cursor": {
          "ref": "07e9d3a5-0ec2-422c-b08d-afa8a4550912",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e3995983-ef02-4f91-8028-4661b1b36726"
        },
        "item": {
          "id": "d9996928-fe7f-48eb-b308-a83db6dff60d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d822c011-0320-4f3b-a900-9c378ff701b2",
          "status": "Created",
          "code": 201,
          "responseTime": 691,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "239f0350-8cd0-4724-a20e-217e70e99848",
        "cursor": {
          "ref": "1cc1a053-96b2-4f6e-bbae-4166fceccfd9",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "457a99cc-da29-4001-9b38-d79a953fc651"
        },
        "item": {
          "id": "239f0350-8cd0-4724-a20e-217e70e99848",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8558200a-bf96-4250-b017-a710fda69a4c",
          "status": "Created",
          "code": 201,
          "responseTime": 679,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "a298689a-0c59-4a77-b444-a4a25ea6001f",
        "cursor": {
          "ref": "b584c36f-5594-49b8-9802-9171ead9bc9d",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a326276a-3a05-4fc5-b671-5caf01010b73"
        },
        "item": {
          "id": "a298689a-0c59-4a77-b444-a4a25ea6001f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "80bcbc1e-57f6-49bf-a0c6-40c1b112e6fe",
          "status": "Created",
          "code": 201,
          "responseTime": 716,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff4baa3-0575-4711-b4f3-262b3062a067",
        "cursor": {
          "ref": "e63e785b-4f24-4d40-a9f6-7c5e5463f8df",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fd714527-94ee-4ea9-ae67-37ba12bb26d0"
        },
        "item": {
          "id": "eff4baa3-0575-4711-b4f3-262b3062a067",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "85dd7213-4ea3-4ab6-9c5b-7b4fe2914705",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "eff4baa3-0575-4711-b4f3-262b3062a067",
        "cursor": {
          "ref": "e63e785b-4f24-4d40-a9f6-7c5e5463f8df",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fd714527-94ee-4ea9-ae67-37ba12bb26d0"
        },
        "item": {
          "id": "eff4baa3-0575-4711-b4f3-262b3062a067",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "85dd7213-4ea3-4ab6-9c5b-7b4fe2914705",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "347e5621-32bf-4ac7-8f02-9975b30534b7",
        "cursor": {
          "ref": "a154104d-e6b8-48bc-8f21-ee3f7ef0f048",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "668c6070-40d7-4310-8c44-db9e0582bbde"
        },
        "item": {
          "id": "347e5621-32bf-4ac7-8f02-9975b30534b7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fb55df62-561d-4a14-8b3d-16cf7cd62d96",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b6050639-9af0-4517-8efa-cb602cc29c29",
        "cursor": {
          "ref": "419c43e4-e9b4-4669-8103-42d6cb08500f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9280410f-f790-4905-b8bf-9fbe23d271cf"
        },
        "item": {
          "id": "b6050639-9af0-4517-8efa-cb602cc29c29",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1e08e674-dbb1-474b-865e-eb41a6e27363",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "06fd1908-c811-452d-b769-7ade5d3041a4",
        "cursor": {
          "ref": "8d4603b4-6873-4946-b31a-c3e9f76bc686",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9ab2e104-194e-4c13-80e9-925837fb6fe2"
        },
        "item": {
          "id": "06fd1908-c811-452d-b769-7ade5d3041a4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5d7324aa-afdb-4b05-a521-d9ecc7617d11",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "54ae61df-cf63-40ae-9479-c680164f566a",
        "cursor": {
          "ref": "01f5906a-af7a-4c3f-b627-eac297036321",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "febca94e-6d26-4c95-a978-2ea183ff675a"
        },
        "item": {
          "id": "54ae61df-cf63-40ae-9479-c680164f566a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dc0f4000-be6e-45e2-bd8a-f86c01141ca6",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "02fb5442-fd21-4360-bb3b-dcdb096df3b9",
        "cursor": {
          "ref": "48e95382-e236-4779-a5c2-9549deda29ee",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0931abd5-30ef-4671-98d7-72e21e6e16c9"
        },
        "item": {
          "id": "02fb5442-fd21-4360-bb3b-dcdb096df3b9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f9984aa0-0027-402e-9b02-ad551e619709",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "5571bc26-0963-43da-b01d-65ef97329a67",
        "cursor": {
          "ref": "362f1b42-a822-4be4-8c42-f0db40d5906d",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ce2f8ddd-5d48-4ea8-bf6a-a9eb335c8216"
        },
        "item": {
          "id": "5571bc26-0963-43da-b01d-65ef97329a67",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "889a0e1c-81ec-4b5f-b969-b8e3a2860bb9",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e2cf2398-b592-4cfe-8da0-6a5868fbaf60",
        "cursor": {
          "ref": "fb5c761e-b3ce-4a87-b869-5cb2734c4a5d",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8f01bcc6-ef91-4739-9b30-eca9e3be8c93"
        },
        "item": {
          "id": "e2cf2398-b592-4cfe-8da0-6a5868fbaf60",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1a6af85e-bd1b-4dff-bfdb-3e93fe72106c",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "3738391b-a6fd-4472-b216-feb74a6a5b59",
        "cursor": {
          "ref": "f592f5ef-3936-40b6-98e7-c3da86029bf7",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "59c8ca2e-f48f-4a7c-b15d-60d6e4292500"
        },
        "item": {
          "id": "3738391b-a6fd-4472-b216-feb74a6a5b59",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1a11d1ba-5b03-435b-a491-40a682a5efe4",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "13fb8910-25b0-4c83-b1cd-d9904e703889",
        "cursor": {
          "ref": "a0fee4b9-3f56-403a-881a-9c79c7f45cd4",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "933f11eb-ed79-4dd9-b908-a53b3cfbfcba"
        },
        "item": {
          "id": "13fb8910-25b0-4c83-b1cd-d9904e703889",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e1747de7-4d6b-458b-adc2-5d5e74b88eee",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "21465f94-dd14-4270-a18d-0fd294816d02",
        "cursor": {
          "ref": "7a76192f-9392-4fcd-8e78-9f18cb5be121",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ea0641f1-59e6-47c0-bd0b-51a83c399d18"
        },
        "item": {
          "id": "21465f94-dd14-4270-a18d-0fd294816d02",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6dbe2648-e1f4-467d-9e66-3590380b8e2a",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ddc71fb1-330a-40c7-9ec5-d1f6a04c322e",
        "cursor": {
          "ref": "a1033ebc-2307-4aac-82ee-705a05c22b20",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8f12577f-7699-43e0-8c79-17c86a70d7f9"
        },
        "item": {
          "id": "ddc71fb1-330a-40c7-9ec5-d1f6a04c322e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5bef571b-525a-4f2b-ac38-f8b824798f16",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "15e3dfb9-9475-4933-84d6-312b3faeeb5f",
        "cursor": {
          "ref": "bd5606b6-824c-4bcf-a3d3-29507e686944",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f2f5e2a6-99cd-4a11-91a8-e97c77e85990"
        },
        "item": {
          "id": "15e3dfb9-9475-4933-84d6-312b3faeeb5f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a98fa41c-5558-4b33-b8f0-fe2a81617d08",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "78bc1818-f3e3-4808-821b-ab1e129f915d",
        "cursor": {
          "ref": "2861feaa-d695-4e9c-a93b-5a1a22d9bfa1",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fe7ac01c-940b-4421-8785-51456cc85632"
        },
        "item": {
          "id": "78bc1818-f3e3-4808-821b-ab1e129f915d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5af66f70-04f4-40b4-9dff-7d7c526dcd5b",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "6fa78298-acdb-4709-a657-ccd360a88914",
        "cursor": {
          "ref": "b64ec98d-3544-4f29-a912-e0b25a08bf09",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "300e93f8-e90a-4a61-9552-9bf7f585f2f6"
        },
        "item": {
          "id": "6fa78298-acdb-4709-a657-ccd360a88914",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5a746764-f104-4b07-9169-db749f0f9e99",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "09794eb3-e991-4d00-a295-dd9652f6ab9c",
        "cursor": {
          "ref": "bd2138a5-c48b-41c0-9021-c84dfc74e3ea",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "79433288-7cf9-4023-a446-1b15d9b3b55e"
        },
        "item": {
          "id": "09794eb3-e991-4d00-a295-dd9652f6ab9c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2d696f42-f71b-45e9-bd8e-1c7798908221",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "900a806a-2355-4404-a66f-733794f3c6b0",
        "cursor": {
          "ref": "d092dfbf-578c-4652-82f8-48ef01e6922b",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fbaa16d4-2526-490e-bda0-c7e2813d0f00"
        },
        "item": {
          "id": "900a806a-2355-4404-a66f-733794f3c6b0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f2ce1738-84ff-4dd2-8d41-ea1f9e9f4f57",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "7f9a00e6-4c1e-4b30-95bb-dfd3fb7aa357",
        "cursor": {
          "ref": "aec0e6d1-3cf7-4ce6-9f5d-33c801104f64",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2260c42b-918e-4874-94ed-5daf526dbfb9"
        },
        "item": {
          "id": "7f9a00e6-4c1e-4b30-95bb-dfd3fb7aa357",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a20a4106-df9a-4082-85db-df1fdf6466c4",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "ad3372cc-55c6-469e-b62a-684d3038da4f",
        "cursor": {
          "ref": "81593f4b-ec4b-4d16-bffa-03b8208835fb",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "73f5aaf2-78b1-4d41-bdaa-23907e543195"
        },
        "item": {
          "id": "ad3372cc-55c6-469e-b62a-684d3038da4f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2228f6f7-9275-43db-8767-3092c690d4e8",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "d6664347-7f25-4c25-8e60-027e62c3b426",
        "cursor": {
          "ref": "d5224138-fbbc-4e38-8935-e3bd5f01d4ca",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e8b41ff0-a232-4ed8-8ef3-045bd949c78a"
        },
        "item": {
          "id": "d6664347-7f25-4c25-8e60-027e62c3b426",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cb814560-589e-43d9-baae-304f9bb058f1",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f01363c3-529f-44aa-b8d7-4516710a6de2",
        "cursor": {
          "ref": "1dfb6c8c-4c2f-49bd-84c0-5317b4f02623",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "799e3c53-7388-40a1-b1da-78d29c3e323b"
        },
        "item": {
          "id": "f01363c3-529f-44aa-b8d7-4516710a6de2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f7847f8f-a670-44ce-9b50-f627498df3b7",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "34d539fb-8306-4982-b680-d50d36810b22",
        "cursor": {
          "ref": "4a9875bf-4c61-4cc6-9126-a48b1ca1ac26",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6d19b6ad-4a7e-49c1-962d-aebcb1f8e137"
        },
        "item": {
          "id": "34d539fb-8306-4982-b680-d50d36810b22",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e0022578-a954-4c22-86fb-8976d57cc083",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "76aa112e-a748-46d5-b096-429fc82c85a1",
        "cursor": {
          "ref": "987f908f-e041-47f2-a42f-7217b62fce73",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5c82bda6-3101-4c7d-a21c-ffd4820a19aa"
        },
        "item": {
          "id": "76aa112e-a748-46d5-b096-429fc82c85a1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "aee096d1-f247-49f7-9141-622e36c5bc0f",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "0968da68-fa82-4902-b812-b40fbce201de",
        "cursor": {
          "ref": "138d5430-aca5-4792-90c9-7622725a987c",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "83c6984e-90b0-4fad-897a-8769c8d2becf"
        },
        "item": {
          "id": "0968da68-fa82-4902-b812-b40fbce201de",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c23a67b3-f30d-456a-b20b-c9e36b402ba3",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "f25a3ce9-d0bb-4a81-b9f0-8f57a5d17a52",
        "cursor": {
          "ref": "d65732ab-6178-4c5e-a655-8a419138f494",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b1040032-b74b-4e11-b788-f3a8123e4914"
        },
        "item": {
          "id": "f25a3ce9-d0bb-4a81-b9f0-8f57a5d17a52",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2702f187-107d-4d2e-9058-4c9ba2efb9f1",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "befcd547-391d-4ba8-83da-c3ec57ab82f5",
        "cursor": {
          "ref": "67fe0691-a618-44cb-b2dd-a46998a9518d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9f80ed5d-8cb0-4c6b-8dc0-c428ceb9a19d"
        },
        "item": {
          "id": "befcd547-391d-4ba8-83da-c3ec57ab82f5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cc69385b-48dd-46e2-b4f3-a84bcbc6df89",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "fef31a17-b4cf-4c8c-b354-7d40f29acf45",
        "cursor": {
          "ref": "a80a24c7-ad75-4e98-94fa-c0d29cd495a1",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "16cc389c-2fa3-4a50-9524-fff771893ca4"
        },
        "item": {
          "id": "fef31a17-b4cf-4c8c-b354-7d40f29acf45",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "276d76e4-befa-41f3-8e5f-6eea58fb523a",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "45307b06-4dc3-47d7-b40a-edf18e849117",
        "cursor": {
          "ref": "1478170e-60b0-4d41-b455-ec12e752b172",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "59dc26d0-1fed-4199-9ac4-be723348c5f5"
        },
        "item": {
          "id": "45307b06-4dc3-47d7-b40a-edf18e849117",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1257427b-fc74-42b8-9c03-4bc240aa7571",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "69027d21-bc34-4407-a85f-f2193ee6c6de",
        "cursor": {
          "ref": "a28ae027-894c-4b84-be17-827570bfbbbd",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e014a7ae-8352-41d1-ae8d-6eb93f269d93"
        },
        "item": {
          "id": "69027d21-bc34-4407-a85f-f2193ee6c6de",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a541fdb1-0170-44cb-b9cd-d60313bb4967",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "97d91203-9eec-4e2b-bd01-3d828f144ebd",
        "cursor": {
          "ref": "25c6f5af-689c-4c11-94a1-b1527038f88a",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2af3f90b-60c1-409f-971e-d7628d06015a"
        },
        "item": {
          "id": "97d91203-9eec-4e2b-bd01-3d828f144ebd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ee260076-8b5c-437f-bf42-d4b32021a4cf",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d3e3de15-b274-4697-b7c7-2a1fa7ca1821",
        "cursor": {
          "ref": "5a4082e5-56cb-43a3-b9cf-a82c151f51ae",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "350a5c0e-ef05-43a3-9fb5-0e2a3060eeb5"
        },
        "item": {
          "id": "d3e3de15-b274-4697-b7c7-2a1fa7ca1821",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bc86242e-69ad-4717-81ec-9f939a72785e",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d5ff7bd4-786f-4adf-93eb-168b02dcc680",
        "cursor": {
          "ref": "336c0edd-595e-46ad-bd9f-f045ccec6d6b",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4fc3e82a-a375-47e8-b3d6-21830e239c8b"
        },
        "item": {
          "id": "d5ff7bd4-786f-4adf-93eb-168b02dcc680",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a9db4ed8-9e1c-4150-8ce1-6bc00a98b83a",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "528d5ac2-1cec-4da0-990d-39d183f74e96",
        "cursor": {
          "ref": "e7f65f73-4e76-47a9-9233-bb3d447e7b8a",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6ed95e3b-df61-40fd-b6ad-16c3a13cf95f"
        },
        "item": {
          "id": "528d5ac2-1cec-4da0-990d-39d183f74e96",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "11889085-a1dd-4b0c-82f0-4762d9c8d999",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efaa4f3-602a-41d9-964d-44bd407fe6af",
        "cursor": {
          "ref": "20c0b4ee-58e2-46c4-9198-329648c9dd51",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b6f40195-a131-4b14-ae29-245331f9a72a"
        },
        "item": {
          "id": "5efaa4f3-602a-41d9-964d-44bd407fe6af",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3ee3687e-27fe-4963-bbf2-1cdf51cc84fa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a1870f-ae90-4e9c-87a1-48719915fb3a",
        "cursor": {
          "ref": "7ff90ef7-49b4-4158-b912-c4c750fa82bc",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6338429d-3c5f-47ae-8712-39ec2b163a51"
        },
        "item": {
          "id": "e7a1870f-ae90-4e9c-87a1-48719915fb3a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9ecfe188-e31d-4c58-bd3b-dbb469fb0bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a1870f-ae90-4e9c-87a1-48719915fb3a",
        "cursor": {
          "ref": "7ff90ef7-49b4-4158-b912-c4c750fa82bc",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6338429d-3c5f-47ae-8712-39ec2b163a51"
        },
        "item": {
          "id": "e7a1870f-ae90-4e9c-87a1-48719915fb3a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9ecfe188-e31d-4c58-bd3b-dbb469fb0bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bde1bdf-0dc3-477d-a604-25c1fd0eed31",
        "cursor": {
          "ref": "9313eb3a-2dd5-41a5-9214-91c4aa3785f1",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b35047ad-e157-4dee-8493-c41f7c43d8cc"
        },
        "item": {
          "id": "9bde1bdf-0dc3-477d-a604-25c1fd0eed31",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ef0b98f4-a329-4a55-99b6-635755d4f5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a8f9ec-3c12-49bd-ac8d-9edf05472c5b",
        "cursor": {
          "ref": "8e4e40b9-2235-4a10-9e20-5d819d1c5e9e",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b128848a-778f-4206-ba9e-fb856fa9814e"
        },
        "item": {
          "id": "c8a8f9ec-3c12-49bd-ac8d-9edf05472c5b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "62c3688c-bea9-4e58-90f5-d5446070a808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5d0601-9b69-4cd5-94e7-09fc746c79fe",
        "cursor": {
          "ref": "18719679-497a-4b68-bdda-a374f2c8577c",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "23ef548c-0a2e-4fbb-94b0-7c0c5450f357"
        },
        "item": {
          "id": "1a5d0601-9b69-4cd5-94e7-09fc746c79fe",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5d264337-eb55-46f2-b4ce-4c5fdfdda74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5065e95b-0bcb-4ce5-b3ce-4f22cb3bd932",
        "cursor": {
          "ref": "1a8d1bb6-b4c1-4eb9-b91b-d3ce6fe17d41",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5bd2a2d0-d552-4a0c-867b-a468f6a2bd2d"
        },
        "item": {
          "id": "5065e95b-0bcb-4ce5-b3ce-4f22cb3bd932",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6be96c3c-a360-499f-b2af-3de1f4db9c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f5f880-555d-456b-b8ee-4d846d7cb5f8",
        "cursor": {
          "ref": "2477be25-7c9c-4665-bf25-8a659ad7989f",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7ebbdd48-ac45-44c6-9fbc-d9762f6df1dd"
        },
        "item": {
          "id": "c4f5f880-555d-456b-b8ee-4d846d7cb5f8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "25278b78-6012-4278-a50b-0269c6076507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec197b1-39b5-426f-97d2-d847a0c115de",
        "cursor": {
          "ref": "0e5ee744-cb18-45b1-b686-ccb4400887d1",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0600a7b8-704b-4e0c-9adb-681da5e71b75"
        },
        "item": {
          "id": "6ec197b1-39b5-426f-97d2-d847a0c115de",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "556f17fa-8a7a-4177-8122-94babc5e4bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ecbfa2b-198a-4992-ace4-a3c55a2b94d1",
        "cursor": {
          "ref": "cac906e4-2bbe-4c66-81c0-d46c38d17c9c",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9bbe887b-86d0-45d3-80e7-7b067cb5347f"
        },
        "item": {
          "id": "1ecbfa2b-198a-4992-ace4-a3c55a2b94d1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4d5ce572-ef9f-478c-9961-db3b61b1a715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d65a385-c1cb-45af-b74a-620aafc786cf",
        "cursor": {
          "ref": "1202f5d8-0313-439b-99e0-e43e378c08d8",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8c2280a4-e6c9-4026-aacc-e82cf1b45540"
        },
        "item": {
          "id": "2d65a385-c1cb-45af-b74a-620aafc786cf",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f95c339d-96ca-44f3-a37a-d9deb198daa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b6d6a3-bea7-46e0-a9f6-cfa61578599d",
        "cursor": {
          "ref": "34f723eb-f397-4508-8a1a-9e2b9baf754c",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5ce4e2e6-8861-4938-9a73-f4e110d9d69d"
        },
        "item": {
          "id": "93b6d6a3-bea7-46e0-a9f6-cfa61578599d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7af131e0-7205-4c2c-aa5d-a5d9ec5fab70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c68f1f4-209b-4aab-80ff-92d166dbfb14",
        "cursor": {
          "ref": "4edc9e4e-4a5b-48f4-95fb-967e90fa34c2",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "62ff8b96-22a8-4a33-9baa-d7d57dc07b1f"
        },
        "item": {
          "id": "5c68f1f4-209b-4aab-80ff-92d166dbfb14",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "009470eb-8426-4804-9d4a-c2bd94ebd3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f391f6-e0dd-4ea0-b3e6-73bc126a5496",
        "cursor": {
          "ref": "5ad3d32c-db7a-4a49-a4a6-f1554a1ffcbc",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "efafe0f2-6532-4b69-82a5-f19a08cd34e7"
        },
        "item": {
          "id": "83f391f6-e0dd-4ea0-b3e6-73bc126a5496",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dcee2c2a-8cf6-4441-8a6b-6575010e68d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2a1f65-122f-4ead-ac5f-8722fd4a73ed",
        "cursor": {
          "ref": "0f0ceaee-85d9-4d89-a2bb-b7d2e48a725f",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4ccac986-6852-43cb-b625-de21de357609"
        },
        "item": {
          "id": "1d2a1f65-122f-4ead-ac5f-8722fd4a73ed",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "65e28942-a601-4e23-b499-1b740c66d421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf9394f-4137-494d-9a4f-54bc74e0e1c4",
        "cursor": {
          "ref": "0e5a3f7d-5817-4dc1-84ba-f3ea92c13b72",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1406c23f-faab-497c-917c-2d0657f1fe52"
        },
        "item": {
          "id": "dcf9394f-4137-494d-9a4f-54bc74e0e1c4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a5ad677d-43bd-454a-af43-64646a5b3bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e07df9-a3c8-470f-bdbf-1c786bce4ab1",
        "cursor": {
          "ref": "df7c5c2f-8040-4cbc-9fc4-cd42cc116995",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f7d93971-fc35-4abc-93c1-3fb344fd8d37"
        },
        "item": {
          "id": "99e07df9-a3c8-470f-bdbf-1c786bce4ab1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c2976118-d2d1-4709-bc10-08643d190ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4f7219-d025-47e3-a981-a90382fa1a73",
        "cursor": {
          "ref": "c2a271c0-8464-48f9-abd8-81297f83a839",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5a0fe0b4-358a-4ae4-9341-8a286d99dcda"
        },
        "item": {
          "id": "dc4f7219-d025-47e3-a981-a90382fa1a73",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "23a9c948-15de-447c-bf01-d7b41cd35a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae67a4e-8c5f-4e4b-a96f-e08f7ad746b5",
        "cursor": {
          "ref": "69f596c7-3905-4e1f-b725-1db9600adbd7",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "388dd7e8-74c9-43a0-83e5-a155f3392872"
        },
        "item": {
          "id": "5ae67a4e-8c5f-4e4b-a96f-e08f7ad746b5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "26d6f0a1-965d-4f1a-8e8a-9021341ffe27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07dab43c-10db-443b-8508-72fa1c3233d4",
        "cursor": {
          "ref": "65daea05-4a7a-44f7-a3db-2610f22152f2",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6b704aa4-d038-4ded-851e-f9227d16173b"
        },
        "item": {
          "id": "07dab43c-10db-443b-8508-72fa1c3233d4",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "33884e9a-bd41-462f-a7ca-8ab825039ce3",
          "status": "OK",
          "code": 200,
          "responseTime": 707,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "ed84ed9c-bb83-4d5e-80ef-0bc3d0931f62",
        "cursor": {
          "ref": "aa4669f4-3b1a-482f-b54f-93ec455b0093",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f3fe5aa9-3be2-47b9-892b-6cc61f167f93"
        },
        "item": {
          "id": "ed84ed9c-bb83-4d5e-80ef-0bc3d0931f62",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4a7cd4b0-b1e6-4446-8033-4b105ac5f891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b37d84-299f-440c-888d-4f93ee192946",
        "cursor": {
          "ref": "1bde763c-29e9-43b0-bc75-d7bcaa848d8e",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "234dc75b-9b95-4c44-833d-386e896268c5"
        },
        "item": {
          "id": "22b37d84-299f-440c-888d-4f93ee192946",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6bb09a02-9406-4452-9bad-1ee881e85491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78bf9d7-b5ac-43bb-bbfc-c9796ad237c3",
        "cursor": {
          "ref": "61c57b76-90ed-4f82-b81e-2ca4a6f1a0de",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "165d7321-6a94-4e7b-804d-be83469bee9c"
        },
        "item": {
          "id": "c78bf9d7-b5ac-43bb-bbfc-c9796ad237c3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2ae179ce-1389-47ad-be11-bec435eecf39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c746063d-1fc6-4845-93c3-095a40b93249",
        "cursor": {
          "ref": "aacf9cd8-18de-41e8-8012-10c08241c184",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c084bc54-16ac-45d4-8f6c-ba4cae737540"
        },
        "item": {
          "id": "c746063d-1fc6-4845-93c3-095a40b93249",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d1f5efb9-b357-42fc-ad80-a769c34e9a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e298b048-5d67-4829-9319-8e8396297abe",
        "cursor": {
          "ref": "0180f21a-7d7b-4007-af0e-7e06b7ec4f25",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "00b86a39-27c6-4e9b-8796-29139e4c1153"
        },
        "item": {
          "id": "e298b048-5d67-4829-9319-8e8396297abe",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "03b827f6-618f-469e-ae73-4b8fbc38c880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e17bd20-4624-48ec-a476-4e31b4aaa55e",
        "cursor": {
          "ref": "1a02f9a8-e983-49ba-ab0f-11f1d339bff0",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2a443aeb-76d0-4bc6-b5be-c20766c4ba5c"
        },
        "item": {
          "id": "1e17bd20-4624-48ec-a476-4e31b4aaa55e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0f65ee65-b704-403e-b7c8-2f98e67c8779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3e4c60-c141-4c42-bb7d-fb4d6990166e",
        "cursor": {
          "ref": "fd5391b0-1e1f-4ac9-a249-646a97b58860",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0bf9713d-fece-4c82-a56c-d81c7db97c49"
        },
        "item": {
          "id": "7c3e4c60-c141-4c42-bb7d-fb4d6990166e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4a1f7d3f-ee20-4c8e-b9bf-9d07aa5f2d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9282c37-cd66-46a9-8a02-a5b250b370a0",
        "cursor": {
          "ref": "6d6ad0c7-dab2-4abe-aba3-7dfbb4859950",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2b74b99b-8293-4662-ae6a-9d9e6a28462b"
        },
        "item": {
          "id": "c9282c37-cd66-46a9-8a02-a5b250b370a0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f950a2fe-7f3b-46d2-ab94-09abea8cc1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5f30c6-080e-450f-9fe2-3ef9a9c3e10a",
        "cursor": {
          "ref": "ba9f1493-371e-4cef-a71f-21b992206480",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "58b788ce-9118-43ff-9ba2-1cc81c48b52a"
        },
        "item": {
          "id": "da5f30c6-080e-450f-9fe2-3ef9a9c3e10a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ddb76231-599b-405a-b9c9-206796d260d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de87b48b-b32e-4fbe-a237-b6594b26fe40",
        "cursor": {
          "ref": "30d984b2-c7ac-43d0-ba30-14a7c24744d3",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8d611d16-0321-4395-912d-274c62e86c72"
        },
        "item": {
          "id": "de87b48b-b32e-4fbe-a237-b6594b26fe40",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "15400d8e-54fa-466a-b41f-d62c97a3aa1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3012ed3a-3fe6-47d0-9eeb-04033c216a15",
        "cursor": {
          "ref": "5c5aa88a-0a80-49c7-a572-5e16a6b41c5e",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "06604973-2c52-44fb-b08c-c12bb2c8fac1"
        },
        "item": {
          "id": "3012ed3a-3fe6-47d0-9eeb-04033c216a15",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1e292e6c-da9f-420d-8d15-ca903f594d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcb3057-4749-4c8c-a6e3-0004f4cfba3d",
        "cursor": {
          "ref": "35dfd45e-a28c-4089-85ed-4fda0e22a020",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f3e9e22b-8459-42b2-9301-039cb873295e"
        },
        "item": {
          "id": "dfcb3057-4749-4c8c-a6e3-0004f4cfba3d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5f1294e5-3b87-43d1-9ec2-e9ddb3c30893",
          "status": "OK",
          "code": 200,
          "responseTime": 286,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "aa77cfef-6772-4471-ad79-1f821e376317",
        "cursor": {
          "ref": "f92ef41e-d1b8-4320-9dcf-03c38b7bc2a5",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "328bb15b-ba4b-4114-ac95-2a4ca211a60b"
        },
        "item": {
          "id": "aa77cfef-6772-4471-ad79-1f821e376317",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5f730c8e-8d88-431f-838d-a78229c236da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa821b2-288a-44eb-887c-a6d42c1ca7a2",
        "cursor": {
          "ref": "8f3e8f3b-4e96-4418-89f8-5155acdb77da",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b25dbba4-cf29-4e8b-84e3-eefa5991871b"
        },
        "item": {
          "id": "5aa821b2-288a-44eb-887c-a6d42c1ca7a2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5934ebe9-4f8a-4d2f-bc63-753081c4eccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65f521e-4567-407a-9a54-d6bd2b69ca5e",
        "cursor": {
          "ref": "8bb26eff-4ae9-4a6f-9841-001c9c068ce6",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "12a02d26-f57b-4300-ae9a-a7508d9007c2"
        },
        "item": {
          "id": "d65f521e-4567-407a-9a54-d6bd2b69ca5e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "66ce1afa-1dba-4e48-8988-1ec2889fb6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e27ba2-a5ce-4212-807a-1c1084edb34d",
        "cursor": {
          "ref": "1a3eb594-b6e9-48bb-8640-42217d8d8852",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7620d9af-299a-4fcf-9fea-f656ceb874c1"
        },
        "item": {
          "id": "e1e27ba2-a5ce-4212-807a-1c1084edb34d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a75302f2-c116-4a1d-820e-e29ec01dc927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c63cb1a-2b1f-4fcd-ae90-e9c357512890",
        "cursor": {
          "ref": "a72f78a4-a434-4f95-a52a-55103ab81ae3",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "51c3454b-c3c0-4fd6-9259-be06cc5e0ebc"
        },
        "item": {
          "id": "2c63cb1a-2b1f-4fcd-ae90-e9c357512890",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "54196325-5903-418b-bb8f-9dbf5ad17178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb58b00d-6cbd-4039-bf3e-9f057cfd69a3",
        "cursor": {
          "ref": "8481cd87-0f40-4b56-95bc-5b6f55b5fb48",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "feb28876-3b31-466b-b522-daf0d0e6abe3"
        },
        "item": {
          "id": "bb58b00d-6cbd-4039-bf3e-9f057cfd69a3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f283a4b0-e494-4f09-afbf-8ba144c280c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 335,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6795c5b-2151-4d15-aa17-7a8c246f8922",
        "cursor": {
          "ref": "e86b7bd8-72c8-4ae0-8a5a-9cf462799308",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "12af62df-4d60-46fa-b799-dfc3c1fd5b35"
        },
        "item": {
          "id": "b6795c5b-2151-4d15-aa17-7a8c246f8922",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3e67e051-37cb-4b84-bcc9-e80bb24872c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 324,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5584fe62-1391-4746-860b-019df45ae619",
        "cursor": {
          "ref": "8db9433c-00f8-4bc7-abc7-e8cf616dc2e8",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "310d1c5f-65af-4f2c-8d5e-189133840bb1"
        },
        "item": {
          "id": "5584fe62-1391-4746-860b-019df45ae619",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ccc7d8b9-d4da-42d2-91cc-87dc0c760037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4635095-3588-4d8e-a590-9b612d6def1c",
        "cursor": {
          "ref": "8e969026-bd6d-4a97-9578-52623729be6a",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "feaf02bb-ce55-4ec8-b4e8-2ff30d713177"
        },
        "item": {
          "id": "c4635095-3588-4d8e-a590-9b612d6def1c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fa62b8ee-e7fb-4fd3-934f-89f8717ae4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 321,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc747daa-97bc-4190-ba19-65651ae9dc5c",
        "cursor": {
          "ref": "e85116a6-9204-4936-aabc-e7f9eb9a4ee8",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c417a6c4-f17d-4438-a924-30c62ba89d64"
        },
        "item": {
          "id": "cc747daa-97bc-4190-ba19-65651ae9dc5c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "70e1b288-b3d9-4163-bd91-2702b8a7bdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 603,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17114b17-209b-4c8f-8a47-2f6adc66e1df",
        "cursor": {
          "ref": "202808dc-37a7-4396-a53d-052c21d2154b",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "296706af-7087-456c-90f8-7aedd9ad05b4"
        },
        "item": {
          "id": "17114b17-209b-4c8f-8a47-2f6adc66e1df",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b837a8ce-b672-4700-85cb-a27d7a0fa793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ca3f52-983d-402c-9fb0-7ef57fc7f00d",
        "cursor": {
          "ref": "cdfce9b7-da9c-4d23-9421-4163cc676119",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4bc1ef00-7171-406b-bd79-134e92d90d55"
        },
        "item": {
          "id": "68ca3f52-983d-402c-9fb0-7ef57fc7f00d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2876344a-28b7-4375-8bf3-b08110c5de84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874df540-b831-48ee-acf6-d6e027b5fd15",
        "cursor": {
          "ref": "02662c70-b0b6-4a0c-8a0c-51dcb9cf1067",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f8150289-a900-4284-b6a0-a4ca3a623d3d"
        },
        "item": {
          "id": "874df540-b831-48ee-acf6-d6e027b5fd15",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cda95701-90c4-41d2-8559-2e376bc236c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9593bf26-42a6-4409-a03c-58eab1110b45",
        "cursor": {
          "ref": "360a6f77-de3d-46e8-b4d5-07199d22b9e1",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a692246a-d858-48fc-8417-0eed14209d70"
        },
        "item": {
          "id": "9593bf26-42a6-4409-a03c-58eab1110b45",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3c4c9273-84c5-4c45-8d2a-9fdd53fdbe2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d50ca0c-0d0a-4845-815f-2c4108c0ff20",
        "cursor": {
          "ref": "f175ab2c-ef68-484b-9c74-9043225a3963",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a5fef5b5-f754-40b5-a5a1-3a1ae835270e"
        },
        "item": {
          "id": "3d50ca0c-0d0a-4845-815f-2c4108c0ff20",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c45296e6-4213-41c2-b81f-40a41e303cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3976df16-4258-4436-90d0-157a3ee740a5",
        "cursor": {
          "ref": "67c14e6d-3e7e-4935-87ac-72f590d9c758",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "aedc0ee4-e064-45d8-b4e7-8097a3728071"
        },
        "item": {
          "id": "3976df16-4258-4436-90d0-157a3ee740a5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "44634474-abcb-4200-a7f3-6c9051b5e7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 326,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd247ab-a900-4466-b98e-7c6f02a3d3e0",
        "cursor": {
          "ref": "62b4ddbb-639a-4b24-8111-fd5d7a366974",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "06f78560-87e6-4aaf-9cf9-f84c37745849"
        },
        "item": {
          "id": "2fd247ab-a900-4466-b98e-7c6f02a3d3e0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9b80da2c-6bdd-4102-a643-49fd8010875d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1684880-d888-49d3-8cc8-a8976b18f91c",
        "cursor": {
          "ref": "1031466b-b97c-4983-b9c7-c7320399ffe2",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "77be9dfc-1967-41be-ab9c-d93f976b6c98"
        },
        "item": {
          "id": "a1684880-d888-49d3-8cc8-a8976b18f91c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d7de478a-75f2-49b4-8711-32ef81d32b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84402f03-c472-4a73-8792-754bbc17e372",
        "cursor": {
          "ref": "ed974b0e-349e-4980-9d80-f07cebe125c1",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8f32156c-f77e-4eaf-8297-bbb8b2dfff51"
        },
        "item": {
          "id": "84402f03-c472-4a73-8792-754bbc17e372",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f59d3209-d89c-4fa3-a737-b9436d449aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efdc4ced-d3f3-4e2a-8d19-fdc12300b4be",
        "cursor": {
          "ref": "3182a496-13f3-40b5-9cd7-7d392e4165a0",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a21ed8f2-7f67-409d-8362-1a643fe5b278"
        },
        "item": {
          "id": "efdc4ced-d3f3-4e2a-8d19-fdc12300b4be",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "beef2b53-8e0a-4ebc-aa04-93ae8759aeb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ed199c-07bf-4fc1-8c47-476b517926f2",
        "cursor": {
          "ref": "afd3fa45-42a1-4a3f-8902-98b5361ecdf4",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7a4ebf50-7a7b-4b92-b828-514862ce5ab7"
        },
        "item": {
          "id": "c2ed199c-07bf-4fc1-8c47-476b517926f2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "68959082-dd91-4aad-8953-667250ccda9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb9e69f-d616-44f8-87e4-9d37cbf7f851",
        "cursor": {
          "ref": "de2ebc43-b249-4adf-a0f9-cd7797ceedc2",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "23680d5c-2002-422a-b91a-b5391221f9e0"
        },
        "item": {
          "id": "3eb9e69f-d616-44f8-87e4-9d37cbf7f851",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bbb3835d-0a22-476a-99f1-04526d062005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e955520b-de8c-485b-9714-63a8ce7e22eb",
        "cursor": {
          "ref": "1e8b3a14-2a15-4bef-9fa9-320e6e217628",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1f28e9f1-5bdd-4100-b311-467cc152903c"
        },
        "item": {
          "id": "e955520b-de8c-485b-9714-63a8ce7e22eb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ea42cf07-5dad-4b21-8c81-af50bd1e75a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3ed7b1-f743-465c-b4e3-3a6ce07f154b",
        "cursor": {
          "ref": "1c6d6c3e-4b6c-48a1-8962-e90621efe4f0",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "baea5683-d21d-4593-9fdd-c99b3b49d76f"
        },
        "item": {
          "id": "3f3ed7b1-f743-465c-b4e3-3a6ce07f154b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7e4d5903-724f-43af-8617-3fc785d9e896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 326,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84fc0068-b5b7-4173-b112-2f9efe7f7d3f",
        "cursor": {
          "ref": "035756c4-cdf8-4078-9935-293a0cc74d6d",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5c70243b-d2c1-4982-b6d7-f28ed92cbf45"
        },
        "item": {
          "id": "84fc0068-b5b7-4173-b112-2f9efe7f7d3f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9d324f04-5f9a-4d30-a584-1cc652a1fc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90da368-8a5a-42ad-a87d-51dc0ef548bf",
        "cursor": {
          "ref": "2158f333-296e-496d-afc5-cf302033c063",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "38554b42-7dbd-470f-8caa-c42687b42229"
        },
        "item": {
          "id": "a90da368-8a5a-42ad-a87d-51dc0ef548bf",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9f29b128-656e-4bea-87e2-f8f1bfbd8a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28620ab4-99a0-4c25-a888-5eff029d1f93",
        "cursor": {
          "ref": "73aea1be-3c0f-43f1-b78a-2fb60d41d844",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d6c81617-abba-44d1-88ca-5858279b183b"
        },
        "item": {
          "id": "28620ab4-99a0-4c25-a888-5eff029d1f93",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d11fa705-b5ac-4447-a830-78b6c710dcdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10cd55e9-b28f-405f-abb6-d6863bc2e0c8",
        "cursor": {
          "ref": "358557eb-37c9-475a-ae61-807f3d695467",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "18c1144c-4b5c-4f91-9cb2-4ac14b386c3e"
        },
        "item": {
          "id": "10cd55e9-b28f-405f-abb6-d6863bc2e0c8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8fbd5bd8-18df-40c7-922e-7783df05fb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1af30b-d80e-4969-b963-1b52eb9ec31f",
        "cursor": {
          "ref": "a1d2848a-17f6-483e-80d6-df93ab50e34d",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ab7ed419-e075-455a-87f7-47b9f647f5f2"
        },
        "item": {
          "id": "3d1af30b-d80e-4969-b963-1b52eb9ec31f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cc66b679-5d68-4834-a82b-01b5b2df1411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ccb27c-ac00-4ab6-93f7-a18f96a56169",
        "cursor": {
          "ref": "f5b61cc1-8c9f-4f97-9340-4be624779e9e",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7bd57281-ee46-42b0-b80c-015239509787"
        },
        "item": {
          "id": "e8ccb27c-ac00-4ab6-93f7-a18f96a56169",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5761756a-d37c-4599-b425-17c3d564bc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee66c2b7-ccd0-4ede-9a0b-cc8700b66a7a",
        "cursor": {
          "ref": "f0ecd906-10ce-4f4c-a92e-0bbf06dd40ee",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7aec9d5e-ff69-4736-86ec-2f02c70edc39"
        },
        "item": {
          "id": "ee66c2b7-ccd0-4ede-9a0b-cc8700b66a7a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "dc5c57f4-e7de-4ff6-b98d-cab94899708c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb296e0d-0fac-4cb1-a1f7-8d2460b4c25b",
        "cursor": {
          "ref": "048ddee4-a5e9-41ad-bc63-ae5da33921f1",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9e16514b-af82-4f91-8130-cd526ca5f8f6"
        },
        "item": {
          "id": "bb296e0d-0fac-4cb1-a1f7-8d2460b4c25b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5eb2d798-cd87-45e7-9568-6b8a9d56a211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364e4b3c-a4a5-4042-b528-566c2fb37d62",
        "cursor": {
          "ref": "b2b80076-1137-4c7d-a206-d8e81d5f03ac",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8062a1a7-1a3d-410e-a3ec-3bb4832dcbed"
        },
        "item": {
          "id": "364e4b3c-a4a5-4042-b528-566c2fb37d62",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "091bcd06-a5d3-4173-ac94-a719e274dbb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac93831-9b87-42d3-ba81-be23ceb7b510",
        "cursor": {
          "ref": "8e1ce6ed-6c15-4aa6-959b-9992b556f6e0",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "953eada6-2a3c-457e-9903-79709a10376c"
        },
        "item": {
          "id": "dac93831-9b87-42d3-ba81-be23ceb7b510",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5af71baa-a54b-4340-af85-3831c7f58ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba73299-5f68-4eee-ac95-76904f7c1d75",
        "cursor": {
          "ref": "7aeb4750-e10c-4a36-b522-89eca3afcd7c",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f482647c-9514-426a-95f3-1c83cf89115b"
        },
        "item": {
          "id": "1ba73299-5f68-4eee-ac95-76904f7c1d75",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9d7b9b9e-a665-4fec-b913-861bafa7b75e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8dbf6b-5fd5-4ef6-a19b-b248dc0fdcaa",
        "cursor": {
          "ref": "c7cafd09-a772-42f7-bf54-82ac5711838b",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7df65a45-374e-4220-a41d-7b410e08e9db"
        },
        "item": {
          "id": "fe8dbf6b-5fd5-4ef6-a19b-b248dc0fdcaa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2e123964-ab9f-4aba-91b6-21f005311937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3550126-c115-4743-9e70-14d0330f1d63",
        "cursor": {
          "ref": "18d4f1e8-b6a5-46df-a243-9f5e61e4950e",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ac468750-2f49-48af-b6a3-6b43f64366a7"
        },
        "item": {
          "id": "d3550126-c115-4743-9e70-14d0330f1d63",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7be0fe3b-cf9b-415c-a12f-5022dd085f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d384058e-e3fb-4e86-88d4-3f2fd83ded43",
        "cursor": {
          "ref": "67e0b051-1f12-4f11-91f2-85c6321d9059",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a8e0bac8-0c75-487e-a868-4fd375b76582"
        },
        "item": {
          "id": "d384058e-e3fb-4e86-88d4-3f2fd83ded43",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7de294bf-fceb-4903-a3a3-22998ea8b07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ff8933-9a85-46fc-a129-c56897fd16be",
        "cursor": {
          "ref": "b62d9466-6a21-408b-a55c-33cd7091288e",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "33142594-e86b-4cca-9a80-1ee813815192"
        },
        "item": {
          "id": "10ff8933-9a85-46fc-a129-c56897fd16be",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "31ddbbf1-9890-43b0-a118-3e1a536a7a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f3f8d3-efe9-4629-873d-2fecb22ba856",
        "cursor": {
          "ref": "83c2df45-b42f-4c74-8620-5740213d7c1a",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "05df3062-ce6d-4e15-bb05-00349b9f9ca1"
        },
        "item": {
          "id": "f1f3f8d3-efe9-4629-873d-2fecb22ba856",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d9af9d4b-e7ca-41fe-b4ca-6879a3f2302b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38353fd-d0ac-4b78-a509-f8557d2d6542",
        "cursor": {
          "ref": "dbcde775-3ef4-49dd-a244-f0e7c840dfbd",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e1a6ce3e-3ba2-49dd-85b9-ce3b0621fcfb"
        },
        "item": {
          "id": "e38353fd-d0ac-4b78-a509-f8557d2d6542",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8556a835-7289-4e4e-9954-94a5e166f517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8215f2-10eb-48ea-adc3-fd9f3101a022",
        "cursor": {
          "ref": "da1aa235-e5e3-4b9d-944d-c1419342f8ea",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7c28a673-17dd-4f09-b8cc-9fb92c7063c1"
        },
        "item": {
          "id": "7f8215f2-10eb-48ea-adc3-fd9f3101a022",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1e01a970-d610-497e-a578-365b8393ebeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b373023-7350-46dc-82dc-3679e5111e63",
        "cursor": {
          "ref": "0702db06-741e-4510-8b8a-bd6c952d9162",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "61551599-c4e1-4d08-8dac-c6b13f64d2fd"
        },
        "item": {
          "id": "6b373023-7350-46dc-82dc-3679e5111e63",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "16457e3f-67d5-436a-9e04-2a6fcfb399c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7eeaa1-2cff-416c-9272-9fceda76e26b",
        "cursor": {
          "ref": "74ad9f36-1b08-4390-98b7-3a162e9f831b",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f95fb69a-897a-4810-9dd4-fb6c9b9f6911"
        },
        "item": {
          "id": "5d7eeaa1-2cff-416c-9272-9fceda76e26b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "61a7296d-ae5a-4750-a89e-7d509de18664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e836a9-6c22-4385-a651-09938606af20",
        "cursor": {
          "ref": "755d069a-b557-4f65-bb19-ed8cb0264621",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "be0bfc11-ba3e-47d8-b44a-599311f07af2"
        },
        "item": {
          "id": "17e836a9-6c22-4385-a651-09938606af20",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "18febc3b-771c-47f6-9de8-d4fe55fbaf1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a978b427-c040-4bb3-8a05-3b7cee08da00",
        "cursor": {
          "ref": "f9254b88-fd8f-4cfe-a772-e6bfc7763770",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5d0afce9-7403-40bd-b9fe-9ecfd2069665"
        },
        "item": {
          "id": "a978b427-c040-4bb3-8a05-3b7cee08da00",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d235659e-4ad3-429c-8de6-5bb7c5914a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d6683b-3a88-4672-a1d7-a1ece4bd6c31",
        "cursor": {
          "ref": "6db58a85-35f2-4178-8fe0-463ed8e5747b",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1bef1a93-fa31-47b2-bb9e-6febbb2f2da0"
        },
        "item": {
          "id": "37d6683b-3a88-4672-a1d7-a1ece4bd6c31",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "665c224a-327d-4922-a378-8bde707a5c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3c9ea6-575e-4056-97d4-5659344304f5",
        "cursor": {
          "ref": "fbcf916f-0120-4f5f-8db7-4b1a0da08e96",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4d13fbcf-6a5f-46c0-81c1-c0025f952a51"
        },
        "item": {
          "id": "3c3c9ea6-575e-4056-97d4-5659344304f5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b2ba379c-d8a2-4a87-9652-4eb7d7cfb50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc41f80-4cb2-4441-b237-ebe7c3334bfc",
        "cursor": {
          "ref": "21fc3b0c-d3d2-4da5-b45d-86311ffba844",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e2af486d-c6d9-46fd-95e4-e3b38ab1fc03"
        },
        "item": {
          "id": "5bc41f80-4cb2-4441-b237-ebe7c3334bfc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "37109745-7d46-45bb-8843-06915912c52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb46894-1ff4-49ad-b692-de39f35f158a",
        "cursor": {
          "ref": "64f8fffe-2cb2-491c-b91c-63bde4c4a67d",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b10c1601-6a8e-49fa-9ff7-ddb664266ee2"
        },
        "item": {
          "id": "ebb46894-1ff4-49ad-b692-de39f35f158a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "21069532-5faa-4614-813d-cdaddba1425e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6480853-28cb-47e9-9e0c-eea5e98914c5",
        "cursor": {
          "ref": "e16ff7bf-2515-44ad-ad78-e8d742a21313",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c600e204-a9c0-41eb-ac68-3f02f322bc40"
        },
        "item": {
          "id": "a6480853-28cb-47e9-9e0c-eea5e98914c5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a3f8e585-29f5-45ab-9155-2e6c903ed0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4be57b9-0d0e-478f-adb8-2e1c56168526",
        "cursor": {
          "ref": "af857833-71d9-4c55-a491-daed25aae21d",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7b47442b-2eae-485b-bd71-5c083f4dfb35"
        },
        "item": {
          "id": "d4be57b9-0d0e-478f-adb8-2e1c56168526",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ab46ed4d-4485-4b51-819a-7149d2dc35b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21305a23-fd74-4655-ae4c-262dff8d02fd",
        "cursor": {
          "ref": "08f75e47-fdfe-4c06-ae78-bf9f6c148f32",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e5128171-1b53-4491-b431-33b656603ebe"
        },
        "item": {
          "id": "21305a23-fd74-4655-ae4c-262dff8d02fd",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ea0fa409-1561-4fe4-bcfb-b4a383db4ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7488a3-6af5-4869-81e4-e435179525af",
        "cursor": {
          "ref": "af87d5b9-04fe-4ae5-8b9a-0a08c30ebc76",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a7844137-8177-497d-8f2f-a40741b6165d"
        },
        "item": {
          "id": "3b7488a3-6af5-4869-81e4-e435179525af",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a5ecb70f-1008-47db-8544-e9872e9d0951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95da56f8-5ae0-4fdf-84cb-4362aacd4b3f",
        "cursor": {
          "ref": "7b25e6c4-7da2-44e7-9f34-fc2a69a25192",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fe968da1-a3e4-4bda-93fc-7ed7ddb28afa"
        },
        "item": {
          "id": "95da56f8-5ae0-4fdf-84cb-4362aacd4b3f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "da0b773c-abcb-4f6d-81aa-81cebdc53ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8d2496-67d1-417d-b0bd-a9e8254e07f3",
        "cursor": {
          "ref": "a42c74f9-2647-4d3c-8626-fec294bd59c4",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ca4efbfa-0244-40b1-a26a-6b4f119852cc"
        },
        "item": {
          "id": "6f8d2496-67d1-417d-b0bd-a9e8254e07f3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "68714636-a7c4-4dfb-aad1-2ca6fd65380e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2aae81-fb26-4c40-a821-7738a2c8977a",
        "cursor": {
          "ref": "9373551d-fd25-4eec-8f1d-3571a370c702",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8a97002b-2a1f-4560-85e5-5dbb959231cb"
        },
        "item": {
          "id": "ee2aae81-fb26-4c40-a821-7738a2c8977a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3f4a0ea6-4f39-4a90-b155-fd3da0bc13f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e1f365-8f88-4e05-9d3a-13305ba31a7c",
        "cursor": {
          "ref": "735c1b0b-0dc9-43c7-864b-fbf28cc78b86",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fc147da3-7abd-41f8-b16c-d7bc20b0b7cc"
        },
        "item": {
          "id": "f9e1f365-8f88-4e05-9d3a-13305ba31a7c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3d0af657-ff86-40cb-89f3-9accb2be13c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f100a2-3f6e-4667-a90e-a22b42625e66",
        "cursor": {
          "ref": "28e3ba6c-c5cd-4e20-81bd-cb0c9e046742",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ac610858-5407-4a1d-b724-bccf362caa0a"
        },
        "item": {
          "id": "d5f100a2-3f6e-4667-a90e-a22b42625e66",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e4a5985a-ab54-4719-80d7-4430c9c46c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fde5c4-66ef-45f1-846a-34b384d5f5ca",
        "cursor": {
          "ref": "8ea09d18-6d84-46c6-a3ab-13368f316b4a",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e53a8314-8ad3-4e0f-8988-0ed0ca4a2f0c"
        },
        "item": {
          "id": "73fde5c4-66ef-45f1-846a-34b384d5f5ca",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "84074e32-c3c0-4f56-9040-f29cbd26ad86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e5142f-b024-4b2b-80bc-d54957deefd9",
        "cursor": {
          "ref": "91b69030-47ec-4fff-b677-b349cdb0f583",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7d2eaf78-ede5-48f4-8e06-fd1ac606d61b"
        },
        "item": {
          "id": "02e5142f-b024-4b2b-80bc-d54957deefd9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "658634b5-6673-44d0-a15c-7f693154cc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba485714-99ba-42b5-a7c0-ff0ad3899a35",
        "cursor": {
          "ref": "92b660e8-1ead-4bb3-abbe-b600c5896436",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dd44adef-b597-462d-a595-1b48d3eee834"
        },
        "item": {
          "id": "ba485714-99ba-42b5-a7c0-ff0ad3899a35",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9c6b001c-9f4f-4f13-b2e8-b321f2a82c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758a3608-565a-4e3e-85ed-218fc328aeb9",
        "cursor": {
          "ref": "9d00d2e3-b00a-41d5-8680-9e3b7474de81",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "51999284-9504-44fe-b433-6c1c5e47003c"
        },
        "item": {
          "id": "758a3608-565a-4e3e-85ed-218fc328aeb9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "95ad7f63-aad7-4e24-8c6a-f2ab3cd0b77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24212513-1dae-43e1-88c4-b3afdf37f019",
        "cursor": {
          "ref": "834b6401-0d79-4946-b8ac-6620c202fcbc",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "700a4b32-8010-46c1-a108-ff7479c95e26"
        },
        "item": {
          "id": "24212513-1dae-43e1-88c4-b3afdf37f019",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e3e6acd9-5c68-4793-a7b2-1eaa89fd1af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848e73d4-78f6-44f0-8de7-6029673ae5f3",
        "cursor": {
          "ref": "9833215e-94fa-4513-8240-5acfd925aeda",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6624ba9c-4bd3-4698-9df8-b282172c665a"
        },
        "item": {
          "id": "848e73d4-78f6-44f0-8de7-6029673ae5f3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f23ea4f7-21d5-40f1-9908-3e648362b11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a184eda-e02c-4f9c-8e4e-8dda662dca79",
        "cursor": {
          "ref": "02344631-80ad-46d3-96a1-b64b61c11a4e",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "06d570f7-ee99-45df-ac9d-357728cd56f3"
        },
        "item": {
          "id": "1a184eda-e02c-4f9c-8e4e-8dda662dca79",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "aae42240-d145-42c4-b4e1-d47f52870b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b438dc-3761-48c8-bc41-54677fa0512c",
        "cursor": {
          "ref": "73f62c49-8512-40d9-8a01-684ed1852a9f",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9c5c1db6-2b8a-4080-bcbc-2d6d02134691"
        },
        "item": {
          "id": "d8b438dc-3761-48c8-bc41-54677fa0512c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5b6a5877-386b-4f1e-b6b4-42c6a82584b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab9677b-24bb-4e29-a481-eb2674d848db",
        "cursor": {
          "ref": "b999660d-b819-49f4-b98a-6f14db155167",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6a57d082-7316-4ffa-b436-86ce84b61cb8"
        },
        "item": {
          "id": "fab9677b-24bb-4e29-a481-eb2674d848db",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8be555ad-4969-4c3e-8282-31f105124ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defbeb25-3469-4d1f-9cd4-745fd7e78881",
        "cursor": {
          "ref": "1c49eb7a-275c-4f09-a209-e6c013c4e523",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "31be1a90-0d33-4763-a705-809e242094c3"
        },
        "item": {
          "id": "defbeb25-3469-4d1f-9cd4-745fd7e78881",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a2940160-dbcb-4e6a-91e3-c543cb82a8ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8beef1bd-914b-4b93-920c-4418c1b70078",
        "cursor": {
          "ref": "02495c05-a3d7-41b5-8639-0832d01fa490",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "15ef8928-6a53-4fe8-a824-2592c64afea2"
        },
        "item": {
          "id": "8beef1bd-914b-4b93-920c-4418c1b70078",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8dc965cf-0d33-4232-bdfc-ab09ab8ca89b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 51,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0576ab40-0bd5-448a-8322-233d124ee01b",
        "cursor": {
          "ref": "7f27106f-31cc-4a05-b64e-64e29adaa082",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4beaeb29-05ae-4746-9b44-340f4bac8564"
        },
        "item": {
          "id": "0576ab40-0bd5-448a-8322-233d124ee01b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "970da289-2415-4806-89ff-9bb558ebc723",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1156d8-c4bd-4bed-9054-720c6620a66b",
        "cursor": {
          "ref": "cf76eeeb-660c-4a43-a439-4bb285df04bf",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5f52cea3-897c-4b99-8177-be18d37c7637"
        },
        "item": {
          "id": "4a1156d8-c4bd-4bed-9054-720c6620a66b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "aea2ac49-5419-4424-a4b1-378910dabbff",
          "status": "OK",
          "code": 200,
          "responseTime": 658,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "429ee48f-07bc-4502-a83e-a32824437f62",
        "cursor": {
          "ref": "18a7135c-76b9-441c-ad93-1994e5eebc5a",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "212900f8-283e-4fba-9153-85a39862cf37"
        },
        "item": {
          "id": "429ee48f-07bc-4502-a83e-a32824437f62",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "20ac3051-ab7b-45af-bb1c-6ca12e76ffd6",
          "status": "OK",
          "code": 200,
          "responseTime": 636,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f957749d-b47c-4cb0-8a9c-4dc734506572",
        "cursor": {
          "ref": "f0d8d226-cd7b-43d2-a79d-5699ae4228a7",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f56e0020-9d45-499c-8057-9d284474fb98"
        },
        "item": {
          "id": "f957749d-b47c-4cb0-8a9c-4dc734506572",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "de618f56-a7a9-44ae-823c-53e428da8824",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f957749d-b47c-4cb0-8a9c-4dc734506572",
        "cursor": {
          "ref": "f0d8d226-cd7b-43d2-a79d-5699ae4228a7",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f56e0020-9d45-499c-8057-9d284474fb98"
        },
        "item": {
          "id": "f957749d-b47c-4cb0-8a9c-4dc734506572",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "de618f56-a7a9-44ae-823c-53e428da8824",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f957749d-b47c-4cb0-8a9c-4dc734506572",
        "cursor": {
          "ref": "f0d8d226-cd7b-43d2-a79d-5699ae4228a7",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f56e0020-9d45-499c-8057-9d284474fb98"
        },
        "item": {
          "id": "f957749d-b47c-4cb0-8a9c-4dc734506572",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "de618f56-a7a9-44ae-823c-53e428da8824",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604bef98-d3f6-4526-8d49-f67f25ff08f5",
        "cursor": {
          "ref": "d5c2e774-dad7-4ec1-8caf-59b2218fe772",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8ca71336-2e7e-467a-89bd-ee8f44590801"
        },
        "item": {
          "id": "604bef98-d3f6-4526-8d49-f67f25ff08f5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d4cea58b-4089-475d-901a-83ff96bdc10c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d500678-52ba-4917-96d3-4482a25c4c6d",
        "cursor": {
          "ref": "934daa38-8e0e-411d-a2fa-ddaf2df92b16",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4bb43dbb-7748-4418-ae63-4f04236fed3c"
        },
        "item": {
          "id": "5d500678-52ba-4917-96d3-4482a25c4c6d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f3138a4f-2659-440b-a749-e121d8e63e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5d500678-52ba-4917-96d3-4482a25c4c6d",
        "cursor": {
          "ref": "934daa38-8e0e-411d-a2fa-ddaf2df92b16",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4bb43dbb-7748-4418-ae63-4f04236fed3c"
        },
        "item": {
          "id": "5d500678-52ba-4917-96d3-4482a25c4c6d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f3138a4f-2659-440b-a749-e121d8e63e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "20389223-196f-4cea-a483-10b313f52678",
        "cursor": {
          "ref": "432eb074-32d7-4f23-a04b-1c29e9355d3c",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "540c4d8f-2365-45b8-bcd5-55bb9f259a68"
        },
        "item": {
          "id": "20389223-196f-4cea-a483-10b313f52678",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "62afa57c-cdcc-4e6a-9bdb-d6b3ec3cd7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "2021ce37-b208-46e1-abbd-b15bae164f79",
        "cursor": {
          "ref": "c687bd88-ddf9-42e3-8c83-f20d950c8c63",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bcc4554a-c148-4b02-bb86-338ba4336290"
        },
        "item": {
          "id": "2021ce37-b208-46e1-abbd-b15bae164f79",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "94925468-83bd-4804-86ce-8902382d2945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "2021ce37-b208-46e1-abbd-b15bae164f79",
        "cursor": {
          "ref": "c687bd88-ddf9-42e3-8c83-f20d950c8c63",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bcc4554a-c148-4b02-bb86-338ba4336290"
        },
        "item": {
          "id": "2021ce37-b208-46e1-abbd-b15bae164f79",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "94925468-83bd-4804-86ce-8902382d2945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "9fc00390-82a6-4e52-b285-13a9441a79d5",
        "cursor": {
          "ref": "9e04e943-e616-48db-ad37-9ae92276c54f",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d3b36b32-9f48-4756-b609-2c64035771dd"
        },
        "item": {
          "id": "9fc00390-82a6-4e52-b285-13a9441a79d5",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "b3763eb2-7e35-45b2-98cc-c2414a95e75a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}