{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "06f21984-b610-4485-97fb-adbf8ffe0325",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8bce21c5-f214-44cf-8de9-2f975b8709e6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce8121b1-f4c7-4fe9-9033-61f3ffa69207",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "397132f2-b6b9-4c88-bc39-402102b1cbca"
                }
              }
            ]
          },
          {
            "id": "626da950-8d2b-46e0-9d21-97356421c9cb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "491b51a5-d2f2-48d9-9c00-ddc56e724e41",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "545ca21b-06b3-4128-873e-e0bb4d9a6cb8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1ccdf3f4-4224-4ba3-b709-523673516b6a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5c8a2d52-587f-4534-b371-98f714125bde",
            "name": "Positive Testing",
            "item": [
              {
                "id": "32f6e0d2-7467-4c7a-b440-5e725ecee336",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7834566d-3bbf-4bed-b8df-9e86440fa640",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "54976ea7-89ed-415e-ac7c-bc3b22f498e6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0a9cc79c-e679-41c4-9e14-1765f52d211e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b3249b1a-05f9-40ef-af86-de5fb3997ad7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b11bd01f-46e5-40b3-a8d2-4a59b93eb66f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0852ac50-fc8c-4312-8ff3-2dbd5340e44c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01c6e83b-fab3-4bc0-b0e0-61f33c56c33f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a85c261c-4f45-487d-8537-8dcd7bf0e59b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ba776d7-bb76-4046-a234-72945a29caa7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd736e79-ffd2-4541-b2a1-a4cd39148b49"
            }
          }
        ]
      },
      {
        "id": "161f84d8-8370-46cf-928c-acd88e8d49e4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ff0bcf57-f69e-4779-9f5e-cbc3828467fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9deb2780-7e80-46ef-b93e-e5717b69092e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1c5d1561-92c6-4e93-bf4e-94121270a369",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e53d9d6-15f3-4419-b6d7-2c8022eaddd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f6a6595-a09c-4d0f-918d-924216139e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e48257-acff-4539-a108-c96773f3ff5a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0f8414-74e7-4297-9d33-563f6927e39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f5ca133-52ee-47c0-a847-90a29e7f54c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb8588e-2f96-46dd-8842-d530dfca8085",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82aecc60-404e-4709-bb6d-ed141454b236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca9c7e48-4562-40fe-b7d0-5acfa4a0f455"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a7703223-175e-4535-bb38-5cd71d146592",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "800cd71f-b966-4b86-b8e8-2e1e2e1cac4a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f153fe4-25d1-4c89-96a0-b2af4e71acd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bce853bb-a223-4b48-941f-505a37280397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cba2a46-01e5-4fe1-aa5f-b9c64329c9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449d7d36-492d-454c-8f95-1251e049a630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32b1811-97f6-45b5-bd57-861818cd0430",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddba2cfd-0650-4633-8fcb-d020c7fb55e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9490f0d-3825-405a-8601-4951b18bd8d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9070d9a-b30d-4fae-90fe-61f3017ec116",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "af37e371-c3ed-4ca1-9714-5c9264beb627"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "825713a3-afce-42f0-a661-cf65ed6d9ebb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "003c671b-5f75-49e8-994b-2a407f459a7c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "596cfdc6-5116-434b-9212-2e8362715881",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2587f9da-cba9-4e23-bc7a-3da7a1bf4557"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5d9bd73-ba69-40f5-86e5-4eaff942b859",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "9239a25f-687c-4cce-ac56-859a11d8e76e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef1a0a34-8f51-4809-8320-46268a3e9c42",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1062c613-d412-47c4-ad67-b1fe92672f5a"
            }
          }
        ]
      },
      {
        "id": "ecec9fe1-8400-45a3-8243-5acef9df496d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "af49d39e-141a-465e-b86a-e9f9c5b61032",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45d26239-4be0-4011-b5e6-717c91811aa6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "245f0b23-e4dc-4c06-b83a-50578a610dc2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d45eca-37e6-420c-ab0d-dce662211253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "989cd082-1dfa-40df-81b7-8c307b8af23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56ea2ea-1ce6-40b1-9b56-418a50c10594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "088a3b16-8903-4ce9-bcd8-14bbe82b3087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53883b2b-910a-48e8-9030-92b35200b0bf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdab971-01f0-4ffc-a65c-7cd5956303bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f4e7b9-005a-4a3e-8a27-ef6b74cec38e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd844a2-ddcb-43eb-92ae-77048d29817f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acda8dae-3558-4568-9f42-238b9729981e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391fa52e-f510-47d6-a846-f38ff6a56704",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fdb316-ea95-4ed1-bbb0-c5541ae6bfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5276ed3e-5481-4a47-a15b-a3be8ca393d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482bf60e-3975-4576-a4eb-bdffc24f33b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea030c7c-41b1-4b08-9576-c5e56df657e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef3fa3a-42bd-42a0-bb9f-a9196e6a2cf5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b69e731-19c5-4a77-b322-b90bfb7f6a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1412a3e-1268-494b-8884-4484939c0005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9ec8a0-082a-4593-9b30-745fe3707ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "499d77a1-879b-44d0-8ee7-47e0b8069cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd5fb27-a0ac-405d-a7fa-aee88b186bc8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1f5cf5-8c39-4ca2-8385-2b4e84eec8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef73bef-267f-46c9-b8e2-8185e1d6181f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cacb5f6-6d8d-455b-a3f2-64096db374c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f3f2725-4d9a-443c-a088-23f1618ed627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f25e338-6f18-4027-95f5-3a2bab68398c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8646eef7-c590-43a8-b993-99d6fd3e5222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03b886d-4f46-45bb-9b15-1c18aed1411f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ce534f-e0e5-471e-9134-35b7f35d9e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59a9cda9-e405-406e-80c2-6ddad6ed162d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93dd3fea-afea-44fe-93de-d58dbd89d744",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc239f7-b06f-4405-b286-60900369019f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162be961-24cf-4f5b-8849-42f08e486f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f587cb-5917-4da3-855b-d462c2067de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3c79d2b-5181-420e-a19a-49484bbd6c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a463e9-c36b-4355-afac-6600045a10fb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64384b27-f7d6-4dbf-b2c1-0d0add3219c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b8fae54-dff2-467a-b7ea-7ebf4e251daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7265deed-54e3-46ba-9cbc-b35841d0343d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98f351e1-27c9-4458-a615-1f7e4bb68f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe020786-72f2-4079-8aea-9f6cfc08df10",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bebf6a-481c-47af-b4fe-a17ad3fbbd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ddfe19b-17aa-4daf-8b4f-4cd40e7deb99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865074dc-141a-475a-881a-e6aa67c46601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87f8e667-d993-4753-a82f-f1a29984993d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cab55b3-529d-4382-96f2-b8ec40a8e2f1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bf030c-a0ba-4e3d-abee-037d5b2d4f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8dbc64b-bbde-4776-aaeb-65a7718a7524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd225a9c-428a-4988-b857-4c408c9a5e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bb5bc9a-bb8c-4c44-9bee-f8f39b9b8b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a34cb1-a253-46e5-838b-cf787a9447c4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d738de94-1ce7-4a65-bc93-2907e3896d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b49250e-2947-44ed-9254-8761955c6ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172f53af-eeb5-468f-b233-8931506ef353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71ce63dc-e9be-4674-850a-4867ddde02c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ae816c-6363-42a2-bbe7-83cf2c307d4b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e01be0-7e8c-4449-9624-c30981e8df6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f2ee7a-5020-4843-8bf4-be20e939ea78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024581c0-a3fc-4fca-b961-36a67108b945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed30b38b-eed9-42a2-83a9-307947759ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea397351-a625-481d-8cc2-10f1a92e6653",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27534f9-3da4-4a4b-8453-04ce90f1b520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251fb212-c473-4f6f-bd5c-2bdb4cdcedf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8707a591-ad91-4978-913b-6316a88a25ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29875491-123a-4669-954d-cfbed9083fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b04af8-94a0-4c6c-b46c-bb8d7af237cf",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b886ca1a-5071-492b-bc37-6879b76e677b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c650354-3a73-4bf0-8274-fb968b3dfc22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4396e5-d029-4279-ad9b-c92fb80e8503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d3879e9-cb3f-4868-93d3-dcdb2ec9373b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda6cf31-ac9a-4cbf-b9f5-c6b6382dbf10",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a054f3-8b9b-416b-91e1-df2f301ac8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0762eecb-cbd3-425c-bddc-cd8704e6aaf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284c36b6-c211-4840-943e-ea82d8fee884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b1bb40f-eca7-44b0-bdde-a89f50776f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e519af-ea30-4288-98d2-45b17310929a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f642204-ab50-44f5-98c9-7ee170cbab81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ce14c6-2311-4f98-9726-2cc79edff04c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d23d7a-faef-49da-bfb3-ccca9ff92229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e0e085d-9aa6-47f1-b73f-ee2171b1e2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77194e6e-0360-4d50-8e64-4e8202dcc958",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f983a1-8b27-4ad2-a9ec-bf85bf656447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1459b9-d5d3-45a7-abf2-952ed8478f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc816df2-5eb9-4da0-bd2a-9183691b7f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7103fa1-a147-47fc-bb2e-105d114a0ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdac275f-cafb-45b5-9b09-86cf6c4d7a3c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96a904a-e3b5-4863-8bbf-8874ff04a9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b378a86-3adb-4c5e-9255-43b39fb37d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226e2dc2-201d-466d-8b19-51c0fa05197b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "823cdb26-64c1-47e9-990b-ace40441f008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde652fe-5049-414c-a6ed-c8382aac9a82",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbd7ace-afd1-42b3-a227-dda8510ae5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9361d93e-2509-4c60-bceb-fe4685dbe7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d6c762-bae0-403a-a9c5-cc152fe1731a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "017d2cb5-94b4-42c8-8504-edb0e277c501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecf8b83-9b9a-4a99-a5d1-57626b1fc892",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e935da3e-d11f-43e9-9bd3-dcec6066acc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185d6c6a-0130-4a05-ae68-dc48b9ed2219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e675e9-1170-4166-b8e3-5ceb2dd95698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d622998e-c4fc-4735-8fad-c76990162a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d074ceeb-6aff-4909-bd8d-90ec98548359",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbff03d-138e-4b75-90ba-b1edebf593bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9503dfe6-3af4-4861-a30c-72553ef99193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3e6163-51d0-4ea0-8f61-152a76790696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f29ea01-7991-4e32-9b51-52007a19a62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c999e75-593a-4b90-9194-71b4186c1713",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e41394-ae18-482e-8c99-3dcbd1f6beba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1644c2dd-21fe-4913-95fc-6e64e13a10d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d45321-0b3d-4140-a4a7-889099ba437a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbc7d46-56f4-46b5-a32e-6f9ddae4520f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1ab2c1-6b67-417a-aa9e-437bfa436226",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8152bda5-a060-4ac7-9462-cd51b4e7d7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aececcf-43e0-4c62-a78e-a8502adfd264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0614c9b9-4e75-413e-92a9-f331c080f819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a24ec602-c3cb-4f39-a740-27b42ac76c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d867b6-d117-481b-803f-64abbf4cab58",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6b5ff0-1244-4ee0-b722-a590194abfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce07c730-a52d-41a4-ae7f-a43b2c1d5c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdb6354-3414-411e-bd31-3b3686c7095d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d620b30-ea5b-4261-b2fb-05eeea9bf73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e972fd-8cb2-41af-bf81-d34ba4002f5e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1444064e-eb5a-42cf-968d-68aee54b10f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49fa235-984d-40bb-a8f5-2cf1cc8201ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155fb9fe-b31d-4d5f-bbcf-124b6e9655fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "68a7f76e-74d9-4f96-99a4-599dd1b6820b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb20d72c-9916-4d3d-a610-9dbe4c6e7cd1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096b85ef-b31e-4289-87be-6a84cebe41f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c86e8317-605f-442e-9d71-9959cf1cce26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e886277-8fb7-41d6-b70b-377d3a33e744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "184c8d69-44f3-4f4a-8043-bf8763db1b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e838e530-cc0d-4caf-bea1-ea9fa935a114",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b242968-7be0-442a-892e-973187bccf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cd2d85-a155-41e6-9019-921f49802d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2913135-e37e-4cfc-a9e5-1036f0c35c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c307aeb-5fd3-4f9c-a324-5d0731070e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1292aa5d-d815-4e37-8104-6fc30f413228",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d73dc1-c0bc-42c9-b292-9f09ff734abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea4f174-cbbc-45ab-96ed-17937ec39e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b64c315-556f-4a73-b989-16614f9f1e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3fd84f3-8555-441b-ad7a-9ce8e87033a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc211be-93f6-4ba8-8be4-fc25fd751acd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7a0800-1049-4fc2-bc08-4f9fb3f83260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a1644ff-bb1f-43a6-b92c-fc4217040fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3b58c2-14e9-4855-b257-e21a42be2fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16026250-65b4-432f-8a3a-f1c576fbf488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd75eb66-8092-4349-92b3-548376f61b58",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ca17ea-2539-48fb-8bdf-927451bc3949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5391664-f232-44fb-998b-b49d7a6ab23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0f9b3e-575e-4c26-b952-e20a696a4aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "222215f0-873f-4d03-8b8a-163b3985d508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c71e3aa-492b-4406-b81e-f64993be8aea",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17017b7-8227-44ff-8bbc-55a8f2623bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4ba125-ac1a-4f84-8b29-42bd4e2d62dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7bf41b-e796-4c70-b827-b9d2f6997697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2895a6-5d03-4b01-83b2-8887c3eb2329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d749b8f-e4c5-4f4f-b71e-9644dc9ab2ad",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bbcdb2-0a76-46af-bfa7-9f4f47084b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a16dae-ccd6-4f46-9718-a05510cc9d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8b1fcb-3c87-4759-9770-a3209edc8a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9eebb5-4659-4e3b-8d6d-9a830337dc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e1a122-099f-442e-b7ee-c3ff34f24e87",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd8d68f-4b44-4ba7-b536-f2003b698f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e203b7f4-eedb-4102-91b4-213a0a86256a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec6ab39-eeb5-4f23-a2f1-6458968fdfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de439363-93f0-45b4-891b-14b7d4c0ec07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ed102c-2d50-48be-89f3-64ab35206f35",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde185a0-7a97-481e-9cf4-49fff0203068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fedbb83-224d-4af5-bd1f-02c4c80fd1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70080b9d-fde6-46c4-b088-f35cb8f2db6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d8226f3-5237-49db-a625-7af68da4168c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90492d5-2907-4cee-80c4-a25efe5cab1c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6955b363-9d7b-4ded-9e44-324f11f4ddca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00894109-4664-4420-adf6-684ae344b13f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35048b8-7458-417c-b75e-a43232f1be4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb403ce-f913-4413-9fea-9639e4eb6dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4628a1-ac54-41b8-8791-23fe61ca17b8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f854701-7fdb-4d3a-810d-dd3670ec6cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d942f1bd-996a-4b25-81ce-8554ce1265ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99ffa83-4dd8-4c93-a2f6-a4dd40bfc349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "05d3e311-f8dd-4859-904b-00cc702dba8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68b91e7-c95d-4d26-8046-4b7e88b539f6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a2b2be-08b4-41c8-bf9f-716b3208aea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b0ad05-7523-48b3-bdad-69b2def2de05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33562774-9e36-480a-a09e-f197d00cb9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d66031b2-1074-4f28-a2ed-040603d5b25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98625e45-83b1-4bfa-87d1-3195715bdda2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b62891-e797-4791-9693-4aac732fc4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d31d44-4c4e-4c15-8545-b3be956ea2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c05ccf-48a8-4caf-be68-e0a6ccad46b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd565a5a-1d1d-495a-ac0c-2a28d72a23a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e06209c-d308-4e5f-93d0-572b9f4979be",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d86fb4e-9e02-4fbc-940b-14110c09f0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a2ab9d-f228-48f3-ad24-1025e8245bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e383be-4972-44bc-a4e4-184e0c36358b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "88319076-a54f-4462-8d98-27ce7c81448f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912ca408-fdba-4711-9baf-08cbcf51a521",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00703001-5ef1-4994-860f-a023fa6b831b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9cf78e-9639-43ab-a71d-1fb9a8d8cb19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311e9b86-5d2d-4e6e-b894-4ab8d0a682e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "638de43e-9c0b-42ed-b105-6fe29bf5ba1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9a510e-6776-470f-92e3-1fee0ac1e63c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8c58b1-5abf-4a57-b4f0-57421513bc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be175a6f-5e20-4fb6-86df-8d1ee04f28e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ae72af-7801-4fa8-b704-1994c5576f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d6e646-5384-4bae-b9b4-170ca5f1df94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725417d4-6a36-46d5-a339-8518eb5a100b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35afd40-f883-4bd8-a54b-c01892f2054c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b59cbb6-b456-4953-9699-b32b34659595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfaba741-f1bb-4488-95ab-c1f0d669ac2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "187d4341-0b2c-4551-bc27-0d29784a0cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75336db9-d4da-4a78-8ead-2007cff9e197",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f50609-751c-414e-aca0-48f08cb8566a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acad42ea-e532-4bc9-8b66-47a2c96ed56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7279bb1-09ef-44d9-91bc-10dea1f1de26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "14270e64-b141-4ffc-993c-2c988cc4fe97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40de21de-3af4-4c71-ae8b-b773c0393550",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5e7bf3-d4fc-4535-b970-a99d173449e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f3218d-0e5b-445b-ac6e-d777afbc6a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1f13a8-b1ea-4a5c-a516-eda0e53329b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "661de92c-1ccd-41b6-a86d-66fd5c8e42f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ef07fa-171b-4e3e-ad82-f7b591fb8ffa",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104fce45-2478-483d-9e66-dc6b09434130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8a3083-4cb1-438d-9aa9-8abd484bf287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ed2992-4bf6-4571-a116-0dcfb49c9fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46af05d7-f25d-49d2-a5be-2babcaa4e0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b455db-b0bf-4af2-b867-9176d9bb62a8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84f95c7-06a1-4149-820d-3c76124c1091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f31826-8c22-416d-824a-f77f5d142be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a1d82c-6685-4740-9f22-4741c5aebba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56cc4d60-7485-4a5e-9010-6d06cebedb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646686ab-71a1-41eb-9452-445151f96ae0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd847bc-71fd-4b8c-ba30-c53d7ab617f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cf3007-0a22-4eaa-b96c-a0cf38b16987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cecd69-0a97-4a90-85fd-ff015a95d3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b89c320-a2d6-47a0-9f90-d8e49c7f8aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c2df98-0f0e-4c7b-a8fc-f08cc96cacc7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606e9673-41bf-4d58-afd6-31750cfd9a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcbbb09e-bc48-46c5-8d6e-440951c8d841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59d2b7b-453e-46f0-9bca-51fce3d612d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5241f663-0db1-49ce-96d1-cf760985308a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527c9ede-3feb-4f94-a182-faf6398acfac",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fbb102d-8c23-4da6-8c07-4bb1d92ebfe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7059afc-347b-48b0-9a3d-38c5230f7ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f62f7d-3d61-4436-9892-50c02b8ade05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "48d3c7b3-e077-478f-8747-e82bb51fb8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8ccd81-e890-4046-b189-948755e865fa",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681477d0-affe-4ea4-97d5-e93bff905ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d0e49b-66d3-42f9-b8dd-22990c5f4f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062352dc-0c86-4918-b91d-9f1e10ffb1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa2d576-9e10-4878-a43a-4c25a27ab1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78551861-0cd9-4fad-a5bc-7533c079d539",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f344c6-8729-48b3-9c4b-9e0ea161a987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0021f170-28c7-49e0-8322-24ed4d30c62f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e5ba73-887b-45f4-a9f4-a61193546de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "79839f90-016e-4aba-a591-b6371d9e678d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085ad606-4451-433a-851e-66fef273a7cd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e079461a-d876-423b-8c50-45a4ea261465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9e306a-d435-43c4-89f9-baabc50b085f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76520bd3-d1b8-4752-95e6-c687d44e7597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "43bdcfc1-e0dc-45e6-8d8d-e3997064104c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e943d56b-a156-4426-870e-2cfae3238585",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "857541e3-0d16-447e-bef2-3427d5847407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6bdab07-d084-4c12-9d53-ee6d9d04b698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e22ad83-fdd2-4cca-8606-6938d1ea5bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9bb615-e1bc-436a-9636-f6ae4cefe79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bfbd0f-27c9-483a-b88e-df10f50086bc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4ab6d3-191d-4565-8711-03baa6b624a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ee7677-6ba1-4ec2-a657-70a38877ffca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c963f5d-b44e-4339-b33b-3df95a8cfa1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4e07b8-c302-46cc-82e8-9e932dc0a7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08eb132-df0f-4fac-8ab6-47104b8f154f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f53c4a-4aae-4b7e-94a2-066f995b4876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c6a9b3-2e39-497c-852f-435970531891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5e7ee2-6984-4fe9-b81e-012e8673bcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dfa2b40-02df-43d2-853e-8bad5550cf44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c5d584-13f2-4ed3-a3cb-9ca679ef360b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c1379f-70a0-44d4-ab5a-8766712ed541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f46761c-455d-42f8-9836-20182a500bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1a9746-14b1-428c-acdd-7351b373203c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "07799e30-82c9-4a5d-b5f8-07ba1a0a476c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b5991f-b9a0-496e-87e4-71ec6f38427a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac7dfd3-76f2-479f-8713-d6e2c9543c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a028fe-3e5a-4d82-8a23-806af9e7f859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24236366-beee-4c55-bcd0-3d9a5d9baa51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1319a8a5-350a-46af-b1b9-41aafde625e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0debe3-4b52-469a-b707-df3e4cfa2583",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef16ae70-8be3-421c-abe3-36b4fc602c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42127b55-d555-4c57-ad83-9d8767669e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4aac88-8a8e-4d8d-823f-6d8293c33003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b04fcae-5c34-47f2-94a6-ddfda1a84c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3117cffe-49cd-4199-8489-c306aab96a91",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a66a31e-191f-428d-9453-a670e1e5e3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be171c8-3fa4-4bc5-8f05-213f5d1ea734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49fc88c-aa97-40a2-9f9a-a92a5cd493a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "014dec9a-bbbf-4980-9b5f-0f04962ff9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28092058-49bd-48ad-97be-71d2f7da7e9c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786b44b7-3dc8-47e0-bff0-b298af5e19c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c64bf30-8971-4af6-b264-f52cde4efd34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa46bff-caff-4350-ab71-c069f5a5c544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6bd10d0-6272-4136-821b-0d3ada18cfb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91190cbe-cd66-42e6-be52-d04d8ab85062",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d85191c-9fbf-4481-86ca-d47ff3aad7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766db44c-ee48-4ff2-a74a-c921af00c97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973a1c74-09c9-472c-8f38-8d0c5ee6fca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d72e3264-c8e3-4967-917c-becaac5df310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1d6341-8d8a-4688-ae00-f30a9adee6d1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b79baeb-abec-43c4-bd87-3a3d04fc58b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8962d39e-7613-4703-8ffc-94e8df536a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c908a6c-4c58-4027-b9fc-0178a7579f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb0086b-0ef2-488b-9fd7-4252306464fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a7be9e-0cb0-44bf-aa12-952e92584a4e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552484e1-7ffd-4a12-b63a-2343f5b09174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3eb74a-531b-4643-b4e3-16223ceeff7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2829dc37-9e34-4fd9-ad29-0bebe68b9b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "74744db0-9e45-4aa7-abe6-c1eb2f970cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7633df91-d96f-43f5-b1b9-abc6993d6464",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d0d6e1-1891-4ab9-9bef-df5365b044ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f44975-d629-4b37-9527-5adaeb240617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ee8ab2-f179-4225-9272-d525ac637590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "642df88a-4da5-4d22-bd5c-088d926547ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34711ed-6cf8-4c80-adbc-2a0f47b521c8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4358e72d-c315-42fd-99ca-855f2eb6ffcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe456d3-11c8-4284-a167-edb2015ee9c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a54b2cc-669f-4719-ac39-7836c6ed5a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5088b49-dba1-4846-ad2b-51adc493feea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e2bdbe-8e6b-4e4c-9327-96bbc86eb1f7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6e85a3-8448-47d6-9fe6-febc81823b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59652b5a-119d-48fe-9504-f86685859ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e742b3-22a8-4ca3-b9e5-f5f9949207d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "22c750be-ac48-4ac2-96b3-ad83e232685f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dac7089-f953-4c83-862b-917b27b7af0e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72259c25-fb8e-4aaf-a138-33c626f9b7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34dbfc79-f089-4a31-81ac-09e00b67b91f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0016cb8-926a-4edb-9749-2caa1fe8bbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b70c9d0c-3663-4d1b-b91a-1d18b9f1ffe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84189691-bb89-4106-a108-3c19e11968af",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb57bb6d-cf47-43a9-b745-b987a009108b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4ab247-2f29-4de7-9f28-a4682111f3f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7860cc56-9de4-44a0-af1f-5366124708b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e543c6a9-9e4a-428c-8e23-5bb453200d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50e33b0-f848-464b-9f0c-2e30d0e3d965",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce30d79f-03e8-4152-a113-7cd60560f0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad345102-ca2b-4392-ac19-3a97f8f35f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbb3a6c-0858-45ae-9a4f-8c313079b3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd14d0f8-477f-4c7a-848f-e3e76fe3aabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef07cea-6312-448e-bd30-6743992d7e37",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865a674f-35f0-4fa8-894f-5c1256bf0147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e83eb6b-41d5-4a71-902d-5b07fb67e04a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41357b1-3d62-4f11-afc0-78512c755a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea1f5af9-f62b-4652-bc87-e49b4a071fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1e2c57-f6db-42be-bd16-45fab7dcf24b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3182ca-6f93-4592-9e77-87a541d7b699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023867fa-c62d-480a-a4cc-a0c12bdba7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1475c8b-01b4-4ef6-a610-1c1a16019b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11ef31fb-888d-4f1b-ad62-b72f05c4572c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6181f1-ecf6-4390-81d7-0151077d41f2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f083ce-2eea-4b97-8ed5-a6f01ee56e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e610bd8-8164-421e-b0e8-69f244fdd50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83873fa0-6816-4d24-b5b1-317dd13e726c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e636bd38-f901-413e-8537-287c7083baf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c822943b-c764-4666-9226-2ebd97066036",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93639c94-a31d-4feb-a09a-e303f7712ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabf1afd-8ab3-4e30-b1d3-b53809e56079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152596ea-0b13-442e-b4ad-ba9d1fed534c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d75abaf-886c-4a41-93e2-60d6c18f64fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4c6fe4-a9c1-45bb-9d83-327988959046",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601c7a8a-63a4-4b22-907d-cf8bd3fc4750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3266ee2-7827-45d7-b385-ea90790f6534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9821b4fc-0f21-4b34-987d-ccff733e36d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2fbf5e9b-c740-43fd-b39c-d5d9c1ae6370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c88e3d4-bb94-4fa0-9820-a977366d55ac",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2217557-1a3c-4499-8830-b5f13ed0e588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651f3c81-797c-4b7b-8ad7-120c971efbaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba26873-43ee-4fa7-8eab-8ad4b2b0829e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ad27ae0-8cd4-46aa-bafe-37cca56398e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7f8bb4-804d-489a-bbbb-c9f89385fc34",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a946ac69-8a60-4ff6-be32-6d21baa8d3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88165f7-e1bb-4f37-940d-c3c2c00631e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10ac468-480e-4375-b9d0-c3f8673b4d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6920d235-25bd-4388-855c-f40f16cbdda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf1dd74-df96-41ac-bdde-552e3e28774d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481fc18d-e4b7-4cfc-a211-cc0bede2e83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e6b0947-9bde-4f4b-94fa-18762d25e352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fa0546-a2b5-4f38-bdce-e783982a2ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e89247-eb29-4727-9e1b-7a53bfabc471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79569ba3-eeae-4fa4-8c61-8bc96fda9bef",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1b1243-68ee-4882-ad47-48f9b5980163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9422a07-b5a5-4e81-b6d4-ab215c421f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e0809d-5240-41d2-a5ff-e043eee1a8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9af559c-a498-4bc2-8b95-583f186fca3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebe93ae-a6c1-40c9-93a2-33b0feaa9bb7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae547bd0-52cb-414a-85e3-1fbc886d39af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea28554-67d3-465f-ae72-237ae2af213e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e9abb8-a7f2-4472-8043-fc59737d0353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ef7457-20c1-4711-96dd-298606b8ab73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43316bc0-37e9-4f41-bad4-f05b680b5f66",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307e97da-125f-4dd5-a2d7-1fa93e6f6df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a52a0b-c3fd-482f-93e6-8c64f4ee2695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb81876-ebb5-45ee-ab71-18be6129be33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd5c5f59-8d90-40e5-9fa6-f0d4c0b08534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c344a4-a41d-49a1-b3fa-95bd0e038435",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8173d6f-c427-4585-9d75-e57905cab97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d55049d-d6a3-435d-ab43-14c6ad6eb5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b104fc-f52f-4df4-beee-562f9096d478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "82a446af-c6b2-4414-8214-0009001f79c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0638cc-d22f-4468-b512-708133cb09ff",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c216b2-6faa-497b-affb-64dfd8724bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b5afa1-73d4-4045-a087-1b741c8c6f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06167eec-d3b3-440a-b266-bfcf24f23a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "291a6b62-a19e-41bc-9003-194690b92def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6c6208-4a73-4ff8-a158-e0a158f30a1b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e017618-5b54-4b04-b5cb-f181ca4b482f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adaf460a-38c9-4df4-9e80-e496d78b5a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b46ec50-6f5f-445f-b1e6-7180c649c4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45ec89e2-1ee7-4cf4-9ce3-4e15f204ae12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c379889-38d6-424f-9d50-8be1b31e857b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125c3c95-a7d9-40d8-b404-b82230c3725d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3405846c-441f-4569-90dc-8857cd94b0fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b370d63-1f05-48e2-a1b1-32a39bc4faad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b2cb9a-577f-4937-bad5-6b49c3de4251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed717cc4-986f-4fd6-b967-9a900fc71633",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e817d2d7-0c52-4a34-b31c-f9b376f540c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42bfa7f8-db33-4fb1-a924-59e621aa285f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8213e60-b06b-4a9f-99b3-ae67cbed20d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21dc35f1-fc07-483c-9428-668fb3f67be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dacf349-4108-4418-9fb7-c7a2a9f94b10",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf6521f-e6f3-4f34-b45c-832765ac3753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d5e2d6-1cc4-4c8b-badb-e5803b5b599d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e3a952-2bd4-425e-9a7e-2d7ccac04393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "858767fc-57b2-43dd-8a4d-d7bad612f3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f66e8a-2811-48d0-b7e3-5aa800d54c42",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19cc4dc-965a-4181-88d4-595c618b2d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ea22cd-26e0-48a3-97e8-c54e9f88f563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dd76c5-c9ca-44da-8c94-c4e371967dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6465848b-7ef6-4442-8e0b-3d2048668dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6ec89c-39c6-464c-ad0b-f4950db09099",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d35f96-095d-4e6d-ab7b-7bf2e527367a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4afc5e-8ce4-4e1f-bfb4-d38482c6f854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d921b3-90cb-409d-b805-8d9583e69c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a8e4fb-f6fa-4725-95f3-1c513e00e57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18dafea-86cc-44e7-a2cb-43d391fe7950",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0daee38b-fbcf-4661-9f51-964362785e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d774883-83aa-482f-8a32-b4b0834b4a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6dc539-568c-4d56-9a21-09280bd539a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bac90408-6ced-41f1-ac18-a99c9cdceecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a7efb9-5257-4824-8de3-57f59ee912a6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292ac31f-c143-4530-a540-b96058c677b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e33a423-4f29-4efd-a0c3-9c1c1d6b0a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e3382b-2305-402b-9ba4-ed33f6991f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d8a549-be9f-4bd2-81b9-190797876a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20e99a4-c759-4362-95d8-9137bd74aa73",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1b0029-717e-45dd-9131-5c82580b8e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe07b41-c280-4a2d-a088-232aecd586ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3f365a-123b-46dc-b810-cea22297952c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "233a2684-7470-467a-9240-85b9b73ba555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c708399-f092-4763-9a96-805450badb63",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a63c106-92ad-4f21-b2d3-ea3108e2a051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c9975d70-bc63-4583-9a52-dfc355392d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7ac80c-f561-4690-a7c1-e4214f3c19a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "367e84f3-d50b-4d2d-a8bf-8dd3188148a1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7fb59754-6aa7-470a-a974-94a5ceace630",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e34cd464-db6d-4d7f-b0eb-a86eb6d42400",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48c5f4f-6974-45e3-93fe-845c3d2243d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78e4efef-d0ed-4a40-8e55-b93edc3bc2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdbe600-b2ad-4981-928c-58722ac50751",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bba3f0ce-6e92-4d54-bea6-cf3ec02406bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4322bb0-1c3b-4a45-bce4-f6b5b5549109",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0969f57-dc56-486a-b723-ea0ee12ccb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3901bd2a-2277-40dd-815d-4d211662a4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fcce6f-3e40-4957-86ac-7fd3851d1c36",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11df69fa-c1f8-458c-b16d-c989ed5ca6b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d17dede2-4eda-4c87-b754-86d857add8b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff4bc5b0-bdaf-4940-8237-62872e5f7fe6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "152502c4-e8dd-4945-b72c-71f1e4e5b073",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e18d5db-cd31-430e-a020-d3955c3f3679"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6fed183-1e50-4aed-b33e-f8ab7d34ed06",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "13988666-2ca0-42c4-9cbb-7cc1d564d2eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c70b801b-8c7b-47e5-b6ee-54d6b9e5a81a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f97d003d-3f06-451c-aa73-3725c6557755"
                }
              }
            ]
          },
          {
            "id": "11c77cf6-0a94-41cc-ab2b-f27371d6f010",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e042d98b-fc1e-41fe-b9ad-cfee04abc041",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0cb94ff4-fdbd-4441-ad16-41655c23dd80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fce6baef-11cd-4933-805f-b7270c484275"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea8adeb2-bfc8-4393-a8d6-353d801a30ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c21ec2b-463b-4dc9-b976-48ac71c0021a"
                    }
                  }
                ]
              },
              {
                "id": "23438e51-0511-43a0-9a4b-c2e29c73a392",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6cd84ae-c04e-415c-845a-e38d562ff87f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "baac87c4-e4ee-4a67-930d-12036f28e889"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "269de657-0dcb-43d9-9a3e-b5b24f48b349",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ee9e1873-00d4-4923-ba1a-057d3de236b1"
                    }
                  }
                ]
              },
              {
                "id": "d1d7ff87-df31-461c-99bb-e7db67b7627b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "951d64dd-024a-4642-a9ec-fb5a927b8c39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14eedac9-51e5-497c-9a4f-c548c8526e53"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "178a09f1-2253-40cd-9e51-e48e1cf1e873",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9aed09f4-286d-4cc4-a9ce-54237566c37e"
                    }
                  }
                ]
              },
              {
                "id": "c472b56b-4f92-4be3-8bcc-8794ec78381d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a83508aa-a38d-427c-9792-472cbba9216c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2bf7c10-8356-48ed-aac7-01296c7a14e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "316bfe12-b3ae-4b64-b7f9-d764823fe2ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d2494866-5408-413b-b15a-bb71a967468d"
                    }
                  }
                ]
              },
              {
                "id": "56d450df-6e09-4fec-b29b-059bf7ca5b05",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a898851-1605-418d-a62a-88769c468dae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "402c9943-6f3d-456d-bd1f-4c621d1d282d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd47276e-10db-4b1a-b502-f1e4a8f7f028",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fab5f0bc-52a5-4250-8d9d-85cec12d4a34"
                    }
                  }
                ]
              },
              {
                "id": "86dee393-b71e-4985-9035-574bc8033f23",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30afd64c-ba92-460b-b071-c92bbdd071cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46200e01-b38c-4933-884d-b525c543c044"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "222424bb-e37e-4510-a956-32ebc98e98b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4d95740-58c6-48ad-9b15-342a4ca51f35"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "393ea3c0-94c4-4a5d-b711-982ab44cf438",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89627ede-c49b-4f9d-a67e-0f9f2ccba703"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f148b29c-3620-4f72-aeb4-cfa11804e2bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2246cc0f-a9e3-4096-a2fe-b172604d05ae"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47762f2d-1ede-46f9-baef-bfaaa1218244",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f93b8c37-74bb-4348-ae8f-2da23f622279"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28cd9f70-1dbf-41e6-a63c-7b0b84d0bfd7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "245a67c9-3436-45f2-ad8f-08890b468a37"
            }
          }
        ]
      },
      {
        "id": "b85a595b-4d2f-476a-aea8-9dd26f234974",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dffd64de-868f-45fa-968a-fc27d1f3ab75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b3c2db9-fee5-4fb5-813e-9fb1b20e9e4a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "92209188-fadb-4571-bd6d-861fa811c602",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb516fe-530b-4adb-99f7-a6b561d739a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ac3a5e-0779-4e47-a570-ed3e01d8bc8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11056c9d-fdf8-49c0-a41a-7be885853045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "23f7281f-08b7-40dc-8a22-09b448053725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df0f1be-899f-42c5-bf27-fc238e46d9e4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae7dd1a-3289-4939-bd65-aa3d3b36483d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53bed36e-d2cc-4637-8d71-2328a51726fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3ba46a-a43a-4214-b31a-bada2f2a85a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "03f802ca-4a56-4467-a8c4-5dc96cb15fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f378d2-382b-4c5d-9dd4-875e94cfe3c9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e8b7b0-ccc3-485c-881b-75b80d4f7982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f1f0d1c-2704-4622-84d5-651796a1bb90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de8a6c7-863c-44af-a816-5690d6255e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5a3c44-eba8-4ec0-bb85-a7518266a3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb23106-9c1c-4d82-ac3e-181bd74d0388",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6831e816-f32c-4aba-8de2-98c5a623b6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b54618-22a1-49a0-82fa-5703ec29b2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131e7615-6769-4241-a869-cfc8c0b48b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d43a812-f334-4716-8a69-f791a007b6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d358b216-3b9f-4575-86f0-8c5146d4a3e0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e826c38f-c6eb-45d3-97a0-6d2f2eadb470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38611d9-14b1-4d0e-8339-6a233156dfe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357428fe-8082-4492-b40d-b2418b011734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e79dfa1-eced-4c7f-8127-1a45880be485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef473978-9d95-4039-9df8-780fb7b137bf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca3097b-b7e3-4ec3-ab32-4f394a81fe2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d686c39-2f8f-41b1-8f7e-e98f7682fcf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d962a5fa-d5f5-4962-bff7-c47daae88fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3c3401-1821-4894-9ae3-07fdb80cae05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e25959-5791-4d75-8c36-f26f2f44fdf7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6214fc96-57d6-45fb-a200-805c6741f499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c7a384-2a90-4bb2-aa65-d6766c586705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d98eeab-9105-408d-93bc-625c75316dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a13f9fe5-84f6-4da8-97f9-8305517ed369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f0bdf5-fff9-4ce8-af8e-f1cf73e3200d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be60c282-dcd1-43ed-809c-b0d943834b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db77659-2d35-490f-a9b7-9af7b62c9848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2234c144-cb8b-4c47-9b96-9c066c1ef49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "542c4fc3-b1bd-4475-a837-b5f33492000e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b05658-82e7-41ed-ab66-847c1db170ae",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a362ddc-a33c-4046-a17e-138a88a65ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b09c43b-66c6-4291-96d1-0acabd919ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894a973d-c237-4b57-a19d-319c72d64800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82313d94-23cf-41ed-bc51-862cd79b8db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca52012-4fdd-45d2-a491-a8339f945f90",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47709254-696d-443a-8971-dc79a0182b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7924b310-182e-441a-954d-23cca0d9e525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887d1059-90a2-4e40-ad79-72bc31bc0dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e3c299a-e6c1-4c02-a2d1-5de378ea79b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbdcf51c-aa3e-4db6-8d5f-c6995dc68c9a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ec06d5-ba68-4c1f-9887-aa171996e5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682da8e5-cf91-4221-ace7-6c56cc55c7a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad915bd4-7b7f-438d-9fe5-1ded3cf6fb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b18250d4-e3d8-4c7e-ba8f-83f309164a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89547341-35d0-4f7b-842d-ab471a1b6df4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a45443-b989-4161-99e2-bcfaffff87a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64205f6-235c-4abc-8f63-ef7bf090dd77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19716a8-8262-4a2e-8e06-c5192faa345b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30e12ff7-ac1e-42d9-a7b2-116d91ccbe1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dab4d12-60a0-429b-a529-428f0b2a4a6c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590a9b29-8fd9-4a92-88dd-50bb522e0d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcdd16e9-830b-4349-b2a2-90677d310e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b843e1e-9ec6-4e00-b3fe-1da691f18c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f41fbb6-a7f2-46e0-bcd6-33f5a3715358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936bec77-9be8-43ca-99ed-e51cfb4082d3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f2f1b5-58f2-4137-b5c7-0de4bf1ab842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8edaf7-ae9a-4df2-9655-eb294fa6b105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917d723c-c410-4a0a-becd-ce604e22b821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3af599-1894-4afe-90bc-2b02c1515fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0107315-4064-47b3-a084-059081060561",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c9fd5e-eba4-487b-8275-be1d96fc2d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cd00376-4410-4ec5-a5aa-0e3f31ca5157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97cd9f2a-9db6-4c10-af9c-519b98add291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "35b8f837-9203-47c2-8ed4-976dbbeab31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddffaa8-7538-43c1-a5fa-d5ea8630c1de",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f039a4c4-a2d1-4ca1-9608-a3146d6c756d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83be467a-2648-4565-97eb-0a70ab9a7b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80074236-071f-4585-ab12-d5091050208b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2634d6a-1da0-466c-8d0b-f421c506c68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e61724-2df6-41be-bde6-0a884e872020",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25242f68-a192-47a5-a93d-518f7fc4e59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f099421-fb39-46f0-a832-2dfbe38abc3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf35712f-e360-4854-b429-6220bbb094a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b695f932-e597-462c-a84e-ad82178529a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e90d3c-3eb5-4594-9a4a-4c2a2ad74a5d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dd69dc-a1d0-41d8-b16e-f7329255cdd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a18f808-9938-406f-bed0-8f926432239c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9cfe31c-2659-4a6f-9530-73af785e8d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "67ebaf13-f3ed-448e-a8ee-bc34a331d8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2752e210-3c10-44fa-a9fc-fb2615ab6814",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0bc0ee-848a-4924-b184-2675681fcaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db419067-e530-44c4-82a0-4ffd5d908d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a5636a-36f3-4692-9691-57750512d896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "349e8af5-4d0e-4e45-be3b-f33012308097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8090d2fc-95f8-481b-9361-c314904aa85b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76e136a-d547-4168-8327-95e2115e40d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eba3bf5-1d51-411f-8914-a0099d768f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435d2512-fe52-46eb-b876-a4f764c11c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69f6eb5e-bbe7-46ff-a729-7f13a4f345bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7278d4-8b88-4e7a-a908-0e62fa7c13c3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc8add7-9726-4a2c-b986-1682f75f2d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d321f87-7b1f-40a8-88aa-e74444436b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adee774-fa04-4765-bd16-bf5cf545547a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a94978-ed22-4553-8a70-527b64483e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12834439-0fab-4932-8d4e-6aab2f827211",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82927ec-8c38-44ad-81c5-28cdf431e28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f21149e-56d0-43b2-acf3-9ee8ebe093cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d510bd-7b35-47c8-9b5f-db68fa6477dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11ae26f4-5c0d-4a40-9ed9-80d450d3499b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c86c2f-97ed-48b7-a901-0a1c577da419",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e1d578-aa16-439b-8216-c6cc25100ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe8b0ef-566c-4cbb-9cc1-23af74a87138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d7d12e-8962-4f51-81d8-a825bd7dd9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1abb431a-a2c8-4538-b2e6-6d766ba7bb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2eacf9-5bc8-4de8-93f9-accb1e6dbd7b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8b34cc-db54-4fd1-9782-047a742c1b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4cac28-5e7c-49a8-89fa-5031eaf81f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df7de4f-286a-4d3e-8c45-c81621e51a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec177b05-8753-4a12-902c-892f833710fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e581711d-f7f8-4277-bc76-568a0c0137ef",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77276200-e4cd-4660-91f7-2b500b6e77da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74ea25b-6eac-4755-974b-d13d2b351dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc8ede8-eb58-49e6-8c91-eca679509fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe8f400d-721d-470b-bf20-d61a7d8d5067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fa4da6-99a0-45fd-bee4-bc3c0d8360f9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558d5138-6d08-4bcb-ba78-272ace7ad0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a99cf2c-947a-4316-ae47-eede299bd425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcad76e-4424-4f81-accb-6f082ceac9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a5412c8-bf0a-4534-be59-ebd568ca54d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be44c29-7c52-49ed-b888-f5b3f2d07a3a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae777e9-108d-4aca-9c51-bd6822e39620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "331f7ff5-848a-4a25-aeca-08c476fddde4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2605ee1-f92e-4a49-9e93-608bd08a8d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18ce8bd9-ed59-4666-8f49-090ac609f275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af86eaf8-0b01-4975-90ed-8175f65632f2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1d4321-4c39-4c2f-80f0-2a253bd63127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6125244e-809b-4378-a9db-f62882fa0043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9aa0df-10fa-4033-a53c-2e49e06c2ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c41cd3e9-f8dc-4ff7-aea4-67977a966be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6363a38-83c3-4a34-aeba-428b1c2c5fe8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93951766-7069-4612-895e-89b986b1efd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b880abc9-4e0e-4a62-a60f-24affbef5bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e431e4-8a3f-4b34-844e-50147f20d16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b18ae3a-e25a-4a06-9676-6096e6769e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878cbf19-4f30-430e-b243-a05f0bb43b55",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a165b0-41c4-4b14-823c-fd186a46b19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16016644-384e-4b93-83bb-6cbb17e503ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e69a7b-2853-48eb-86d2-53b07ba925f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6d7295-f597-41f4-b9cd-383dd31f374b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d4ae28-66c2-4618-a568-af48a815a556",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92aa67e5-bbf4-47dc-b078-1e0be9f20157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b26636-7883-4e05-b18d-3f45ab3188cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512f6211-e6e4-446e-9da8-219a22e0273a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ce7ee1-fe5e-4181-bf90-ee1193934fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3b1f57-6b8f-4a34-a7d6-78b44f20d287",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac1018a-7908-4dc6-b4d0-ef5e820ea9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a88931-a14f-4211-8ce8-3d826872129f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fa65a5-ceb5-45ea-8a41-08bfb760d4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71b08802-e41f-4457-9312-b79f1adb7e7f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf328b4d-f1f8-4123-a80e-03f1f1a5ef02",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab9a5338-d037-4fc5-abf9-e879a3463733",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8675af-5bfd-4120-a250-7c20ac31d34c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ee09031b-cd5a-48f0-bc4c-585c5cfd9e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98a3a18-a0d4-48c2-bad3-7d7f14b5d75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce715553-ba25-475e-8786-4fea644d2237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0902587-ccd4-46c7-b930-9ce3455b3152",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e891cc2-7233-414c-9a90-10ffbcc0688f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f272ffd6-1391-4f32-8c15-95074eb5f211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986a3526-fb34-4434-b763-3896f6f90707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84c3e34b-a71d-4687-a042-41880e6a734d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21373ea7-d9c6-406d-92ea-2dbdea42b771",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a96e68e-181b-4f0b-9d74-2a5d805c4c29"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb567f82-c0dc-4f17-b1e8-8d8365b39189",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0ecfd49-9874-4eba-b890-07db572a4bc3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bda64fea-96ed-49c8-a16c-a82d60548781",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a82ce61c-2b75-46bd-a3e1-9449f82fc07b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2ab8eab-1abb-4acb-891a-685bee822600",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22c75cc0-b838-4d1a-9174-ebe46e35a51d"
            }
          }
        ]
      },
      {
        "id": "a69b4113-cdfb-4b6e-b16f-051fb63a418d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a93a3a32-d2a8-400d-b088-8a479a941d4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e80e59a-e832-4794-8f59-5f5823b4a58a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "249961fc-02cc-4fd6-bdfb-a2b71b800c75",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e265c8-beb3-4c18-9006-138fdb167f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b80ab6-4093-407b-8ca8-691a51c509d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6406d063-6166-447b-86e6-c071b838fff9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8438e085-6edd-4042-b6ad-f74f32da0880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f900e0-983d-47d8-9010-8d6faf0020f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d53cdaf-3ed2-46a2-af32-e65f027dde7e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1b44a4-ceb4-4f44-a297-b517be816d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28587c10-0ebf-4b58-95f0-79725b9e8f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8dce22-1320-4e6a-ae49-ea937956119e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3fa591-0346-45bb-a415-998c5eb2f611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c8e824-8829-42b1-afca-653cca8a0547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ecb4b6-5f40-4c83-aa0b-3e9bc635a6a1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2c5ef9-e3fa-4c06-839a-9c98996d038f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180f92cc-9539-424e-a534-43815442e8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baddf413-e2e2-430d-991d-9bd02a68ff2a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d232b94-9a54-42ac-8da0-9d3c4c5a699c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80928b1f-dd44-4f4c-a498-3b56987b95e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb3ba5d-f6bf-41a7-966a-06ffdcbe4ec1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcef5a7d-bf04-4e08-99e2-0892cb504bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a39d7470-9e53-44cc-a043-87ad67969fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b0cbc7-80c5-4e2b-b81e-ac7480d9a37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6b6373-34df-48a7-9bf8-29e7fc91585f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7f8dbf-9546-492e-94e6-de97678622fe",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55b88f4-2c8b-47a0-a4eb-b65e91e788b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7871bbac-d414-4239-b938-93293221394e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3342dbb8-9389-4d3e-b52e-9ec811e5b2c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "768ac4d2-1778-4c9d-bcec-410e43c0b554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76153a97-00b5-4a39-9e67-3c90803cb23d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62434018-d0bc-4115-b421-f0710ee1d761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19adef4a-9d5e-41ef-9808-78edbe3dae2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93889c7a-0c6a-47db-88e1-21c14e395c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d49707-02ed-4b1d-ad46-ea6b957acd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b96fbe8-c8e9-42a8-8bac-36937b44457a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5d5035-dfef-4aa7-a9fb-ef4d5fa7b4a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37fc203a-1e5f-4842-be8b-a38c592e6829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b68459-c970-4bdd-9b17-3a6374d6ce94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3506cfa3-a9c2-432a-ae9f-2449f5551da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd608cf6-0827-4f6c-a276-0810bd6ee673",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a5200a-1452-4981-bc41-be993bbf4a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c0a1118-98c7-48b4-9cda-d90c90e1f839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32a9c43-c6cb-43be-93ed-1b66809a37a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d90a010-08f1-4eda-89b4-5047d2e6bc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794cbecb-ebd1-4f25-8aa2-83c1e6dba357",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75094e89-797a-4441-b091-c1f4c974afb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf45728-92f1-4b44-922e-4ee12072b5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a88464c-d518-446d-88a6-0dedd42a95d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5991bb3c-4222-43bc-973e-7cfc5883f510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc4ec52-a614-4af3-8e0c-d62c86617230",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f807044-78f3-4dac-8435-83e7db32cb0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "260792c0-a302-4b73-ac78-faf971bab2ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfff7e9-5f01-48cc-a7e6-da0e8b3858a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960a123d-4bf0-475d-98c7-edc7db054973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055b8fa7-e993-4d28-b9f7-0e4b9c4bc9b4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6e1933-c9c2-49fc-b9bf-51e9996a6957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01c2fd6d-bebb-47f3-88dc-116f34b4495a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc23dfa0-5265-450f-9147-14d5519f89c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b9b826-db46-4dac-8896-d9b9f69bfb7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4db47e9-e762-4328-bf36-3efa322d60dc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714bf01f-0703-4d61-9c27-95ade25bdc22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "423b0d4a-4d5a-4410-b5de-21e1cf7ae4c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f9a005-d5ec-4f03-bfaf-a92071fc2c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c7af5f-1664-43c1-a015-1c7a7ea4fa7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa6b2ad-3baa-4dea-89bd-7c8224419e72",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca9651a-c4ac-49ca-9d91-19257622c2ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8bc10d1-49f4-4729-a974-ae4e4d99afb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25014c31-ec72-41de-902f-7e00307a4c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa76f1e0-e7c8-4a51-b8e0-14b8b6ece60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053f828c-2e8d-48c3-b55a-c45d4f8d864f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e44b18-fe37-4e41-a2cf-f3295c82db3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14444792-41ec-4f36-ab38-202dad03de0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aade061d-83b1-4bc5-9bd9-882f3e38b761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e14866c-6a37-40b0-8ee1-5688ea5957f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db4913c-62e4-45c1-9aa4-42909896eb56",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b7c924-6038-4a65-a6c6-c7272a9a1b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db04bfea-5d15-4a78-9dc3-706346176fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebaecaf-f00b-4d06-841d-630eb6c8476a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379e8449-62ed-4c24-852b-1b9e726370a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85f91ae-d86b-4121-9ba5-301155051ef9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547c2f21-de83-4376-89e9-dabc561cc300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0747cd-614a-40f0-af69-097b48351e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3db313-083e-43d5-9ced-2ae5119afbf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3c6c3b-5e2e-4371-8671-7250cc30f135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d88263-71c3-43d5-bf31-1833086daa34",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2264d5-0d4e-4a9b-9ccb-c288292b67c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10a6763-93ca-400e-8ddf-a7ca984dca44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bca7c8-8007-453d-bf1f-ab234149cea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c28091e8-3db6-4642-8168-e84d64d1a6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d69fc80-d634-42d4-8e8f-76a0642d7fbb",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9a55f7-6097-4dca-bc61-82763734f691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c26f99-8009-46d2-a1c3-6e86bd62f7c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "876ff85b-9a5b-4641-87fb-deaba04d3911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b99ae5e-74ef-47c4-8b93-83d9359b5a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ab6572-90e2-48c5-82a6-77722f722175",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce19975-e9c8-4445-ae52-ecd8441ca4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9eb6f8b-9fa1-44da-a913-f0c1567cc989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9191b833-2531-4a6b-b5d4-f362db0ea050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86979e80-ed27-4197-898d-17d28b350c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4821b8c7-0d7a-457a-8000-763ea0f8fdb8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622f2531-cd0c-496c-9839-4ab1e1d4f028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b798c67-548f-4eef-8613-4f69385062d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c760b7-10c5-40d4-8565-1cb03e8f3118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895eeb27-07d3-4c3f-a2ee-e0631580a305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd880db3-80dc-4896-899f-a22e865fbeb4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd719e7-49d8-4b51-8a47-0e025eee6adc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "821ead6c-8196-45de-a01d-55ebc97f21d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ce8ef9-cbb4-402e-b292-622cd65332eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e553610-5cd0-4a6d-8031-ac61409fe410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11aece0-1c7a-4988-b8ff-314341990dbd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1ec845-a45a-464a-9755-f675dfad7c60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d069f42c-7944-4a22-82aa-f7a63de11a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75729411-5fa9-419f-a5ca-feb698cdb7e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6d46c8-ac6f-4a20-bd32-18800024d3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bbd0dc-669e-4e6b-8038-1d8e26f7dd78",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2731e99-eb6e-42eb-9b3c-b5db25362b70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56d6dc33-eee1-4e51-b84a-7f2ff19ec269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebef46a0-f242-4620-af27-5742b60fa67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0baa2d59-958b-49e9-9bf4-15b5929e08c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149c4e9b-9156-4d7a-927b-0b4e22924b69",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9718fd-b9df-4e91-801d-b73022fa2212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58bcf60d-dc39-4f12-9876-d7ecb28f3265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bede9126-05a1-4bb0-a729-f3029a71fbc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91af6655-3425-4fb6-bbd7-fbf11b772357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84ac528-1f8f-46b8-a8ba-98c207bf8c30",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bee1dd-7fb3-40ce-8730-e9c9afcd078a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7c6159-40bc-4375-bbc2-a24045807c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "debc2485-f143-4c4c-a709-221c6d8f754c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf9b984-4af1-441c-bba1-33055f2ae082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a984b96e-c0ca-4d2a-aee6-4d0030aa7592",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e013e513-e070-4246-8ccc-70eb8414c08a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "620dc2bf-efef-4a63-97bc-d33321c28034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "665b5a54-5010-4d98-8ba9-6f4ce1e36244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7f7b30-1848-4d00-b64e-4564acc101a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d92e861-6552-4fb8-a5db-000fc9e5aceb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4fa500-12b9-4538-9df0-c716821746c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ce220f6-15d3-4ae5-9905-be218e030d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c01b9d3-d208-4d1c-9fc0-8c607fa46d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c3e861-2970-46f8-8240-c7ae50cec745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afb7c1d-d948-406e-8680-b229114774c9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d9b246-1367-4bc7-9ff8-f08a8c13442c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ced2c2a-b1b4-4e25-96b6-8bf5b99131e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3a9016-61e8-4ced-b5c6-e552764ac830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1298a5-382d-400d-827a-6cc07cd6ae80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e05a22-86fd-4b02-8779-3bb099609c10",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35c2af3-f640-4788-8daf-c1461f1bb765",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbb4a7bc-30c2-41af-9204-865662ddeca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1b720a-a2e9-46bf-a82a-dbc70e6e4870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d29817cc-5b6f-44ed-a75c-c619b546d510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308006e0-1a67-4d3f-bfcb-9b4f612ad2ac",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa450971-c117-402a-a846-d7b614bd7da4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a92505-7da1-4c8b-95fc-ff32e2159b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea13ec3-555f-46b2-bbd5-39424c6ec75d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1e1d5f-4b02-40b0-ac48-916f7e2d490e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d6bd38-4b5d-43a1-91e4-8598f97f63f1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c14248a-0d81-49b1-89db-0b87e1860fdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34f922f9-d79c-47b9-ac61-3ed186488cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa6dd1f-a0fc-4c3d-a217-2421716f533f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f3c5b2-48f1-4b43-add9-4c103527e67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91df2fcf-1a31-4a49-951e-292730f38888",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459c9852-14bc-47c7-9a2a-8ff7d2407e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "997f64e8-e13a-42af-8b52-070299f1d811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c03d59c-8d3b-4884-85ef-0cd8dc6bdf22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48000bef-a24f-4152-a4e4-256209855763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a827ac1-95ff-4584-8ab7-ffed9bf924ef",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31159687-85f0-4dc5-ac92-52affb654223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "112974b4-0627-4857-aca5-a83db1f16ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31251b1-6c9a-4b72-81ba-00a06b530c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48bd6875-13eb-4c3a-ad62-53fa20fc71db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909e794c-a741-477a-a08f-798357736d47",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5812a4c-dfa8-49f9-8176-4df605fc80a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0629bf7f-16a1-41ed-b6d4-096ece0e8eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "390138c0-c64d-4519-be93-a5b1aa89af97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49c8d59-27f9-4749-ae7a-a0ff94333284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bf270e-0f14-4ee9-9f79-46a3da4a8393",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634b2a68-2346-4556-869a-69fa337636c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7fdc6a-a950-4753-ba9d-9704f4f7b926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998f8147-337b-4a19-ad7d-74f8ac8a9a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aaeb9bc-c5c5-403d-8bf5-d9f726ea3785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebeafbce-af3e-418d-8a65-8d3b5bb0f8f4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3637f307-cacc-43b3-92fe-ab506aa5599a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6758a57c-0d58-480c-b8bd-161dc986634c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe58d3a-5fd4-4f83-a730-9df8141664e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42f6be3-34c2-429a-80fb-3381934acbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c424cf-3565-43e1-b029-a6724bbf82fb",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a190f8f-a4e6-4260-af1a-0ef13e257e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed41c3ec-f5da-4d85-980d-047e561026c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a768db64-7056-47e1-8d36-9e4f7c7803cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c062cc2-c4c4-4d93-967e-1321460c01e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff66210-766d-4ca0-8c4a-abcf3d01242e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa965639-4153-46a8-9dbe-5d3f2aa8b0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7624924-7c27-4a56-b46c-8f6860c302d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8aca4ca-844c-44dd-89a3-7ea0ab70f605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75cd9a4f-78f9-4def-9f7e-87bc978ddcd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac0dddc-af9d-43f5-8dbf-3a91e8f217bc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196384ec-0911-4539-a6bc-d0d8e87e2be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "022e44af-8f79-4956-8298-4ecee20dcd8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47972cf-6c63-40ca-9f63-6fd46f506c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf9f8bc-e167-4c56-8055-9f1c6c654b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e41c8c-cb81-4dba-96f2-4e8824a74853",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636f3f35-fb9e-4986-a215-2bc6ce1196bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f17ac41-aff8-463c-8407-ac5cc0424dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cedf62-f3a4-4d54-acfb-bb663b894ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee29e479-9421-4a50-8bef-4fb2bfcfab64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e102aa3-9cec-49c3-a35b-8540f9a7bfb3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb37f2a-289b-4338-9aae-b7e2e6629b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19a021a-d514-48b8-93cf-8d193d274bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da83fda-1ef5-4c70-bbf0-be1d41902c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8084feeb-45bf-446d-9729-b5bb5c0d3f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24557b1-30f5-42b6-8c85-458e443d34ee",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfba5f37-489b-4418-bbea-16d72a3ed11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3ac25a-6260-49d0-a6db-a864ff546d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "933197af-1723-4582-85c9-1ffc0c41c572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7bd33c1-d00d-42dd-b375-fd6bffa4a1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee556d34-8ecd-44a8-bf1d-5eacd80c4d2c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc5fe56-5694-4c64-8218-c19e95513881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793e6a81-ef8f-485e-84ac-84bf8e929236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194578ec-a132-4c02-bbae-9d95d360079d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1b72fc-4a3c-44b1-9b9e-d982cff62b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1146ca2a-6d11-48f2-a8d7-0d42f24c610d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b8889a-13d3-4536-b75a-11aa473aad4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509a1717-2235-4ab9-abac-ae6cba04215d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "267147f0-24bb-4205-905e-d33ad8fff956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa9f419-1692-427f-8404-0e243a38d5a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65d13d9-3f7d-4984-84e9-23a74d4217d2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4618dd7b-280b-45df-b24e-f896106c70c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a130bc4-abef-46d3-bc1b-81d847f81778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "595fec5c-6ac4-494f-8e70-e786de1774a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "424639d8-4f78-48e8-b7fd-ac84d617b22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3daed2d0-b469-4e44-b50c-295e657853e5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808a9db8-a8d9-479e-90b5-852be8c2f10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13224740-4bc9-48ba-b3bb-2fc872074d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6baec1b-4249-496e-a588-52823751cdb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2db23d8-729d-4a70-b0c7-9ec628caa8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18269c5d-9e0f-4d1e-808a-9306da27b12d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7484d7-ceb9-419d-bc18-ffdd2f6a2397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72ebc90-bf55-4176-a8d3-5a6ffe6394e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183ae4c5-acae-476f-9fe2-f3e9c0884dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5327953-63b8-4fa6-b9f3-b239504c9b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e4fe70-8473-43ea-92ea-d6700a02302c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ce0361-ca1e-4297-9152-f08be5dc50bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3daabe57-329b-42e3-b16c-40a7c60260c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb24e7a-5616-4158-abf7-13fcda8d91bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078fac40-b4af-457a-9245-d40e23efbece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eca2c4a-f26c-4545-982d-3e7faaafaeab",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24c4e3a-cde0-4280-9748-01226673fe7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72226b58-7f75-4ec4-a3e8-609e5f3160bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b3c58d-8241-4be9-8aab-19478935c5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96b5c0cc-5bd2-4691-b27a-835f3c98f524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cfd88e-2f5a-4804-bee3-9461b1620cfe",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1719f00-9497-4b3e-89d6-290a4ba78b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bc4f4b-6c19-4304-9f00-001c6c001add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78160c2-89cd-4a07-a7f1-54b4ceb165f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc073de-baab-412a-9087-18ceec7c1a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ad5167-bb6c-4c17-8b1c-35b91e3aafaa",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa00e00-319c-4bd9-a639-22d69672a59a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18c21c4-960a-4cd0-94d4-91920934c94d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b301791-5617-4b37-a294-b61ce96eb3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "310f2dde-2515-49ba-bda7-e74cbd52dbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc5f168-9f87-4801-9b37-037d662f44e5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57aefa01-13e5-48b8-8a54-a6af2f4f4b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bfdd44-7e3c-475b-b74b-8b9dbe1b8103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e8e9ab-7c89-44de-a597-45cc2f19dd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "050f1f27-368f-48c2-af6f-69c19f7cf752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aed907a-36b0-4ced-8d6a-f998b771afc9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6daadb-aa03-4370-9523-e7f3dceea0d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c611d0-7a30-4c05-a278-15c6804a84c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a3a8f2-4a16-49c2-b0b5-a9520bab0799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "647be256-b51d-41a3-a792-2354830397e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2a999b-c707-48c1-8f02-d9858f519925",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c6e40b-628b-4ad8-bbb1-3e3d40eb7256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e956f4-68bf-40bc-87fa-d2e3a65810b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f64912-65df-4ba3-929b-0868a8fd7b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ea2828-bcf3-45d5-9636-70a630160cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5162df-dd7b-4fc2-835a-42a3c222b31f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8d641b-d6ad-4885-ba1f-2602a5bd67a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6bd8a04-2030-49e5-8a68-ee04db3f767f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7c6c8a-7567-4840-b9ed-7a0dbd9eaff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855564c7-f612-47d4-aeab-253223df7dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3063d5-215b-474b-af27-796eb762c1e6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11950b27-92fc-4219-b018-6f59f1d63036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff54537-bca7-49e1-b9a4-a3eba340fb54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cf9018-b9e9-4d7c-8f4c-67360593f07f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6d2d85-f500-4bd3-9c2c-96123f6d6d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c715f347-da8f-4f1a-8a94-f8183e4d076f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0c92e6-f943-4dfa-9051-cf82eb2981c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "112f58c0-fd50-4bf0-bd82-48a787407f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93787e8c-91bc-4591-b7cb-19cf6a6ac6c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155b54a3-1fc5-4a47-99c8-9d013d9e6566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7a66e6-96db-403f-a717-702361a99050",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5dca83-ae68-41ea-a58d-e8dacdaf04b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e8376e-fe6b-4ee8-b906-4d0dc299c047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b6c378-4400-4df4-b4ad-79fe1da4ddaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0696af10-3b3f-4485-aca1-fa8b08934d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e77883a-ea1a-4927-9abf-fe26b17b31cb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ec560e-adf8-49c8-87cc-d9b7b9dcd83d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6024c1-6bf8-4b21-a1cc-ef67c46d6d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b831ca-c404-48a3-bbf5-0fb4c43eecd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2867387-b086-4b39-85a6-4d828d460434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f742e2-212f-4980-a8dd-4c8b2a29a5cc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a4c717-abf0-4600-bec8-e507f3fbdd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81061bdb-8523-4d1e-9f5a-d68faf094ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c659b83-40c4-46d2-94f4-1c4ae863c543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f022f59e-5381-4339-8fa3-b4d4379e6675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006dcfcf-270f-4970-a555-0635706c76c5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f383ef-a12e-41d9-9de7-6995f490a588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a50d37a8-a721-4f63-ac9e-733a888ac67f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b992b9-ce4a-4c54-be01-ad81a89f6d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d0d929-c8f3-4ab2-8a02-a68537b8209f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef18c4f-c29d-4538-b4b2-9af0458c7a38",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcc5827-a533-4c90-bc57-5a6fc66a33e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "114376af-7d5b-45d0-82a5-00dae7cac0f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eca6420-81f5-422f-9167-cae3f0532bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1b33cd-e83d-458e-8925-c9372c26ffa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ccc939-68cf-4eaa-99fd-28397bb2ad15",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22e3b06-ca0b-44ff-9825-9735f0d74d20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3db837b3-702c-4db2-ab3e-5b60f01a46c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7a4a55-04e5-4f9b-9452-dc99d235f626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4af09b2-8be7-47b0-a19c-bcea69eded17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0251a3ac-2c06-4e90-8233-ed3c8bdf259d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d96eb83-f711-46b6-875a-a303e9f124d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5ec66e4-95d1-4555-abba-10d584cb3f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7afb9c3-6fa7-4748-98a2-863dd0f691f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1528c5-75dd-42b1-bdfb-f622acce7dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e173c5be-e4b5-47e2-99c7-69267dbe3370",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b901ae79-241c-484e-9eef-5edaec1bb7d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d38dab2c-9d98-4c57-938c-a293bac090b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c056ef-53a7-428c-93d4-4a07e976a0a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dc01da0-6561-4862-8f88-bb2a38a01712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65bf886-351c-420f-ad35-d59b841363bb",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48a7682-0896-473e-857d-5b8a285de258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fd1b8d5-9ff4-4fbf-827d-45dedb9d1f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270df626-560b-4d57-86b7-d88cb363d613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d80d64-02a9-4d13-b77d-b4eaf6ae733d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c68c538-e40f-4a81-adfe-5382078dfde5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef0662e-84f0-437e-9f47-c853cf1cb916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8186d4b8-b098-40ca-8cc1-83f76541532d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69d8e37-0682-4cbd-8d7f-15d7f4ff2149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b58dfd-f6af-4a5b-92b3-a3a83a187abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab5a87a-29b2-429a-91d7-cfce390a0dd4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d9cac2-9801-4f86-ba5c-fa218b026819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e24b5f87-e4cf-43cd-9c28-cc9e62ce310b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c4d757-fb39-461a-a7a1-938b2fb1ebba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4862a3d0-5477-4ac2-a91d-135c7de9628e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068c88e4-5f62-4b4c-807b-2c4889511a85",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cb7db1-6f25-4245-b6d6-8079fafdf13a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65735cbf-9c59-4822-9c12-601eb626c365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6578cc2-d9bf-4197-858f-82d1c98f2814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5bfe31-5204-4624-bde2-54ad6ffd7c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a7aedd-b3c4-49bb-981f-acdade5e218a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38ae0b3-a81d-42cc-b917-02b17c224059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "152042a4-74d4-4ee5-bc36-2ffe12436d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e7cfb0-cf15-48ee-912e-9e3b88bfc886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1163b30-4e30-4f83-b3c8-d081bb16d18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8728579-1606-45e3-8b2c-131d5f331bdf",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa69dba-2155-48fc-a535-d5f7856439bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f09cc9cb-de0e-4672-b6b4-64fbce90de1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23204f71-7fe7-4a19-9d4e-6c742352ac7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69204d1f-867f-4028-a68c-97f0c237eb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb72a73-7cd2-4432-81de-00d71c3b4a2f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fd6522-4dcb-4da8-85c8-b81c60cfec0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48207f9c-1d82-4d41-817c-5c278052d780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0886439e-f4d2-4b54-a7f7-e3c9d4803766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07866ae-5274-4877-a660-0e6bf59a2d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba1b04f-f1bb-4591-a30d-92297bc5ea31",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7d60ec-f033-469a-b160-2b3accbac68c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01561e17-656c-4340-a322-a2a8660ead3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3100859f-4a3d-446a-89b3-987b0d7ab46b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea8e479-b9c1-4f5b-9ab5-7943c013660c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51ab673-c937-47f8-954e-10fdf96846c1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b864b8-7a3f-4ad8-94c7-96b994ab6645",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30af2913-4753-43eb-9093-6c12541d8e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2924c7-023a-4d9e-b4b5-75ad3b63c789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0087d9-4dcc-4c20-b8a5-6d6cb35ece27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99cfe81-f774-410b-a55e-a312b3118b0c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f8d714-df54-49a5-bb5f-d16352e25b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52e0c820-3bb2-4abc-9bcb-252d34357fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e0fb28-a562-4a44-ae69-9f167c202942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee35cea-6666-493e-919d-108479dfdd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babd679b-30df-4ae8-9861-72125913906f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d9e756-6860-41fe-8b75-26a1d6231e93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2197f66f-5be1-4a48-9894-e9d53edd91a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aade426c-82c9-42b4-ab5b-3bec58f21330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3290c3ce-52be-4416-9286-b27bc91c231d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e74b4f-f1ce-42c2-962c-615c70b64855",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd06c897-e100-4552-8c65-6dc776aedb75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "814b4c99-57ca-4c48-b28e-1b91b0eea5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5462aaad-9958-429b-8db7-a2c98f2b4bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca9de09e-692a-4034-9db6-6df87bfaf75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85df27d1-6d18-40e9-8a08-dacd923b5916",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e73b728-0afa-4d2e-8197-95b659b3362e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54fa271d-30eb-420a-85f0-e915e8222db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2045e26-dc36-4a9e-bfe6-e66c0b2998a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e806ae-c742-4162-aa8c-fc28cd1424cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0600a943-076e-4b1f-8311-4a1c9b662bda",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9accae3-43a1-4551-ac20-16f9b9b77e21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3436472f-3afd-4b3b-b008-b79784f7af36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e80305f-82a2-4cd2-9ef4-ddd0db4c6b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0df00b8-d2aa-4f57-84ed-cfaeb15bc1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6ba33a-0efd-4469-8f89-03981c1324a9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3461797d-29c0-4efa-bb9a-6d3e21d4f87b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8774957e-afa4-4bb9-be30-16239541db4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48fc40d-9f24-4879-b7a8-7ecac3398f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3b6c1c-65f0-4027-b2e0-85c1a65a8891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f0d7dd-efa1-406a-b67f-c22fc322bae8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3936c56-ad81-43f2-8182-99dcc42cb676",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "120fecdb-25a5-4ab1-9d59-90535e2585c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c744bec-f993-434d-b71e-381f246dc48f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b06e4ab-6e59-4c2c-8795-9360f980db10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a728f63a-78d4-445c-ab7c-c7df386ce965",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf6e5ec-c39a-436c-b9db-96d2e11cd3ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "261cef6d-9281-4a32-8c93-d0799ac692a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40267fd8-0bff-4d05-b17a-6b927acdbc33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aedf8506-2255-4f8a-a1f8-c8f942330d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0655121f-659f-42fe-875e-651af1938234",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580a5fd6-5ae8-4fac-aa87-0eeea517de3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c6c9c35-1003-4a15-bdb5-56fc9979393e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cec5f7-deef-4e8e-b4f5-840c97904f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb9135d-42c3-4ac4-9242-aaf4ac0c6158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac649c7d-7f22-43bc-ad9c-d1c7a91722bb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb2c485-d880-44a2-9303-4d5e201e0888",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "036314fa-093e-40e7-8e77-b4769fcab49f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9188c0-8b45-4004-b59e-316ef3daa252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6c8931-fb88-4ae6-af8b-bfa2a2ce2630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01434cc7-970e-4b62-bc86-aac20a639a2c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df3f448-372f-4ae8-a8aa-4aa3aa327ce4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93c7b817-c180-4983-85d4-ed7de2d62a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2778f3-63e0-4b47-b723-84bd282182ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9455d264-694d-4447-b529-c4d0b5720d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5986f5e-a091-40bd-85dd-d6fa3e266a28",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d41a38-ec42-42a1-8138-e9e759f563e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e84f8342-b254-47cb-b1f0-460927501fef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfb4d50-4798-4012-9033-d9519a0b72c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a25c50b-1623-4ab4-9cc6-ec1e4b95c567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da2b7ad-9d5d-4cb0-9a8a-bc82a07a9e28",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d90ec3-2d2d-4b89-9e9c-5fde5b99a805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b9e1f72-6fcb-4cc1-9b46-94e0897633b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5288e1-9b83-49ec-9bf7-26e178b03079",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6cd4eaa-453c-4c2f-83c0-e5cc280db5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc43e69-875b-44cd-a713-f698ee20bfbf",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9316b0a4-f2a3-42dd-bba2-86767b4b77d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "733fc663-0ffd-42f3-97b8-283607a4e65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393c0fd7-e4a2-47ec-b3f5-3d8b3d54dd75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd34674-6748-4ee3-a3e8-74ae42fbbbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65475cb-0956-414d-8604-671314fe726f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1aa47b9-0d5c-4059-a9fe-2b8207fa4db1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdae79bc-63b7-4fd9-ab37-1490da67cdde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "448889b5-e26b-4bda-b625-4fb929590acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026b83b3-a945-44c9-ad1d-45ecbc61e3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01686726-7546-44d1-8ebf-c6bccf709f99",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d26a96-3391-4ecd-bfca-7efd551f71a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a608e852-d95d-4c5d-bdd5-46f1eaa2f339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0490e1-78bc-4c5d-b38a-d10a724870ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa72db8-a44c-4986-8713-a23156fc5d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c830cba-8c66-48c6-bfa9-caa667711f83",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22e4dfe-d1a3-4afc-b640-c490ca61aa08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f718bbd-adff-4bf9-9bfe-d00c24936b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80fd885-cfed-4028-a83f-35474588bcb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aded4ca2-f424-4a08-9449-bdf10d0331b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71360c1-cb9c-4b05-8c9b-4a29c8fb658a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab958c59-6356-48ff-8c36-8337b5c1fe42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b627f40-2e59-4c82-9136-5d1e9fd18be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d357ed-3e5e-4d9f-afe6-eb533e75f9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a25ada9-8d70-48af-ab8b-61794b4c7e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d9af6f-3465-4351-af87-aa7da1741785",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162e7afc-801b-41ef-94df-a3dd782e4c2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa366e4f-4ee5-4420-85ca-881d89c03ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df531d00-7486-45cb-8adb-05ca4383a5ad",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62bc5ea-2424-435d-8aeb-74c7b9f4527a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1291258-7a59-452a-a3ca-6ae694f3af4b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd1ab2b-5438-447d-86d1-a786739e1509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff7ecd6c-cacd-4ff4-8848-669caf12eb93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ada4e01-158e-44ee-adf6-8b10b247271f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ade4fc4-de59-4330-8422-81db60d9c2d4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f82961b-153e-4e98-879d-2e7f1ae3780b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ba33a4c-0b65-404e-86ba-db1cc62f728f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0c0a0a7-9173-4e7e-b757-c61d9272883b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7b367e7-9b09-4443-8852-264458fde1b4"
                    }
                  }
                ]
              },
              {
                "id": "71f188dc-58e7-4d18-a813-18d0d209c9f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51a744be-d583-404a-9985-7f56dc478442",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d4f9b3-c0a7-4f6a-a3a1-86dc4874e0a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cc99044a-0db2-46ea-bc95-ed6fec593da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63673d01-c9b4-46a0-bb20-3e075850730e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfdbe9b5-4a68-4959-bdd5-2bdf8a7e563d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b241e04c-34a2-43fa-a94b-13060864eebe",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bde59c5-5f51-4bf9-9966-d5b59e5c4dfd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "aaadcbb9-94d7-4793-acc5-fdd642330876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7184d15-07a1-410d-9b39-9fb2c081a940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07106503-9bc9-4291-86e2-b75935d237d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a6dfd6b-387b-4df1-accd-98a61c7869df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a3783f7-238b-4454-a365-94b6a627c479"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b2a1be6-cfdc-42a8-a511-e13862b850bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "907337b4-7247-4ed2-9d3c-f6442bfde170"
                    }
                  }
                ]
              },
              {
                "id": "51be89b1-1d92-4425-8a56-0dbd54c15fe2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "78e6b94e-e016-4d6f-9c58-c9ee0356a69f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e932ab76-c10a-4b0f-a66e-10efefbd443c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dfbe75f6-a4b4-4f8b-b0ee-fc09b058b7d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c522ef6e-912c-4225-aff9-12e9faf7a0b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0f493d-c7ba-4b8c-96de-b2a9141c4108"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d5a49157-a52b-4ed0-a5fa-13ddc71d0c95",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e537580d-7bc1-44cc-83ec-fcc48aa9ffd1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "34c1992c-f1f2-4f4f-9db6-8ca7233ef0f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "594a469f-5d4f-4640-bc92-5fe8e2c98290"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c3d246c-7c18-4a93-a687-dc0595ae5b48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ad5a70e-adbf-4122-af24-3ed3660d710d"
                    }
                  }
                ]
              },
              {
                "id": "d5750645-fa62-4bd7-be69-1073d25cb4d7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "228a61db-6860-4f34-ae7a-a7141f7ca9bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "32eeb9f8-4422-44aa-96f4-92fd02c0f0f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f097de0-582c-4914-ba8c-c2f60cf5cfc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f59481c-fed9-4314-bd7b-8b6cff91bcf1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a9f9fbf-f816-44ce-ac4e-b27b1d61537f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c7170e53-c266-4e41-bc8e-91c58e46cf6b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b39a986-d2af-42b4-9b07-fb841dd99164",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03767908-cdc6-4640-b3a3-d42cd5b11693"
            }
          }
        ]
      },
      {
        "id": "c528bc14-a89c-4552-a97a-33794b895c81",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6668d5cd-7702-4900-afc1-fe0cacba6472",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da9a3e58-109e-408e-8fc3-2bf3d9f4388c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ecf40235-6255-46a1-9083-b0d648d4d45d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adc7864-f7e7-405a-9383-3f47560d3858",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fa8b1ea6-1c36-4740-afbb-1b0220287018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8ed4e0-6b62-433c-a61b-506e17d1a77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "758efba2-80ec-48da-900b-bd4537e3991e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99d63a2-6c41-45b8-b9bb-a65ef34418df",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90dfc88-253d-4fc4-96e8-36cdcfeed230",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "21d8ed6d-54ba-44a2-a912-4785b9275f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71409d9a-c3a7-4eed-9eb1-fda5d3e0bfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c786e8e9-eb0a-484f-8766-3c322dfd8835"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "177e7aa1-df8a-416e-ba4a-e8cc3780d20d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8783f7f-2910-4b79-9990-2cac963265cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d88e71f5-030a-4b05-979e-69db1ba5b394",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a504a49-5d65-4d1d-95f3-32be151fa798"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17752e4d-c705-481f-8e79-dcfed1ceea34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8dc63538-2202-4f90-aa11-1cbc02d9f321"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be35d8e1-d988-4588-9636-aea64d0e6245",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5ebdc4e-7c4a-4052-ad60-4ae95fa960fc"
            }
          }
        ]
      },
      {
        "id": "0a3b4233-5754-45f6-9bc5-d14dfa51dc49",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c47efcd0-438c-4e05-829c-36735812c600",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53769cee-2a68-4e6d-80ea-b95259f5a881",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73926be1-2df3-4e5f-bd7d-22b9a929fcce",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604c8240-29da-4e32-92db-9326cd6f1490",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25bf98b1-ea42-445c-bc90-e456e232311c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4636d413-0af2-4a22-bb9f-559b8b2e96e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13f07b57-6fc8-4a07-9048-5fdaa9a663f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59444729-bacf-4c67-b6cf-405b9de74632",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc5f48d-5a85-43a6-be95-aa04ef24f563",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e1a0d592-abb2-4ab0-abb7-89000f069a8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0951f5f8-a656-4364-99a2-a81937307edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "895a4083-3e40-4a3e-92b2-37ec173867ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "692441cd-8529-466b-a022-0dd8d563fe12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cd1b5f4-8b5d-4443-9842-5f14a574774e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef6a8c7e-ac2d-4e3e-af98-3c43b8e50388",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a3240a7-a788-4843-8c6a-712422c83079"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da95eb01-1597-4629-84fd-d016aa9f6951",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4fc7afcb-d889-4abe-87d7-a135489892bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "afabc401-09de-4a3a-a7a8-c1a284ef33db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c5b8552-20d5-45fc-b42a-be00dc560337"
            }
          }
        ]
      },
      {
        "id": "dcb0e5f2-193e-4122-aa7b-d12be817b640",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c4fad05d-4720-4556-93af-e80434220376",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29bd3cb3-5a7a-4bdf-b5bb-f18b9fcf3600",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dde255c9-f0ac-4f6b-8096-9057e02f541e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b83e5bb-34bc-4906-acb2-52550ef5d1a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da9581d4-3016-45ad-b3a7-0c95606fc50b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a066b7fb-c179-4f1a-9c02-a64a1b09106d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c40e7229-58ef-411b-88a6-bee9fbcc06bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a17917-a94b-4eec-8158-930afc223ac9",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62b5f3e-ee76-45ae-89cc-fe366b0d5848",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "72022a23-64b1-4c3a-984e-29986728cfea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36df256f-e551-4cec-afc2-f936a6329d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb3df64f-7acb-4678-b554-1408ccf702fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b909a6e7-838a-4590-9352-841d0243adb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8120f12-92d2-40ec-be43-0aa7e5d0d922"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee23d3ee-07fd-443c-b609-5953de2a8020",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "279cc5c1-de96-4e7a-bef7-22605e0a54dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9156d16-04c8-4e91-9476-eebb315127a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a749dc3e-5173-4611-893f-52e90c187420"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8eec2ca4-e5fc-4fcf-9c1a-8b5a5eb3c1f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b87fb9b-c67f-47a1-b889-df329a0888d4"
            }
          }
        ]
      },
      {
        "id": "eb220982-d633-4b81-8691-3441a30b0587",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5114722-13f6-4dd6-946a-909d16134dda",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a36490b-8aab-45da-a59f-f888ea4a6311",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d06f8823-ae3a-4b15-a5b3-dd7268b81e1a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "167be0ad-f153-4c9d-8761-1e229d004d6b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2b4d195-1887-44b6-93e6-c44f0469db98",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 289.58846153846156,
      "responseMin": 6,
      "responseMax": 7048,
      "responseSd": 761.7392622892806,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684197438495,
      "completed": 1684197527310
    },
    "executions": [
      {
        "id": "8bce21c5-f214-44cf-8de9-2f975b8709e6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4d40e13a-f1e3-4610-9f50-3e300a0a0f5d",
          "httpRequestId": "4d2a03dd-be2a-42a1-abdc-3a6ece7f4c84"
        },
        "item": {
          "id": "8bce21c5-f214-44cf-8de9-2f975b8709e6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a2bed098-f23d-4ebf-9248-9bc34ea4d8af",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "626da950-8d2b-46e0-9d21-97356421c9cb",
        "cursor": {
          "ref": "5dcb5105-b070-4058-9e76-b32f110932c4",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ec03655a-5e10-4422-b40a-40ce83d88891"
        },
        "item": {
          "id": "626da950-8d2b-46e0-9d21-97356421c9cb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e23c5499-6d39-4574-aae1-ce6ced36951a",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "32f6e0d2-7467-4c7a-b440-5e725ecee336",
        "cursor": {
          "ref": "77b0a7b7-4305-4a35-9f29-a2304ec910ab",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3fcd5bd4-92c4-423b-807a-4e516f5010ef"
        },
        "item": {
          "id": "32f6e0d2-7467-4c7a-b440-5e725ecee336",
          "name": "did_json"
        },
        "response": {
          "id": "203afd43-9f6f-41a8-ae2b-8aa666a3ffc0",
          "status": "OK",
          "code": 200,
          "responseTime": 549,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5d1561-92c6-4e93-bf4e-94121270a369",
        "cursor": {
          "ref": "d4eda1d9-9584-46ae-ad83-fa63b8c09721",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e9f2a39a-2972-4c5e-a3ce-95c0ee7c5a95"
        },
        "item": {
          "id": "1c5d1561-92c6-4e93-bf4e-94121270a369",
          "name": "did:invalid"
        },
        "response": {
          "id": "ed20eee4-3c4a-4fca-98b9-20e41d2fa12b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1159,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1c5d1561-92c6-4e93-bf4e-94121270a369",
        "cursor": {
          "ref": "d4eda1d9-9584-46ae-ad83-fa63b8c09721",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e9f2a39a-2972-4c5e-a3ce-95c0ee7c5a95"
        },
        "item": {
          "id": "1c5d1561-92c6-4e93-bf4e-94121270a369",
          "name": "did:invalid"
        },
        "response": {
          "id": "ed20eee4-3c4a-4fca-98b9-20e41d2fa12b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1159,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "08e48257-acff-4539-a108-c96773f3ff5a",
        "cursor": {
          "ref": "3f497112-f0f5-4837-8568-280f53e67fd9",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "67144703-0d31-4ed7-8d2d-7378c69aa58d"
        },
        "item": {
          "id": "08e48257-acff-4539-a108-c96773f3ff5a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7ac711d6-73bc-4bed-bac3-353753a1e7f5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 79,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb8588e-2f96-46dd-8842-d530dfca8085",
        "cursor": {
          "ref": "e9ec9344-1139-4fc6-9628-75399f4ad74f",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "27996925-8958-4369-83b6-d8bcf7c9af67"
        },
        "item": {
          "id": "bbb8588e-2f96-46dd-8842-d530dfca8085",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "218c317d-2f36-46ea-86a9-b476b1f1e624",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800cd71f-b966-4b86-b8e8-2e1e2e1cac4a",
        "cursor": {
          "ref": "4c0d38bf-5565-4bd2-8216-8f7208a6adcd",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6761797f-a35e-49f9-b04f-ac89bb48c446"
        },
        "item": {
          "id": "800cd71f-b966-4b86-b8e8-2e1e2e1cac4a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8086ebcc-d184-4391-8902-0adeebb9ef12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a32b1811-97f6-45b5-bd57-861818cd0430",
        "cursor": {
          "ref": "b93bd095-dd82-41fd-b49a-31fe791dafa1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cc8c5a1f-0d40-42c7-9fb7-5a01a659b17a"
        },
        "item": {
          "id": "a32b1811-97f6-45b5-bd57-861818cd0430",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5d3f0215-8a3e-434b-abe0-0ab750a20c06",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a32b1811-97f6-45b5-bd57-861818cd0430",
        "cursor": {
          "ref": "b93bd095-dd82-41fd-b49a-31fe791dafa1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cc8c5a1f-0d40-42c7-9fb7-5a01a659b17a"
        },
        "item": {
          "id": "a32b1811-97f6-45b5-bd57-861818cd0430",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5d3f0215-8a3e-434b-abe0-0ab750a20c06",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "003c671b-5f75-49e8-994b-2a407f459a7c",
        "cursor": {
          "ref": "b88e2c5f-ce0b-45cb-8726-72f9dca27ba0",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4cdd5917-28d9-48e8-953e-0e3debb0e7df"
        },
        "item": {
          "id": "003c671b-5f75-49e8-994b-2a407f459a7c",
          "name": "identifiers"
        },
        "response": {
          "id": "41304bfe-f82c-4103-b06f-440575413a4d",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245f0b23-e4dc-4c06-b83a-50578a610dc2",
        "cursor": {
          "ref": "db25d962-4292-4266-adff-127d95b8f9df",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a254f772-13b5-4aa3-8d10-08b4637d88b5"
        },
        "item": {
          "id": "245f0b23-e4dc-4c06-b83a-50578a610dc2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dc5a4ffc-2262-4c29-94fe-c3f17dd9797a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245f0b23-e4dc-4c06-b83a-50578a610dc2",
        "cursor": {
          "ref": "db25d962-4292-4266-adff-127d95b8f9df",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a254f772-13b5-4aa3-8d10-08b4637d88b5"
        },
        "item": {
          "id": "245f0b23-e4dc-4c06-b83a-50578a610dc2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dc5a4ffc-2262-4c29-94fe-c3f17dd9797a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53883b2b-910a-48e8-9030-92b35200b0bf",
        "cursor": {
          "ref": "93026e84-21bd-462a-aeaf-096310b34351",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a31444e5-0cc3-44bc-98f1-3e652917adbd"
        },
        "item": {
          "id": "53883b2b-910a-48e8-9030-92b35200b0bf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8aedfe1c-37fd-4831-93bb-b660346a21df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391fa52e-f510-47d6-a846-f38ff6a56704",
        "cursor": {
          "ref": "4bcae9f6-7c6d-474b-a95c-094a1277af02",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a434d9e2-def5-446d-9382-1e98111e3f69"
        },
        "item": {
          "id": "391fa52e-f510-47d6-a846-f38ff6a56704",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7d40e820-6a70-4874-a5f0-336e04023ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef3fa3a-42bd-42a0-bb9f-a9196e6a2cf5",
        "cursor": {
          "ref": "e3b77831-1f61-48cf-a42d-2146fb8e7ac3",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bc1c9c36-c727-4604-84a2-2661a495641d"
        },
        "item": {
          "id": "4ef3fa3a-42bd-42a0-bb9f-a9196e6a2cf5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f08d0326-5ecd-44e1-a929-5b338b5fe255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd5fb27-a0ac-405d-a7fa-aee88b186bc8",
        "cursor": {
          "ref": "815c6c83-28be-4b89-867c-8a2b822a7cca",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "795349e4-f1f3-4421-a56c-ca96b810ae5a"
        },
        "item": {
          "id": "9bd5fb27-a0ac-405d-a7fa-aee88b186bc8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "38446479-8eab-4c57-9a51-07405d9b4c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f25e338-6f18-4027-95f5-3a2bab68398c",
        "cursor": {
          "ref": "9f67acbc-a445-4eef-aa49-6db504672919",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "632ebda9-54fe-4908-80d6-375564d1d542"
        },
        "item": {
          "id": "6f25e338-6f18-4027-95f5-3a2bab68398c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a59a2b4f-2640-4aa5-8e41-f477310d5448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93dd3fea-afea-44fe-93de-d58dbd89d744",
        "cursor": {
          "ref": "a98c454b-456e-439b-900a-55262e8850cb",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "53407263-90b8-4aa8-97a6-98c44baa4493"
        },
        "item": {
          "id": "93dd3fea-afea-44fe-93de-d58dbd89d744",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5c0716c0-63a2-4187-a1d5-cb2bc96ad916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a463e9-c36b-4355-afac-6600045a10fb",
        "cursor": {
          "ref": "3633bf54-3a91-40f7-93e8-5d76e52374b9",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6b8504c0-9742-4390-9a5c-1684abb0ef08"
        },
        "item": {
          "id": "53a463e9-c36b-4355-afac-6600045a10fb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "db9e2b80-3608-4366-b76f-7160f626225e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe020786-72f2-4079-8aea-9f6cfc08df10",
        "cursor": {
          "ref": "04360873-b8e4-422d-90a2-6cb58851ca55",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5f5a6f64-d8d7-4d9e-9ffb-4e7b9d9dd2fa"
        },
        "item": {
          "id": "fe020786-72f2-4079-8aea-9f6cfc08df10",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a3f652ad-8559-414d-94f5-cd359f89d9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cab55b3-529d-4382-96f2-b8ec40a8e2f1",
        "cursor": {
          "ref": "f3238612-91d6-450f-b7e5-ea6a1e8867b4",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "84bf9804-98a3-4797-b9be-740372bdf8fb"
        },
        "item": {
          "id": "7cab55b3-529d-4382-96f2-b8ec40a8e2f1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "919a9b08-804b-4fbb-93dd-ee0cb717dd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a34cb1-a253-46e5-838b-cf787a9447c4",
        "cursor": {
          "ref": "279430f6-2471-4d29-9509-fa593c110bd3",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "71cd7098-c7f5-4674-b440-cc2d0d354c55"
        },
        "item": {
          "id": "99a34cb1-a253-46e5-838b-cf787a9447c4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5aaf4d59-81bf-4951-b166-ab1cb6eda109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ae816c-6363-42a2-bbe7-83cf2c307d4b",
        "cursor": {
          "ref": "d42949ad-b547-4531-9b2c-e01846d86e8b",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a43f95af-8c11-4021-b1ff-c1aed13c893d"
        },
        "item": {
          "id": "44ae816c-6363-42a2-bbe7-83cf2c307d4b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "99df6fac-e848-49da-a3b9-0bb288f7b048",
          "status": "Created",
          "code": 201,
          "responseTime": 1290,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "ea397351-a625-481d-8cc2-10f1a92e6653",
        "cursor": {
          "ref": "ae6fe53c-42bd-4475-94b7-00602cebbe21",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a33c7adb-a56d-42bc-9c2d-d1d3de2afd49"
        },
        "item": {
          "id": "ea397351-a625-481d-8cc2-10f1a92e6653",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e20317c1-7ca9-49c2-907e-9dfb2ffab073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b04af8-94a0-4c6c-b46c-bb8d7af237cf",
        "cursor": {
          "ref": "c491286c-ba59-41df-b1b8-11abf195bac1",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c0a74e90-51a6-4bb0-82cc-01384287dfcc"
        },
        "item": {
          "id": "29b04af8-94a0-4c6c-b46c-bb8d7af237cf",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c836ee5f-e448-4240-8e5f-ac0c9dbec83a",
          "status": "Created",
          "code": 201,
          "responseTime": 7048,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "dda6cf31-ac9a-4cbf-b9f5-c6b6382dbf10",
        "cursor": {
          "ref": "d975ae9b-5b6f-4236-96e8-78b1f83bd67f",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2f7d2e52-976b-42f6-bea4-fa052fdb9868"
        },
        "item": {
          "id": "dda6cf31-ac9a-4cbf-b9f5-c6b6382dbf10",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d29288f2-f447-4f35-807a-7ed0264cd56c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e519af-ea30-4288-98d2-45b17310929a",
        "cursor": {
          "ref": "c87e4408-0e55-4006-a354-2ca6add2057e",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4071e76b-8927-4616-a781-1969fa46712c"
        },
        "item": {
          "id": "03e519af-ea30-4288-98d2-45b17310929a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "47adeab8-92e4-4999-b992-f71b6e4414eb",
          "status": "Created",
          "code": 201,
          "responseTime": 3771,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "77194e6e-0360-4d50-8e64-4e8202dcc958",
        "cursor": {
          "ref": "b8af645d-70c9-46c4-976e-e7a4ca75fd28",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "22d2a067-df5a-4dbd-8e59-cc935450d058"
        },
        "item": {
          "id": "77194e6e-0360-4d50-8e64-4e8202dcc958",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3ed1862a-a0e4-427d-b22c-851869ef9ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdac275f-cafb-45b5-9b09-86cf6c4d7a3c",
        "cursor": {
          "ref": "13ddee97-5a84-467e-a85c-93bd6b940e88",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e9a5c64b-5c74-4f2d-a38e-42ce304bb57b"
        },
        "item": {
          "id": "cdac275f-cafb-45b5-9b09-86cf6c4d7a3c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "872913c0-8c06-4d47-8f4f-5128b7f2bea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde652fe-5049-414c-a6ed-c8382aac9a82",
        "cursor": {
          "ref": "b019758f-a92e-4889-8e71-22fbb98e5750",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7971b534-5cac-482d-850c-05f73928a947"
        },
        "item": {
          "id": "cde652fe-5049-414c-a6ed-c8382aac9a82",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cb664aa8-764a-409b-bebf-ff52569acba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecf8b83-9b9a-4a99-a5d1-57626b1fc892",
        "cursor": {
          "ref": "9d8499fd-4aa6-48fd-8132-3103175ebc6e",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e45d8ce1-9aa9-4450-bb5e-070736eb83a7"
        },
        "item": {
          "id": "6ecf8b83-9b9a-4a99-a5d1-57626b1fc892",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "60878ea8-5423-4974-a0bc-2f20aecb4c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d074ceeb-6aff-4909-bd8d-90ec98548359",
        "cursor": {
          "ref": "f8c8ccf6-4015-41e4-860b-2c9a373e4519",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f7f8ae47-96f8-4cd1-97da-63e8c38c32c2"
        },
        "item": {
          "id": "d074ceeb-6aff-4909-bd8d-90ec98548359",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c24807d1-d60c-4fc9-94bb-e72e0f91fa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c999e75-593a-4b90-9194-71b4186c1713",
        "cursor": {
          "ref": "6eb5e948-83e9-4c84-a66c-9773716255dd",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d25cc609-d7d1-4265-a101-26c77fabdea0"
        },
        "item": {
          "id": "5c999e75-593a-4b90-9194-71b4186c1713",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "dcb079e4-06e4-4e0a-8839-2939aba75291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1ab2c1-6b67-417a-aa9e-437bfa436226",
        "cursor": {
          "ref": "f712ed29-e2d8-475f-9458-6ba49699ca29",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f8da4b33-b90b-4fc6-af55-1e66c83fa1a6"
        },
        "item": {
          "id": "1a1ab2c1-6b67-417a-aa9e-437bfa436226",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4c0d1919-7bf9-4a07-9394-bb668095af7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d867b6-d117-481b-803f-64abbf4cab58",
        "cursor": {
          "ref": "145e05a0-5f87-4087-91bd-4ef842e753a9",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6e85c8b1-33cf-4d43-9247-39996917e141"
        },
        "item": {
          "id": "44d867b6-d117-481b-803f-64abbf4cab58",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "dfcabb73-de1d-4db4-aee3-af2dde0aa8c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e972fd-8cb2-41af-bf81-d34ba4002f5e",
        "cursor": {
          "ref": "f120b4ab-67f4-45d8-8462-1ecd5c7aacfd",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "665495f2-e548-48c2-ada5-bf6f1bff0f4f"
        },
        "item": {
          "id": "f7e972fd-8cb2-41af-bf81-d34ba4002f5e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "84224e16-2495-4ceb-b092-be65e9de1b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb20d72c-9916-4d3d-a610-9dbe4c6e7cd1",
        "cursor": {
          "ref": "faecb41b-175b-4c7a-996b-b8cf23cd8987",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "60c0bf76-3755-422a-8926-0967ca98e447"
        },
        "item": {
          "id": "bb20d72c-9916-4d3d-a610-9dbe4c6e7cd1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "20c7127e-f535-4cc5-b732-496324d9b54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e838e530-cc0d-4caf-bea1-ea9fa935a114",
        "cursor": {
          "ref": "e207e88f-c2e5-4c6c-a27d-67780b8db199",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8970c854-2087-4306-89ac-41320054c8db"
        },
        "item": {
          "id": "e838e530-cc0d-4caf-bea1-ea9fa935a114",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "45e1a88d-766c-4307-a363-387827ba4b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1292aa5d-d815-4e37-8104-6fc30f413228",
        "cursor": {
          "ref": "d746512c-d8c0-4adc-959d-fcdbb52a17ad",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4c15dc52-c5d3-48bc-bf53-72b29e5f5e80"
        },
        "item": {
          "id": "1292aa5d-d815-4e37-8104-6fc30f413228",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b5f22751-9465-499b-9ae8-a1329096ff7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc211be-93f6-4ba8-8be4-fc25fd751acd",
        "cursor": {
          "ref": "183109e9-73b8-4e90-9f23-45e5cd62fbfb",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fc1229d3-d8bc-4edf-9605-3dc2aaed6c3a"
        },
        "item": {
          "id": "9fc211be-93f6-4ba8-8be4-fc25fd751acd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "39e7bb0a-eeec-48cd-b9de-3e371dd94a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd75eb66-8092-4349-92b3-548376f61b58",
        "cursor": {
          "ref": "3e84b4a1-0d91-4b99-b313-bbc568f7a07c",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "175ddfa7-e542-4efa-af87-64f55b4bb722"
        },
        "item": {
          "id": "bd75eb66-8092-4349-92b3-548376f61b58",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "78e863da-4a86-421f-84e7-3497ade72742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c71e3aa-492b-4406-b81e-f64993be8aea",
        "cursor": {
          "ref": "681fe177-4c0a-489f-9dfc-6d64efcdb890",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "953aa1f7-9f97-4b94-8cd6-29d58b37a9c5"
        },
        "item": {
          "id": "5c71e3aa-492b-4406-b81e-f64993be8aea",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c822bc00-ef41-43ec-abf5-d752dc828e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d749b8f-e4c5-4f4f-b71e-9644dc9ab2ad",
        "cursor": {
          "ref": "eeecf1e1-391e-46d4-be34-d152039a26d1",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ffd11279-7c3a-4549-9446-3f1a743c5e96"
        },
        "item": {
          "id": "7d749b8f-e4c5-4f4f-b71e-9644dc9ab2ad",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "27097135-bd43-4053-b802-3a2e51a36ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e1a122-099f-442e-b7ee-c3ff34f24e87",
        "cursor": {
          "ref": "399af2be-f258-46d5-b07e-7071b2110ca0",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f556452a-e3f9-4946-8f54-9df752ab2843"
        },
        "item": {
          "id": "38e1a122-099f-442e-b7ee-c3ff34f24e87",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "277b7761-d29b-4e00-8d28-ec91a61759da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ed102c-2d50-48be-89f3-64ab35206f35",
        "cursor": {
          "ref": "de414d3f-2251-437b-815a-213029ae476d",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "490a900c-c444-4041-9df2-65055d03c119"
        },
        "item": {
          "id": "d1ed102c-2d50-48be-89f3-64ab35206f35",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "56330f60-c3b7-4cad-af1a-9c3f2042dfa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90492d5-2907-4cee-80c4-a25efe5cab1c",
        "cursor": {
          "ref": "58f96190-804f-43e1-bfc9-813eb7d14202",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ecc233c2-2e60-491c-a579-57a21745ef27"
        },
        "item": {
          "id": "c90492d5-2907-4cee-80c4-a25efe5cab1c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9ee1dda9-7782-4252-a181-90f8ccb9a76c",
          "status": "Created",
          "code": 201,
          "responseTime": 2876,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7f4628a1-ac54-41b8-8791-23fe61ca17b8",
        "cursor": {
          "ref": "591d5280-ea15-4fb7-a102-158f3e5a6dfa",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a0c33a0b-9d07-41ba-8f25-2d78f7a560f6"
        },
        "item": {
          "id": "7f4628a1-ac54-41b8-8791-23fe61ca17b8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "52c7a4b1-d205-41c4-9ee6-e485f8a9eee4",
          "status": "Created",
          "code": 201,
          "responseTime": 2492,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d68b91e7-c95d-4d26-8046-4b7e88b539f6",
        "cursor": {
          "ref": "f3fa9ea9-245a-4f10-a7ee-e3f19a7deddb",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0eac46cb-0006-47d6-b642-17459e1125f5"
        },
        "item": {
          "id": "d68b91e7-c95d-4d26-8046-4b7e88b539f6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "43b5c3df-38ac-4b7e-b6d8-7e5c423c9a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98625e45-83b1-4bfa-87d1-3195715bdda2",
        "cursor": {
          "ref": "e659e943-e054-4087-9c99-c63c64b59c88",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "71cc286f-03d7-4b15-be84-4538ea221693"
        },
        "item": {
          "id": "98625e45-83b1-4bfa-87d1-3195715bdda2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b08a0f9c-e246-47ca-9353-7a250313bb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e06209c-d308-4e5f-93d0-572b9f4979be",
        "cursor": {
          "ref": "fcc906b6-7965-4d3d-916d-a00343df3a6e",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ed07cdd6-26ed-4d15-b7ed-a43240b64f9f"
        },
        "item": {
          "id": "3e06209c-d308-4e5f-93d0-572b9f4979be",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8d50439e-5af0-491d-b5b0-c37c1d58b05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912ca408-fdba-4711-9baf-08cbcf51a521",
        "cursor": {
          "ref": "542051df-266d-44ce-a980-549f8afb20fc",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "fb31fbf1-7f92-4abc-8dbb-67d486f31d8d"
        },
        "item": {
          "id": "912ca408-fdba-4711-9baf-08cbcf51a521",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f53577c1-0b7a-42d0-82d5-fec8dbfb99cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9a510e-6776-470f-92e3-1fee0ac1e63c",
        "cursor": {
          "ref": "dc76dd86-d802-4287-a286-91308c02623d",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8cb69da6-d047-4840-802f-ebcbdb3536fa"
        },
        "item": {
          "id": "1b9a510e-6776-470f-92e3-1fee0ac1e63c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "acb88885-7ac1-4fda-95cf-791488102764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725417d4-6a36-46d5-a339-8518eb5a100b",
        "cursor": {
          "ref": "15927d7f-6e39-4df0-aa5d-c70cd3091c1e",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "570a7f1c-8be5-4594-a786-5b232901e2fd"
        },
        "item": {
          "id": "725417d4-6a36-46d5-a339-8518eb5a100b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "40c920af-f39a-4c22-a2f3-80ae05975177",
          "status": "Created",
          "code": 201,
          "responseTime": 2711,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "75336db9-d4da-4a78-8ead-2007cff9e197",
        "cursor": {
          "ref": "364da45f-2ec0-4a48-a084-096ee10cd0af",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0782a69e-4bb9-453b-a289-839c72e27dd8"
        },
        "item": {
          "id": "75336db9-d4da-4a78-8ead-2007cff9e197",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dc74453b-7141-4293-a18d-82438c4ef11f",
          "status": "Created",
          "code": 201,
          "responseTime": 2549,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "40de21de-3af4-4c71-ae8b-b773c0393550",
        "cursor": {
          "ref": "1d338334-5e75-44ee-acb1-9d89154c964d",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a387935b-9fb5-405a-82d4-c33dcfad4927"
        },
        "item": {
          "id": "40de21de-3af4-4c71-ae8b-b773c0393550",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3338b88e-1a43-470f-bfe0-e6604538a91f",
          "status": "Created",
          "code": 201,
          "responseTime": 2682,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b3ef07fa-171b-4e3e-ad82-f7b591fb8ffa",
        "cursor": {
          "ref": "a2f1f973-2d9b-42d2-a031-7739b040cf36",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c06ee016-6fdc-4c45-94b7-4d765bec04ab"
        },
        "item": {
          "id": "b3ef07fa-171b-4e3e-ad82-f7b591fb8ffa",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f4f30833-05e6-477a-b3bb-37159379e126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b455db-b0bf-4af2-b867-9176d9bb62a8",
        "cursor": {
          "ref": "def712be-7f45-40ce-b1b2-3ca23b26f6ab",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1224184e-411e-4c48-978c-8b8bfac049dc"
        },
        "item": {
          "id": "42b455db-b0bf-4af2-b867-9176d9bb62a8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d2e7bcf0-d172-412e-8f2b-50265c795f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646686ab-71a1-41eb-9452-445151f96ae0",
        "cursor": {
          "ref": "6a1f20b2-c540-4db9-9bba-2f531e81b4b6",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7a772f19-8bad-4b75-92b1-3f6dd5346398"
        },
        "item": {
          "id": "646686ab-71a1-41eb-9452-445151f96ae0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8e6e3640-7e35-432b-af9d-d429eeb5a7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c2df98-0f0e-4c7b-a8fc-f08cc96cacc7",
        "cursor": {
          "ref": "a6f47a1e-9982-48ec-8ea9-97657cdf2ae9",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6f434ea8-fef4-469b-9591-93e957d08b79"
        },
        "item": {
          "id": "c2c2df98-0f0e-4c7b-a8fc-f08cc96cacc7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f4cadfe0-79f4-44fb-b75e-a7d450c102ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527c9ede-3feb-4f94-a182-faf6398acfac",
        "cursor": {
          "ref": "2b74f565-3697-43d5-821a-899cfe9b3a8a",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0be39b75-37a0-443e-a691-1cac415c6666"
        },
        "item": {
          "id": "527c9ede-3feb-4f94-a182-faf6398acfac",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a863e210-0b7f-43ab-9dd9-abf6d2446efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8ccd81-e890-4046-b189-948755e865fa",
        "cursor": {
          "ref": "72fb9663-ca3f-43e5-bf9d-878453791f50",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "12e2f6eb-2c57-4426-a231-ef5f19526e26"
        },
        "item": {
          "id": "fd8ccd81-e890-4046-b189-948755e865fa",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "69a768d4-3556-4fe5-b344-d5b6e9dbafcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78551861-0cd9-4fad-a5bc-7533c079d539",
        "cursor": {
          "ref": "67f5e85e-5411-4bd0-ad4c-ba4f20776215",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "eba70abd-1d92-4174-9a93-c35dea15f6e0"
        },
        "item": {
          "id": "78551861-0cd9-4fad-a5bc-7533c079d539",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2c99903d-3493-4de9-ba1a-f8f50454a754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085ad606-4451-433a-851e-66fef273a7cd",
        "cursor": {
          "ref": "b485dc86-a4b5-4103-b35c-d3547afa9101",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b9766c54-b8c2-40ab-87cf-9be01cece382"
        },
        "item": {
          "id": "085ad606-4451-433a-851e-66fef273a7cd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "852902ba-4c8e-4fb7-90f5-099f67bab45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e943d56b-a156-4426-870e-2cfae3238585",
        "cursor": {
          "ref": "6262bcad-e2bc-4985-b91e-0b819b89d480",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0798a8a9-3a7b-48d3-9144-73b3e543259c"
        },
        "item": {
          "id": "e943d56b-a156-4426-870e-2cfae3238585",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8d326d4c-5593-4c21-99df-3614eaf6f30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bfbd0f-27c9-483a-b88e-df10f50086bc",
        "cursor": {
          "ref": "3fe92a69-f1f5-4bae-ac16-06caf3ae250e",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c1686698-8c91-4b61-ac85-bfdecc0c101d"
        },
        "item": {
          "id": "e8bfbd0f-27c9-483a-b88e-df10f50086bc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "257d688d-0c53-4b79-9b87-5a97d37c0c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08eb132-df0f-4fac-8ab6-47104b8f154f",
        "cursor": {
          "ref": "6b1e9b2e-b63f-4bdc-952a-f30e5c47653f",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f2751888-0c78-4ca0-83be-d8934f1dae21"
        },
        "item": {
          "id": "d08eb132-df0f-4fac-8ab6-47104b8f154f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "44f6d949-9315-4b3f-9367-308b2e7195e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c5d584-13f2-4ed3-a3cb-9ca679ef360b",
        "cursor": {
          "ref": "2706d88f-7716-480c-b9b5-2de4efcf0c4a",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c27cb518-9aa2-4d8a-a297-367ad5e99621"
        },
        "item": {
          "id": "49c5d584-13f2-4ed3-a3cb-9ca679ef360b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "faae0c11-a0f5-485b-988d-7121cc4ec8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b5991f-b9a0-496e-87e4-71ec6f38427a",
        "cursor": {
          "ref": "27d7952d-d3a8-4011-b9a1-0be803abdc7c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "17dafdf7-d3eb-4782-b148-37c8285cdb38"
        },
        "item": {
          "id": "93b5991f-b9a0-496e-87e4-71ec6f38427a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e17b6c9e-82e0-4376-b959-2a1687911a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0debe3-4b52-469a-b707-df3e4cfa2583",
        "cursor": {
          "ref": "55242517-8e8e-43b0-9283-db236318d728",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "bba4ed10-b362-4a23-b834-7f53dd0ecdbf"
        },
        "item": {
          "id": "6d0debe3-4b52-469a-b707-df3e4cfa2583",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d106a47a-a4e4-4583-b49a-9ba2eea05e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3117cffe-49cd-4199-8489-c306aab96a91",
        "cursor": {
          "ref": "0da606ed-0f1a-49de-ae93-176097a10397",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "85a7d870-8efc-491b-a3e4-f00a6bf58e99"
        },
        "item": {
          "id": "3117cffe-49cd-4199-8489-c306aab96a91",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "59f0cb78-d212-4404-9f35-0184f753b990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28092058-49bd-48ad-97be-71d2f7da7e9c",
        "cursor": {
          "ref": "7d052219-93bf-4073-b71b-658d63e35d36",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0f56d80e-4aaa-42b3-8780-d7f89361fe7c"
        },
        "item": {
          "id": "28092058-49bd-48ad-97be-71d2f7da7e9c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2e7dea47-40f0-4755-885e-41fa22629543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91190cbe-cd66-42e6-be52-d04d8ab85062",
        "cursor": {
          "ref": "8cff809b-b7f2-4206-931f-8670586fcbb5",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cc3e35f2-0aa7-4176-8192-f59d42875814"
        },
        "item": {
          "id": "91190cbe-cd66-42e6-be52-d04d8ab85062",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cd1550d3-48f2-43a4-b939-41ea277201e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1d6341-8d8a-4688-ae00-f30a9adee6d1",
        "cursor": {
          "ref": "81f55817-37a9-4223-9b33-87ad6adf6f7c",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7c305142-1be5-4350-84f7-f9e6b4e71060"
        },
        "item": {
          "id": "af1d6341-8d8a-4688-ae00-f30a9adee6d1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e1fbd2de-5d31-4d39-8349-913c2c1d7fcc",
          "status": "Created",
          "code": 201,
          "responseTime": 2765,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "11a7be9e-0cb0-44bf-aa12-952e92584a4e",
        "cursor": {
          "ref": "6d0570c9-a81b-4031-8817-625fe62e4918",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "193975ac-82f7-42ea-8a96-06c613fdfef1"
        },
        "item": {
          "id": "11a7be9e-0cb0-44bf-aa12-952e92584a4e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "35b1fb11-1e11-435a-9d69-b3ec65ada0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7633df91-d96f-43f5-b1b9-abc6993d6464",
        "cursor": {
          "ref": "a0e1043e-d2fc-488e-a9e5-47191ee90ded",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2f383d85-0b6a-4bfc-b366-d548af3e2330"
        },
        "item": {
          "id": "7633df91-d96f-43f5-b1b9-abc6993d6464",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3a88a32f-068f-422a-8e8b-5e183664502e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34711ed-6cf8-4c80-adbc-2a0f47b521c8",
        "cursor": {
          "ref": "9e17b2b9-3f55-4caf-878f-f15ff9ee91fa",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "774872fb-fa74-4700-8746-cf1d0006bb72"
        },
        "item": {
          "id": "d34711ed-6cf8-4c80-adbc-2a0f47b521c8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f791c8ee-4ab4-414f-9199-9edb54df5021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e2bdbe-8e6b-4e4c-9327-96bbc86eb1f7",
        "cursor": {
          "ref": "bcae006b-7506-47c1-92e9-99688db40bf7",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "489a8f8d-3847-44e9-ab71-4f1354771a0e"
        },
        "item": {
          "id": "01e2bdbe-8e6b-4e4c-9327-96bbc86eb1f7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "39adc1ea-e489-4dbc-b03d-4da9991f7181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dac7089-f953-4c83-862b-917b27b7af0e",
        "cursor": {
          "ref": "302eac7c-16c3-4425-9bff-524f24b103fd",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fb40c9eb-f77a-4617-adb4-d2166e8799b7"
        },
        "item": {
          "id": "2dac7089-f953-4c83-862b-917b27b7af0e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e372a912-a519-4bf9-bccc-ef835f1860e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84189691-bb89-4106-a108-3c19e11968af",
        "cursor": {
          "ref": "cf6639f7-0032-4e7f-8ae4-97bd41a509d4",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cfb64893-982d-48cd-b1cf-079c33298e08"
        },
        "item": {
          "id": "84189691-bb89-4106-a108-3c19e11968af",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "97ce1d58-27ed-47ef-81c2-df26cb4027e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50e33b0-f848-464b-9f0c-2e30d0e3d965",
        "cursor": {
          "ref": "13339f4b-6626-4e8d-b103-4c29d7557476",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "72bedada-71d4-45b3-a9e1-77d8dba12dba"
        },
        "item": {
          "id": "d50e33b0-f848-464b-9f0c-2e30d0e3d965",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3d36dbc2-041c-4ea7-8038-3aee64154c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef07cea-6312-448e-bd30-6743992d7e37",
        "cursor": {
          "ref": "500dca66-cf0a-40de-8b1e-20c775011a0d",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "32f01867-1ded-4256-8bea-9a3f93a23cd4"
        },
        "item": {
          "id": "aef07cea-6312-448e-bd30-6743992d7e37",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "eb66163f-ad99-40ee-b65b-77d047f20aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1e2c57-f6db-42be-bd16-45fab7dcf24b",
        "cursor": {
          "ref": "8069bc79-da98-4992-9767-a4e89af12903",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "27203644-003d-434a-9c17-3268552caf4d"
        },
        "item": {
          "id": "fe1e2c57-f6db-42be-bd16-45fab7dcf24b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a6d1b1cf-4c2d-4e2f-b49d-b8d758584d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6181f1-ecf6-4390-81d7-0151077d41f2",
        "cursor": {
          "ref": "bd5682da-d597-42b5-af22-3b3ae8d05569",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7b4b0488-e28a-4294-8c1d-ed94e6d86039"
        },
        "item": {
          "id": "dc6181f1-ecf6-4390-81d7-0151077d41f2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "41ad54a7-9a46-46f1-80ba-37b49f85cc2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c822943b-c764-4666-9226-2ebd97066036",
        "cursor": {
          "ref": "f002dd49-44cf-4f03-9e22-16ce9ba604f8",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bf269c57-212f-465e-adb4-77b8b4525e95"
        },
        "item": {
          "id": "c822943b-c764-4666-9226-2ebd97066036",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5f4c703e-01bc-4691-b8ca-b3913b03e2e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4c6fe4-a9c1-45bb-9d83-327988959046",
        "cursor": {
          "ref": "82e01b21-70e2-4ecd-a51a-697ce007839d",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "be452c5d-377a-426d-a899-e9f28c1db8e0"
        },
        "item": {
          "id": "6c4c6fe4-a9c1-45bb-9d83-327988959046",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dcc7a81a-aac8-43ce-9b3c-eec14404f98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c88e3d4-bb94-4fa0-9820-a977366d55ac",
        "cursor": {
          "ref": "6b670574-7dca-497c-846c-f09bb031cd82",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ddfce27d-1205-4ac1-950d-fd39f03e19f1"
        },
        "item": {
          "id": "2c88e3d4-bb94-4fa0-9820-a977366d55ac",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8fea1b9b-13da-47b4-87ff-09c3e71cb46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7f8bb4-804d-489a-bbbb-c9f89385fc34",
        "cursor": {
          "ref": "79c6b1f5-d5bd-4e66-bf77-89f6256d0fc7",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a0a7a343-fac1-4d8e-804d-b54dd6a92ce7"
        },
        "item": {
          "id": "fa7f8bb4-804d-489a-bbbb-c9f89385fc34",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fcc1b792-daae-4a0c-b502-e80517e9b433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf1dd74-df96-41ac-bdde-552e3e28774d",
        "cursor": {
          "ref": "cdd38a99-6d09-4a90-9c87-7f0a78d46ebb",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a4e9e946-a250-4efb-b6b7-1a192602801a"
        },
        "item": {
          "id": "9bf1dd74-df96-41ac-bdde-552e3e28774d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "be088bae-56e7-4ce9-87d9-c07005593eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79569ba3-eeae-4fa4-8c61-8bc96fda9bef",
        "cursor": {
          "ref": "ed1d764f-e51d-4997-8bd2-047bda4d5e47",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8ea1f585-6347-4690-855e-85c897001e37"
        },
        "item": {
          "id": "79569ba3-eeae-4fa4-8c61-8bc96fda9bef",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a4fff8ff-357f-4d7e-a945-d15c9d836d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebe93ae-a6c1-40c9-93a2-33b0feaa9bb7",
        "cursor": {
          "ref": "60b15627-48bc-4270-b7fe-7b6898c3e564",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a3226da9-b2a3-448d-ad98-45d0358fffeb"
        },
        "item": {
          "id": "1ebe93ae-a6c1-40c9-93a2-33b0feaa9bb7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "94a7b3e9-64d8-4f62-a2f8-35bcc46bf93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43316bc0-37e9-4f41-bad4-f05b680b5f66",
        "cursor": {
          "ref": "b038bec6-2b74-41ee-9cb2-bb5dd60ffec4",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9f59c743-1dd0-4641-976d-17eadfe0fef3"
        },
        "item": {
          "id": "43316bc0-37e9-4f41-bad4-f05b680b5f66",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d65ef4b7-cd46-4c82-a288-187c3c17e926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c344a4-a41d-49a1-b3fa-95bd0e038435",
        "cursor": {
          "ref": "22d65c5d-ade2-49e3-a2da-79b5c0ce36f0",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9bc9742b-4206-47b6-8bc0-dfa692ec899f"
        },
        "item": {
          "id": "30c344a4-a41d-49a1-b3fa-95bd0e038435",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e9337f6f-7bd0-4f81-b893-28c5623eb8c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0638cc-d22f-4468-b512-708133cb09ff",
        "cursor": {
          "ref": "00df76af-8365-4546-93e4-49cf5eec563a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5041a811-5642-42c8-8106-98c478e11b56"
        },
        "item": {
          "id": "8e0638cc-d22f-4468-b512-708133cb09ff",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e5f82072-ef12-4c27-b214-a9bd8336c935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6c6208-4a73-4ff8-a158-e0a158f30a1b",
        "cursor": {
          "ref": "e0f5f058-10bb-4361-ae04-f617e962079b",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "73b3e367-267a-41e5-963a-f50d4be0f42b"
        },
        "item": {
          "id": "ea6c6208-4a73-4ff8-a158-e0a158f30a1b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1167243d-0638-43c2-ac96-3aa7dc390b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c379889-38d6-424f-9d50-8be1b31e857b",
        "cursor": {
          "ref": "139c67a9-7d55-4b38-8aec-80f35089fbf5",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a1d0687c-0b79-4864-ae1e-46bfb6144a75"
        },
        "item": {
          "id": "4c379889-38d6-424f-9d50-8be1b31e857b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ebda8829-efbb-4c98-9437-0ec050d545b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed717cc4-986f-4fd6-b967-9a900fc71633",
        "cursor": {
          "ref": "78e7741b-ac06-46ee-831f-3e26e1d27fea",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "62f4cd8e-5b00-49e0-bfeb-32e3d67bd384"
        },
        "item": {
          "id": "ed717cc4-986f-4fd6-b967-9a900fc71633",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7ffff4dc-1de8-4e95-8ab0-e9ed5dbe43e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dacf349-4108-4418-9fb7-c7a2a9f94b10",
        "cursor": {
          "ref": "91c7d767-aabb-4366-b448-fce78a2e6b18",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4475cbd0-1c4b-42ba-9fdb-f96a200584f3"
        },
        "item": {
          "id": "8dacf349-4108-4418-9fb7-c7a2a9f94b10",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1fbf532b-fbae-4b3c-bcd2-c4866e9d08c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f66e8a-2811-48d0-b7e3-5aa800d54c42",
        "cursor": {
          "ref": "5b93399c-4946-444d-9aa2-e5b50def2400",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8425e51e-e03a-4e6c-b823-26492caf0fc9"
        },
        "item": {
          "id": "96f66e8a-2811-48d0-b7e3-5aa800d54c42",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7eaa1d2f-b479-4cf7-845d-7f66715b7fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6ec89c-39c6-464c-ad0b-f4950db09099",
        "cursor": {
          "ref": "2b1343c1-f9ee-48d9-994f-291a247f5c46",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a9e9057d-c6f4-467b-9014-721a33e34528"
        },
        "item": {
          "id": "bc6ec89c-39c6-464c-ad0b-f4950db09099",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c705366e-999b-427d-a55c-2b999b4fee54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18dafea-86cc-44e7-a2cb-43d391fe7950",
        "cursor": {
          "ref": "d9647133-cf08-454f-83bc-627e0b56d538",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1018870b-6a71-4bed-a374-ef282c318600"
        },
        "item": {
          "id": "f18dafea-86cc-44e7-a2cb-43d391fe7950",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "863fd6f5-7eb3-40f6-b29b-6ec05f20834b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a7efb9-5257-4824-8de3-57f59ee912a6",
        "cursor": {
          "ref": "4e478d2d-81d5-49fe-bafe-9e8c9c55b57c",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "840558f4-8d68-4386-a0ec-0962a80a9a75"
        },
        "item": {
          "id": "48a7efb9-5257-4824-8de3-57f59ee912a6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1208bec6-cb54-438f-8e3a-9a1e97d80f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20e99a4-c759-4362-95d8-9137bd74aa73",
        "cursor": {
          "ref": "6cbf09f4-a4b3-4e55-a8e4-23b3f7673fcc",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0878d008-cba8-4f0e-8c49-d5aa1c90ee27"
        },
        "item": {
          "id": "e20e99a4-c759-4362-95d8-9137bd74aa73",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "16be7bea-eec2-40bc-9879-403b06bc69d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c708399-f092-4763-9a96-805450badb63",
        "cursor": {
          "ref": "c4f5a022-c51c-4ca3-a7d6-9a506477f219",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1313022c-9b40-4722-a0e1-eb952695d3e5"
        },
        "item": {
          "id": "2c708399-f092-4763-9a96-805450badb63",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fec7c1d1-c53b-4321-9c79-3980373c51ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34cd464-db6d-4d7f-b0eb-a86eb6d42400",
        "cursor": {
          "ref": "f45afa58-e6c5-4848-b554-8a7787ead3e4",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6adfbb50-88c1-4736-883e-921defb8e3bd"
        },
        "item": {
          "id": "e34cd464-db6d-4d7f-b0eb-a86eb6d42400",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "267c617b-53c9-4312-a0fa-2aedca7b14ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "b4322bb0-1c3b-4a45-bce4-f6b5b5549109",
        "cursor": {
          "ref": "f23482be-34ae-4900-9def-16da27e74b1c",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b238ef98-8a2c-4f57-8db9-317a3b9e6f95"
        },
        "item": {
          "id": "b4322bb0-1c3b-4a45-bce4-f6b5b5549109",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ecf761c2-37d5-46c4-903c-06ad4fb140a1",
          "status": "Created",
          "code": 201,
          "responseTime": 2755,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "e042d98b-fc1e-41fe-b9ad-cfee04abc041",
        "cursor": {
          "ref": "2c9a4d8d-945b-4719-a520-5ac6a0d27ed3",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "378e197d-a570-48ba-80b7-abe6e59f91b5"
        },
        "item": {
          "id": "e042d98b-fc1e-41fe-b9ad-cfee04abc041",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f8680ea7-4461-4b88-b077-8f4f8ae160cb",
          "status": "Created",
          "code": 201,
          "responseTime": 2647,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "23438e51-0511-43a0-9a4b-c2e29c73a392",
        "cursor": {
          "ref": "b29191d5-8c74-49db-a3a3-4340bd8ba81c",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "090c3871-82ac-4a11-ac1f-c65b14a97b89"
        },
        "item": {
          "id": "23438e51-0511-43a0-9a4b-c2e29c73a392",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "76602d99-a192-458e-9c58-e4382b49f641",
          "status": "Created",
          "code": 201,
          "responseTime": 2554,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d7ff87-df31-461c-99bb-e7db67b7627b",
        "cursor": {
          "ref": "ff2c8213-faf6-454b-993b-1034e58abf0f",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "53a2fc0f-2b9c-4376-bc28-cad49658ef41"
        },
        "item": {
          "id": "d1d7ff87-df31-461c-99bb-e7db67b7627b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "27f63b67-5e49-40a3-a662-f210f8d6e64f",
          "status": "Created",
          "code": 201,
          "responseTime": 2369,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c472b56b-4f92-4be3-8bcc-8794ec78381d",
        "cursor": {
          "ref": "b607fff8-01ad-4252-b15b-cb54f18caa80",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "23519168-2cb5-462c-955c-b2a4f936e36c"
        },
        "item": {
          "id": "c472b56b-4f92-4be3-8bcc-8794ec78381d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ce1c8cd7-4d21-46af-b972-3286c9397321",
          "status": "Created",
          "code": 201,
          "responseTime": 2316,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d450df-6e09-4fec-b29b-059bf7ca5b05",
        "cursor": {
          "ref": "f2dfaeb8-07c5-43ec-bb79-2ae8774b7495",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f62c4811-5340-4870-ade6-f648653c0731"
        },
        "item": {
          "id": "56d450df-6e09-4fec-b29b-059bf7ca5b05",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "088c0d10-b4a4-4d53-ad0c-da09777c8061",
          "status": "Created",
          "code": 201,
          "responseTime": 2677,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-16T00:38:17Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-16T00:38:17Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "86dee393-b71e-4985-9035-574bc8033f23",
        "cursor": {
          "ref": "31cc66f9-aef9-4f72-990d-723e8fc38d6e",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c05dcb89-74ea-430b-b03f-6d64709f4158"
        },
        "item": {
          "id": "86dee393-b71e-4985-9035-574bc8033f23",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f37cfbd6-a7cd-43c2-8016-289660d51fa0",
          "status": "Created",
          "code": 201,
          "responseTime": 2519,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92209188-fadb-4571-bd6d-861fa811c602",
        "cursor": {
          "ref": "e36b6a44-298c-43b3-a359-7a573674ef04",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "93333ba7-ee8e-45f8-ad52-d10865d7cb60"
        },
        "item": {
          "id": "92209188-fadb-4571-bd6d-861fa811c602",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "22fce0f2-62f3-4d0f-b60c-dcfce5a2b790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92209188-fadb-4571-bd6d-861fa811c602",
        "cursor": {
          "ref": "e36b6a44-298c-43b3-a359-7a573674ef04",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "93333ba7-ee8e-45f8-ad52-d10865d7cb60"
        },
        "item": {
          "id": "92209188-fadb-4571-bd6d-861fa811c602",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "22fce0f2-62f3-4d0f-b60c-dcfce5a2b790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df0f1be-899f-42c5-bf27-fc238e46d9e4",
        "cursor": {
          "ref": "d07eea98-c5ba-42fa-a868-03ae4cf6d001",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "645218e3-a15c-4be1-91b3-8a59190968fa"
        },
        "item": {
          "id": "7df0f1be-899f-42c5-bf27-fc238e46d9e4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0bddb738-ca50-4a50-b0ee-a5410b871a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f378d2-382b-4c5d-9dd4-875e94cfe3c9",
        "cursor": {
          "ref": "592199ec-6764-432c-8a78-11754db742cf",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e012afd6-b739-4a8f-afcc-8ee4211ecc6b"
        },
        "item": {
          "id": "07f378d2-382b-4c5d-9dd4-875e94cfe3c9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a752850a-b597-442d-8cf7-186c63099f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb23106-9c1c-4d82-ac3e-181bd74d0388",
        "cursor": {
          "ref": "8e53cfb2-244b-45c4-8667-9c5422b839de",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f4266a38-d775-4c8b-83b0-759f3acc0433"
        },
        "item": {
          "id": "2eb23106-9c1c-4d82-ac3e-181bd74d0388",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "267266a5-7881-43a1-9ddb-d6fb69e9fc18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d358b216-3b9f-4575-86f0-8c5146d4a3e0",
        "cursor": {
          "ref": "c96f0bc6-c756-47f3-9ada-dfab90c1dc36",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4dd2b59b-8509-4733-ac9e-e067df0e123a"
        },
        "item": {
          "id": "d358b216-3b9f-4575-86f0-8c5146d4a3e0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1b7b8407-bf18-4bd5-849a-eb60cf54b3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef473978-9d95-4039-9df8-780fb7b137bf",
        "cursor": {
          "ref": "a263fddb-1586-4e9a-a18f-48d46d5e8243",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "84c93dfb-9804-4034-b79f-89589e09b899"
        },
        "item": {
          "id": "ef473978-9d95-4039-9df8-780fb7b137bf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6f963331-18c0-4cad-8d25-2deb0a5ceb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e25959-5791-4d75-8c36-f26f2f44fdf7",
        "cursor": {
          "ref": "c72a3a14-d5f4-4e20-8334-b9aebfade5ef",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0bea3d32-de23-4d0c-bce0-9c366c41fc25"
        },
        "item": {
          "id": "65e25959-5791-4d75-8c36-f26f2f44fdf7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "67ed3891-caf9-400c-911d-eafbb2cb0bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f0bdf5-fff9-4ce8-af8e-f1cf73e3200d",
        "cursor": {
          "ref": "d21e4dcb-c267-478f-bf8d-b19ab68d6061",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f710c2f1-160c-4430-aeb2-6abca58d76b7"
        },
        "item": {
          "id": "40f0bdf5-fff9-4ce8-af8e-f1cf73e3200d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "659031e5-3e45-457f-94d4-5abbacf4c9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b05658-82e7-41ed-ab66-847c1db170ae",
        "cursor": {
          "ref": "70072e08-6375-45ae-9839-e16c5b90796f",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1e38a06a-d6bd-4429-bfee-88eda1649e22"
        },
        "item": {
          "id": "88b05658-82e7-41ed-ab66-847c1db170ae",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "433531e9-f9bd-42fa-902b-15e15161969a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca52012-4fdd-45d2-a491-a8339f945f90",
        "cursor": {
          "ref": "f7d1a2b3-2ae7-4193-ab46-37ad5fb1f0fd",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0b1ac086-f314-422b-a8a2-1a7d535e0cbc"
        },
        "item": {
          "id": "8ca52012-4fdd-45d2-a491-a8339f945f90",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "260dc040-9528-45ff-8d7e-4750a9a8020b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbdcf51c-aa3e-4db6-8d5f-c6995dc68c9a",
        "cursor": {
          "ref": "cfae5248-5b06-42f9-818d-220c9b21ad52",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "68bb0543-a57f-485b-83b7-44a11b122b55"
        },
        "item": {
          "id": "dbdcf51c-aa3e-4db6-8d5f-c6995dc68c9a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d6b4c25c-9674-45d8-9f91-fc91d11aaf03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89547341-35d0-4f7b-842d-ab471a1b6df4",
        "cursor": {
          "ref": "d9167e36-3035-490f-8e1a-15cefd762368",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f49a24aa-e008-427f-80e5-c94ed7d5dab0"
        },
        "item": {
          "id": "89547341-35d0-4f7b-842d-ab471a1b6df4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b319a018-0d64-4c0b-b031-0ba845190dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dab4d12-60a0-429b-a529-428f0b2a4a6c",
        "cursor": {
          "ref": "2e37dcdb-b538-4e84-95f3-e56c19ba0a92",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8a127dff-5469-4d6b-a997-595b748dd3fe"
        },
        "item": {
          "id": "6dab4d12-60a0-429b-a529-428f0b2a4a6c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5ea46434-2b62-43fa-bf5a-d26977c3debb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936bec77-9be8-43ca-99ed-e51cfb4082d3",
        "cursor": {
          "ref": "acf6b6c2-c98a-47e5-aeb1-6bb24a2b286f",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "150f1428-fa01-4e25-8c93-e98380a6ddcb"
        },
        "item": {
          "id": "936bec77-9be8-43ca-99ed-e51cfb4082d3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9885a289-500b-4294-bf90-19d096eda084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0107315-4064-47b3-a084-059081060561",
        "cursor": {
          "ref": "021fb8d4-ff1f-4d16-ac89-b801c0890f1f",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "94646d96-9dab-4574-89c6-3c2c34e762da"
        },
        "item": {
          "id": "e0107315-4064-47b3-a084-059081060561",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f8815b97-67fc-43bc-a232-974a4eeb3d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ddffaa8-7538-43c1-a5fa-d5ea8630c1de",
        "cursor": {
          "ref": "42fc18eb-0c76-4a45-81db-61de143bd5d2",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d19aed66-38ea-4bcc-93f8-360fa51cf301"
        },
        "item": {
          "id": "4ddffaa8-7538-43c1-a5fa-d5ea8630c1de",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "50206ea6-b066-4434-ac5c-491245fc6737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e61724-2df6-41be-bde6-0a884e872020",
        "cursor": {
          "ref": "47170c4c-0a30-43e0-a364-42d912cbc84b",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d41e4ae9-e6f9-424a-a211-dbe57f549156"
        },
        "item": {
          "id": "66e61724-2df6-41be-bde6-0a884e872020",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d5192de8-df86-440e-b0c9-bae551538f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e90d3c-3eb5-4594-9a4a-4c2a2ad74a5d",
        "cursor": {
          "ref": "5db03c50-5025-45de-b607-f557490976e6",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f8e68f5a-dbb4-450a-a9cb-ce3e1c692b3a"
        },
        "item": {
          "id": "73e90d3c-3eb5-4594-9a4a-4c2a2ad74a5d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5c6193b0-437a-48b8-bb76-940c5cb4b484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2752e210-3c10-44fa-a9fc-fb2615ab6814",
        "cursor": {
          "ref": "4e15ba68-00c6-4ede-a86f-6935fd347d4a",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "eeaefc9f-dd3e-40e4-96b5-87bb1df66849"
        },
        "item": {
          "id": "2752e210-3c10-44fa-a9fc-fb2615ab6814",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4a9e937e-92e8-4084-b062-601e6474d083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8090d2fc-95f8-481b-9361-c314904aa85b",
        "cursor": {
          "ref": "8671d803-f554-4db0-b84c-96c0949e5444",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "65d87055-8428-43d8-b387-99e0bf4c597d"
        },
        "item": {
          "id": "8090d2fc-95f8-481b-9361-c314904aa85b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f01f4db9-f693-4675-9f5c-7e4b44bc235a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7278d4-8b88-4e7a-a908-0e62fa7c13c3",
        "cursor": {
          "ref": "cbe78894-c9cd-46c6-8d22-66afce44548b",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a572df7b-5b28-4890-85bd-fcbc75ea37e8"
        },
        "item": {
          "id": "bf7278d4-8b88-4e7a-a908-0e62fa7c13c3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c2409f44-cd29-418d-aef6-d3bb2f949b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12834439-0fab-4932-8d4e-6aab2f827211",
        "cursor": {
          "ref": "43e8bf75-5669-4760-bf13-00232fded0e1",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "648e59e4-b88f-433f-b5c5-631831e5757b"
        },
        "item": {
          "id": "12834439-0fab-4932-8d4e-6aab2f827211",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0c5a390e-b9a4-4eba-a435-c97616ff52d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c86c2f-97ed-48b7-a901-0a1c577da419",
        "cursor": {
          "ref": "62f4f936-a31a-4ab0-a0b7-e4ce5bee191c",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "eadea6c0-7164-48a2-9e9c-a38996323da2"
        },
        "item": {
          "id": "d6c86c2f-97ed-48b7-a901-0a1c577da419",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "47169011-9007-42ad-87d3-57acfa8d479f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2eacf9-5bc8-4de8-93f9-accb1e6dbd7b",
        "cursor": {
          "ref": "207535f3-3404-4371-b490-e7c5a9bcafc0",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "117fcde6-afdc-4739-b1af-348ceb5bf847"
        },
        "item": {
          "id": "4f2eacf9-5bc8-4de8-93f9-accb1e6dbd7b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0d4fe7e6-a476-425a-86e1-d9633a4200fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e581711d-f7f8-4277-bc76-568a0c0137ef",
        "cursor": {
          "ref": "9ac70dc7-23ee-48eb-a4c1-49a8ef445991",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "201c8356-24b4-4b6d-a19f-292ff299e65f"
        },
        "item": {
          "id": "e581711d-f7f8-4277-bc76-568a0c0137ef",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cbcd98a0-023d-4d22-ab60-cd0b14797cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19fa4da6-99a0-45fd-bee4-bc3c0d8360f9",
        "cursor": {
          "ref": "896a8612-275e-429e-9e4d-93bfaa3ca77e",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "004f67b5-4b87-4628-ab6a-8ed2084465b1"
        },
        "item": {
          "id": "19fa4da6-99a0-45fd-bee4-bc3c0d8360f9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5db0ca7e-def7-4548-83c5-4e4dd3dbc471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 564,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be44c29-7c52-49ed-b888-f5b3f2d07a3a",
        "cursor": {
          "ref": "522ace5a-c3fe-4635-85a6-88f8a132821a",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2e49f9b8-82a0-4626-93a0-b5f0d126b29c"
        },
        "item": {
          "id": "9be44c29-7c52-49ed-b888-f5b3f2d07a3a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7ae09da2-9e65-456c-958b-692485100021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af86eaf8-0b01-4975-90ed-8175f65632f2",
        "cursor": {
          "ref": "11ac23b2-79c4-4aa5-8ef5-18c470357070",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3065102c-4d73-4a2f-bf09-e2b3cbf73d1a"
        },
        "item": {
          "id": "af86eaf8-0b01-4975-90ed-8175f65632f2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "879d6c2a-ef52-4da1-8aaf-771e44188f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6363a38-83c3-4a34-aeba-428b1c2c5fe8",
        "cursor": {
          "ref": "4523f2ca-30ce-4d04-a32d-ab7937b85675",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "70a2952e-8446-48c3-80d1-d347bf0bdea7"
        },
        "item": {
          "id": "d6363a38-83c3-4a34-aeba-428b1c2c5fe8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "58608224-90a0-469d-95e5-ccd5c73e58fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878cbf19-4f30-430e-b243-a05f0bb43b55",
        "cursor": {
          "ref": "4658d809-ccc5-4a7b-8e5b-5e5be8d3977f",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ebb9defa-2dd1-4ff4-ad67-5a1d13fb4960"
        },
        "item": {
          "id": "878cbf19-4f30-430e-b243-a05f0bb43b55",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4f75fe80-324d-4b50-9b1f-64580dfd3db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d4ae28-66c2-4618-a568-af48a815a556",
        "cursor": {
          "ref": "c5e218dc-2dbe-4cd3-815a-a37347639bc2",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7f8d37b2-bc32-46a3-be2c-95a417c59f34"
        },
        "item": {
          "id": "a7d4ae28-66c2-4618-a568-af48a815a556",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "419e47e3-5f98-4a55-8617-5d18b6d9c444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3b1f57-6b8f-4a34-a7d6-78b44f20d287",
        "cursor": {
          "ref": "3ff63c8a-1d17-4430-b459-d9ef5c4ccddc",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bd21e767-8e21-43d0-913c-d3d7f0b8b96b"
        },
        "item": {
          "id": "ca3b1f57-6b8f-4a34-a7d6-78b44f20d287",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "055302bc-0c51-4925-93cb-5e98933a81f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9a5338-d037-4fc5-abf9-e879a3463733",
        "cursor": {
          "ref": "207f0c3e-e28e-4649-ac83-66b7e9251a65",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "199d647b-e94e-4238-bb23-5cb39ee844bd"
        },
        "item": {
          "id": "ab9a5338-d037-4fc5-abf9-e879a3463733",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "241d647c-cf04-48ce-accd-bc6e1d27ae2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f0902587-ccd4-46c7-b930-9ce3455b3152",
        "cursor": {
          "ref": "9c1394c4-e3e6-4ff4-83ba-63e4eef57d50",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0fa93016-275f-4d61-816c-a75fddc3540c"
        },
        "item": {
          "id": "f0902587-ccd4-46c7-b930-9ce3455b3152",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "34148f54-c8a2-4c93-9f31-410b7d171990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "249961fc-02cc-4fd6-bdfb-a2b71b800c75",
        "cursor": {
          "ref": "b58cf734-da66-4b2b-9e30-cf07bd48c743",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c44c9402-df64-4abd-8581-79486c5ab33e"
        },
        "item": {
          "id": "249961fc-02cc-4fd6-bdfb-a2b71b800c75",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5ae515f1-d5d7-41e4-ac69-db5ac27fd798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249961fc-02cc-4fd6-bdfb-a2b71b800c75",
        "cursor": {
          "ref": "b58cf734-da66-4b2b-9e30-cf07bd48c743",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c44c9402-df64-4abd-8581-79486c5ab33e"
        },
        "item": {
          "id": "249961fc-02cc-4fd6-bdfb-a2b71b800c75",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5ae515f1-d5d7-41e4-ac69-db5ac27fd798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6406d063-6166-447b-86e6-c071b838fff9",
        "cursor": {
          "ref": "980d10b4-72c6-4324-a220-1eb28ea6ffaa",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "712235b9-b05d-451f-a79b-e522d985fd9b"
        },
        "item": {
          "id": "6406d063-6166-447b-86e6-c071b838fff9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6467d1bd-e0db-4a93-b41b-47b61643045e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d53cdaf-3ed2-46a2-af32-e65f027dde7e",
        "cursor": {
          "ref": "440aa497-2a6f-4c6e-8924-af4325a7f901",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "55785091-0def-4d0e-932a-4fac8f0caf35"
        },
        "item": {
          "id": "9d53cdaf-3ed2-46a2-af32-e65f027dde7e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a85ddb53-f957-44a2-8d54-f6ce7e861a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8dce22-1320-4e6a-ae49-ea937956119e",
        "cursor": {
          "ref": "7cde2a21-a3f5-4a51-836a-52443fc0230f",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "aa1b6f6f-4fd9-43cc-b6d1-1a015efd1457"
        },
        "item": {
          "id": "4c8dce22-1320-4e6a-ae49-ea937956119e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "09070aaf-5437-4a78-981b-7b0a378c519c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ecb4b6-5f40-4c83-aa0b-3e9bc635a6a1",
        "cursor": {
          "ref": "85e5c86a-9488-4649-a365-6a1eea98ed70",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a6560ce3-a3e4-4e6f-85f8-0fd6096cfd47"
        },
        "item": {
          "id": "21ecb4b6-5f40-4c83-aa0b-3e9bc635a6a1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f54ad029-e3ff-4d9d-8e00-329b1deed77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baddf413-e2e2-430d-991d-9bd02a68ff2a",
        "cursor": {
          "ref": "2ac27494-298b-4466-a0bb-db4c7677c9c2",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b8419af9-a885-4a6a-9554-2cb6e8d6de2b"
        },
        "item": {
          "id": "baddf413-e2e2-430d-991d-9bd02a68ff2a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4996afc7-1e4a-4a55-8db6-dea1d89fd8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb3ba5d-f6bf-41a7-966a-06ffdcbe4ec1",
        "cursor": {
          "ref": "a7f65e3d-4d3a-4c84-95fd-bc4c086f9180",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "195b122c-a17b-4139-8ea1-3c5f389baf1c"
        },
        "item": {
          "id": "9bb3ba5d-f6bf-41a7-966a-06ffdcbe4ec1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "80c70b87-3988-4a39-9c79-b41d7e8c47dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7f8dbf-9546-492e-94e6-de97678622fe",
        "cursor": {
          "ref": "5bee3025-af22-43a2-b1b8-a6cb95a940a7",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d064b460-5cb2-4782-b504-a5eb4a9f4a9b"
        },
        "item": {
          "id": "3a7f8dbf-9546-492e-94e6-de97678622fe",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ce14a5e4-648f-4148-8883-fac95123dd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76153a97-00b5-4a39-9e67-3c90803cb23d",
        "cursor": {
          "ref": "c986350c-161f-41a3-8192-4ca1ab64fe80",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "26fc1dee-7edc-4e61-ad6e-05024b4510e3"
        },
        "item": {
          "id": "76153a97-00b5-4a39-9e67-3c90803cb23d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "60a29a3f-f265-4d01-a2f5-3ea26f311900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b96fbe8-c8e9-42a8-8bac-36937b44457a",
        "cursor": {
          "ref": "fe1f4245-456d-4e0e-bc6a-a8b3c7b8584b",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1206b283-7acb-49dd-b312-3028f2326ba6"
        },
        "item": {
          "id": "2b96fbe8-c8e9-42a8-8bac-36937b44457a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7b873189-f4b3-46df-9761-a43c60d78045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd608cf6-0827-4f6c-a276-0810bd6ee673",
        "cursor": {
          "ref": "c6b66362-e063-4b7c-9aa8-e0b3e5bc8ec5",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "39e7e839-06ea-4782-ad3d-f540e8477e37"
        },
        "item": {
          "id": "bd608cf6-0827-4f6c-a276-0810bd6ee673",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "141654ce-5803-4014-aa0e-4b6966ff93f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794cbecb-ebd1-4f25-8aa2-83c1e6dba357",
        "cursor": {
          "ref": "f7cdc532-da62-42a0-aa61-04c73fed2dc5",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9bb5131f-2b9f-4af9-bf54-a5226d2edc6c"
        },
        "item": {
          "id": "794cbecb-ebd1-4f25-8aa2-83c1e6dba357",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4603cbb4-bf6e-4977-a867-759cdbb4d0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc4ec52-a614-4af3-8e0c-d62c86617230",
        "cursor": {
          "ref": "98f2f632-cd7a-4d85-bb36-5a3f1c33c8e4",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "40bca63f-65b9-4e7a-976e-4632a59d2c3f"
        },
        "item": {
          "id": "7dc4ec52-a614-4af3-8e0c-d62c86617230",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a4fa3d48-a398-480f-a9cc-e9888185d454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055b8fa7-e993-4d28-b9f7-0e4b9c4bc9b4",
        "cursor": {
          "ref": "e40ddc52-5a13-483d-9e4d-50f747d1b235",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "bf0d821f-4735-4e2e-8ec4-17be30c69c79"
        },
        "item": {
          "id": "055b8fa7-e993-4d28-b9f7-0e4b9c4bc9b4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "66107fd1-d91b-438b-a7cb-eac4c0cdebf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4db47e9-e762-4328-bf36-3efa322d60dc",
        "cursor": {
          "ref": "8c515f92-11c3-4f97-bf75-94d776d85812",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "137847f7-7632-4041-9cd3-02d463d07ccd"
        },
        "item": {
          "id": "f4db47e9-e762-4328-bf36-3efa322d60dc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "982c9fe9-55b9-4917-9a0b-7051ade1c024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa6b2ad-3baa-4dea-89bd-7c8224419e72",
        "cursor": {
          "ref": "7218b493-8ece-4d7a-ae8c-2187b5e2297a",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "95345903-9714-40ee-b74c-707effc9eb1e"
        },
        "item": {
          "id": "1fa6b2ad-3baa-4dea-89bd-7c8224419e72",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ff04e913-c75c-44ce-a0a2-5c19aa8b93bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053f828c-2e8d-48c3-b55a-c45d4f8d864f",
        "cursor": {
          "ref": "e7dde937-2ad2-4769-af68-46f3aac097da",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3011f942-751d-416d-8dab-d67c3da07baa"
        },
        "item": {
          "id": "053f828c-2e8d-48c3-b55a-c45d4f8d864f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "07cb6ea9-592c-4e17-bc64-fb6919dd6604",
          "status": "OK",
          "code": 200,
          "responseTime": 283,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "4db4913c-62e4-45c1-9aa4-42909896eb56",
        "cursor": {
          "ref": "7ed194c6-5e70-4303-aabf-d3a5d3afa715",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0b66e33a-8615-4c6d-9d83-85ec09a93571"
        },
        "item": {
          "id": "4db4913c-62e4-45c1-9aa4-42909896eb56",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a81665df-68fb-4727-846c-95a4de4d3985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85f91ae-d86b-4121-9ba5-301155051ef9",
        "cursor": {
          "ref": "1d950980-f833-4d44-b61f-9f088a60ec44",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c6204d62-47db-4cef-a72b-56e31f0eac87"
        },
        "item": {
          "id": "c85f91ae-d86b-4121-9ba5-301155051ef9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1b954ffa-87f6-4a34-a770-7e66002699f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d88263-71c3-43d5-bf31-1833086daa34",
        "cursor": {
          "ref": "61b33d7d-d00b-48eb-9fd2-5db0a2d8ac3f",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "284dd7aa-7bdd-48cf-940b-728be2da2bca"
        },
        "item": {
          "id": "61d88263-71c3-43d5-bf31-1833086daa34",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d3b73410-baf1-401d-9796-4c8545608ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d69fc80-d634-42d4-8e8f-76a0642d7fbb",
        "cursor": {
          "ref": "d82cd853-03d5-41fc-ade6-f01232558acf",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "86c41b36-e1e5-4e16-92cf-6b4bfb30307d"
        },
        "item": {
          "id": "5d69fc80-d634-42d4-8e8f-76a0642d7fbb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9ef8f035-3832-408e-afe7-e0ac78c3fd3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ab6572-90e2-48c5-82a6-77722f722175",
        "cursor": {
          "ref": "30c538f1-186d-470c-90c1-df1eabfd14db",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6ad07e02-914c-469f-bba3-cf10e7248fd0"
        },
        "item": {
          "id": "13ab6572-90e2-48c5-82a6-77722f722175",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "55fb8777-0c1b-489d-a821-e269c176b7c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4821b8c7-0d7a-457a-8000-763ea0f8fdb8",
        "cursor": {
          "ref": "0c38bd20-974b-4f58-b4e2-ed3db1886ec7",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a1577f3f-a2c9-4379-9f59-d586aeb846b2"
        },
        "item": {
          "id": "4821b8c7-0d7a-457a-8000-763ea0f8fdb8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ea3edfbf-0b7e-43aa-9241-ec87cd63bd29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd880db3-80dc-4896-899f-a22e865fbeb4",
        "cursor": {
          "ref": "db3c3e0a-55b4-4da7-ae43-b769a6739439",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "841da3da-27b8-4629-9521-f9265d996aef"
        },
        "item": {
          "id": "dd880db3-80dc-4896-899f-a22e865fbeb4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d8a3d7a8-0731-4a51-a6a7-5a3f7d662587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11aece0-1c7a-4988-b8ff-314341990dbd",
        "cursor": {
          "ref": "2228ed99-ea9c-4f75-90f4-6f5d7c5f6eb2",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2a5cca02-d3d6-4128-9fa9-9f7417cf995e"
        },
        "item": {
          "id": "b11aece0-1c7a-4988-b8ff-314341990dbd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "677f83a7-0f42-457c-a336-18bf4fb73cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60bbd0dc-669e-4e6b-8038-1d8e26f7dd78",
        "cursor": {
          "ref": "5d1d9597-d490-4af3-8769-e86d78e355e3",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fb78717c-0a8a-4d79-9efa-1c5133a57fde"
        },
        "item": {
          "id": "60bbd0dc-669e-4e6b-8038-1d8e26f7dd78",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c9b5eaae-933b-4edd-a9fb-b8ae1d826dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149c4e9b-9156-4d7a-927b-0b4e22924b69",
        "cursor": {
          "ref": "4982cb41-bf7e-479b-8417-85332c78884a",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "df2b3c28-b9da-40c9-8cf5-7cb435ec052f"
        },
        "item": {
          "id": "149c4e9b-9156-4d7a-927b-0b4e22924b69",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0eaa9032-0ed8-4156-9c00-e26f61261963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84ac528-1f8f-46b8-a8ba-98c207bf8c30",
        "cursor": {
          "ref": "367c3789-6059-4e7c-bb0f-801b83af0103",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bde2aeb1-99a6-409d-bc1b-9306bcb60160"
        },
        "item": {
          "id": "e84ac528-1f8f-46b8-a8ba-98c207bf8c30",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "25f138fd-4f14-4651-b0aa-f3ee1dd201e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a984b96e-c0ca-4d2a-aee6-4d0030aa7592",
        "cursor": {
          "ref": "572b7387-b7fa-4461-b9d3-4fd72d1660cb",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "30bc9d90-8ec0-4908-8baf-b1ea6795432a"
        },
        "item": {
          "id": "a984b96e-c0ca-4d2a-aee6-4d0030aa7592",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b683bc0b-a390-4a23-92bf-315cbdd46d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d92e861-6552-4fb8-a5db-000fc9e5aceb",
        "cursor": {
          "ref": "0338e532-efab-436d-8b5f-c05199389aa0",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d6858cc0-99a2-4641-a03d-520a9824f2d3"
        },
        "item": {
          "id": "3d92e861-6552-4fb8-a5db-000fc9e5aceb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d32a69b5-0c9d-41fd-97c2-48b122f865c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afb7c1d-d948-406e-8680-b229114774c9",
        "cursor": {
          "ref": "481a8a14-ef24-4038-99e9-164b10484164",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c69d5be3-ee55-47b6-bd6f-4ed15e66c966"
        },
        "item": {
          "id": "2afb7c1d-d948-406e-8680-b229114774c9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "39797977-704c-45f8-afcc-c7eeaa1c8a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e05a22-86fd-4b02-8779-3bb099609c10",
        "cursor": {
          "ref": "b2f3f9ab-48b4-4546-83e7-74aba7cc2121",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5b2f631b-490a-4c95-b678-ff262e57058e"
        },
        "item": {
          "id": "e9e05a22-86fd-4b02-8779-3bb099609c10",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e96d2b1a-381a-404a-9529-c79183b20add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308006e0-1a67-4d3f-bfcb-9b4f612ad2ac",
        "cursor": {
          "ref": "dcdae3ea-a86b-4471-a26b-fcbdda594c5d",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "347c8ca6-a927-40e9-ab34-0fdeb3f9e2a3"
        },
        "item": {
          "id": "308006e0-1a67-4d3f-bfcb-9b4f612ad2ac",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "67e9108f-fe62-43bc-8236-0445fd66bc2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d6bd38-4b5d-43a1-91e4-8598f97f63f1",
        "cursor": {
          "ref": "f3468fe4-dd85-4e71-823b-59cdb83cbe3a",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e49c7f81-f023-441e-9e72-54d158922268"
        },
        "item": {
          "id": "f8d6bd38-4b5d-43a1-91e4-8598f97f63f1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "598468af-6d8a-473f-a656-eb9f1ec6a416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91df2fcf-1a31-4a49-951e-292730f38888",
        "cursor": {
          "ref": "0a610bf3-7339-4316-80c6-65f113f76ec5",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cc5195d6-dfba-44d6-ab2a-ba3cf3c1a023"
        },
        "item": {
          "id": "91df2fcf-1a31-4a49-951e-292730f38888",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2779f532-2bc1-4099-994c-11b88bb6604a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a827ac1-95ff-4584-8ab7-ffed9bf924ef",
        "cursor": {
          "ref": "b7da8799-05d7-4253-924e-fb9cd9924f46",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7be7eb0b-03cc-466b-b9f7-7b2409cf877e"
        },
        "item": {
          "id": "2a827ac1-95ff-4584-8ab7-ffed9bf924ef",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "88895062-c638-4a87-bc9b-94e40096981e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909e794c-a741-477a-a08f-798357736d47",
        "cursor": {
          "ref": "149a072e-e381-42bd-bb2e-197464190af9",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9e7bb445-8b8a-4d4c-8846-43d26eefc419"
        },
        "item": {
          "id": "909e794c-a741-477a-a08f-798357736d47",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "178a1e2b-c900-4253-9bb1-8a4a557be305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bf270e-0f14-4ee9-9f79-46a3da4a8393",
        "cursor": {
          "ref": "fbb6a63f-221a-4d83-a353-492c018aa91d",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f752e64d-c718-478e-ab8b-8263bf7b3c1e"
        },
        "item": {
          "id": "95bf270e-0f14-4ee9-9f79-46a3da4a8393",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6f6d986d-6035-421f-aa1d-1686cefdca1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebeafbce-af3e-418d-8a65-8d3b5bb0f8f4",
        "cursor": {
          "ref": "91198db3-ffc7-4569-8cd1-ce683dfdad44",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b7035f39-c3b5-4b95-8177-02d49da097c0"
        },
        "item": {
          "id": "ebeafbce-af3e-418d-8a65-8d3b5bb0f8f4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "57dfd697-447e-42ab-9731-489fd2b520b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c424cf-3565-43e1-b029-a6724bbf82fb",
        "cursor": {
          "ref": "c7d707a8-4476-49e9-aad9-d566b212016c",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3dfad647-361e-4195-b375-1ca6f36d32e9"
        },
        "item": {
          "id": "c7c424cf-3565-43e1-b029-a6724bbf82fb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "88accf10-22dd-4e2d-a546-fb181a9773e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff66210-766d-4ca0-8c4a-abcf3d01242e",
        "cursor": {
          "ref": "89e28d5c-e954-4320-9e5f-806284e8e366",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b906276a-7aff-43b7-8f47-f7c8228faf9c"
        },
        "item": {
          "id": "fff66210-766d-4ca0-8c4a-abcf3d01242e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3bd17c33-e3bd-4bf2-819e-2255c3d4ab4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac0dddc-af9d-43f5-8dbf-3a91e8f217bc",
        "cursor": {
          "ref": "6b0029e9-0038-44e0-b04a-9fdcb0a678fc",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8ff24fc8-a94c-4f9c-a4c1-f4961fc84ae8"
        },
        "item": {
          "id": "0ac0dddc-af9d-43f5-8dbf-3a91e8f217bc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "87afc8de-fa2b-4600-8cab-b0193e92e467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e41c8c-cb81-4dba-96f2-4e8824a74853",
        "cursor": {
          "ref": "99816e25-974c-4aa6-9e98-7f271c1304e9",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1a938758-0cb2-42e1-bb23-fbf4d12185a9"
        },
        "item": {
          "id": "56e41c8c-cb81-4dba-96f2-4e8824a74853",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "037e44df-6bb1-42ee-9a97-505935ff0ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e102aa3-9cec-49c3-a35b-8540f9a7bfb3",
        "cursor": {
          "ref": "6129b7ce-185e-42da-8517-13bb5f7f0909",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dd1c350f-6cba-4d7e-b608-950607939088"
        },
        "item": {
          "id": "5e102aa3-9cec-49c3-a35b-8540f9a7bfb3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ec1e8658-acc6-46b5-9500-c26c3f89082a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24557b1-30f5-42b6-8c85-458e443d34ee",
        "cursor": {
          "ref": "b15a1af5-2242-4dba-95c0-1270fda36dec",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "00379e47-fa65-4adc-8e2c-01aad0d2af70"
        },
        "item": {
          "id": "a24557b1-30f5-42b6-8c85-458e443d34ee",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f2188659-cc96-4dc6-8f0d-fb1c92b72c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee556d34-8ecd-44a8-bf1d-5eacd80c4d2c",
        "cursor": {
          "ref": "63023cb1-5ef9-4ac3-af83-9dd02f0724f7",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "60fb0c12-c862-4cd9-9726-89a5a44269dd"
        },
        "item": {
          "id": "ee556d34-8ecd-44a8-bf1d-5eacd80c4d2c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f9fd6476-405e-4487-b932-9bb55ec47474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1146ca2a-6d11-48f2-a8d7-0d42f24c610d",
        "cursor": {
          "ref": "8a9dcf81-de03-4afb-9a0a-81b90a1cb1ac",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0e50543a-2f52-4799-bfa5-8c49474c844b"
        },
        "item": {
          "id": "1146ca2a-6d11-48f2-a8d7-0d42f24c610d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a8fd7465-9521-4120-9e63-7ff0975a1c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65d13d9-3f7d-4984-84e9-23a74d4217d2",
        "cursor": {
          "ref": "11a73176-e7eb-46b9-93b9-288d29b07070",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "95f2cc56-0d36-44ac-91ec-d716021cf332"
        },
        "item": {
          "id": "e65d13d9-3f7d-4984-84e9-23a74d4217d2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8f01a337-f3d1-4d5c-8582-b2ebb284ea69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3daed2d0-b469-4e44-b50c-295e657853e5",
        "cursor": {
          "ref": "f7f4a997-0932-4c93-9bd5-f03cf13e7ad9",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "efa84ec6-bff5-457e-90ed-df2d39c0b0ae"
        },
        "item": {
          "id": "3daed2d0-b469-4e44-b50c-295e657853e5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2a81b5e0-0fee-4c76-a743-4273d322fd3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18269c5d-9e0f-4d1e-808a-9306da27b12d",
        "cursor": {
          "ref": "fd5c707d-c6ac-4f52-abd4-6b675b749138",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d7c6daf1-44f4-469f-8fe7-9f053d2af098"
        },
        "item": {
          "id": "18269c5d-9e0f-4d1e-808a-9306da27b12d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "74fd1cc0-2cd7-4a3e-854d-4daf583edd21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e4fe70-8473-43ea-92ea-d6700a02302c",
        "cursor": {
          "ref": "e7abdd99-a438-48dd-a476-c571515f84b8",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2943037e-cebf-4758-9184-8694bb985fef"
        },
        "item": {
          "id": "44e4fe70-8473-43ea-92ea-d6700a02302c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b5bf5993-dc2c-4339-8244-1b03dcc71492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eca2c4a-f26c-4545-982d-3e7faaafaeab",
        "cursor": {
          "ref": "47da04a2-f24b-4286-84cf-52b34e570748",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0f184aec-5175-4f7f-a173-ff16944cfbf5"
        },
        "item": {
          "id": "3eca2c4a-f26c-4545-982d-3e7faaafaeab",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "dcadda42-b5b6-4d79-9250-2d746873d18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94cfd88e-2f5a-4804-bee3-9461b1620cfe",
        "cursor": {
          "ref": "d89b1003-7f2e-47f3-85c9-a050996e8837",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2e444a49-78a7-4ed2-ac25-2d9d2089f384"
        },
        "item": {
          "id": "94cfd88e-2f5a-4804-bee3-9461b1620cfe",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a79f3ef6-853a-4f39-b22d-0f66d598d265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ad5167-bb6c-4c17-8b1c-35b91e3aafaa",
        "cursor": {
          "ref": "64aa5531-0236-49ac-8cd3-d2f15bff6cdf",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "77620ba9-f9ff-4c7e-b3ec-1f8a0b5a10c6"
        },
        "item": {
          "id": "09ad5167-bb6c-4c17-8b1c-35b91e3aafaa",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "51b684d0-189f-4ac0-981a-9d42cfbf1801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc5f168-9f87-4801-9b37-037d662f44e5",
        "cursor": {
          "ref": "52879782-ce32-4210-8f7f-5db7a1b957f5",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1a8bcc8a-4f4e-4107-8328-5d9895294ff7"
        },
        "item": {
          "id": "acc5f168-9f87-4801-9b37-037d662f44e5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c6fbea10-b241-4d81-bfb8-f9a250373ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aed907a-36b0-4ced-8d6a-f998b771afc9",
        "cursor": {
          "ref": "ddb8cf33-3df7-456e-9704-2e9e159dfc72",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8636de28-0e86-4811-a7e4-de8e98542e62"
        },
        "item": {
          "id": "2aed907a-36b0-4ced-8d6a-f998b771afc9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "696e5f6f-3049-4f2d-bf9d-cf4ed6ea5c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2a999b-c707-48c1-8f02-d9858f519925",
        "cursor": {
          "ref": "e2099667-fecf-46a6-9f48-990c4b76155e",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d6c1d792-077f-4469-8e7c-b27449ab75c5"
        },
        "item": {
          "id": "5f2a999b-c707-48c1-8f02-d9858f519925",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "13a1c41d-4af5-41ac-ae2f-8efdd4b7cafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5162df-dd7b-4fc2-835a-42a3c222b31f",
        "cursor": {
          "ref": "8f19d002-9660-4679-b8b7-d8f039730758",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a1ec2a53-3cd0-46c5-aec2-6d0a6e996801"
        },
        "item": {
          "id": "ec5162df-dd7b-4fc2-835a-42a3c222b31f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0a7d5fe3-4123-4463-9962-f45f0cdbec91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3063d5-215b-474b-af27-796eb762c1e6",
        "cursor": {
          "ref": "a8b52064-57d3-4126-a4b3-a81e282c1a2c",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cf13ad96-f80d-4805-8d18-4c0f92e09f25"
        },
        "item": {
          "id": "ba3063d5-215b-474b-af27-796eb762c1e6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "803b81eb-2d2f-41bf-b54d-df92a536bda8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c715f347-da8f-4f1a-8a94-f8183e4d076f",
        "cursor": {
          "ref": "c2ee0942-036e-4b1f-b5fe-4e03644f259d",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "49e55f37-7f49-44c7-9a3e-a2a0848bc2c3"
        },
        "item": {
          "id": "c715f347-da8f-4f1a-8a94-f8183e4d076f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5cf6c95a-c34d-42cd-9f81-28c9919616ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7a66e6-96db-403f-a717-702361a99050",
        "cursor": {
          "ref": "a412ba7b-73e3-404d-81c0-5754d0e13329",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ce37bd2b-49d8-4991-b295-4839e7257272"
        },
        "item": {
          "id": "2b7a66e6-96db-403f-a717-702361a99050",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2aab926c-d619-4c3d-9b27-aa2357b4bb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e77883a-ea1a-4927-9abf-fe26b17b31cb",
        "cursor": {
          "ref": "c4d68494-f5fe-4573-bae2-41f83750c010",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a47d942e-bb3d-4aa3-9beb-48184edb9bbc"
        },
        "item": {
          "id": "1e77883a-ea1a-4927-9abf-fe26b17b31cb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "99110b81-7d12-46cd-83d2-c0a9f1775e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f742e2-212f-4980-a8dd-4c8b2a29a5cc",
        "cursor": {
          "ref": "c9f8cd1a-a3c3-4b6f-adaf-c08d0a2b9687",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c2f696d2-29e4-437a-9b80-db34b655a1f5"
        },
        "item": {
          "id": "45f742e2-212f-4980-a8dd-4c8b2a29a5cc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "01d78d75-dd3b-424b-ba77-f31924e6f23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006dcfcf-270f-4970-a555-0635706c76c5",
        "cursor": {
          "ref": "9008d8b2-548f-4707-81e7-23eaa50409a4",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d8790ddd-3c94-4e3a-8364-8afe8b6016ed"
        },
        "item": {
          "id": "006dcfcf-270f-4970-a555-0635706c76c5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "889a3211-a70a-47bb-b21f-1b662351da30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef18c4f-c29d-4538-b4b2-9af0458c7a38",
        "cursor": {
          "ref": "4a796144-b6ec-4bc3-87e3-ffdb6ff70796",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fec16d6a-e2ce-42f8-82f1-cd03d7500901"
        },
        "item": {
          "id": "7ef18c4f-c29d-4538-b4b2-9af0458c7a38",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "751c5bd5-8ed4-4ef6-83c0-9844b67c4f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ccc939-68cf-4eaa-99fd-28397bb2ad15",
        "cursor": {
          "ref": "648f21b1-03f0-46cb-9ab5-2573a76a1496",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3a791164-b82a-4f6e-a5b0-2df59a881fe6"
        },
        "item": {
          "id": "42ccc939-68cf-4eaa-99fd-28397bb2ad15",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a1ca4a13-6cbb-463e-a6f5-8bec16c0f817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0251a3ac-2c06-4e90-8233-ed3c8bdf259d",
        "cursor": {
          "ref": "3f71a41a-dba4-4092-9788-7b9674391331",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "934d4304-005c-4822-bc95-8fc1424f296f"
        },
        "item": {
          "id": "0251a3ac-2c06-4e90-8233-ed3c8bdf259d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6b33e065-7bf7-486f-8e5c-188203227a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e173c5be-e4b5-47e2-99c7-69267dbe3370",
        "cursor": {
          "ref": "f839271a-51cb-4a46-961a-0b0c95ec80eb",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "19b032a6-8423-4dc8-b676-ab54bd9d7665"
        },
        "item": {
          "id": "e173c5be-e4b5-47e2-99c7-69267dbe3370",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8fa44f97-6d9f-4efe-a083-caab98f0c09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65bf886-351c-420f-ad35-d59b841363bb",
        "cursor": {
          "ref": "d3d4d424-c6a1-420d-a0fe-c15ecb408693",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "66a58b38-fd14-4123-a4cd-611a60b5a611"
        },
        "item": {
          "id": "b65bf886-351c-420f-ad35-d59b841363bb",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "82688526-fa80-4f01-83d5-7e4bd4d6c15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c68c538-e40f-4a81-adfe-5382078dfde5",
        "cursor": {
          "ref": "7ebcce06-4648-4aa6-8f70-761a5b5295c5",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "355baecf-6bfc-4ce0-a2cf-a94a25a35b03"
        },
        "item": {
          "id": "8c68c538-e40f-4a81-adfe-5382078dfde5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "978e9583-c41d-4904-b245-975e0f103a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab5a87a-29b2-429a-91d7-cfce390a0dd4",
        "cursor": {
          "ref": "bfe25b9d-1f1f-4ae4-837d-7d66eea3dd93",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "40dad379-32c0-4926-b687-d7ad6e788cff"
        },
        "item": {
          "id": "8ab5a87a-29b2-429a-91d7-cfce390a0dd4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "faa9f4a2-b932-4bc7-8c52-8cc11e8b8370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068c88e4-5f62-4b4c-807b-2c4889511a85",
        "cursor": {
          "ref": "5854023a-f26f-4605-b1aa-a778a968c057",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "defdbf14-55d6-4f12-8801-236223592931"
        },
        "item": {
          "id": "068c88e4-5f62-4b4c-807b-2c4889511a85",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0f230c02-2dda-4882-a0cf-35ebf7bb97a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a7aedd-b3c4-49bb-981f-acdade5e218a",
        "cursor": {
          "ref": "01300718-8eee-44ab-a9b0-cc09d2d29f5a",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "036a52f5-0b08-4db9-a481-79cc61f4d911"
        },
        "item": {
          "id": "65a7aedd-b3c4-49bb-981f-acdade5e218a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "09cf9113-3bea-47d9-97ba-101241567808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8728579-1606-45e3-8b2c-131d5f331bdf",
        "cursor": {
          "ref": "847a0f9b-61d6-4e98-a38a-7d4ab28e1012",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4dfe394e-077c-4b21-94e2-4605d4f89b7e"
        },
        "item": {
          "id": "e8728579-1606-45e3-8b2c-131d5f331bdf",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "27348535-3767-4e7a-91f1-2d57c18e5358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb72a73-7cd2-4432-81de-00d71c3b4a2f",
        "cursor": {
          "ref": "b34d8a80-b6ef-4a22-b2e9-94f8cdd3caf8",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9cfe2aca-a068-4237-bbb4-fb4551554754"
        },
        "item": {
          "id": "fdb72a73-7cd2-4432-81de-00d71c3b4a2f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d43df126-7754-4344-97f9-6cca6b1c519c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba1b04f-f1bb-4591-a30d-92297bc5ea31",
        "cursor": {
          "ref": "6ab71fb1-0837-43d9-bf4c-1e946b7183d9",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0ee9279a-e127-441f-906e-d0517a67404d"
        },
        "item": {
          "id": "3ba1b04f-f1bb-4591-a30d-92297bc5ea31",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "eb744430-7717-44b7-8317-3f3696f24f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51ab673-c937-47f8-954e-10fdf96846c1",
        "cursor": {
          "ref": "4294cfe7-de7e-4ccd-991e-88d38096ad15",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c5d25969-c4a4-4653-9228-80a440545b19"
        },
        "item": {
          "id": "f51ab673-c937-47f8-954e-10fdf96846c1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "16c574c1-fc46-48dd-b7aa-62a6aade8605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99cfe81-f774-410b-a55e-a312b3118b0c",
        "cursor": {
          "ref": "dad6ddca-6cf1-46f8-bbd9-9d66693e6764",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fa4d07d4-734c-4956-93bc-deacbe86c7fc"
        },
        "item": {
          "id": "b99cfe81-f774-410b-a55e-a312b3118b0c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4a427408-a66e-4434-bcef-996b1793921b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babd679b-30df-4ae8-9861-72125913906f",
        "cursor": {
          "ref": "f7d8bc34-dc6f-4b04-9e21-21a29fb41463",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "39b6a31e-8df6-4415-8240-7c804a212368"
        },
        "item": {
          "id": "babd679b-30df-4ae8-9861-72125913906f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9ed1072d-0fb0-45bf-8d86-cd40f7337a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e74b4f-f1ce-42c2-962c-615c70b64855",
        "cursor": {
          "ref": "ea436668-f399-4812-8cdc-035a34a955c5",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "662cf545-0f5a-4428-9a39-7c573e0af122"
        },
        "item": {
          "id": "76e74b4f-f1ce-42c2-962c-615c70b64855",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dc1bc09f-4d73-482f-95e2-b6f87b90cbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85df27d1-6d18-40e9-8a08-dacd923b5916",
        "cursor": {
          "ref": "07b48887-8e77-47b2-983c-3ba6bb50be71",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d76f030d-5937-4619-b2f4-99c049cfe553"
        },
        "item": {
          "id": "85df27d1-6d18-40e9-8a08-dacd923b5916",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "41a2739f-ed98-40b7-9b6a-f74666cb977b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0600a943-076e-4b1f-8311-4a1c9b662bda",
        "cursor": {
          "ref": "ece47790-f972-4a23-aa87-8af9921c17c2",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a1632c08-939e-4a60-b065-549132df8adf"
        },
        "item": {
          "id": "0600a943-076e-4b1f-8311-4a1c9b662bda",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "de47524a-c9ac-43dc-bc6f-d1c27af475e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6ba33a-0efd-4469-8f89-03981c1324a9",
        "cursor": {
          "ref": "b00f7c7f-b0f0-4a74-a603-c139d4510117",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "44ce2f88-9159-4196-94f8-2b19684cb207"
        },
        "item": {
          "id": "6b6ba33a-0efd-4469-8f89-03981c1324a9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e9cba92a-f9f5-4d0b-acf1-09baf47218d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f0d7dd-efa1-406a-b67f-c22fc322bae8",
        "cursor": {
          "ref": "a895d943-9a61-4931-ae71-c0d9d89d795c",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c3061abf-87b1-4718-a62a-fb0a4d084afd"
        },
        "item": {
          "id": "d8f0d7dd-efa1-406a-b67f-c22fc322bae8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c83d28fd-bd21-4d4c-bb29-4c6da749c155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a728f63a-78d4-445c-ab7c-c7df386ce965",
        "cursor": {
          "ref": "da3bc6c6-81f3-4d42-afbc-0ac31e5d7033",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b4f5ba5a-2bab-47a4-b352-17702ae7a53c"
        },
        "item": {
          "id": "a728f63a-78d4-445c-ab7c-c7df386ce965",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ebf627cd-dbe6-473b-97c2-e2da8f3ffa7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0655121f-659f-42fe-875e-651af1938234",
        "cursor": {
          "ref": "0b8bf968-78bc-4944-9afb-e5376a6aa3f9",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c790d97d-b9ca-4af1-a465-8ccc9279e0a0"
        },
        "item": {
          "id": "0655121f-659f-42fe-875e-651af1938234",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "99314460-ef01-4963-a57e-64ef518427f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac649c7d-7f22-43bc-ad9c-d1c7a91722bb",
        "cursor": {
          "ref": "19bac82a-7f9a-43d3-81c2-535c7480a58b",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "edceb2d6-0e34-4190-9f05-69ba18e8960a"
        },
        "item": {
          "id": "ac649c7d-7f22-43bc-ad9c-d1c7a91722bb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "87c76c18-efcb-4fc2-abf2-621dc0657939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01434cc7-970e-4b62-bc86-aac20a639a2c",
        "cursor": {
          "ref": "854208c2-5736-456b-809c-078dcac140cf",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "22c3d3f3-c04f-4e6e-a631-be99c400a0f7"
        },
        "item": {
          "id": "01434cc7-970e-4b62-bc86-aac20a639a2c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "36556803-e731-40d6-9044-469a328b5aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5986f5e-a091-40bd-85dd-d6fa3e266a28",
        "cursor": {
          "ref": "c7f3ac57-ea0a-4781-958c-25e9accb01d9",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "509029ac-c6a6-49b0-9832-8f13831cf6db"
        },
        "item": {
          "id": "f5986f5e-a091-40bd-85dd-d6fa3e266a28",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8806c0e0-b935-424a-b86b-e27ee3a4cae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da2b7ad-9d5d-4cb0-9a8a-bc82a07a9e28",
        "cursor": {
          "ref": "27f613ed-2563-4e20-9952-bec4451e22d1",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "797759d0-d510-4a54-9c14-d148616459e2"
        },
        "item": {
          "id": "7da2b7ad-9d5d-4cb0-9a8a-bc82a07a9e28",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3004959e-9f7f-4c74-9892-9b49a012052c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc43e69-875b-44cd-a713-f698ee20bfbf",
        "cursor": {
          "ref": "776d9b42-a344-4e94-8366-f6d07a786d95",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "238c9516-78ce-4a23-8537-06802402678a"
        },
        "item": {
          "id": "1bc43e69-875b-44cd-a713-f698ee20bfbf",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "55f29cc1-6fbe-49e5-8e74-e8c253064d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65475cb-0956-414d-8604-671314fe726f",
        "cursor": {
          "ref": "bc7948dc-80f1-40ad-829d-710f7e216cfa",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3f127f7e-8c3e-42aa-a2e5-faebaefc7bfa"
        },
        "item": {
          "id": "c65475cb-0956-414d-8604-671314fe726f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e3b04040-d6e4-4958-895b-70f95250885d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01686726-7546-44d1-8ebf-c6bccf709f99",
        "cursor": {
          "ref": "df4d7ef6-3837-4a1d-9e80-5ebdb08ea4ed",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2269cc7c-d1d8-4e13-893b-836ad69499fd"
        },
        "item": {
          "id": "01686726-7546-44d1-8ebf-c6bccf709f99",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f6c03dc0-0e88-4d63-8591-f77b2101b85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c830cba-8c66-48c6-bfa9-caa667711f83",
        "cursor": {
          "ref": "ee4d6b4c-505a-4e39-b330-96154ce165df",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b6e74b51-279a-4b87-a94a-988cfe855cfe"
        },
        "item": {
          "id": "9c830cba-8c66-48c6-bfa9-caa667711f83",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "dc35e85e-13e3-4285-b848-455589692b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71360c1-cb9c-4b05-8c9b-4a29c8fb658a",
        "cursor": {
          "ref": "a116f737-76e0-4ec3-b3dd-be890b19358f",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a2179aa8-b39b-4560-b27c-7c2344fda532"
        },
        "item": {
          "id": "a71360c1-cb9c-4b05-8c9b-4a29c8fb658a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e73324fe-7c2f-43f8-9eda-e483efa59305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d9af6f-3465-4351-af87-aa7da1741785",
        "cursor": {
          "ref": "03366415-2878-4d62-a03f-a91131d36a6d",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b2b2a1b5-7c29-422b-b7df-d532786245d9"
        },
        "item": {
          "id": "61d9af6f-3465-4351-af87-aa7da1741785",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a55c9fca-d0e0-45dc-8537-03cb47ea47c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1291258-7a59-452a-a3ca-6ae694f3af4b",
        "cursor": {
          "ref": "286c8fed-a6f1-48fe-bf7a-234b5c936a0a",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9631e162-8ccc-4e5c-b526-096b54bae1db"
        },
        "item": {
          "id": "a1291258-7a59-452a-a3ca-6ae694f3af4b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "98b61264-b171-45e6-9a96-3f3de5a80481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a744be-d583-404a-9985-7f56dc478442",
        "cursor": {
          "ref": "60a59ee3-2a23-404f-a28b-99d6b1d5bcb4",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4e03fe47-e2f6-4d08-9bb8-6beee9f336e3"
        },
        "item": {
          "id": "51a744be-d583-404a-9985-7f56dc478442",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c7fb2dfb-569c-47e5-a047-d7997666cdca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b241e04c-34a2-43fa-a94b-13060864eebe",
        "cursor": {
          "ref": "ebeb3400-6f5d-4f37-8e26-af9e7b56ffd5",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "30fc78e1-7eaa-4be7-a766-0ad9e87c6797"
        },
        "item": {
          "id": "b241e04c-34a2-43fa-a94b-13060864eebe",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "cd9bff64-2219-419d-afe7-18fb346504b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "78e6b94e-e016-4d6f-9c58-c9ee0356a69f",
        "cursor": {
          "ref": "ac7ec567-aa8f-4581-b37a-9eda91d943bc",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0a74aedc-6cf3-47b7-844c-7992d4c4cc1b"
        },
        "item": {
          "id": "78e6b94e-e016-4d6f-9c58-c9ee0356a69f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6161f279-6ed7-4be9-8935-b07cc4849ce1",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e537580d-7bc1-44cc-83ec-fcc48aa9ffd1",
        "cursor": {
          "ref": "59f962da-3084-4c19-96ce-9ee7fb6b2fdb",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b9c1e0d7-10a5-4ef0-951d-d0421f8d4850"
        },
        "item": {
          "id": "e537580d-7bc1-44cc-83ec-fcc48aa9ffd1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5a354502-2dde-4c72-81be-3682a61ebddd",
          "status": "OK",
          "code": 200,
          "responseTime": 2375,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5750645-fa62-4bd7-be69-1073d25cb4d7",
        "cursor": {
          "ref": "353e1587-f471-473f-9274-f5f6b8523239",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1c7c5899-1c8a-4071-af98-b928abdf0d69"
        },
        "item": {
          "id": "d5750645-fa62-4bd7-be69-1073d25cb4d7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "96cd8a20-372c-4697-92f5-ab6dba94b3ff",
          "status": "OK",
          "code": 200,
          "responseTime": 2271,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf40235-6255-46a1-9083-b0d648d4d45d",
        "cursor": {
          "ref": "b6aff932-a686-4331-a949-e84ae3904d79",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4c5b9420-6f75-42cd-bf5c-94e002c4c19d"
        },
        "item": {
          "id": "ecf40235-6255-46a1-9083-b0d648d4d45d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "59229180-087c-458d-b5fb-72ed21e01c58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ecf40235-6255-46a1-9083-b0d648d4d45d",
        "cursor": {
          "ref": "b6aff932-a686-4331-a949-e84ae3904d79",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4c5b9420-6f75-42cd-bf5c-94e002c4c19d"
        },
        "item": {
          "id": "ecf40235-6255-46a1-9083-b0d648d4d45d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "59229180-087c-458d-b5fb-72ed21e01c58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ecf40235-6255-46a1-9083-b0d648d4d45d",
        "cursor": {
          "ref": "b6aff932-a686-4331-a949-e84ae3904d79",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4c5b9420-6f75-42cd-bf5c-94e002c4c19d"
        },
        "item": {
          "id": "ecf40235-6255-46a1-9083-b0d648d4d45d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "59229180-087c-458d-b5fb-72ed21e01c58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e99d63a2-6c41-45b8-b9bb-a65ef34418df",
        "cursor": {
          "ref": "5da6a5d3-d4da-4b8e-8261-1ccbc02f9887",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fe2e33ad-bf6e-41d8-9f66-65d92f3f3185"
        },
        "item": {
          "id": "e99d63a2-6c41-45b8-b9bb-a65ef34418df",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "833e23bd-c1fc-4165-8d51-418dcf26dd01",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "73926be1-2df3-4e5f-bd7d-22b9a929fcce",
        "cursor": {
          "ref": "7c4597f1-9b01-4c49-9f6e-ff68444ec88e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "60c8dca6-4363-4bac-9bb0-1f39597eb058"
        },
        "item": {
          "id": "73926be1-2df3-4e5f-bd7d-22b9a929fcce",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "39f70b71-9ac9-4cdf-bbb4-4af98f41d0b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "73926be1-2df3-4e5f-bd7d-22b9a929fcce",
        "cursor": {
          "ref": "7c4597f1-9b01-4c49-9f6e-ff68444ec88e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "60c8dca6-4363-4bac-9bb0-1f39597eb058"
        },
        "item": {
          "id": "73926be1-2df3-4e5f-bd7d-22b9a929fcce",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "39f70b71-9ac9-4cdf-bbb4-4af98f41d0b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "59444729-bacf-4c67-b6cf-405b9de74632",
        "cursor": {
          "ref": "9aefb3d2-0839-487c-9c62-7a39d1f55002",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3a6f3b83-8290-4d86-b635-60a066e7395c"
        },
        "item": {
          "id": "59444729-bacf-4c67-b6cf-405b9de74632",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "fae267c9-590a-4266-910c-0546c88ecf90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 186,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "dde255c9-f0ac-4f6b-8096-9057e02f541e",
        "cursor": {
          "ref": "48a6d38b-1a6d-41d1-b81f-3b9828d3cf5e",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bf974ab8-78b7-40ff-82f0-272271842649"
        },
        "item": {
          "id": "dde255c9-f0ac-4f6b-8096-9057e02f541e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d4c5eec5-32e2-41c5-adbb-3d54e32bc28d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "dde255c9-f0ac-4f6b-8096-9057e02f541e",
        "cursor": {
          "ref": "48a6d38b-1a6d-41d1-b81f-3b9828d3cf5e",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bf974ab8-78b7-40ff-82f0-272271842649"
        },
        "item": {
          "id": "dde255c9-f0ac-4f6b-8096-9057e02f541e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d4c5eec5-32e2-41c5-adbb-3d54e32bc28d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "60a17917-a94b-4eec-8158-930afc223ac9",
        "cursor": {
          "ref": "0fd8eb47-ac97-46b9-8614-b17099269595",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9969fb86-76ea-46ee-964b-62482f5496b2"
        },
        "item": {
          "id": "60a17917-a94b-4eec-8158-930afc223ac9",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d49ce379-bb92-43da-b245-bafc5fe11266",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}